{"version":3,"file":"LoaderQueries.js","sources":["../../src/loader/LoaderQueries.tsx"],"sourcesContent":["import {\n  createCompatibilityActors,\n  getQueryCacheKey,\n  type LoaderControllerMsg,\n  type LoaderNodeMsg,\n} from '@repo/visual-editing-helpers'\nimport {useQueryParams, useRevalidate} from '@repo/visual-editing-helpers/hooks'\nimport type {\n  ClientConfig,\n  ClientPerspective,\n  ContentSourceMap,\n  QueryParams,\n  SyncTag,\n} from '@sanity/client'\nimport {applySourceDocuments, getPublishedId} from '@sanity/client/csm'\nimport {\n  createChannelMachine,\n  type ConnectionInstance,\n  type Controller,\n  type StatusEvent,\n} from '@sanity/comlink'\nimport {applyPatch} from 'mendoza'\nimport LRUCache from 'mnemonist/lru-cache-with-delete'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {\n  useClient,\n  // useCurrentUser,\n  useDataset,\n  useProjectId,\n  type SanityClient,\n  type SanityDocument,\n} from 'sanity'\nimport {\n  LIVE_QUERY_CACHE_BATCH_SIZE,\n  LIVE_QUERY_CACHE_SIZE,\n  MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n} from '../constants'\nimport type {\n  LiveQueriesState,\n  LiveQueriesStateValue,\n  LoaderConnection,\n  PresentationPerspective,\n} from '../types'\nimport type {DocumentOnPage} from '../useDocumentsOnPage'\n\nexport interface LoaderQueriesProps {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  controller: Controller | undefined\n  perspective: ClientPerspective\n  documentsOnPage: {_id: string; _type: string}[]\n  onLoadersConnection: (event: StatusEvent) => void\n  onDocumentsOnPage: (\n    key: string,\n    perspective: PresentationPerspective,\n    state: DocumentOnPage[],\n  ) => void\n}\n\nexport default function LoaderQueries(props: LoaderQueriesProps): JSX.Element {\n  const {\n    liveDocument,\n    controller,\n    perspective: activePerspective,\n    documentsOnPage,\n    onLoadersConnection,\n    onDocumentsOnPage,\n  } = props\n\n  const [comlink, setComlink] = useState<ConnectionInstance<LoaderNodeMsg, LoaderControllerMsg>>()\n  const [liveQueries, setLiveQueries] = useState<LiveQueriesState>({})\n\n  const projectId = useProjectId()\n  const dataset = useDataset()\n\n  useEffect(() => {\n    const interval = setInterval(\n      () =>\n        setLiveQueries((liveQueries) => {\n          if (Object.keys(liveQueries).length < 1) {\n            return liveQueries\n          }\n\n          const now = Date.now()\n          const hasAnyExpired = Object.values(liveQueries).some(\n            (liveQuery) =>\n              liveQuery.heartbeat !== false && now > liveQuery.receivedAt + liveQuery.heartbeat,\n          )\n          if (!hasAnyExpired) {\n            return liveQueries\n          }\n          const next = {} as LiveQueriesState\n          for (const [key, value] of Object.entries(liveQueries)) {\n            if (value.heartbeat !== false && now > value.receivedAt + value.heartbeat) {\n              continue\n            }\n            next[key] = value\n          }\n          return next\n        }),\n      MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n    )\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    if (controller) {\n      const comlink = controller.createConnection<LoaderNodeMsg, LoaderControllerMsg>(\n        {\n          name: 'presentation',\n          connectTo: 'loaders',\n          heartbeat: true,\n        },\n        createChannelMachine<LoaderNodeMsg, LoaderControllerMsg>().provide({\n          actors: createCompatibilityActors<LoaderControllerMsg>(),\n        }),\n      )\n      setComlink(comlink)\n\n      comlink.onStatus(onLoadersConnection)\n\n      comlink.on('loader/documents', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          onDocumentsOnPage(\n            'loaders',\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            data.perspective as unknown as any,\n            data.documents,\n          )\n        }\n      })\n\n      comlink.on('loader/query-listen', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          if (\n            typeof data.heartbeat === 'number' &&\n            data.heartbeat < MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL\n          ) {\n            throw new Error(\n              `Loader query listen heartbeat interval must be at least ${MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL}ms`,\n            )\n          }\n          setLiveQueries((prev) => ({\n            ...prev,\n            [getQueryCacheKey(data.query, data.params)]: {\n              perspective: data.perspective,\n              query: data.query,\n              params: data.params,\n              receivedAt: Date.now(),\n              heartbeat: data.heartbeat ?? false,\n            } satisfies LiveQueriesStateValue,\n          }))\n        }\n      })\n\n      return comlink.start()\n    }\n    return\n  }, [controller, dataset, onDocumentsOnPage, onLoadersConnection, projectId])\n\n  const [cache] = useState(() => new LRUCache<string, SanityDocument>(LIVE_QUERY_CACHE_SIZE))\n  const studioClient = useClient({apiVersion: '2023-10-16'})\n  const clientConfig = useMemo(() => studioClient.config(), [studioClient])\n  const client = useMemo(\n    () =>\n      studioClient.withConfig({\n        resultSourceMap: 'withKeyArraySelector',\n      }),\n    [studioClient],\n  )\n  useEffect(() => {\n    if (comlink) {\n      const {projectId, dataset} = clientConfig\n      // @todo - Can this be migrated/deprecated in favour of emitting\n      // `presentation/perspective` at a higher level?\n      comlink.post({\n        type: 'loader/perspective',\n        data: {\n          projectId: projectId!,\n          dataset: dataset!,\n          perspective: activePerspective,\n        },\n      })\n    }\n  }, [comlink, clientConfig, activePerspective])\n\n  const turboIds = useMemo(() => {\n    const documentsActuallyInUse = documentsOnPage.map(({_id}) => _id)\n    const set = new Set(documentsActuallyInUse)\n    const ids = [...set]\n    const max = cache.capacity\n    if (ids.length >= max) {\n      ids.length = max\n    }\n    return ids\n  }, [cache.capacity, documentsOnPage])\n\n  const [documentsCacheLastUpdated, setDocumentsCacheLastUpdated] = useState(0)\n\n  return (\n    <>\n      <Turbo\n        cache={cache}\n        client={client}\n        turboIds={turboIds}\n        setDocumentsCacheLastUpdated={setDocumentsCacheLastUpdated}\n      />\n      {Object.entries(liveQueries).map(([key, {query, params, perspective}]) => (\n        <QuerySubscription\n          key={`${key}${perspective}`}\n          cache={cache}\n          projectId={clientConfig.projectId!}\n          dataset={clientConfig.dataset!}\n          perspective={perspective}\n          query={query}\n          params={params}\n          comlink={comlink}\n          client={client}\n          refreshInterval={activePerspective ? 2000 : 0}\n          liveDocument={liveDocument}\n          documentsCacheLastUpdated={documentsCacheLastUpdated}\n        />\n      ))}\n    </>\n  )\n}\n\ninterface SharedProps {\n  /**\n   * The Sanity client to use for fetching data and listening to mutations.\n   */\n  client: SanityClient\n  /**\n   * How frequently queries should be refetched in the background to refresh the parts of queries that can't be source mapped.\n   * Setting it to `0` will disable background refresh.\n   * @defaultValue 10000\n   */\n  refreshInterval?: number\n  /**\n   * The documents cache to use for turbo-charging queries.\n   */\n  cache: LRUCache<string, SanityDocument>\n}\n\ninterface TurboProps extends Pick<SharedProps, 'client' | 'cache'> {\n  turboIds: string[]\n  setDocumentsCacheLastUpdated: (timestamp: number) => void\n}\n/**\n * A turbo-charged mutation observer that uses Content Source Maps to apply mendoza patches on your queries\n */\nconst Turbo = memo(function Turbo(props: TurboProps) {\n  const {cache, client, turboIds, setDocumentsCacheLastUpdated} = props\n  // Figure out which documents are missing from the cache\n  const [batch, setBatch] = useState<string[][]>([])\n  useEffect(() => {\n    const batchSet = new Set(batch.flat())\n    const nextBatch = new Set<string>()\n    for (const turboId of turboIds) {\n      if (!batchSet.has(turboId) && !cache.has(turboId)) {\n        nextBatch.add(turboId)\n      }\n    }\n    const nextBatchSlice = [...nextBatch].slice(0, LIVE_QUERY_CACHE_BATCH_SIZE)\n    if (nextBatchSlice.length === 0) return\n    setBatch((prevBatch) => [...prevBatch.slice(-LIVE_QUERY_CACHE_BATCH_SIZE), nextBatchSlice])\n  }, [batch, cache, turboIds])\n\n  // Use the same listen instance and patch documents as they come in\n  useEffect(() => {\n    const subscription = client\n      .listen(\n        '*',\n        {},\n        {\n          events: ['mutation'],\n          effectFormat: 'mendoza',\n          includePreviousRevision: false,\n          includeResult: false,\n          tag: 'presentation-loader',\n        },\n      )\n      .subscribe((update) => {\n        if (update.type === 'mutation' && update.transition === 'disappear') {\n          if (cache.delete(update.documentId)) {\n            setDocumentsCacheLastUpdated(Date.now())\n          }\n        }\n\n        if (update.type !== 'mutation' || !update.effects?.apply?.length) return\n        // Schedule a reach state update with the ID of the document that were mutated\n        // This react handler will apply the document to related source map snapshots\n        const cachedDocument = cache.peek(update.documentId)\n        if (cachedDocument as SanityDocument) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const patchDoc = {...cachedDocument} as any\n          delete patchDoc._rev\n          const patchedDocument = applyPatch(patchDoc, update.effects.apply)\n          cache.set(update.documentId, patchedDocument)\n          setDocumentsCacheLastUpdated(Date.now())\n        }\n      })\n    return () => subscription.unsubscribe()\n  }, [cache, client, setDocumentsCacheLastUpdated])\n\n  return (\n    <>\n      {batch.map((ids) => (\n        <GetDocuments\n          key={JSON.stringify(ids)}\n          cache={cache}\n          client={client}\n          ids={ids}\n          setDocumentsCacheLastUpdated={setDocumentsCacheLastUpdated}\n        />\n      ))}\n    </>\n  )\n})\n\ninterface GetDocumentsProps extends Pick<SharedProps, 'client' | 'cache'> {\n  ids: string[]\n  setDocumentsCacheLastUpdated: (timestamp: number) => void\n}\nconst GetDocuments = memo(function GetDocuments(props: GetDocumentsProps) {\n  const {client, cache, ids, setDocumentsCacheLastUpdated} = props\n\n  useEffect(() => {\n    const missingIds = ids.filter((id) => !cache.has(id))\n    if (missingIds.length === 0) return\n    client.getDocuments(missingIds).then((documents) => {\n      for (const doc of documents) {\n        if (doc && doc?._id) {\n          cache.set(doc._id, doc)\n          setDocumentsCacheLastUpdated(Date.now())\n        }\n      }\n      // eslint-disable-next-line no-console\n    }, console.error)\n  }, [cache, client, ids, setDocumentsCacheLastUpdated])\n\n  return null\n})\nGetDocuments.displayName = 'GetDocuments'\n\ninterface QuerySubscriptionProps\n  extends Pick<\n    UseQuerySubscriptionProps,\n    'client' | 'cache' | 'refreshInterval' | 'liveDocument' | 'documentsCacheLastUpdated'\n  > {\n  projectId: string\n  dataset: string\n  perspective: ClientPerspective\n  query: string\n  params: QueryParams\n  comlink: LoaderConnection | undefined\n}\nfunction QuerySubscription(props: QuerySubscriptionProps) {\n  const {\n    cache,\n    projectId,\n    dataset,\n    perspective,\n    query,\n    client,\n    refreshInterval,\n    liveDocument,\n    comlink,\n    documentsCacheLastUpdated,\n  } = props\n\n  const params = useQueryParams(props.params)\n  const data = useQuerySubscription({\n    cache,\n    client,\n    liveDocument,\n    params,\n    perspective,\n    query,\n    refreshInterval,\n    documentsCacheLastUpdated,\n  })\n  const result = data?.result\n  const resultSourceMap = data?.resultSourceMap\n  const tags = data?.tags\n\n  useEffect(() => {\n    if (resultSourceMap) {\n      comlink?.post({\n        type: 'loader/query-change',\n        data: {\n          projectId,\n          dataset,\n          perspective,\n          query,\n          params,\n          result,\n          resultSourceMap,\n          tags,\n        },\n      })\n    }\n  }, [comlink, dataset, params, perspective, projectId, query, result, resultSourceMap, tags])\n\n  return null\n}\n\ninterface UseQuerySubscriptionProps\n  extends Required<Pick<SharedProps, 'client' | 'refreshInterval' | 'cache'>> {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  query: string\n  params: QueryParams\n  perspective: ClientPerspective\n  documentsCacheLastUpdated: number\n}\nfunction useQuerySubscription(props: UseQuerySubscriptionProps) {\n  const {\n    cache,\n    liveDocument,\n    client,\n    refreshInterval,\n    query,\n    params,\n    perspective,\n    documentsCacheLastUpdated,\n  } = props\n  const [snapshot, setSnapshot] = useState<{\n    result: unknown\n    resultSourceMap?: ContentSourceMap\n    tags?: SyncTag[]\n  } | null>(null)\n  const {projectId, dataset} = useMemo(() => {\n    const {projectId, dataset} = client.config()\n    return {projectId, dataset} as Required<Pick<ClientConfig, 'projectId' | 'dataset'>>\n  }, [client])\n\n  // Make sure any async errors bubble up to the nearest error boundary\n  const [error, setError] = useState<unknown>(null)\n  if (error) throw error\n\n  const [revalidate, startRefresh] = useRevalidate({refreshInterval})\n  const shouldRefetch = revalidate === 'refresh' || revalidate === 'inflight'\n  useEffect(() => {\n    if (!shouldRefetch) {\n      return\n    }\n\n    let fulfilled = false\n    let fetching = false\n    const controller = new AbortController()\n    // eslint-disable-next-line no-inner-declarations\n    async function effect() {\n      const {signal} = controller\n      fetching = true\n      const {result, resultSourceMap, syncTags} = await client.fetch(query, params, {\n        tag: 'presentation-loader',\n        signal,\n        perspective,\n        filterResponse: false,\n      })\n      fetching = false\n\n      if (!signal.aborted) {\n        setSnapshot({result, resultSourceMap, tags: syncTags})\n\n        fulfilled = true\n      }\n    }\n    const onFinally = startRefresh()\n    effect()\n      .catch((error) => {\n        fetching = false\n        if (error.name !== 'AbortError') {\n          setError(error)\n        }\n      })\n      .finally(onFinally)\n    return () => {\n      if (!fulfilled && !fetching) {\n        controller.abort()\n      }\n    }\n  }, [\n    client,\n    dataset,\n    liveDocument,\n    params,\n    perspective,\n    projectId,\n    query,\n    shouldRefetch,\n    startRefresh,\n  ])\n\n  return useMemo(() => {\n    if (documentsCacheLastUpdated && snapshot?.resultSourceMap) {\n      return {\n        result: turboChargeResultIfSourceMap(\n          cache,\n          liveDocument,\n          snapshot.result,\n          perspective,\n          snapshot.resultSourceMap,\n        ),\n        resultSourceMap: snapshot.resultSourceMap,\n      }\n    }\n    return snapshot\n  }, [cache, documentsCacheLastUpdated, liveDocument, perspective, snapshot])\n}\n\nlet warnedAboutCrossDatasetReference = false\nexport function turboChargeResultIfSourceMap<T = unknown>(\n  cache: SharedProps['cache'],\n  liveDocument: Partial<SanityDocument> | null | undefined,\n  result: T,\n  perspective: ClientPerspective,\n  resultSourceMap?: ContentSourceMap,\n): T {\n  if (perspective === 'raw') {\n    throw new Error('turboChargeResultIfSourceMap does not support raw perspective')\n  }\n  return applySourceDocuments(\n    result,\n    resultSourceMap,\n    (sourceDocument) => {\n      if (sourceDocument._projectId) {\n        // @TODO Handle cross dataset references\n        if (!warnedAboutCrossDatasetReference) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            'Cross dataset references are not supported yet, ignoring source document',\n            sourceDocument,\n          )\n          warnedAboutCrossDatasetReference = true\n        }\n        return undefined\n      }\n      // If there's a displayed document, always prefer it\n      if (\n        liveDocument?._id &&\n        getPublishedId(liveDocument._id) === getPublishedId(sourceDocument._id)\n      ) {\n        return liveDocument\n      }\n      // Fallback to general documents cache\n      return cache.get(sourceDocument._id)\n    },\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (changedValue: any, {previousValue}) => {\n      if (typeof changedValue === 'number' && typeof previousValue === 'string') {\n        // If the string() function was used in the query, we need to convert the source value to a string as well\n        return `${changedValue}`\n      }\n      return changedValue\n    },\n    perspective,\n  )\n}\n"],"names":["liveQueries","comlink","projectId","dataset","error"],"mappings":"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"}