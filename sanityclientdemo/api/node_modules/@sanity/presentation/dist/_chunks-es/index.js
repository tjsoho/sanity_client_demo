import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import { useState, useMemo, useEffect, createContext, useContext, useCallback, createElement, useRef, useLayoutEffect, lazy, Suspense } from "react";
import { useDocumentStore, isRecord, isReference, defineLocaleResourceBundle, useTranslation, defineDocumentFieldAction, useWorkspace, pathToString, getPublishedId, definePlugin, isDocumentSchemaType } from "sanity";
import { ComposeIcon, InfoOutlineIcon, ChevronRightIcon, DesktopIcon, WarningOutlineIcon, ErrorOutlineIcon, MasterDetailIcon } from "@sanity/icons";
import { Card, Flex, Box, Text, Spinner, Stack, rem } from "@sanity/ui";
import { styled } from "styled-components";
import get from "lodash.get";
import { Observable, switchMap, isObservable, from, map, of, combineLatest, mergeAll, scan } from "rxjs";
import { useIntentLink, useRouter, encodeJsonParams, route } from "sanity/router";
import { uuid } from "@sanity/uuid";
const DEFAULT_TOOL_ICON = ComposeIcon, DEFAULT_TOOL_NAME = "presentation", DEFAULT_TOOL_TITLE = "Presentation", COMMENTS_INSPECTOR_NAME = "sanity/structure/comments", EDIT_INTENT_MODE = "presentation", MAX_TIME_TO_OVERLAYS_CONNECTION = 3e3, API_VERSION = "2023-10-16", MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL = 1e3, LIVE_QUERY_CACHE_BATCH_SIZE = 100, LIVE_QUERY_CACHE_SIZE = 2048;
function keysOf(value) {
  return Object.keys(value);
}
function setKey(source, key, value) {
  return {
    ...source,
    [key]: value
  };
}
function props(options = {}) {
  return (source) => new Observable((observer) => source.subscribe(observer)).pipe(
    switchMap((object) => {
      const keyObservables = keysOf(object).map((key) => {
        const value = object[key];
        return isObservable(value) ? from(value).pipe(map((val) => [key, val])) : of([key, value]);
      });
      return options.wait ? combineLatest(keyObservables).pipe(
        map((pairs) => pairs.reduce((acc, [key, value]) => setKey(acc, key, value), {}))
      ) : from(keyObservables).pipe(
        mergeAll(),
        scan((acc, [key, value]) => setKey(acc, key, value), {})
      );
    })
  );
}
const INITIAL_STATE = { locations: [] };
function getDocumentId(value) {
  return isReference(value) ? value._ref : "_id" in value ? value._id : void 0;
}
function cleanPreviewable(id, previewable) {
  const clean = id ? { ...previewable, _id: id } : { ...previewable };
  return clean._type === "reference" && (delete clean._type, delete clean._ref, delete clean._weak, delete clean._dataset, delete clean._projectId, delete clean._strengthenOnPublish), clean;
}
function listen(id, fields, store) {
  const query = `*[_id==$id][0]{${fields.join(", ")}}`, params = { id };
  return store.listenQuery(query, params, {
    perspective: "previewDrafts"
  });
}
function observeDocument(value, paths, store) {
  if (!value || typeof value != "object")
    return of(value);
  const id = getDocumentId(value), currentValue = cleanPreviewable(id, value), headlessPaths = paths.filter((path) => !(path[0] in currentValue));
  if (id && headlessPaths.length) {
    const fields = [...new Set(headlessPaths.map((path) => path[0]))];
    return listen(id, fields, store).pipe(
      switchMap((snapshot) => snapshot ? observeDocument(snapshot, paths, store) : of(null))
    );
  }
  const leads = {};
  paths.forEach((path) => {
    const [head, ...tail] = path;
    leads[head] || (leads[head] = []), leads[head].push(tail);
  });
  const next = Object.keys(leads).reduce((res, head) => {
    const tails = leads[head].filter((tail) => tail.length > 0);
    return tails.length === 0 ? res[head] = isRecord(value) ? value[head] : void 0 : res[head] = observeDocument(value[head], tails, store), res;
  }, currentValue);
  return of(next).pipe(props({ wait: !0 }));
}
function observeForLocations(documentId, resolver, documentStore) {
  const { select } = resolver, paths = Object.values(select).map((value) => String(value).split(".")) || [];
  return observeDocument({ _type: "reference", _ref: documentId }, paths, documentStore).pipe(
    map((doc2) => Object.keys(select).reduce((acc, key) => (acc[key] = get(doc2, select[key]), acc), {})),
    map(resolver.resolve)
  );
}
function useDocumentLocations(props2) {
  const { id, resolvers, type } = props2, documentStore = useDocumentStore(), [locationsState, setLocationsState] = useState(INITIAL_STATE), resolver = resolvers && (typeof resolvers == "function" ? resolvers : resolvers[type]), [locationsStatus, setLocationsStatus] = useState(
    resolver ? "resolving" : "empty"
  ), result = useMemo(() => {
    if (resolver) {
      if (typeof resolver == "function") {
        const _result = resolver({ id, type }, { documentStore });
        return isObservable(_result) ? _result : of(_result);
      }
      return "select" in resolver && "resolve" in resolver ? observeForLocations(id, resolver, documentStore) : of(resolver);
    }
  }, [documentStore, id, resolver, type]);
  return useEffect(() => {
    const sub = result?.subscribe((state) => {
      setLocationsState(state || INITIAL_STATE), setLocationsStatus(state ? "resolved" : "empty");
    });
    return () => sub?.unsubscribe();
  }, [result]), {
    state: locationsState,
    status: locationsStatus
  };
}
const presentationLocaleNamespace = "presentation", presentationUsEnglishLocaleBundle = defineLocaleResourceBundle({
  locale: "en-US",
  namespace: presentationLocaleNamespace,
  resources: () => import("./resources.js")
}), PresentationContext = createContext(null);
function usePresentationTool() {
  const presentation = useContext(PresentationContext);
  if (!presentation)
    throw new Error("Presentation context is missing");
  return presentation;
}
function useCurrentPresentationToolName() {
  try {
    return usePresentationTool().name;
  } catch {
    return;
  }
}
const TONE_ICONS = {
  positive: InfoOutlineIcon,
  caution: WarningOutlineIcon,
  critical: ErrorOutlineIcon
};
function LocationsBanner(props2) {
  const { documentId, isResolving, options, schemaType, showPresentationTitle } = props2, { locations, message, tone } = props2.state, len = locations?.length || 0, { t } = useTranslation(presentationLocaleNamespace), presentation = useContext(PresentationContext), [expanded, setExpanded] = useState(!1), toggle = useCallback(() => {
    len && setExpanded((v) => !v);
  }, [len]), title = isResolving ? t("locations-banner.resolving.text") : message || t("locations-banner.locations-count", { count: len });
  return /* @__PURE__ */ jsx(Card, { padding: 1, radius: 2, border: !0, tone, children: /* @__PURE__ */ jsxs("div", { style: { margin: -1 }, children: [
    !locations && /* @__PURE__ */ jsxs(Flex, { align: "flex-start", gap: 3, padding: 3, children: [
      tone && /* @__PURE__ */ jsx(Box, { flex: "none", children: /* @__PURE__ */ jsx(Text, { size: 1, children: createElement(TONE_ICONS[tone]) }) }),
      /* @__PURE__ */ jsx(Box, { flex: 1, children: /* @__PURE__ */ jsxs(Text, { size: 1, weight: "medium", children: [
        showPresentationTitle && /* @__PURE__ */ jsxs(Fragment, { children: [
          options.title || DEFAULT_TOOL_TITLE,
          " \xB7 "
        ] }),
        title
      ] }) })
    ] }),
    locations && /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(
        Card,
        {
          as: len ? "button" : void 0,
          onClick: toggle,
          padding: 3,
          radius: 1,
          tone: "inherit",
          children: /* @__PURE__ */ jsxs(Flex, { gap: 3, children: [
            /* @__PURE__ */ jsx(Box, { flex: "none", children: isResolving ? /* @__PURE__ */ jsx(Spinner, { size: 1 }) : /* @__PURE__ */ jsx(Text, { size: 1, children: len === 0 ? /* @__PURE__ */ jsx(InfoOutlineIcon, {}) : /* @__PURE__ */ jsx(
              ChevronRightIcon,
              {
                style: {
                  transform: `rotate(${expanded ? "90deg" : 0})`,
                  transition: "transform 100ms ease-in-out"
                }
              }
            ) }) }),
            /* @__PURE__ */ jsx(Box, { flex: 1, children: /* @__PURE__ */ jsxs(Text, { size: 1, weight: "medium", children: [
              showPresentationTitle && /* @__PURE__ */ jsxs(Fragment, { children: [
                options.title || DEFAULT_TOOL_TITLE,
                " \xB7 "
              ] }),
              title
            ] }) })
          ] })
        }
      ),
      /* @__PURE__ */ jsx(Stack, { hidden: !expanded, marginTop: 1, space: 1, children: locations.map((l, index) => /* @__PURE__ */ jsx(
        LocationItem,
        {
          active: (options.name || DEFAULT_TOOL_NAME) === presentation?.name && l.href === presentation?.params.preview,
          documentId,
          documentType: schemaType.name,
          node: l,
          toolName: options.name || DEFAULT_TOOL_NAME
        },
        index
      )) })
    ] })
  ] }) });
}
function LocationItem(props2) {
  const { documentId, documentType, node, active, toolName } = props2, presentation = useContext(PresentationContext), currentPresentationToolName = useCurrentPresentationToolName(), isCurrentTool = toolName === currentPresentationToolName, navigate = presentation?.navigate, presentationLinkProps = useIntentLink({
    intent: "edit",
    params: {
      id: documentId,
      type: documentType,
      mode: "presentation",
      presentation: toolName,
      ...presentation?.structureParams,
      preview: node.href
    }
  }), handleCurrentToolClick = useCallback(() => {
    navigate?.({}, { preview: node.href });
  }, [node.href, navigate]);
  return /* @__PURE__ */ createElement(
    Card,
    {
      ...isCurrentTool ? {} : presentationLinkProps,
      as: "a",
      key: node.href,
      onClick: isCurrentTool ? handleCurrentToolClick : presentationLinkProps.onClick,
      padding: 3,
      radius: 1,
      pressed: active,
      tone: "inherit"
    },
    /* @__PURE__ */ jsxs(Flex, { gap: 3, children: [
      /* @__PURE__ */ jsx(Box, { flex: "none", children: /* @__PURE__ */ jsx(Text, { size: 1, children: /* @__PURE__ */ jsx(DesktopIcon, {}) }) }),
      /* @__PURE__ */ jsxs(Stack, { flex: 1, space: 2, children: [
        /* @__PURE__ */ jsx(Text, { size: 1, weight: "medium", children: node.title }),
        /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, textOverflow: "ellipsis", children: node.href })
      ] })
    ] })
  );
}
const PresentationDocumentContext = createContext(
  null
), LocationStack = styled(Stack)`
  min-height: ${rem(42)};

  & + &:empty {
    display: none;
  }
`;
function PresentationDocumentHeader(props2) {
  const { documentId, options, schemaType } = props2, context = useContext(PresentationDocumentContext), { state, status } = useDocumentLocations({
    id: documentId,
    resolvers: options.resolve?.locations || options.locate,
    type: schemaType.name
  });
  if (context && context.options[0] !== options || status === "empty")
    return null;
  const contextOptions = context?.options || [];
  return /* @__PURE__ */ jsx(LocationStack, { marginBottom: 5, space: 5, children: /* @__PURE__ */ jsx(Stack, { space: 2, children: contextOptions.map((options2, idx) => /* @__PURE__ */ jsx(
    LocationsBanner,
    {
      documentId,
      isResolving: status === "resolving",
      options: options2,
      schemaType,
      showPresentationTitle: contextOptions.length > 1,
      state
    },
    idx
  )) }) });
}
function PresentationDocumentProvider(props2) {
  const { children, options } = props2, parent = useContext(PresentationDocumentContext), parentRegister = parent?.register, [optionsArray, setOptionsArray] = useState(() => []), register = useCallback(
    (options2) => parentRegister ? parentRegister(options2) : (setOptionsArray((prev) => [options2].concat(prev)), () => {
      setOptionsArray((prev) => prev.filter((o) => o !== options2));
    }),
    [parentRegister]
  ), registerRef = useRef(register);
  registerRef.current = register;
  const context = useMemo(
    () => ({
      options: parent?.options || optionsArray,
      register
    }),
    [optionsArray, parent, register]
  );
  return useLayoutEffect(() => registerRef.current(options), [options]), /* @__PURE__ */ jsx(PresentationDocumentContext.Provider, { value: context, children });
}
const openInStructure = defineDocumentFieldAction({
  name: "presentation/openInStructure",
  useAction({ documentId, documentType, path }) {
    const workspace = useWorkspace(), { navigateIntent } = useRouter(), presentation = useContext(PresentationContext), defaultStructureTool = useMemo(
      () => findStructureTool(workspace.tools, documentId, documentType),
      [documentId, documentType, workspace.tools]
    );
    return {
      type: "action",
      hidden: !presentation || path.length > 0 || !defaultStructureTool,
      icon: defaultStructureTool?.icon || MasterDetailIcon,
      title: `Open in ${defaultStructureTool?.title || "Structure"}`,
      onAction() {
        navigateIntent("edit", {
          id: documentId,
          type: documentType,
          mode: "structure",
          path: pathToString(path)
        });
      },
      renderAsButton: !0
    };
  }
});
function findStructureTool(tools, documentId, documentType) {
  const results = tools.map((t) => {
    const match = t.canHandleIntent?.(
      "edit",
      {
        id: documentId,
        type: documentType,
        mode: "structure"
      },
      {}
    );
    return { tool: t, match };
  }), modeMatches = results.filter((t) => isRecord(t.match) && t.match.mode);
  return modeMatches.length > 0 ? modeMatches[0].tool : results.filter((t) => t.match)[0]?.tool;
}
const preservedSearchParamKeys = [
  "preview",
  "perspective",
  "viewport"
];
function getIntentState(intent, params, routerState, payload) {
  const { id, mode, path, presentation, type, ...searchParams } = params, _searchParams = {
    ...(routerState?._searchParams || []).filter(([key]) => preservedSearchParamKeys.includes(key)).reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {}),
    ...searchParams
  };
  return intent === "edit" && id ? (_searchParams.preview = _searchParams.preview || new URLSearchParams(window.location.search).get("preview") || "/", {
    type: type || "*",
    id: getPublishedId(id),
    path,
    _searchParams: Object.entries(_searchParams)
  }) : intent === "create" ? (_searchParams.preview = _searchParams.preview || new URLSearchParams(window.location.search).get("preview") || "/", payload && typeof payload == "object" && (_searchParams.templateParams = encodeJsonParams(payload)), {
    type: type || "*",
    id: id || uuid(),
    _searchParams: Object.entries(_searchParams)
  }) : { intent, params, payload };
}
function PresentationSpinner() {
  return /* @__PURE__ */ jsx(Flex, { align: "center", direction: "column", height: "fill", justify: "center", style: { width: "100%" }, children: /* @__PURE__ */ jsx(Spinner, {}) });
}
const router = route.create("/", { __unsafe_disableScopedSearchParams: !0 }, [
  route.intents("/intent"),
  route.create(":type", [route.create(":id", [route.create(":path")])])
]), PresentationTool = lazy(() => import("./PresentationToolGrantsCheck.js").then(function(n) {
  return n.PresentationToolGrantsCheck;
})), BroadcastDisplayedDocument = lazy(() => import("./BroadcastDisplayedDocument.js"));
function defineLocations(resolver) {
  return resolver;
}
function defineDocuments(resolvers) {
  return resolvers;
}
const presentationTool = definePlugin((options) => {
  const toolName = options.name || DEFAULT_TOOL_NAME;
  "locate" in options && console.warn("Presentation\u2019s `locate` option is deprecated. Use `resolve.locations` instead.");
  const hasLocationsResolver = !!(options.resolve?.locations || options.locate);
  function PresentationDocumentInput(props2) {
    const value = props2.value, documentId = value?._id ? getPublishedId(value?._id) : void 0;
    return isDocumentSchemaType(props2.schemaType) ? /* @__PURE__ */ jsxs(PresentationDocumentProvider, { options, children: [
      hasLocationsResolver && documentId && /* @__PURE__ */ jsx(
        PresentationDocumentHeader,
        {
          documentId,
          options,
          schemaType: props2.schemaType
        }
      ),
      /* @__PURE__ */ jsx(Suspense, { fallback: /* @__PURE__ */ jsx(PresentationSpinner, {}), children: props2.renderDefault(props2) }),
      /* @__PURE__ */ jsx(Suspense, { children: /* @__PURE__ */ jsx(BroadcastDisplayedDocument, { value }, documentId) }, "broadcast-displayed-document")
    ] }) : props2.renderDefault(props2);
  }
  function canHandleCreateIntent(params) {
    return !("type" in params) || "presentation" in params && params.presentation !== toolName ? !1 : "template" in params ? { template: !0 } : !0;
  }
  function canHandleEditIntent(params) {
    return !("type" in params) || !("id" in params) || "presentation" in params && params.presentation !== toolName ? !1 : "mode" in params ? { mode: params.mode === EDIT_INTENT_MODE } : !0;
  }
  return {
    i18n: {
      bundles: [presentationUsEnglishLocaleBundle]
    },
    document: {
      unstable_fieldActions: (prev) => [
        ...prev.filter((a) => a.name !== openInStructure.name),
        // prevent duplication
        openInStructure
      ]
    },
    form: {
      components: {
        input: PresentationDocumentInput
      }
    },
    tools: [
      {
        icon: options.icon || DEFAULT_TOOL_ICON,
        name: toolName,
        title: options.title,
        component: PresentationTool,
        options,
        canHandleIntent(intent, params) {
          return intent === "create" ? canHandleCreateIntent(params) : intent === "edit" ? canHandleEditIntent(params) : !1;
        },
        getIntentState,
        router
      }
    ]
  };
}), PresentationNavigateContext = createContext(
  null
);
function usePresentationNavigate() {
  const navigate = useContext(PresentationNavigateContext);
  if (!navigate)
    throw new Error("Presentation navigate context is missing");
  return navigate;
}
const PresentationParamsContext = createContext(null);
function usePresentationParams(throwOnMissingContext = !0) {
  const params = useContext(PresentationParamsContext);
  if (throwOnMissingContext && !params)
    throw new Error("Presentation params context is missing");
  return params;
}
export {
  API_VERSION,
  COMMENTS_INSPECTOR_NAME,
  DEFAULT_TOOL_NAME,
  EDIT_INTENT_MODE,
  LIVE_QUERY_CACHE_BATCH_SIZE,
  LIVE_QUERY_CACHE_SIZE,
  MAX_TIME_TO_OVERLAYS_CONNECTION,
  MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,
  PresentationContext,
  PresentationNavigateContext,
  PresentationParamsContext,
  PresentationSpinner,
  defineDocuments,
  defineLocations,
  presentationLocaleNamespace,
  presentationTool,
  usePresentationNavigate,
  usePresentationParams,
  usePresentationTool
};
//# sourceMappingURL=index.js.map
