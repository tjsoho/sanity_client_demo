"use strict";
var jsxRuntime = require("react/jsx-runtime"), constants = require("@sanity/preview-url-secret/constants"), ui = require("@sanity/ui"), uuid = require("@sanity/uuid"), react = require("react"), sanity = require("sanity"), index = require("./index.cjs"), comlink = require("@sanity/comlink"), csm = require("@sanity/client/csm"), router = require("sanity/router"), styledComponents = require("styled-components"), icons = require("@sanity/icons"), structure = require("sanity/structure"), DisplayedDocumentBroadcaster = require("./DisplayedDocumentBroadcaster.cjs"), withoutSecretSearchParams = require("@sanity/preview-url-secret/without-secret-search-params"), framerMotion = require("framer-motion"), logos = require("@sanity/logos"), togglePreviewAccessSharing = require("@sanity/preview-url-secret/toggle-preview-access-sharing"), isEqual = require("fast-deep-equal"), pathToRegexp = require("path-to-regexp"), createSecret = require("@sanity/preview-url-secret/create-secret"), definePreviewUrl = require("@sanity/preview-url-secret/define-preview-url"), suspendReact = require("suspend-react");
function _interopDefaultCompat(e) {
  return e && typeof e == "object" && "default" in e ? e : { default: e };
}
var isEqual__default = /* @__PURE__ */ _interopDefaultCompat(isEqual), store;
function getGlobalConfig(config2) {
  return {
    lang: config2?.lang ?? store?.lang,
    message: config2?.message,
    abortEarly: config2?.abortEarly ?? store?.abortEarly,
    abortPipeEarly: config2?.abortPipeEarly ?? store?.abortPipeEarly,
    skipPipe: config2?.skipPipe
  };
}
var store2;
function getGlobalMessage(lang) {
  return store2?.get(lang);
}
var store3;
function getSchemaMessage(lang) {
  return store3?.get(lang);
}
var store4;
function getSpecificMessage(reference, lang) {
  return store4?.get(reference)?.get(lang);
}
function _stringify(input) {
  let type = typeof input;
  return type === "object" && (type = (input && Object.getPrototypeOf(input)?.constructor?.name) ?? "null"), type === "string" ? `"${input}"` : type === "number" || type === "bigint" || type === "boolean" ? `${input}` : type;
}
function _addIssue(context, label, dataset, config2, other) {
  const input = other && "input" in other ? other.input : dataset.value, expected = other?.expected ?? context.expects, received = other?.received ?? _stringify(input), issue = {
    kind: context.kind,
    type: context.type,
    input,
    expected,
    received,
    message: `Invalid ${label}: ${expected ? `Expected ${expected} but r` : "R"}eceived ${received}`,
    // @ts-expect-error
    requirement: context.requirement,
    path: other?.path,
    issues: other?.issues,
    lang: config2.lang,
    abortEarly: config2.abortEarly,
    abortPipeEarly: config2.abortPipeEarly,
    skipPipe: config2.skipPipe
  }, isSchema = context.kind === "schema", message = (
    // @ts-expect-error
    context.message ?? getSpecificMessage(context.reference, issue.lang) ?? (isSchema ? getSchemaMessage(issue.lang) : null) ?? config2.message ?? getGlobalMessage(issue.lang)
  );
  message && (issue.message = typeof message == "function" ? message(issue) : message), isSchema && (dataset.typed = !1), dataset.issues ? dataset.issues.push(issue) : dataset.issues = [issue];
}
function _isAllowedObjectKey(key) {
  return key !== "__proto__" && key !== "prototype" && key !== "constructor";
}
var ValiError = class extends Error {
  /**
   * The error issues.
   */
  issues;
  /**
   * Creates a Valibot error with useful information.
   *
   * @param issues The error issues.
   */
  constructor(issues) {
    super(issues[0].message), this.name = "ValiError", this.issues = issues;
  }
};
function minLength(requirement, message) {
  return {
    kind: "validation",
    type: "min_length",
    reference: minLength,
    async: !1,
    expects: `>=${requirement}`,
    requirement,
    message,
    _run(dataset, config2) {
      return dataset.typed && dataset.value.length < this.requirement && _addIssue(this, "length", dataset, config2, {
        received: `${dataset.value.length}`
      }), dataset;
    }
  };
}
function getFallback(schema, dataset, config2) {
  return typeof schema.fallback == "function" ? (
    // @ts-expect-error
    schema.fallback(dataset, config2)
  ) : (
    // @ts-expect-error
    schema.fallback
  );
}
function fallback(schema, fallback2) {
  return {
    ...schema,
    fallback: fallback2,
    _run(dataset, config2) {
      return schema._run(dataset, config2), dataset.issues ? { typed: !0, value: getFallback(this, dataset, config2) } : dataset;
    }
  };
}
function getDefault(schema, dataset, config2) {
  return typeof schema.default == "function" ? (
    // @ts-expect-error
    schema.default(dataset, config2)
  ) : (
    // @ts-expect-error
    schema.default
  );
}
function boolean(message) {
  return {
    kind: "schema",
    type: "boolean",
    reference: boolean,
    expects: "boolean",
    async: !1,
    message,
    _run(dataset, config2) {
      return typeof dataset.value == "boolean" ? dataset.typed = !0 : _addIssue(this, "type", dataset, config2), dataset;
    }
  };
}
function object(entries, message) {
  return {
    kind: "schema",
    type: "object",
    reference: object,
    expects: "Object",
    async: !1,
    entries,
    message,
    _run(dataset, config2) {
      const input = dataset.value;
      if (input && typeof input == "object") {
        dataset.typed = !0, dataset.value = {};
        for (const key in this.entries) {
          const value2 = input[key], valueDataset = this.entries[key]._run(
            { typed: !1, value: value2 },
            config2
          );
          if (valueDataset.issues) {
            const pathItem = {
              type: "object",
              origin: "value",
              input,
              key,
              value: value2
            };
            for (const issue of valueDataset.issues)
              issue.path ? issue.path.unshift(pathItem) : issue.path = [pathItem], dataset.issues?.push(issue);
            if (dataset.issues || (dataset.issues = valueDataset.issues), config2.abortEarly) {
              dataset.typed = !1;
              break;
            }
          }
          valueDataset.typed || (dataset.typed = !1), (valueDataset.value !== void 0 || key in input) && (dataset.value[key] = valueDataset.value);
        }
      } else
        _addIssue(this, "type", dataset, config2);
      return dataset;
    }
  };
}
function optional(wrapped, ...args) {
  const schema = {
    kind: "schema",
    type: "optional",
    reference: optional,
    expects: `${wrapped.expects} | undefined`,
    async: !1,
    wrapped,
    _run(dataset, config2) {
      return dataset.value === void 0 && ("default" in this && (dataset.value = getDefault(
        this,
        dataset,
        config2
      )), dataset.value === void 0) ? (dataset.typed = !0, dataset) : this.wrapped._run(dataset, config2);
    }
  };
  return 0 in args && (schema.default = args[0]), schema;
}
function picklist(options, message) {
  return {
    kind: "schema",
    type: "picklist",
    reference: picklist,
    expects: options.map(_stringify).join(" | ") || "never",
    async: !1,
    options,
    message,
    _run(dataset, config2) {
      return this.options.includes(dataset.value) ? dataset.typed = !0 : _addIssue(this, "type", dataset, config2), dataset;
    }
  };
}
function record(key, value2, message) {
  return {
    kind: "schema",
    type: "record",
    reference: record,
    expects: "Object",
    async: !1,
    key,
    value: value2,
    message,
    _run(dataset, config2) {
      const input = dataset.value;
      if (input && typeof input == "object") {
        dataset.typed = !0, dataset.value = {};
        for (const entryKey in input)
          if (_isAllowedObjectKey(entryKey)) {
            const entryValue = input[entryKey], keyDataset = this.key._run(
              { typed: !1, value: entryKey },
              config2
            );
            if (keyDataset.issues) {
              const pathItem = {
                type: "record",
                origin: "key",
                input,
                key: entryKey,
                value: entryValue
              };
              for (const issue of keyDataset.issues)
                issue.path = [pathItem], dataset.issues?.push(issue);
              if (dataset.issues || (dataset.issues = keyDataset.issues), config2.abortEarly) {
                dataset.typed = !1;
                break;
              }
            }
            const valueDataset = this.value._run(
              { typed: !1, value: entryValue },
              config2
            );
            if (valueDataset.issues) {
              const pathItem = {
                type: "record",
                origin: "value",
                input,
                key: entryKey,
                value: entryValue
              };
              for (const issue of valueDataset.issues)
                issue.path ? issue.path.unshift(pathItem) : issue.path = [pathItem], dataset.issues?.push(issue);
              if (dataset.issues || (dataset.issues = valueDataset.issues), config2.abortEarly) {
                dataset.typed = !1;
                break;
              }
            }
            (!keyDataset.typed || !valueDataset.typed) && (dataset.typed = !1), keyDataset.typed && (dataset.value[keyDataset.value] = valueDataset.value);
          }
      } else
        _addIssue(this, "type", dataset, config2);
      return dataset;
    }
  };
}
function string(message) {
  return {
    kind: "schema",
    type: "string",
    reference: string,
    expects: "string",
    async: !1,
    message,
    _run(dataset, config2) {
      return typeof dataset.value == "string" ? dataset.typed = !0 : _addIssue(this, "type", dataset, config2), dataset;
    }
  };
}
function unknown() {
  return {
    kind: "schema",
    type: "unknown",
    reference: unknown,
    expects: "unknown",
    async: !1,
    _run(dataset) {
      return dataset.typed = !0, dataset;
    }
  };
}
function parse(schema, input, config2) {
  const dataset = schema._run(
    { typed: !1, value: input },
    getGlobalConfig(config2)
  );
  if (dataset.issues)
    throw new ValiError(dataset.issues);
  return dataset.value;
}
function pipe(...pipe2) {
  return {
    ...pipe2[0],
    pipe: pipe2,
    _run(dataset, config2) {
      for (let index2 = 0; index2 < pipe2.length; index2++) {
        dataset = pipe2[index2]._run(dataset, config2);
        const nextAction = pipe2[index2 + 1];
        if (config2.skipPipe || dataset.issues && (config2.abortEarly || config2.abortPipeEarly || // TODO: This behavior must be documented!
        nextAction?.kind === "schema" || nextAction?.kind === "transformation")) {
          dataset.typed = !1;
          break;
        }
      }
      return dataset;
    }
  };
}
const RE_SEGMENT_WITH_INDEX = /^([A-Za-z]+):([0-9]+)$/, RE_SEGMENT_WITH_TUPLE = /^([A-Za-z]+):([0-9]+),([0-9]+)$/, RE_SEGMENT_WITH_KEY = /^([A-Za-z]+):([a-z0-9]+)$/;
function urlStringToPath(str) {
  const path = [];
  for (const segment of str.split(".")) {
    const withIndex = RE_SEGMENT_WITH_INDEX.exec(segment);
    if (withIndex) {
      path.push(withIndex[1], Number(withIndex[2]));
      continue;
    }
    const withTuple = RE_SEGMENT_WITH_TUPLE.exec(segment);
    if (withTuple) {
      path.push(withTuple[1], [Number(withTuple[2]), Number(withTuple[3])]);
      continue;
    }
    const withKey = RE_SEGMENT_WITH_KEY.exec(segment);
    if (withKey) {
      path.push(withKey[1], { _key: withKey[2] });
      continue;
    }
    path.push(segment);
  }
  return path;
}
const lengthyStr = pipe(string(), minLength(1)), optionalLengthyStr = optional(lengthyStr);
object({
  baseUrl: lengthyStr,
  dataset: optionalLengthyStr,
  id: lengthyStr,
  path: lengthyStr,
  projectId: optionalLengthyStr,
  tool: optionalLengthyStr,
  type: optionalLengthyStr,
  workspace: optionalLengthyStr,
  isDraft: optional(string())
});
object({
  origin: lengthyStr,
  href: lengthyStr,
  data: optional(record(string(), unknown()))
});
const channelsToComlinkMap = {
  "handshake/syn": comlink.MSG_HANDSHAKE_SYN,
  "handshake/syn-ack": comlink.MSG_HANDSHAKE_SYN_ACK,
  "handshake/ack": comlink.MSG_HANDSHAKE_ACK,
  "channel/response": comlink.MSG_RESPONSE,
  "channel/heartbeat": comlink.MSG_HEARTBEAT,
  "channel/disconnect": comlink.MSG_DISCONNECT,
  "overlay/focus": "visual-editing/focus",
  "overlay/navigate": "visual-editing/navigate",
  "overlay/toggle": "visual-editing/toggle",
  "presentation/toggleOverlay": "presentation/toggle-overlay"
}, comlinkToChannelsMap = {
  [comlink.MSG_HANDSHAKE_SYN]: "handshake/syn",
  [comlink.MSG_HANDSHAKE_SYN_ACK]: "handshake/syn-ack",
  [comlink.MSG_HANDSHAKE_ACK]: "handshake/ack",
  [comlink.MSG_RESPONSE]: "channel/response",
  [comlink.MSG_HEARTBEAT]: "channel/heartbeat",
  [comlink.MSG_DISCONNECT]: "channel/disconnect",
  "visual-editing/focus": "overlay/focus",
  "visual-editing/navigate": "overlay/navigate",
  "visual-editing/toggle": "overlay/toggle",
  "presentation/toggle-overlay": "presentation/toggleOverlay"
}, convertToComlinkEvent = (event) => {
  const { data } = event;
  return data && typeof data == "object" && "domain" in data && "type" in data && "from" in data && "to" in data && (data.domain === "sanity/channels" && (data.domain = comlink.DOMAIN), data.to === "overlays" && (data.to = "visual-editing"), data.from === "overlays" && (data.from = "visual-editing"), data.type = channelsToComlinkMap[data.type] ?? data.type), event;
}, convertToChannelsMessage = (message) => (message.domain === comlink.DOMAIN && (message.domain = "sanity/channels"), message.to === "visual-editing" && (message.to = "overlays"), message.from === "visual-editing" && (message.from = "overlays"), message.type = comlinkToChannelsMap[message.type] ?? message.type, message.type === "channel/response" && message.responseTo && !message.data && (message.data = { responseTo: message.responseTo }), message), sendAsChannelsMessage = ({ context }, params) => {
  const { sources, targetOrigin } = context, message = convertToChannelsMessage(params.message);
  sources.forEach((source) => {
    source.postMessage(message, { targetOrigin });
  });
}, createCompatibilityActors = () => ({
  listen: comlink.createListenLogic(convertToComlinkEvent),
  requestMachine: comlink.createRequestMachine().provide({
    actions: {
      "send message": sendAsChannelsMessage
    }
  })
});
function getQueryCacheKey(query, params) {
  return `${query}-${typeof params == "string" ? params : JSON.stringify(params)}`;
}
const IS_MAC = typeof window < "u" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform), MODIFIERS = {
  alt: "altKey",
  ctrl: "ctrlKey",
  mod: IS_MAC ? "metaKey" : "ctrlKey",
  shift: "shiftKey"
};
function isHotkey(keys, event) {
  return keys.every((key) => MODIFIERS[key] ? event[MODIFIERS[key]] : event.key === key.toUpperCase());
}
function isAltKey(event) {
  return event.key === "Alt";
}
function debounce(fn, timeout) {
  let timer;
  return (...args) => {
    clearTimeout(timer), timer = setTimeout(() => {
      fn.apply(fn, args);
    }, timeout);
  };
}
const PanelsContext = react.createContext(null);
PanelsContext.displayName = "PanelsContext";
const Root$1 = styledComponents.styled.div`
  overflow: hidden;
  flex-basis: 0;
  flex-shrink: 1;
`, Panel = function({
  children,
  defaultSize = null,
  id,
  minWidth,
  maxWidth,
  order = 0
}) {
  const context = react.useContext(PanelsContext);
  if (context === null)
    throw Error("Panel components must be rendered within a PanelGroup container");
  const { getPanelStyle, registerElement, unregisterElement } = context, style = getPanelStyle(id);
  return react.useLayoutEffect(() => (registerElement(id, {
    id,
    type: "panel",
    defaultSize,
    maxWidth: maxWidth ?? null,
    minWidth: minWidth ?? 0,
    order
  }), () => {
    unregisterElement(id);
  }), [id, defaultSize, order, maxWidth, minWidth, registerElement, unregisterElement]), /* @__PURE__ */ jsxRuntime.jsx(Root$1, { style, children });
}, itemKey = "presentation/panels", getStoredItem = () => JSON.parse(localStorage.getItem(itemKey) || "{}"), setStoredItem = (data) => {
  localStorage.setItem(itemKey, JSON.stringify(data));
}, getKeyForPanels = (panels) => panels.map((panel) => [panel.id, panel.order].join(":")).join(",");
function usePanelsStorage() {
  return react.useMemo(() => {
    const get = (panels) => {
      const stored = getStoredItem(), key = getKeyForPanels(panels);
      return Array.isArray(stored[key]) && stored[key].some((val) => val === null) ? void 0 : stored[key];
    }, set = (panels, widths) => {
      const stored = getStoredItem(), key = getKeyForPanels(panels), data = {
        ...stored,
        [key]: widths
      };
      setStoredItem(data);
    }, setDebounced = debounce(set, 100);
    return {
      get,
      set,
      setDebounced
    };
  }, []);
}
function getNextWidth(panel, nextWidth, containerWidth) {
  const { maxWidth: maxWidthPx, minWidth: minWidthPx } = panel, maxWidth = maxWidthPx == null ? 100 : maxWidthPx / containerWidth * 100, minWidth = minWidthPx / containerWidth * 100;
  return Math.min(maxWidth, Math.max(minWidth, nextWidth));
}
function getNextWidths(delta, containerWidth, panelBefore, panelAfter, panelsState, initialDragState) {
  const { panels, widths: prevWidths } = panelsState, { widths: initialWidths } = initialDragState, widths = initialWidths || prevWidths, nextWidths = [...widths];
  {
    const pivotPanel2 = delta < 0 ? panelAfter : panelBefore, index22 = panels.findIndex((panel) => panel.id === pivotPanel2.id), width = widths[index22], nextWidth = getNextWidth(pivotPanel2, width + Math.abs(delta), containerWidth);
    if (width === nextWidth)
      return widths;
    delta = delta < 0 ? width - nextWidth : nextWidth - width;
  }
  let deltaApplied = 0, pivotPanel = delta < 0 ? panelBefore : panelAfter, index2 = panels.findIndex((panel) => panel.id === pivotPanel.id);
  for (; ; ) {
    const panel = panels[index2], width = widths[index2], deltaRemaining = Math.abs(delta) - Math.abs(deltaApplied), nextWidth = getNextWidth(panel, width - deltaRemaining, containerWidth);
    if (width !== nextWidth && (deltaApplied += width - nextWidth, nextWidths[index2] = nextWidth, deltaApplied.toPrecision(10).localeCompare(Math.abs(delta).toPrecision(10), void 0, {
      numeric: !0
    }) >= 0))
      break;
    if (delta < 0) {
      if (--index2 < 0)
        break;
    } else if (++index2 >= panels.length)
      break;
  }
  return deltaApplied === 0 ? widths : (pivotPanel = delta < 0 ? panelAfter : panelBefore, index2 = panels.findIndex((panel) => panel.id === pivotPanel.id), nextWidths[index2] = widths[index2] + deltaApplied, nextWidths);
}
function getPanelWidth(panels, id, widths) {
  if (panels.length === 1) return "100";
  const index2 = panels.findIndex((panel) => panel.id === id), width = widths[index2];
  return width == null ? "0" : width.toPrecision(10);
}
function getOffset(event, handleElement, initialOffset = 0, initialHandleElementRect = null) {
  const pointerOffset = event.clientX, elementOffset = (initialHandleElementRect || handleElement.getBoundingClientRect()).left;
  return pointerOffset - elementOffset - initialOffset;
}
function isPanel(element) {
  return element.type === "panel";
}
function isResizer(element) {
  return element.type === "resizer";
}
function getSortedElements(elements) {
  return Array.from(elements.values()).sort(({ order: a }, { order: b }) => a == null && b == null ? 0 : a == null ? -1 : b == null ? 1 : a - b);
}
function validateWidths(panels, widthsToValidate, containerWidth) {
  const total = widthsToValidate.reduce((total2, width) => total2 + width, 0), widths = [...widthsToValidate].map((width) => width / total * 100);
  let remainingWidth = 0;
  for (let index2 = 0; index2 < panels.length; index2++) {
    const panel = panels[index2], width = widths[index2], nextWidth = getNextWidth(panel, width, containerWidth);
    width != nextWidth && (remainingWidth += width - nextWidth, widths[index2] = nextWidth);
  }
  if (remainingWidth.toFixed(3) !== "0.000")
    for (let index2 = 0; index2 < panels.length; index2++) {
      const panel = panels[index2];
      let { maxWidth, minWidth } = panel;
      minWidth = minWidth / containerWidth * 100, maxWidth != null && (maxWidth = maxWidth / containerWidth * 100);
      const width = Math.min(
        maxWidth ?? 100,
        Math.max(minWidth, widths[index2] + remainingWidth)
      );
      if (width !== widths[index2] && (remainingWidth -= width - widths[index2], widths[index2] = width, Math.abs(remainingWidth).toFixed(3) === "0.000"))
        break;
    }
  return widths;
}
function getDefaultWidths(panels) {
  let panelsWithoutWidth = panels.length, remainingWidthTotal = 100;
  const widthsWithNulls = panels.map((panel) => panel.defaultSize ? (remainingWidthTotal = remainingWidthTotal - panel.defaultSize, panelsWithoutWidth = panelsWithoutWidth - 1, panel.defaultSize) : null), defaultWidth = remainingWidthTotal / panelsWithoutWidth;
  return widthsWithNulls.map((width) => width === null ? defaultWidth : width);
}
const PanelsWrapper = styledComponents.styled.div`
  display: flex;
  flex-direction: row;
  height: 100%;
  overflow: hidden;
  width: 100%;
`, Panels = function({ children }) {
  const panelsEl = react.useRef(null), [elements, setElements] = react.useState(/* @__PURE__ */ new Map()), panels = react.useMemo(() => getSortedElements(elements).filter(isPanel), [elements]), [widths, setWidths] = react.useState([]), [activeResizer, setActiveResizer] = react.useState(null), panelsRef = react.useRef({
    elements,
    panels,
    widths
  }), getPanelStyle = react.useCallback(
    (id) => ({
      flexGrow: getPanelWidth(panels, id, widths),
      pointerEvents: activeResizer === null ? void 0 : "none"
    }),
    [activeResizer, panels, widths]
  ), registerElement = react.useCallback((id, data) => {
    setElements((prev) => {
      if (prev.has(id)) return prev;
      const next = new Map(prev);
      return next.set(id, data), next;
    });
  }, []), unregisterElement = react.useCallback((id) => {
    setElements((prev) => {
      if (!prev.has(id)) return prev;
      const next = new Map(prev);
      return next.delete(id), next;
    });
  }, []), dragRef = react.useRef({
    containerWidth: window.innerWidth,
    dragOffset: 0,
    panelAfter: null,
    panelBefore: null,
    resizerIndex: -1,
    resizerRect: null,
    startX: 0,
    widths: []
  }), startDragging = react.useCallback(
    (id, event) => {
      const elementsArr = getSortedElements(elements), index2 = elementsArr.findIndex((el) => el.id === id), resizer = elements.get(id);
      if (!resizer || !isResizer(resizer)) return;
      const resizeElement = resizer.el.current;
      resizeElement && (dragRef.current = {
        resizerIndex: index2,
        panelBefore: elementsArr.reduce(
          (acc, el, i) => isPanel(el) && i < index2 ? el : acc,
          null
        ),
        panelAfter: elementsArr.reduce(
          (acc, el, i) => acc === null && isPanel(el) && i > index2 ? el : acc,
          null
        ),
        containerWidth: window.innerWidth,
        startX: event.pageX,
        dragOffset: getOffset(event, resizeElement),
        resizerRect: resizeElement.getBoundingClientRect(),
        widths: panelsRef.current.widths
      }, setActiveResizer(id));
    },
    [elements]
  ), stopDragging = react.useCallback(() => {
    setActiveResizer(null);
  }, []), drag = react.useCallback(
    (id, event) => {
      event.preventDefault(), event.stopPropagation();
      const { containerWidth, dragOffset, panelBefore, panelAfter, resizerRect } = dragRef.current;
      if (panelBefore == null || panelAfter == null)
        return;
      const resizer = elements.get(id);
      if (!resizer || !isResizer(resizer)) return;
      const resizeElement = resizer.el.current;
      if (!resizeElement) return;
      const offset = getOffset(event, resizeElement, dragOffset, resizerRect);
      if (offset === 0)
        return;
      const { widths: prevWidths } = panelsRef.current, rect = panelsEl.current.getBoundingClientRect(), delta = offset / rect.width * 100, nextWidths = getNextWidths(
        delta,
        containerWidth,
        panelBefore,
        panelAfter,
        panelsRef.current,
        dragRef.current
      );
      prevWidths.some((prevWidth, i) => prevWidth !== nextWidths[i]) && setWidths(nextWidths);
    },
    [elements]
  );
  react.useLayoutEffect(() => {
    panelsRef.current.elements = elements, panelsRef.current.panels = panels, panelsRef.current.widths = widths;
  }, [elements, panels, widths]);
  const storage = usePanelsStorage();
  react.useLayoutEffect(() => {
    const { widths: widths2 } = panelsRef.current;
    if (widths2.length === panels.length)
      return;
    const storedWidths = storage.get(panels);
    if (storedWidths) {
      const validatedStoredWidths = validateWidths(panels, storedWidths, window.innerWidth);
      setWidths(validatedStoredWidths);
      return;
    }
    const defaultWidths = getDefaultWidths(panels);
    setWidths(defaultWidths);
  }, [storage, panels]), react.useEffect(() => {
    widths.length && storage.setDebounced(panels, widths);
  }, [storage, panels, widths]), react.useLayoutEffect(() => {
    const resizeObserver = new ResizeObserver(() => {
      const { panels: panels2, widths: prevWidths } = panelsRef.current, nextWidths = validateWidths(panels2, prevWidths, window.innerWidth);
      prevWidths.some((prevWidth, i) => prevWidth !== nextWidths[i]) && setWidths(nextWidths);
    });
    return resizeObserver.observe(panelsEl.current), () => {
      resizeObserver.disconnect();
    };
  }, []);
  const context = react.useMemo(
    () => ({
      activeResizer,
      drag,
      getPanelStyle,
      registerElement,
      startDragging,
      stopDragging,
      unregisterElement
    }),
    [
      activeResizer,
      drag,
      getPanelStyle,
      registerElement,
      startDragging,
      stopDragging,
      unregisterElement
    ]
  );
  return /* @__PURE__ */ jsxRuntime.jsx(PanelsContext.Provider, { value: context, children: /* @__PURE__ */ jsxRuntime.jsx(PanelsWrapper, { ref: panelsEl, children }) });
};
function ErrorCard(props) {
  const { children, message, onRetry, onContinueAnyway, ...restProps } = props, { t } = sanity.useTranslation(index.presentationLocaleNamespace), retryButton = /* @__PURE__ */ jsxRuntime.jsx(ui.Button, { fontSize: 1, mode: "ghost", onClick: onRetry, text: t("error-card.retry-button.text") }), continueAnywayButton = /* @__PURE__ */ jsxRuntime.jsx(
    ui.Button,
    {
      fontSize: 1,
      mode: "ghost",
      tone: "critical",
      onClick: onContinueAnyway,
      text: t("error-card.continue-button.text")
    }
  );
  return /* @__PURE__ */ jsxRuntime.jsx(ui.Card, { height: "fill", ...restProps, children: /* @__PURE__ */ jsxRuntime.jsx(ui.Flex, { align: "center", height: "fill", justify: "center", children: /* @__PURE__ */ jsxRuntime.jsx(ui.Container, { padding: 4, sizing: "border", width: 0, children: /* @__PURE__ */ jsxRuntime.jsxs(ui.Stack, { space: 4, children: [
    /* @__PURE__ */ jsxRuntime.jsxs(ui.Stack, { space: 3, children: [
      /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, weight: "semibold", children: t("error-card.title") }),
      /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { muted: !0, size: 1, children: message })
    ] }),
    children,
    onRetry && onContinueAnyway ? /* @__PURE__ */ jsxRuntime.jsxs(ui.Inline, { space: 2, children: [
      retryButton,
      continueAnywayButton
    ] }) : onRetry ? /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { children: retryButton }) : onContinueAnyway ? /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { children: continueAnywayButton }) : null
  ] }) }) }) });
}
function encodeQueryString(params = {}) {
  const parts = Object.entries(params).map(([key, value]) => `${key}=${value}`).join("&");
  return parts.length ? `?${parts}` : "";
}
function resolveQueryStringFromParams(nextParams) {
  const allowed = [
    "comment",
    "inspect",
    "instruction",
    "pathKey",
    "rev",
    "since",
    "template",
    "view"
  ], safeNextParams = Object.entries(nextParams).filter(([key]) => allowed.includes(key)).reduce((obj, [key, value]) => value == null ? obj : { ...obj, [key]: value }, {});
  return encodeQueryString(safeNextParams);
}
const BackLink = react.forwardRef(function(props, ref) {
  const { searchParams, ...restProps } = props;
  return /* @__PURE__ */ jsxRuntime.jsx(
    router.StateLink,
    {
      ...restProps,
      ref,
      state: {
        type: void 0,
        _searchParams: Object.entries(searchParams)
      },
      title: void 0
    }
  );
}), ReferenceChildLink = react.forwardRef(function(props, ref) {
  const {
    documentId,
    documentType,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parentRefPath,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    template,
    searchParams,
    ...restProps
  } = props;
  return /* @__PURE__ */ jsxRuntime.jsx(
    router.StateLink,
    {
      ...restProps,
      ref,
      state: {
        id: documentId,
        type: documentType,
        _searchParams: Object.entries(searchParams)
      },
      title: void 0
    }
  );
});
function PresentationPaneRouterProvider(props) {
  const { children, onStructureParams, structureParams, searchParams, refs } = props, { state: routerState, resolvePathFromState } = router.useRouter(), routerSearchParams = sanity.useUnique(Object.fromEntries(routerState._searchParams || [])), createPathWithParams = react.useCallback(
    (nextParams) => {
      const path = resolvePathFromState(routerState), qs = resolveQueryStringFromParams({
        ...routerSearchParams,
        ...nextParams
      });
      return `${path}${qs}`;
    },
    [resolvePathFromState, routerSearchParams, routerState]
  ), context = react.useMemo(() => ({
    index: 0,
    groupIndex: 0,
    siblingIndex: 0,
    payload: {},
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    params: structureParams,
    hasGroupSiblings: !1,
    groupLength: 1,
    routerPanesState: [],
    ChildLink: (childLinkProps) => {
      const { childId, ...restProps } = childLinkProps, ref = refs?.find((r) => r._id === childId || sanity.getPublishedId(r._id) === childId);
      return ref ? /* @__PURE__ */ jsxRuntime.jsx(
        router.StateLink,
        {
          ...restProps,
          state: {
            id: childId,
            type: ref._type,
            _searchParams: Object.entries(searchParams)
          }
        }
      ) : /* @__PURE__ */ jsxRuntime.jsx("div", { ...restProps });
    },
    BackLink: (backLinkProps) => /* @__PURE__ */ jsxRuntime.jsx(BackLink, { ...backLinkProps, searchParams }),
    ReferenceChildLink: (childLinkProps) => /* @__PURE__ */ jsxRuntime.jsx(ReferenceChildLink, { ...childLinkProps, searchParams }),
    ParameterizedLink: () => /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: "ParameterizedLink" }),
    closeCurrentAndAfter: () => {
      console.warn("closeCurrentAndAfter");
    },
    handleEditReference: (options) => {
      console.warn("handleEditReference", options);
    },
    replaceCurrent: (pane) => {
      console.warn("replaceCurrent", pane);
    },
    closeCurrent: () => {
      console.warn("closeCurrent");
    },
    duplicateCurrent: (pane) => {
      console.warn("duplicateCurrent", pane);
    },
    setView: (viewId) => {
      console.warn("setView", viewId);
    },
    setParams: (nextParams) => {
      onStructureParams({
        ...nextParams,
        inspect: nextParams.inspect ?? void 0
      });
    },
    setPayload: (payload) => {
      console.warn("setPayload", payload);
    },
    navigateIntent: (intentName, intentParams, options) => {
      console.warn("navigateIntent", intentName, intentParams, options);
    },
    createPathWithParams
  }), [createPathWithParams, onStructureParams, refs, searchParams, structureParams]);
  return /* @__PURE__ */ jsxRuntime.jsx(structure.PaneRouterContext.Provider, { value: context, children });
}
const RootLayout = styledComponents.styled(structure.PaneLayout)`
  height: 100%;
`, Root = styledComponents.styled(ui.Flex)`
  & > div {
    min-width: none !important;
    max-width: none !important;
  }
`, WrappedCode$1 = styledComponents.styled(ui.Code)`
  white-space: pre-wrap;
`;
function DocumentListPane(props) {
  const { mainDocumentState, onStructureParams, searchParams, refs } = props, { t } = sanity.useTranslation(index.presentationLocaleNamespace), { devMode } = index.usePresentationTool(), ids = react.useMemo(
    () => refs.filter((r) => sanity.getPublishedId(r._id) !== mainDocumentState?.document?._id).map((r) => r._id),
    [mainDocumentState, refs]
  ), pane = react.useMemo(
    () => ({
      id: "$root",
      options: {
        filter: "_id in $ids",
        params: { ids }
        // defaultOrdering: [{field: '_updatedAt', direction: 'desc'}],
      },
      schemaTypeName: "",
      title: t("document-list-pane.document-list.title"),
      type: "documentList"
    }),
    [ids, t]
  ), [errorParams, setErrorParams] = react.useState(null), handleRetry = react.useCallback(() => setErrorParams(null), []), [structureParams] = react.useState(() => ({}));
  return react.useEffect(() => setErrorParams(null), [refs]), errorParams ? /* @__PURE__ */ jsxRuntime.jsx(ErrorCard, { flex: 1, message: t("document-list-pane.error.text"), onRetry: handleRetry, children: devMode && // show runtime error message in dev mode
  /* @__PURE__ */ jsxRuntime.jsx(ui.Card, { overflow: "auto", padding: 3, radius: 2, tone: "critical", children: /* @__PURE__ */ jsxRuntime.jsxs(ui.Stack, { space: 3, children: [
    /* @__PURE__ */ jsxRuntime.jsx(ui.Label, { muted: !0, size: 0, children: t("presentation-error.label") }),
    /* @__PURE__ */ jsxRuntime.jsx(WrappedCode$1, { size: 1, children: errorParams.error.message })
  ] }) }) }) : /* @__PURE__ */ jsxRuntime.jsx(ui.ErrorBoundary, { onCatch: setErrorParams, children: /* @__PURE__ */ jsxRuntime.jsx(RootLayout, { children: /* @__PURE__ */ jsxRuntime.jsx(structure.StructureToolProvider, { children: /* @__PURE__ */ jsxRuntime.jsx(
    PresentationPaneRouterProvider,
    {
      onStructureParams,
      structureParams,
      searchParams,
      refs,
      children: /* @__PURE__ */ jsxRuntime.jsx(Root, { direction: "column", flex: 1, children: /* @__PURE__ */ jsxRuntime.jsx(structure.DocumentListPane, { index: 0, itemId: "$root", pane, paneKey: "$root" }) })
    }
  ) }) }) });
}
const WrappedCode = styledComponents.styled(ui.Code)`
  white-space: pre-wrap;
`;
function DocumentPane(props) {
  const { documentId, documentType, onFocusPath, onStructureParams, searchParams, structureParams } = props, { template, templateParams } = structureParams, { t } = sanity.useTranslation(index.presentationLocaleNamespace), { devMode } = index.usePresentationTool(), paneDocumentNode = react.useMemo(
    () => ({
      id: documentId,
      options: {
        id: documentId,
        type: documentType,
        template,
        templateParameters: router.decodeJsonParams(templateParams)
      },
      title: "",
      type: "document"
    }),
    [documentId, documentType, template, templateParams]
  ), [errorParams, setErrorParams] = react.useState(null), handleRetry = react.useCallback(() => setErrorParams(null), []);
  return react.useEffect(() => {
    setErrorParams(null);
  }, [documentId, documentType, structureParams]), errorParams ? /* @__PURE__ */ jsxRuntime.jsx(ErrorCard, { flex: 1, message: t("document-pane.error.text"), onRetry: handleRetry, children: devMode && // show runtime error message in dev mode
  /* @__PURE__ */ jsxRuntime.jsx(ui.Card, { overflow: "auto", padding: 3, radius: 2, tone: "critical", children: /* @__PURE__ */ jsxRuntime.jsxs(ui.Stack, { space: 3, children: [
    /* @__PURE__ */ jsxRuntime.jsx(ui.Label, { muted: !0, size: 0, children: t("presentation-error.label") }),
    /* @__PURE__ */ jsxRuntime.jsx(WrappedCode, { size: 1, children: errorParams.error.message })
  ] }) }) }) : /* @__PURE__ */ jsxRuntime.jsx(ui.ErrorBoundary, { onCatch: setErrorParams, children: /* @__PURE__ */ jsxRuntime.jsx(structure.PaneLayout, { style: { height: "100%" }, children: /* @__PURE__ */ jsxRuntime.jsx(
    PresentationPaneRouterProvider,
    {
      searchParams,
      onStructureParams,
      structureParams,
      children: /* @__PURE__ */ jsxRuntime.jsx(react.Suspense, { fallback: /* @__PURE__ */ jsxRuntime.jsx(index.PresentationSpinner, {}), children: /* @__PURE__ */ jsxRuntime.jsx(
        structure.DocumentPane,
        {
          paneKey: "document",
          index: 1,
          itemId: "document",
          pane: paneDocumentNode,
          onFocusPath
        }
      ) })
    }
  ) }) });
}
function DocumentPanel(props) {
  const { documentId, documentType, onFocusPath, onStructureParams, searchParams, structureParams } = props;
  return /* @__PURE__ */ jsxRuntime.jsx(structure.StructureToolProvider, { children: /* @__PURE__ */ jsxRuntime.jsx(
    DocumentPane,
    {
      documentId,
      documentType,
      onFocusPath,
      onStructureParams,
      searchParams,
      structureParams
    }
  ) });
}
function usePreviewState(documentId, schemaType) {
  const documentPreviewStore = sanity.useDocumentPreviewStore(), [preview, setPreview] = react.useState({});
  return react.useEffect(() => {
    if (!schemaType)
      return;
    const subscription = sanity.getPreviewStateObservable(
      documentPreviewStore,
      schemaType,
      documentId,
      ""
    ).subscribe((state) => {
      setPreview(state);
    });
    return () => {
      subscription?.unsubscribe();
    };
  }, [documentPreviewStore, schemaType, documentId]), preview;
}
function ContentEditor(props) {
  const {
    documentId,
    documentType,
    mainDocumentState,
    onFocusPath,
    onStructureParams,
    refs,
    searchParams,
    structureParams
  } = props, { t } = sanity.useTranslation(index.presentationLocaleNamespace), schema = sanity.useSchema(), MainDocumentLink = react.useCallback(
    (props2) => /* @__PURE__ */ jsxRuntime.jsx(
      router.StateLink,
      {
        ...props2,
        state: {
          id: mainDocumentState.document._id,
          type: mainDocumentState.document._type,
          _searchParams: Object.entries(searchParams)
        }
      }
    ),
    [mainDocumentState, searchParams]
  ), schemaType = react.useMemo(
    () => schema.get(mainDocumentState?.document?._type || "shoe"),
    [mainDocumentState, schema]
  ), previewState = usePreviewState(mainDocumentState?.document?._id || "", schemaType), preview = react.useMemo(() => mainDocumentState?.document ? /* @__PURE__ */ jsxRuntime.jsx(
    sanity.SanityDefaultPreview,
    {
      ...sanity.getPreviewValueWithFallback({
        value: mainDocumentState.document,
        published: previewState.published,
        draft: previewState.draft
      }),
      schemaType,
      status: /* @__PURE__ */ jsxRuntime.jsx(ui.Card, { padding: 1, radius: 2, shadow: 1, children: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { muted: !0, size: 0, weight: "medium", children: t("main-document.label") }) })
    }
  ) : null, [mainDocumentState, schemaType, t, previewState]);
  return documentId && documentType ? /* @__PURE__ */ jsxRuntime.jsx(
    DocumentPanel,
    {
      documentId,
      documentType,
      onFocusPath,
      onStructureParams,
      searchParams,
      structureParams
    }
  ) : /* @__PURE__ */ jsxRuntime.jsxs(ui.Flex, { direction: "column", flex: 1, height: "fill", children: [
    mainDocumentState && /* @__PURE__ */ jsxRuntime.jsx(ui.Card, { padding: 3, tone: mainDocumentState.document ? "inherit" : "caution", children: mainDocumentState.document ? /* @__PURE__ */ jsxRuntime.jsx(
      sanity.PreviewCard,
      {
        __unstable_focusRing: !0,
        as: MainDocumentLink,
        "data-as": "a",
        radius: 2,
        sizing: "border",
        tone: "inherit",
        children: preview
      }
    ) : /* @__PURE__ */ jsxRuntime.jsx(ui.Card, { padding: 2, radius: 2, tone: "inherit", children: /* @__PURE__ */ jsxRuntime.jsxs(ui.Flex, { gap: 3, children: [
      /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { flex: "none", children: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, children: /* @__PURE__ */ jsxRuntime.jsx(icons.WarningOutlineIcon, {}) }) }),
      /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { flex: 1, children: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, children: /* @__PURE__ */ jsxRuntime.jsx(
        sanity.Translate,
        {
          t,
          i18nKey: "main-document.missing.text",
          components: { Code: "code" },
          values: { path: mainDocumentState.path }
        }
      ) }) })
    ] }) }) }),
    /* @__PURE__ */ jsxRuntime.jsx(
      DocumentListPane,
      {
        mainDocumentState,
        onStructureParams,
        searchParams,
        refs
      }
    )
  ] });
}
var byteToHex = [];
for (var i = 0; i < 256; ++i)
  byteToHex.push((i + 256).toString(16).slice(1));
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}
var getRandomValues, rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues && (getRandomValues = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !getRandomValues))
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return getRandomValues(rnds8);
}
var randomUUID = typeof crypto < "u" && crypto.randomUUID && crypto.randomUUID.bind(crypto), native = {
  randomUUID
};
function v4(options, buf, offset) {
  if (native.randomUUID && !buf && !options)
    return native.randomUUID();
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  return rnds[6] = rnds[6] & 15 | 64, rnds[8] = rnds[8] & 63 | 128, unsafeStringify(rnds);
}
function usePanelId(id) {
  return react.useRef(id || v4()).current;
}
const Resizer = styledComponents.styled.div`
  position: relative;
`, ResizerInner = styledComponents.styled.div`
  position: absolute;
  top: 0;
  bottom: 0;
  left: -5px;
  width: 9px;
  z-index: 10;
  cursor: ${({ $disabled }) => $disabled ? "auto" : "ew-resize"};

  /* Border */
  & > span:nth-child(1) {
    display: block;
    border-left: 1px solid var(--card-border-color);
    position: absolute;
    top: 0;
    left: 4px;
    bottom: 0;
    transition: opacity 200ms;
  }

  ${({ $disabled }) => !$disabled && `
    /* Hover effect */
    & > span:nth-child(2) {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 9px;
      bottom: 0;
      background-color: var(--card-border-color);
      opacity: 0;
      transition: opacity 150ms;
    }

    @media (hover: hover) {
      &:hover > span:nth-child(2) {
        opacity: 0.2;
      }
    }
  `}
`, PanelResizer = function({ id: propId, order, disabled = !1 }) {
  const el = react.useRef(null), context = react.useContext(PanelsContext);
  if (context === null)
    throw Error("Panel components must be rendered within a PanelGroup container");
  const id = usePanelId(propId), { activeResizer, drag, startDragging, stopDragging, registerElement, unregisterElement } = context, isDragging = activeResizer === id;
  if (context === null)
    throw Error("Panel components must be rendered within a PanelGroup container");
  const onMouseDown = react.useCallback(
    (event) => {
      startDragging(id, event.nativeEvent);
    },
    [id, startDragging]
  ), onDrag = react.useCallback(
    (e) => {
      drag(id, e);
    },
    [id, drag]
  ), onDragStop = react.useCallback(() => {
    el.current.blur(), stopDragging();
  }, [stopDragging]);
  return react.useEffect(() => {
    if (!isDragging || disabled) return;
    function setDocumentStyles() {
      const bodyStyle = document.body.style, documentStyle = document.documentElement.style, { cursor } = documentStyle, { userSelect } = bodyStyle;
      return documentStyle.cursor = "ew-resize", bodyStyle.userSelect = "none", () => {
        cursor ? documentStyle.cursor = cursor : documentStyle.removeProperty("cursor"), userSelect ? bodyStyle.userSelect = userSelect : bodyStyle.removeProperty("user-select");
      };
    }
    const resetDocumentStyles = setDocumentStyles();
    return window.addEventListener("mousemove", onDrag), window.addEventListener("mouseup", onDragStop), window.addEventListener("contextmenu", onDragStop), () => {
      resetDocumentStyles(), window.removeEventListener("mousemove", onDrag), window.removeEventListener("mouseup", onDragStop), window.removeEventListener("contextmenu", onDragStop);
    };
  }, [disabled, isDragging, onDrag, onDragStop]), react.useLayoutEffect(() => (registerElement(id, { id, order, type: "resizer", el }), () => {
    unregisterElement(id);
  }), [id, order, registerElement, unregisterElement]), /* @__PURE__ */ jsxRuntime.jsx(Resizer, { onMouseDown, ref: el, children: /* @__PURE__ */ jsxRuntime.jsxs(ResizerInner, { $disabled: disabled, children: [
    /* @__PURE__ */ jsxRuntime.jsx("span", {}),
    /* @__PURE__ */ jsxRuntime.jsx("span", {})
  ] }) });
}, PresentationContentWrapper = (props) => {
  const { documentId, setDisplayedDocument, getCommentIntent } = props;
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
    /* @__PURE__ */ jsxRuntime.jsx(PanelResizer, { order: 4 }),
    /* @__PURE__ */ jsxRuntime.jsx(Panel, { id: "content", minWidth: 325, order: 5, children: /* @__PURE__ */ jsxRuntime.jsx(
      DisplayedDocumentBroadcaster.DisplayedDocumentBroadcasterProvider,
      {
        documentId,
        setDisplayedDocument,
        children: /* @__PURE__ */ jsxRuntime.jsx(sanity.CommentsIntentProvider, { getIntent: getCommentIntent, children: props.children })
      }
    ) })
  ] });
}, PresentationContent = (props) => {
  const {
    documentId,
    documentsOnPage,
    documentType,
    getCommentIntent,
    mainDocumentState,
    onFocusPath,
    onStructureParams,
    searchParams,
    setDisplayedDocument,
    structureParams
  } = props;
  return /* @__PURE__ */ jsxRuntime.jsx(
    PresentationContentWrapper,
    {
      documentId,
      getCommentIntent,
      setDisplayedDocument,
      children: /* @__PURE__ */ jsxRuntime.jsx(
        ContentEditor,
        {
          documentId,
          documentType,
          mainDocumentState,
          onFocusPath,
          onStructureParams,
          refs: documentsOnPage,
          searchParams,
          structureParams
        }
      )
    }
  );
}, PresentationNavigateProvider = function(props) {
  const { children, navigate: _navigate } = props, navigate = react.useCallback(
    (preview, document2 = void 0) => {
      _navigate(document2 || {}, preview ? { preview } : {});
    },
    [_navigate]
  );
  return /* @__PURE__ */ jsxRuntime.jsx(index.PresentationNavigateContext.Provider, { value: navigate, children });
};
function useLocalState(key, defaultValue) {
  const [value, setValue] = react.useState(
    () => JSON.parse(localStorage.getItem(key) ?? JSON.stringify(defaultValue))
  );
  return react.useEffect(() => {
    localStorage.setItem(key, JSON.stringify(value));
  }, [key, value]), [value, setValue];
}
function usePresentationNavigator(props) {
  const { unstable_navigator } = props, navigatorProvided = !!unstable_navigator?.component, [_navigatorEnabled, setNavigatorEnabled] = useLocalState(
    "presentation/navigator",
    navigatorProvided
  ), navigatorEnabled = navigatorProvided ? _navigatorEnabled : !1, toggleNavigator = react.useMemo(() => {
    if (navigatorProvided)
      return () => setNavigatorEnabled((enabled) => !enabled);
  }, [navigatorProvided, setNavigatorEnabled]), Component = react.useCallback(
    function() {
      return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: navigatorEnabled && /* @__PURE__ */ jsxRuntime.jsx(Navigator, { ...unstable_navigator }) });
    },
    [navigatorEnabled, unstable_navigator]
  );
  return [{ navigatorEnabled, toggleNavigator }, Component];
}
function NavigatorComponent(props) {
  const { minWidth, maxWidth, component: NavigatorComponent2 } = props, navigatorDisabled = minWidth != null && maxWidth != null && minWidth === maxWidth;
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
    /* @__PURE__ */ jsxRuntime.jsx(Panel, { id: "navigator", minWidth, maxWidth, order: 1, children: /* @__PURE__ */ jsxRuntime.jsx(NavigatorComponent2, {}) }),
    /* @__PURE__ */ jsxRuntime.jsx(PanelResizer, { order: 2, disabled: navigatorDisabled })
  ] });
}
const Navigator = react.memo(NavigatorComponent), PresentationParamsProvider = function(props) {
  const { children, params } = props, context = react.useMemo(() => params, [params]);
  return /* @__PURE__ */ jsxRuntime.jsx(index.PresentationParamsContext.Provider, { value: context, children });
}, PresentationProvider = function(props) {
  const { children, devMode, name, navigate, params, searchParams, structureParams } = props, context = react.useMemo(
    () => ({
      devMode,
      name,
      navigate,
      params,
      searchParams,
      structureParams
    }),
    [devMode, name, navigate, params, searchParams, structureParams]
  );
  return /* @__PURE__ */ jsxRuntime.jsx(index.PresentationContext.Provider, { value: context, children });
}, ACTION_IFRAME_LOADED = "ACTION_IFRAME_LOADED", ACTION_IFRAME_REFRESH = "ACTION_IFRAME_REFRESH", ACTION_IFRAME_RELOAD = "ACTION_IFRAME_RELOAD", ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE = "ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE", presentationReducer = (state, action) => {
  switch (action.type) {
    case ACTION_IFRAME_LOADED:
      return state.iframe.status === "loaded" ? state : {
        ...state,
        iframe: {
          ...state.iframe,
          status: "loaded"
        }
      };
    case ACTION_IFRAME_REFRESH:
      return state.iframe.status === "refreshing" ? state : {
        ...state,
        iframe: {
          ...state.iframe,
          status: "refreshing"
        }
      };
    case ACTION_IFRAME_RELOAD:
      return state.iframe.status === "reloading" ? state : {
        ...state,
        iframe: {
          ...state.iframe,
          status: "reloading"
        }
      };
    case ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE:
      return toggleVisualEditingOverlays(state, action);
    default:
      return state;
  }
}, toggleVisualEditingOverlays = (state, action) => state.visualEditing.overlaysEnabled === action.enabled ? state : {
  ...state,
  visualEditing: {
    ...state.visualEditing,
    overlaysEnabled: action.enabled
  }
}, mainDocumentSchema = fallback(boolean(), !1), iframeStatusSchema = picklist(["loading", "loaded", "refreshing", "reloading"]), initStateSchema = object({
  mainDocument: mainDocumentSchema,
  iframe: object({
    status: iframeStatusSchema
  }),
  visualEditing: object({ overlaysEnabled: boolean() })
}), INITIAL_PRESENTATION_STATE = {
  mainDocument: !1,
  iframe: {
    status: "loading"
  },
  visualEditing: {
    overlaysEnabled: !1
  }
};
function presentationReducerInit(state) {
  return parse(initStateSchema, { ...INITIAL_PRESENTATION_STATE, ...state });
}
const IFrameElement = framerMotion.motion(styledComponents.styled.iframe`
  box-shadow: 0 0 0 1px var(--card-border-color);
  border-top: 1px solid transparent;
  border-bottom: 0;
  border-right: 0;
  border-left: 0;
  max-height: 100%;
  width: 100%;
`), IFrameOverlay = styledComponents.styled(ui.Box)`
  position: absolute;
  inset: 0;
  background: transparent;
`, IFrame = react.forwardRef(function(props, ref) {
  const { animate, initial, onLoad, preventClick, src, variants } = props;
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
    /* @__PURE__ */ jsxRuntime.jsx(
      IFrameElement,
      {
        animate,
        initial,
        onLoad,
        ref,
        src,
        variants
      }
    ),
    preventClick && /* @__PURE__ */ jsxRuntime.jsx(IFrameOverlay, {})
  ] });
});
function OpenPreviewButton(props) {
  const { openPopup, previewLocationOrigin, previewLocationRoute } = props, { t } = sanity.useTranslation(index.presentationLocaleNamespace), handleOpenPopup = react.useCallback(
    (event) => {
      event.preventDefault(), openPopup(event.currentTarget.href);
    },
    [openPopup]
  );
  return /* @__PURE__ */ jsxRuntime.jsx(
    ui.Tooltip,
    {
      animate: !0,
      content: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, children: t("share-url.menu-item.open.text") }),
      fallbackPlacements: ["bottom-start"],
      padding: 2,
      placement: "bottom",
      portal: !0,
      children: /* @__PURE__ */ jsxRuntime.jsx(
        ui.Button,
        {
          as: "a",
          "aria-label": t("share-url.menu-item.open.text"),
          fontSize: 1,
          icon: icons.LaunchIcon,
          mode: "bleed",
          padding: 2,
          href: `${previewLocationOrigin}${previewLocationRoute}`,
          onClick: handleOpenPopup,
          rel: "opener",
          target: "_blank"
        }
      )
    }
  );
}
const PreviewLocationInput = function(props) {
  const { fontSize = 1, onChange, origin, padding = 3, prefix, suffix, value } = props, { t } = sanity.useTranslation(index.presentationLocaleNamespace), { basePath = "/" } = sanity.useActiveWorkspace()?.activeWorkspace || {}, inputRef = react.useRef(null), [sessionValue, setSessionValue] = react.useState(void 0), [customValidity, setCustomValidity] = react.useState(void 0), handleChange = react.useCallback((event) => {
    setSessionValue(event.currentTarget.value);
  }, []), handleKeyDown = react.useCallback(
    (event) => {
      if (event.key === "Enter") {
        if (sessionValue === void 0)
          return;
        const absoluteValue = sessionValue.startsWith("/") || sessionValue === "" ? `${origin}${sessionValue}` : sessionValue;
        if (!absoluteValue.startsWith(origin + "/") && absoluteValue !== origin) {
          setCustomValidity(t("preview-location-input.error", { origin, context: "missing-origin" }));
          return;
        }
        if (!origin && (absoluteValue.startsWith(`${basePath}/`) || absoluteValue === basePath)) {
          setCustomValidity(
            t("preview-location-input.error", { basePath, context: "same-base-path" })
          );
          return;
        }
        const nextValue = absoluteValue === origin ? origin + "/" : absoluteValue;
        setCustomValidity(void 0), setSessionValue(void 0), onChange(nextValue.slice(origin.length)), inputRef.current?.blur();
      }
      event.key === "Escape" && (setCustomValidity(void 0), setSessionValue(void 0));
    },
    [basePath, onChange, origin, sessionValue, t]
  ), handleBlur = react.useCallback(() => {
    setCustomValidity(void 0), setSessionValue(void 0);
  }, []);
  react.useEffect(() => {
    setCustomValidity(void 0), setSessionValue(void 0);
  }, [origin, value]);
  const resetButton = react.useMemo(() => ({ icon: icons.ResetIcon }), []);
  return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: /* @__PURE__ */ jsxRuntime.jsx(
    ui.TextInput,
    {
      clearButton: customValidity ? resetButton : void 0,
      customValidity,
      fontSize,
      onBlur: handleBlur,
      onClear: () => {
        setCustomValidity(void 0), setSessionValue(origin + value);
      },
      onChange: handleChange,
      onKeyDownCapture: handleKeyDown,
      padding,
      prefix,
      style: { zIndex: 1 },
      radius: 2,
      ref: inputRef,
      space: padding,
      suffix,
      value: sessionValue === void 0 ? `${origin}${value}` : sessionValue
    }
  ) });
}, QRCodeSVG = react.lazy(() => Promise.resolve().then(function() {
  return require("./QRCodeSVG.cjs");
})), QrCodeLogoSize = 24, QrCodeLogoPadding = 16, QrSize = 224, StyledSanityMonogram = styledComponents.styled(logos.SanityMonogram)`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  height: ${QrCodeLogoSize}px;
  width: ${QrCodeLogoSize}px;
`, MotionSpinner = framerMotion.motion(ui.Spinner), MotionText = framerMotion.motion(ui.Text), MotionMonogram = framerMotion.motion(StyledSanityMonogram), SharePreviewMenu = react.memo(function(props) {
  const {
    canToggleSharePreviewAccess,
    canUseSharedPreviewAccess,
    initialUrl,
    previewLocationRoute,
    perspective
  } = props, { t } = sanity.useTranslation(index.presentationLocaleNamespace), { push: pushToast } = ui.useToast(), client = sanity.useClient({ apiVersion: index.API_VERSION }), currentUser = sanity.useCurrentUser(), [loading, setLoading] = react.useState(!0), [enabling, setEnabling] = react.useState(!1), [disabling, setDisabling] = react.useState(!1), [secret, setSecret] = react.useState(null), busy = enabling || disabling || loading, url = react.useMemo(
    () => secret ? withoutSecretSearchParams.setSecretSearchParams(initialUrl, secret, previewLocationRoute, perspective) : null,
    [initialUrl, perspective, previewLocationRoute, secret]
  ), [error, setError] = react.useState(null);
  if (error)
    throw error;
  const handleUnableToToggle = react.useCallback(() => {
    pushToast({
      closable: !0,
      status: "warning",
      title: t("share-preview-menu.error_toggle-sharing", { context: "toggle-sharing" })
    });
  }, [pushToast, t]), handleDisableSharing = react.useCallback(async () => {
    try {
      setDisabling(!0), await togglePreviewAccessSharing.disablePreviewAccessSharing(
        client,
        "@sanity/presentation",
        typeof window > "u" ? "" : location.href,
        currentUser?.id
      ), setSecret(null);
    } catch (error2) {
      setError(error2);
    } finally {
      setDisabling(!1);
    }
  }, [client, currentUser?.id]), handleEnableSharing = react.useCallback(async () => {
    try {
      setEnabling(!0);
      const previewUrlSecret = await togglePreviewAccessSharing.enablePreviewAccessSharing(
        client,
        "@sanity/presentation",
        typeof window > "u" ? "" : location.href,
        currentUser?.id
      );
      setSecret(previewUrlSecret.secret);
    } catch (error2) {
      setError(error2);
    } finally {
      setEnabling(!1);
    }
  }, [client, currentUser?.id]), handleCopyUrl = react.useCallback(() => {
    try {
      if (!url)
        throw new Error("No URL to copy");
      navigator.clipboard.writeText(url.toString()), pushToast({
        closable: !0,
        status: "success",
        title: t("share-url.clipboard.status", { context: "success" })
      });
    } catch (error2) {
      setError(error2);
    }
  }, [pushToast, t, url]);
  return react.useEffect(() => {
    let controller = new AbortController(), usedTags = [];
    async function fetchShareSecret(lastLiveEventId, signal) {
      const { result, syncTags } = await client.fetch(
        constants.fetchSharedAccessQuery,
        {},
        { filterResponse: !1, lastLiveEventId, tag: "presentation.fetch-shared-access-secret" }
      );
      Array.isArray(syncTags) && (usedTags = syncTags), signal.aborted || setSecret(result);
    }
    const subscription = client.live.events().subscribe({
      next: (event) => {
        event.type === "message" && (controller.abort(), controller = new AbortController(), event.tags.some((tag) => usedTags.includes(tag)) && fetchShareSecret(event.id, controller.signal));
      },
      error: setError
    });
    return fetchShareSecret(null, controller.signal).finally(() => setLoading(!1)), () => {
      subscription.unsubscribe(), controller.abort();
    };
  }, [client]), /* @__PURE__ */ jsxRuntime.jsx(
    ui.MenuButton,
    {
      button: /* @__PURE__ */ jsxRuntime.jsx(
        ui.Button,
        {
          "aria-label": t("preview-frame.share-button.aria-label"),
          fontSize: 1,
          icon: icons.ShareIcon,
          mode: "bleed",
          padding: 2
        }
      ),
      id: "share-menu",
      menu: /* @__PURE__ */ jsxRuntime.jsx(ui.Menu, { style: { maxWidth: 248 }, padding: canUseSharedPreviewAccess ? void 0 : 0, children: canUseSharedPreviewAccess ? /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
        /* @__PURE__ */ jsxRuntime.jsx("label", { style: { cursor: "pointer" }, children: /* @__PURE__ */ jsxRuntime.jsxs(
          ui.Grid,
          {
            columns: 2,
            rows: 2,
            gapX: 3,
            gapY: 1,
            style: {
              justifyContent: "center",
              alignItems: "center",
              gridTemplateColumns: "min-content 1fr",
              gridTemplateRows: "min-content"
            },
            paddingTop: 3,
            paddingX: 3,
            children: [
              /* @__PURE__ */ jsxRuntime.jsx(
                ui.Tooltip,
                {
                  animate: !0,
                  content: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, children: t("share-preview-menu.toggle-button.tooltip", {
                    context: url ? "disable" : "enable"
                  }) }),
                  fallbackPlacements: ["bottom-start"],
                  padding: 1,
                  placement: "bottom",
                  portal: !0,
                  children: /* @__PURE__ */ jsxRuntime.jsx(
                    ui.Switch,
                    {
                      checked: enabling || url !== null && !disabling,
                      readOnly: enabling || disabling,
                      indeterminate: loading,
                      onChange: canToggleSharePreviewAccess ? url ? handleDisableSharing : handleEnableSharing : handleUnableToToggle
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, weight: "medium", children: t("share-preview-menu.toggle-button.label", { context: "first-line" }) }),
              /* @__PURE__ */ jsxRuntime.jsx("span", {}),
              /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { muted: !0, size: 1, children: t("share-preview-menu.toggle-button.label", { context: "second-line" }) })
            ]
          }
        ) }),
        /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { padding: 3, paddingTop: 2, children: /* @__PURE__ */ jsxRuntime.jsxs(ui.Stack, { space: 3, children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            ui.Card,
            {
              tone: busy || !url ? "transparent" : void 0,
              style: {
                position: "relative",
                aspectRatio: "1 / 1",
                display: "flex",
                alignItems: "center",
                justifyContent: "center"
              },
              children: /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { children: busy ? /* @__PURE__ */ jsxRuntime.jsx(
                MotionSpinner,
                {
                  muted: !0,
                  initial: { opacity: 0 },
                  animate: { opacity: 1 },
                  exit: { opacity: 0 }
                }
              ) : url ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: /* @__PURE__ */ jsxRuntime.jsxs(react.Suspense, { fallback: /* @__PURE__ */ jsxRuntime.jsx(ui.Spinner, {}), children: [
                /* @__PURE__ */ jsxRuntime.jsx(
                  QRCodeSVG,
                  {
                    title: t("share-preview-menu.qr-code.title", { url: url.toString() }),
                    value: url.toString(),
                    size: QrSize,
                    color: "var(--card-fg-color)",
                    logoSize: QrCodeLogoSize + QrCodeLogoPadding
                  }
                ),
                /* @__PURE__ */ jsxRuntime.jsx(
                  MotionMonogram,
                  {
                    initial: { opacity: -0.5 },
                    animate: { opacity: 1.5 },
                    exit: { opacity: 0 }
                  }
                )
              ] }) }) : /* @__PURE__ */ jsxRuntime.jsx(
                MotionText,
                {
                  muted: !0,
                  size: 1,
                  style: { maxWidth: "100px", textWrap: "pretty", textAlign: "center" },
                  initial: { opacity: 0 },
                  animate: { opacity: 1 },
                  exit: { opacity: 0 },
                  children: t("share-preview-menu.qr-code.placeholder")
                }
              ) })
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { muted: !0, size: 1, children: t("share-preview-menu.qr-code.instructions") })
        ] }) }),
        /* @__PURE__ */ jsxRuntime.jsx(ui.MenuDivider, {}),
        /* @__PURE__ */ jsxRuntime.jsx(
          ui.MenuItem,
          {
            disabled: !url || disabling,
            icon: icons.CopyIcon,
            onClick: handleCopyUrl,
            fontSize: 1,
            padding: 3,
            text: t("share-preview-menu.copy-url.text")
          }
        )
      ] }) : /* @__PURE__ */ jsxRuntime.jsx(ui.Card, { padding: 2, tone: "caution", radius: 3, children: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { style: { textWrap: "pretty" }, children: t("share-preview-menu.error", { context: "missing-grants" }) }) }) }),
      popover: {
        animate: !0,
        constrainSize: !0,
        placement: "bottom",
        portal: !0
      }
    }
  );
});
SharePreviewMenu.displayName = "Memo(SharePreviewMenu)";
const MotionFlex = framerMotion.motion(ui.Flex), PERSPECTIVE_TITLE_KEY = {
  previewDrafts: "preview-frame.perspective.previewDrafts.title",
  published: "preview-frame.perspective.published.title"
}, PERSPECTIVE_TONES = {
  previewDrafts: "caution",
  published: "positive"
}, PERSPECTIVE_ICONS = {
  previewDrafts: icons.EditIcon,
  published: icons.PublishIcon
}, PreviewFrame = react.memo(
  react.forwardRef(
    function(props, forwardedRef) {
      const {
        canSharePreviewAccess,
        canToggleSharePreviewAccess,
        canUseSharedPreviewAccess,
        dispatch,
        iframe,
        initialUrl,
        loadersConnection,
        navigatorEnabled,
        onPathChange,
        onRefresh,
        openPopup,
        overlaysConnection,
        perspective,
        previewUrl,
        setPerspective,
        setViewport,
        targetOrigin,
        toggleNavigator,
        toggleOverlay,
        viewport,
        visualEditing: { overlaysEnabled }
      } = props, { t } = sanity.useTranslation(index.presentationLocaleNamespace), { devMode } = index.usePresentationTool(), prefersReducedMotion = ui.usePrefersReducedMotion(), ref = react.useRef(null);
      react.useImperativeHandle(
        forwardedRef,
        () => ref.current
      );
      const toggleViewportSize = react.useCallback(
        () => setViewport(viewport === "desktop" ? "mobile" : "desktop"),
        [setViewport, viewport]
      ), loading = iframe.status === "loading" || iframe.status === "reloading", [timedOut, setTimedOut] = react.useState(!1), refreshing = iframe.status === "refreshing", [somethingIsWrong, setSomethingIsWrong] = react.useState(!1), iframeIsBusy = loading || refreshing || overlaysConnection === "connecting", previewLocationOrigin = react.useMemo(() => targetOrigin === location.origin ? "" : targetOrigin, [targetOrigin]), handleRefresh = react.useCallback(() => {
        onRefresh(() => {
          ref.current && (dispatch({ type: ACTION_IFRAME_RELOAD }), ref.current.src = `${targetOrigin}${previewUrl || "/"}`);
        });
      }, [dispatch, onRefresh, previewUrl, targetOrigin]), handleRetry = react.useCallback(() => {
        ref.current && (ref.current.src = initialUrl.toString(), dispatch({ type: ACTION_IFRAME_RELOAD }));
      }, [dispatch, initialUrl]), handleContinueAnyway = react.useCallback(() => {
        setContinueAnyway(!0);
      }, []), [continueAnyway, setContinueAnyway] = react.useState(!1), [showOverlaysConnectionStatus, setShowOverlaysConnectionState] = react.useState(!1);
      react.useEffect(() => {
        if (!(loading || refreshing) && (overlaysConnection === "connecting" || overlaysConnection === "reconnecting")) {
          const timeout = setTimeout(() => {
            setShowOverlaysConnectionState(!0);
          }, 5e3);
          return () => clearTimeout(timeout);
        }
      }, [overlaysConnection, loading, refreshing]), react.useEffect(() => {
        if (!(loading || refreshing || !showOverlaysConnectionStatus)) {
          if (overlaysConnection === "connected" && (setSomethingIsWrong(!1), setShowOverlaysConnectionState(!1), setTimedOut(!1), setContinueAnyway(!1)), overlaysConnection === "connecting") {
            const timeout = setTimeout(() => {
              setTimedOut(!0), console.error(
                "Unable to connect to visual editing. Make sure you've setup '@sanity/visual-editing' correctly"
              );
            }, index.MAX_TIME_TO_OVERLAYS_CONNECTION);
            return () => clearTimeout(timeout);
          }
          if (overlaysConnection === "reconnecting") {
            const timeout = setTimeout(() => {
              setTimedOut(!0), setSomethingIsWrong(!0);
            }, index.MAX_TIME_TO_OVERLAYS_CONNECTION);
            return () => clearTimeout(timeout);
          }
          overlaysConnection === "disconnected" && setSomethingIsWrong(!0);
        }
      }, [loading, overlaysConnection, refreshing, showOverlaysConnectionStatus]);
      const previewLocationRoute = react.useMemo(() => {
        const previewURL = new URL(previewUrl || "/", targetOrigin), { pathname, search } = withoutSecretSearchParams.withoutSecretSearchParams(previewURL);
        return `${pathname}${search}`;
      }, [previewUrl, targetOrigin]), onIFrameLoad = react.useCallback(() => {
        dispatch({ type: ACTION_IFRAME_LOADED });
      }, [dispatch]);
      react.useEffect(() => {
        if (!ref.current)
          return;
        const instance = ref.current;
        function handleBlur() {
          instance === document.activeElement && instance.dispatchEvent(new MouseEvent("mousedown", { bubbles: !0, cancelable: !0 }));
        }
        return window.addEventListener("blur", handleBlur), () => {
          window.removeEventListener("blur", handleBlur);
        };
      }, []);
      const preventIframeInteraction = react.useMemo(() => (loading || overlaysConnection === "connecting" && iframe.status !== "refreshing") && !continueAnyway, [continueAnyway, iframe.status, loading, overlaysConnection]), iframeAnimations = react.useMemo(() => [
        preventIframeInteraction ? "background" : "active",
        loading ? "reloading" : "idle",
        viewport,
        showOverlaysConnectionStatus && !continueAnyway ? "timedOut" : ""
      ], [
        continueAnyway,
        loading,
        preventIframeInteraction,
        showOverlaysConnectionStatus,
        viewport
      ]);
      return /* @__PURE__ */ jsxRuntime.jsx(framerMotion.MotionConfig, { transition: prefersReducedMotion ? { duration: 0 } : void 0, children: /* @__PURE__ */ jsxRuntime.jsxs(ui.TooltipDelayGroupProvider, { delay: 1e3, children: [
        /* @__PURE__ */ jsxRuntime.jsx(ui.Card, { flex: "none", padding: 2, shadow: 1, style: { position: "relative" }, children: /* @__PURE__ */ jsxRuntime.jsxs(ui.Flex, { align: "center", style: { minHeight: 0 }, children: [
          toggleNavigator && /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { flex: "none", marginRight: 1, padding: 1, children: /* @__PURE__ */ jsxRuntime.jsx(
            ui.Tooltip,
            {
              animate: !0,
              content: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, children: t("preview-frame.navigator.toggle-button.tooltip") }),
              fallbackPlacements: ["bottom-start"],
              padding: 2,
              placement: "bottom",
              portal: !0,
              children: /* @__PURE__ */ jsxRuntime.jsx(
                ui.Button,
                {
                  "aria-label": t("preview-frame.navigator.toggle-button.aria-label"),
                  fontSize: 1,
                  icon: icons.PanelLeftIcon,
                  mode: "bleed",
                  onClick: toggleNavigator,
                  padding: 2,
                  selected: navigatorEnabled
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntime.jsx(
            ui.Tooltip,
            {
              animate: !0,
              content: /* @__PURE__ */ jsxRuntime.jsxs(ui.Flex, { align: "center", style: { whiteSpace: "nowrap" }, children: [
                /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { padding: 1, children: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, children: t("preview-frame.overlay.toggle-button.tooltip", {
                  context: overlaysEnabled ? "disable" : "enable"
                }) }) }),
                /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { paddingY: 1, children: /* @__PURE__ */ jsxRuntime.jsx(sanity.Hotkeys, { keys: ["Alt"], style: { marginTop: -4, marginBottom: -4 } }) })
              ] }),
              fallbackPlacements: ["bottom-start"],
              padding: 1,
              placement: "bottom",
              portal: !0,
              children: /* @__PURE__ */ jsxRuntime.jsx(
                ui.Card,
                {
                  as: "label",
                  flex: "none",
                  marginRight: 1,
                  padding: 3,
                  style: {
                    lineHeight: 0,
                    borderRadius: 999,
                    userSelect: "none"
                  },
                  tone: overlaysEnabled ? "transparent" : void 0,
                  children: /* @__PURE__ */ jsxRuntime.jsxs(ui.Flex, { align: "center", gap: 3, children: [
                    /* @__PURE__ */ jsxRuntime.jsx("div", { style: { margin: -4 }, children: /* @__PURE__ */ jsxRuntime.jsx(
                      ui.Switch,
                      {
                        checked: overlaysEnabled,
                        onChange: toggleOverlay,
                        disabled: iframe.status === "loading" || overlaysConnection !== "connected"
                      }
                    ) }),
                    /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { children: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { muted: !overlaysEnabled, size: 1, weight: "medium", children: t("preview-frame.overlay.toggle-button.text") }) })
                  ] })
                }
              )
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { flex: 1, marginX: 1, children: /* @__PURE__ */ jsxRuntime.jsx(
            PreviewLocationInput,
            {
              prefix: /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { padding: 1, children: /* @__PURE__ */ jsxRuntime.jsx(
                ui.Tooltip,
                {
                  animate: !0,
                  content: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, children: iframe.status === "loaded" ? t("preview-frame.refresh-button.tooltip") : t("preview-frame.status", { context: iframe.status }) }),
                  fallbackPlacements: ["bottom-end"],
                  padding: 2,
                  placement: "bottom",
                  portal: !0,
                  children: /* @__PURE__ */ jsxRuntime.jsx(
                    ui.Button,
                    {
                      "aria-label": t("preview-frame.refresh-button.aria-label"),
                      fontSize: 1,
                      icon: icons.RefreshIcon,
                      mode: "bleed",
                      loading: iframe.status === "reloading" || iframe.status === "refreshing",
                      onClick: handleRefresh,
                      padding: 2
                    }
                  )
                }
              ) }),
              onChange: onPathChange,
              origin: previewLocationOrigin,
              suffix: /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { padding: 1, children: /* @__PURE__ */ jsxRuntime.jsx(
                OpenPreviewButton,
                {
                  openPopup,
                  previewLocationOrigin,
                  previewLocationRoute
                }
              ) }),
              value: previewLocationRoute
            }
          ) }),
          /* @__PURE__ */ jsxRuntime.jsx(ui.Flex, { align: "center", flex: "none", gap: 1, padding: 1, children: /* @__PURE__ */ jsxRuntime.jsx(
            ui.MenuButton,
            {
              button: /* @__PURE__ */ jsxRuntime.jsx(
                ui.Button,
                {
                  fontSize: 1,
                  iconRight: icons.ChevronDownIcon,
                  mode: "bleed",
                  padding: 2,
                  space: 2,
                  text: t(
                    PERSPECTIVE_TITLE_KEY[loadersConnection === "connected" ? perspective : "previewDrafts"]
                  ),
                  loading: loadersConnection === "reconnecting" && iframe.status !== "loaded",
                  disabled: loadersConnection !== "connected"
                }
              ),
              id: "perspective-menu",
              menu: /* @__PURE__ */ jsxRuntime.jsxs(ui.Menu, { style: { maxWidth: 240 }, children: [
                /* @__PURE__ */ jsxRuntime.jsx(
                  ui.MenuItem,
                  {
                    fontSize: 1,
                    onClick: () => setPerspective("previewDrafts"),
                    padding: 3,
                    pressed: perspective === "previewDrafts",
                    tone: PERSPECTIVE_TONES.previewDrafts,
                    children: /* @__PURE__ */ jsxRuntime.jsxs(ui.Flex, { align: "flex-start", gap: 3, children: [
                      /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { flex: "none", children: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, children: react.createElement(PERSPECTIVE_ICONS.previewDrafts) }) }),
                      /* @__PURE__ */ jsxRuntime.jsxs(ui.Stack, { flex: 1, space: 2, children: [
                        /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, weight: "medium", children: t(PERSPECTIVE_TITLE_KEY.previewDrafts) }),
                        /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { muted: !0, size: 1, children: t("preview-frame.perspective.previewDrafts.text") })
                      ] }),
                      /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { flex: "none", children: /* @__PURE__ */ jsxRuntime.jsx(
                        ui.Text,
                        {
                          muted: !0,
                          size: 1,
                          style: {
                            opacity: perspective === "previewDrafts" ? 1 : 0
                          },
                          children: /* @__PURE__ */ jsxRuntime.jsx(icons.CheckmarkIcon, {})
                        }
                      ) })
                    ] })
                  }
                ),
                /* @__PURE__ */ jsxRuntime.jsx(
                  ui.MenuItem,
                  {
                    fontSize: 1,
                    onClick: () => setPerspective("published"),
                    padding: 3,
                    pressed: perspective === "published",
                    tone: PERSPECTIVE_TONES.published,
                    children: /* @__PURE__ */ jsxRuntime.jsxs(ui.Flex, { align: "flex-start", gap: 3, children: [
                      /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { flex: "none", children: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, children: react.createElement(PERSPECTIVE_ICONS.published) }) }),
                      /* @__PURE__ */ jsxRuntime.jsxs(ui.Stack, { flex: 1, space: 2, children: [
                        /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, weight: "medium", children: t(PERSPECTIVE_TITLE_KEY.published) }),
                        /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { muted: !0, size: 1, children: t("preview-frame.perspective.published.text") })
                      ] }),
                      /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { flex: "none", children: /* @__PURE__ */ jsxRuntime.jsx(
                        ui.Text,
                        {
                          muted: !0,
                          size: 1,
                          style: {
                            opacity: perspective === "published" ? 1 : 0
                          },
                          children: /* @__PURE__ */ jsxRuntime.jsx(icons.CheckmarkIcon, {})
                        }
                      ) })
                    ] })
                  }
                )
              ] }),
              popover: {
                animate: !0,
                constrainSize: !0,
                placement: "bottom",
                portal: !0
              }
            }
          ) }),
          /* @__PURE__ */ jsxRuntime.jsx(ui.Flex, { align: "center", flex: "none", gap: 1, children: /* @__PURE__ */ jsxRuntime.jsx(
            ui.Tooltip,
            {
              animate: !0,
              content: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, children: t("preview-frame.viewport-button.tooltip", {
                context: viewport === "desktop" ? "narrow" : "full"
              }) }),
              fallbackPlacements: ["bottom-start"],
              padding: 2,
              placement: "bottom",
              portal: !0,
              children: /* @__PURE__ */ jsxRuntime.jsx(
                ui.Button,
                {
                  "aria-label": t("preview-frame.viewport-button.aria-label"),
                  fontSize: 1,
                  icon: viewport === "desktop" ? icons.MobileDeviceIcon : icons.DesktopIcon,
                  mode: "bleed",
                  onClick: toggleViewportSize,
                  padding: 2
                }
              )
            }
          ) }),
          canSharePreviewAccess && /* @__PURE__ */ jsxRuntime.jsx(ui.Flex, { align: "center", flex: "none", gap: 1, paddingX: 1, children: /* @__PURE__ */ jsxRuntime.jsx(
            SharePreviewMenu,
            {
              canToggleSharePreviewAccess,
              canUseSharedPreviewAccess,
              previewLocationRoute,
              initialUrl,
              perspective
            }
          ) })
        ] }) }),
        /* @__PURE__ */ jsxRuntime.jsx(ui.Card, { flex: 1, tone: "transparent", children: /* @__PURE__ */ jsxRuntime.jsxs(
          ui.Flex,
          {
            align: "center",
            height: "fill",
            justify: "center",
            padding: viewport === "desktop" ? 0 : 2,
            sizing: "border",
            style: {
              position: "relative",
              cursor: iframeIsBusy ? "wait" : void 0
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { children: !somethingIsWrong && !loading && !refreshing && showOverlaysConnectionStatus && !continueAnyway ? /* @__PURE__ */ jsxRuntime.jsx(
                MotionFlex,
                {
                  initial: "initial",
                  animate: "animate",
                  exit: "exit",
                  variants: spinnerVariants,
                  justify: "center",
                  align: "center",
                  style: {
                    inset: "0",
                    position: "absolute",
                    backdropFilter: timedOut ? "blur(16px) saturate(0.5) grayscale(0.5)" : "blur(2px)",
                    transition: "backdrop-filter 0.2s ease-in-out",
                    // @TODO Because of Safari we have to do this
                    WebkitBackdropFilter: timedOut ? "blur(16px) saturate(0.5) grayscale(0.5)" : "blur(2px)",
                    WebkitTransition: "-webkit-backdrop-filter 0.2s ease-in-out",
                    zIndex: 1
                  },
                  children: /* @__PURE__ */ jsxRuntime.jsxs(
                    ui.Flex,
                    {
                      style: { ...sizes[viewport] },
                      justify: "center",
                      align: "center",
                      direction: "column",
                      gap: 4,
                      children: [
                        timedOut && /* @__PURE__ */ jsxRuntime.jsx(
                          ui.Button,
                          {
                            disabled: !0,
                            fontSize: 1,
                            mode: "ghost",
                            text: t("preview-frame.continue-button.text"),
                            style: { opacity: 0 }
                          }
                        ),
                        /* @__PURE__ */ jsxRuntime.jsx(
                          ui.Card,
                          {
                            radius: 2,
                            tone: timedOut ? "caution" : "inherit",
                            padding: 4,
                            shadow: 1,
                            children: /* @__PURE__ */ jsxRuntime.jsxs(ui.Flex, { justify: "center", align: "center", direction: "column", gap: 4, children: [
                              /* @__PURE__ */ jsxRuntime.jsx(ui.Spinner, { muted: !0 }),
                              /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { muted: !0, size: 1, children: timedOut ? t("preview-frame.status", { context: "timeout" }) : t("preview-frame.status", { context: "connecting" }) })
                            ] })
                          }
                        ),
                        timedOut && /* @__PURE__ */ jsxRuntime.jsx(
                          ui.Button,
                          {
                            fontSize: 1,
                            tone: "critical",
                            onClick: handleContinueAnyway,
                            text: t("preview-frame.continue-button.text")
                          }
                        )
                      ]
                    }
                  )
                }
              ) : (loading || overlaysConnection === "connecting" && iframe.status !== "refreshing") && !continueAnyway ? /* @__PURE__ */ jsxRuntime.jsx(
                MotionFlex,
                {
                  initial: "initial",
                  animate: "animate",
                  exit: "exit",
                  variants: spinnerVariants,
                  justify: "center",
                  align: "center",
                  style: {
                    inset: "0",
                    position: "absolute"
                    // boxShadow: '0 0 0 1px var(--card-shadow-outline-color)',
                  },
                  children: /* @__PURE__ */ jsxRuntime.jsxs(
                    ui.Flex,
                    {
                      style: { ...sizes[viewport] },
                      justify: "center",
                      align: "center",
                      direction: "column",
                      gap: 4,
                      children: [
                        /* @__PURE__ */ jsxRuntime.jsx(ui.Spinner, { muted: !0 }),
                        /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { muted: !0, size: 1, children: t("preview-frame.status", { context: "loading" }) })
                      ]
                    }
                  )
                }
              ) : somethingIsWrong && !continueAnyway ? /* @__PURE__ */ jsxRuntime.jsx(
                MotionFlex,
                {
                  initial: "initial",
                  animate: "animate",
                  exit: "exit",
                  variants: errorVariants,
                  justify: "center",
                  align: "center",
                  style: {
                    background: "var(--card-bg-color)",
                    inset: "0",
                    position: "absolute",
                    borderTop: "1px solid transparent",
                    boxShadow: "0 0 0 1px var(--card-border-color)"
                  },
                  children: /* @__PURE__ */ jsxRuntime.jsx(
                    ErrorCard,
                    {
                      flex: 1,
                      message: t("preview-frame.connection.error.text"),
                      onRetry: handleRetry,
                      onContinueAnyway: handleContinueAnyway,
                      children: devMode && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
                        overlaysConnection !== "connected" && /* @__PURE__ */ jsxRuntime.jsx(ui.Card, { padding: 3, radius: 2, tone: "critical", children: /* @__PURE__ */ jsxRuntime.jsxs(ui.Stack, { space: 3, children: [
                          /* @__PURE__ */ jsxRuntime.jsx(ui.Label, { muted: !0, size: 0, children: t("preview-frame.overlay.connection-status.label") }),
                          /* @__PURE__ */ jsxRuntime.jsx(ui.Code, { size: 1, children: t("channel.status", { context: overlaysConnection }) })
                        ] }) }),
                        loadersConnection !== "connected" && /* @__PURE__ */ jsxRuntime.jsx(ui.Card, { padding: 3, radius: 2, tone: "critical", children: /* @__PURE__ */ jsxRuntime.jsxs(ui.Stack, { space: 3, children: [
                          /* @__PURE__ */ jsxRuntime.jsx(ui.Label, { muted: !0, size: 0, children: t("preview-frame.loader.connection-status.label") }),
                          /* @__PURE__ */ jsxRuntime.jsx(ui.Code, { size: 1, children: t("channel.status", { context: loadersConnection }) })
                        ] }) })
                      ] })
                    }
                  )
                }
              ) : null }),
              /* @__PURE__ */ jsxRuntime.jsx(
                IFrame,
                {
                  animate: iframeAnimations,
                  initial: ["background"],
                  onLoad: onIFrameLoad,
                  preventClick: preventIframeInteraction,
                  ref,
                  src: initialUrl.toString(),
                  variants: iframeVariants
                }
              )
            ]
          }
        ) })
      ] }) });
    }
  )
);
PreviewFrame.displayName = "Memo(ForwardRef(PreviewFrame))";
const sizes = {
  desktop: {
    width: "100%",
    height: "100%"
  },
  mobile: {
    width: 375,
    height: 650
  }
}, spinnerVariants = {
  initial: { opacity: 1 },
  animate: { opacity: [0, 0, 1] },
  exit: { opacity: [1, 0, 0] }
}, errorVariants = {
  initial: { opacity: 1 },
  animate: { opacity: [0, 0, 1] },
  exit: { opacity: [1, 0, 0] }
}, iframeVariants = {
  desktop: {
    ...sizes.desktop,
    boxShadow: "0 0 0 0px var(--card-border-color)"
  },
  mobile: {
    ...sizes.mobile,
    boxShadow: "0 0 0 1px var(--card-border-color)"
  },
  background: {
    opacity: 0,
    scale: 1
  },
  idle: {
    scale: 1
  },
  reloading: {
    scale: [1, 1, 1, 0.98]
  },
  active: {
    opacity: [0, 0, 1],
    scale: 1
  },
  timedOut: {
    opacity: [0, 0, 1]
  }
};
function useEffectOnChange(value, callback, dependencies, initialValue, comparator) {
  const previousValueRef = react.useRef(initialValue), _callback = react.useCallback(callback, dependencies);
  react.useEffect(() => {
    const prev = previousValueRef.current;
    if (previousValueRef.current = value, value !== prev)
      return _callback(value, prev);
  }, [_callback, comparator, value]);
}
const RevisionSwitcher = function(props) {
  const { documentId, documentType, navigate, perspective, documentRevision } = props, editState = sanity.useEditState(documentId, documentType);
  return useEffectOnChange(
    perspective,
    (value) => {
      let rev;
      if (value === "published" && editState.published) {
        const { _updatedAt, _rev } = editState.published;
        rev = `${_updatedAt}/${_rev}`;
      }
      documentRevision !== rev && navigate({}, { rev }, !0);
    },
    [editState, navigate, documentRevision]
  ), null;
};
let warnedAboutCrossDatasetReference = !1;
function useDocumentsOnPage(perspective, frameStateRef) {
  if (perspective !== "published" && perspective !== "previewDrafts")
    throw new Error(`Invalid perspective: ${perspective}`);
  const [published, setPublished] = react.useState({}), [previewDrafts, setPreviewDrafts] = react.useState({}), urlRef = react.useRef(""), setDocumentsOnPage = react.useCallback(
    (key, perspective2, sourceDocuments = []) => {
      const documents = sourceDocuments.filter((sourceDocument) => "_projectId" in sourceDocument && sourceDocument._projectId ? (warnedAboutCrossDatasetReference || (console.warn(
        "Cross dataset references are not supported yet, ignoring source document",
        sourceDocument
      ), warnedAboutCrossDatasetReference = !0), !1) : sourceDocument);
      (perspective2 === "published" ? setPublished : setPreviewDrafts)((cache) => {
        const next = {};
        for (const document2 of documents)
          next[document2._id] = document2;
        if (urlRef.current !== frameStateRef.current.url)
          return urlRef.current = frameStateRef.current.url, { [key]: next };
        const prev = cache[key];
        return isEqual__default.default(prev, next) ? cache : { ...cache, [key]: next };
      });
    },
    [frameStateRef]
  );
  return [react.useMemo(() => {
    const uniqueDocuments = Object.values(perspective === "published" ? published : previewDrafts).reduce((acc, cache) => (Object.values(cache).forEach((doc) => {
      acc[doc._id] = doc;
    }), acc), {});
    return Object.values(uniqueDocuments);
  }, [perspective, previewDrafts, published]), setDocumentsOnPage];
}
function fnOrObj(arg, context) {
  return arg instanceof Function ? arg(context) : arg;
}
function getQueryFromResult(resolver, context) {
  if (resolver.resolve) {
    const filter = resolver.resolve(context)?.filter;
    return filter ? `*[${filter}][0]{_id, _type}` : void 0;
  }
  return "type" in resolver ? `*[_type == "${resolver.type}"][0]{_id, _type}` : `*[${fnOrObj(resolver.filter, context)}][0]{_id, _type}`;
}
function getParamsFromResult(resolver, context) {
  return resolver.resolve ? resolver.resolve(context)?.params ?? context.params : "type" in resolver ? {} : fnOrObj(resolver.params, context) ?? context.params;
}
function getRouteContext(route, url) {
  const routes = Array.isArray(route) ? route : [route];
  for (route of routes) {
    let origin, path = route;
    if (typeof route == "string")
      try {
        const absolute = new URL(route);
        origin = absolute.origin, path = absolute.pathname;
      } catch {
      }
    if (!(origin && url.origin !== origin))
      try {
        const result = pathToRegexp.match(path, { decode: decodeURIComponent })(url.pathname);
        if (result) {
          const { params, path: path2 } = result;
          return { origin, params, path: path2 };
        }
      } catch {
        throw new Error(`"${route}" is not a valid route pattern`);
      }
  }
}
function useMainDocument(props) {
  const { navigate, navigationHistory, path, previewUrl, resolvers = [] } = props, { state: routerState } = router.useRouter(), client = sanity.useClient({ apiVersion: index.API_VERSION }), [mainDocumentState, setMainDocumentState] = react.useState(
    void 0
  ), mainDocumentIdRef = react.useRef(void 0), url = react.useMemo(() => {
    const relativeUrl = path || routerState._searchParams?.find(([key]) => key === "preview")?.[1] || "", base = typeof previewUrl == "string" ? previewUrl : typeof previewUrl == "object" && previewUrl?.origin || location.origin;
    return new URL(relativeUrl, base);
  }, [path, previewUrl, routerState._searchParams]), clearState = react.useCallback(() => {
    setMainDocumentState(void 0), mainDocumentIdRef.current = void 0;
  }, []);
  return react.useEffect(() => {
    if (resolvers.length && url) {
      let result;
      for (const resolver of resolvers) {
        const context = getRouteContext(resolver.route, url);
        if (context) {
          result = { context, resolver };
          break;
        }
      }
      if (result) {
        const query = getQueryFromResult(result.resolver, result.context), params = getParamsFromResult(result.resolver, result.context);
        if (query) {
          const controller = new AbortController(), options = {
            perspective: "previewDrafts",
            signal: controller.signal
          };
          return client.fetch(query, params, options).then((doc) => {
            (!doc || mainDocumentIdRef.current !== doc._id) && (setMainDocumentState({
              document: doc,
              path: url.pathname
            }), mainDocumentIdRef.current = doc?._id, navigationHistory.at(-1)?.id === navigationHistory.at(-2)?.id && navigate?.({
              id: doc?._id,
              type: doc?._type
            }));
          }).catch((e) => {
            e instanceof Error && e.name === "AbortError" || (setMainDocumentState({ document: void 0, path: url.pathname }), mainDocumentIdRef.current = void 0);
          }), () => {
            controller.abort();
          };
        }
      }
    }
    clearState();
  }, [client, clearState, navigate, navigationHistory, resolvers, url]), mainDocumentState;
}
function parseId(rawId) {
  if (rawId === void 0)
    return;
  const segments = decodeURIComponent(rawId)?.split(".");
  return segments[0] === "drafts" && segments.shift(), segments.join(".");
}
function parsePath(rawPath) {
  if (rawPath !== void 0)
    return csm.studioPath.toString(urlStringToPath(decodeURIComponent(rawPath)));
}
function parseRouterState(state) {
  return {
    id: parseId(state.id),
    path: parsePath(state.path),
    type: state.type
  };
}
function pruneObject(obj) {
  return Object.fromEntries(
    Object.entries(obj).filter(
      ([, value]) => value !== void 0 && value !== "" && value !== null
    )
  );
}
function useParams({
  initialPreviewUrl,
  routerNavigate,
  routerState,
  routerSearchParams,
  frameStateRef
}) {
  const params = react.useMemo(() => {
    const { id, path, type } = parseRouterState(routerState);
    return {
      id,
      type,
      path,
      preview: routerSearchParams.preview || `${initialPreviewUrl.pathname}${initialPreviewUrl.search}`,
      perspective: routerSearchParams.perspective,
      viewport: routerSearchParams.viewport,
      inspect: routerSearchParams.inspect,
      rev: routerSearchParams.rev,
      since: routerSearchParams.since,
      template: routerSearchParams.template,
      templateParams: routerSearchParams.templateParams,
      view: routerSearchParams.view,
      // assist
      pathKey: routerSearchParams.pathKey,
      instruction: routerSearchParams.instruction,
      // comments
      comment: routerSearchParams.comment
    };
  }, [routerState, routerSearchParams, initialPreviewUrl]), structureParams = react.useMemo(() => pruneObject({
    inspect: params.inspect,
    path: params.path,
    rev: params.rev,
    since: params.since,
    template: params.template,
    templateParams: params.templateParams,
    view: params.view,
    // assist
    pathKey: params.pathKey,
    instruction: params.instruction,
    // comments
    comment: params.comment
  }), [
    params.comment,
    params.inspect,
    params.instruction,
    params.path,
    params.pathKey,
    params.rev,
    params.since,
    params.template,
    params.templateParams,
    params.view
  ]), searchParams = react.useMemo(() => pruneObject({
    perspective: params.perspective,
    preview: params.preview,
    viewport: params.viewport
  }), [params.perspective, params.preview, params.viewport]), routerStateRef = react.useRef(routerState);
  react.useEffect(() => {
    routerStateRef.current = routerState;
  }, [routerState]);
  const [navigationHistory, setNavigationHistory] = react.useState([routerState]);
  return {
    navigate: react.useCallback(
      (nextState, nextSearchState = {}, forceReplace) => {
        nextState.id && (nextState.id = sanity.getPublishedId(nextState.id));
        const { _searchParams: routerSearchParams2, ...routerState2 } = routerStateRef.current, routerSearchState = (routerSearchParams2 || []).reduce(
          (acc, [key, value]) => (acc[key] = value, acc),
          {}
        ), state = pruneObject({
          ...routerState2,
          ...nextState
        }), searchState = pruneObject({
          ...routerSearchState,
          ...nextSearchState
        });
        routerState2.id !== state.id && (delete searchState.template, delete searchState.templateParams), state._searchParams = Object.entries(searchState).reduce(
          (acc, [key, value]) => [...acc, [key, value]],
          []
        );
        const replace = forceReplace ?? searchState.preview === frameStateRef.current.url;
        setNavigationHistory((prev) => [...prev, state]), routerNavigate(state, { replace });
      },
      [routerNavigate, frameStateRef]
    ),
    navigationHistory,
    params,
    searchParams,
    structureParams
  };
}
function usePreviewUrl(previewUrl, toolName, studioPreviewPerspective, previewSearchParam, canCreateUrlPreviewSecrets) {
  const client = sanity.useClient({ apiVersion: index.API_VERSION }), workspace = sanity.useActiveWorkspace(), basePath = workspace?.activeWorkspace?.basePath || "/", workspaceName = workspace?.activeWorkspace?.name || "default", deps = useSuspendCacheKeys(toolName, basePath, workspaceName, previewSearchParam), previewUrlSecret = usePreviewUrlSecret(
    canCreateUrlPreviewSecrets && typeof previewUrl == "object" || typeof previewUrl == "function",
    deps
  );
  return suspendReact.suspend(async () => {
    if (typeof previewUrl == "string") {
      const resolvedUrl2 = new URL(previewUrl, location.origin);
      let resultUrl = resolvedUrl2;
      try {
        if (previewSearchParam) {
          const restoredUrl = new URL(previewSearchParam, resolvedUrl2);
          restoredUrl.origin === resolvedUrl2.origin && (resultUrl = restoredUrl);
        }
      } catch {
      }
      return location.origin === resultUrl.origin && (resultUrl.pathname.startsWith(`${basePath}/`) || resultUrl.pathname === basePath) ? resolvedUrl2 : resultUrl;
    }
    const resolvedUrl = await (typeof previewUrl == "object" ? definePreviewUrl.definePreviewUrl(previewUrl) : previewUrl)({
      client,
      previewUrlSecret,
      studioPreviewPerspective,
      previewSearchParam,
      studioBasePath: basePath
    });
    return new URL(resolvedUrl, location.origin);
  }, [...deps, previewUrlSecret]);
}
const resolveUUID = Symbol();
function useSuspendCacheKeys(toolName, basePath, workspaceName, previewSearchParam) {
  const [cachedPreviewSearchParam, setCachedPreviewSearchParam] = react.useState(
    () => previewSearchParam || ""
  ), timeoutRef = react.useRef(0);
  react.useEffect(() => {
    if (cachedPreviewSearchParam && previewSearchParam)
      return window.clearTimeout(timeoutRef.current), () => {
        timeoutRef.current = window.setTimeout(() => {
          setCachedPreviewSearchParam("");
        }, 100);
      };
  }, [cachedPreviewSearchParam, previewSearchParam]);
  const currentUser = sanity.useCurrentUser();
  return react.useMemo(
    () => [
      // Cache based on a few specific conditions
      "@sanity/presentation",
      basePath,
      workspaceName,
      toolName,
      currentUser?.id,
      resolveUUID,
      cachedPreviewSearchParam
    ],
    [basePath, currentUser?.id, toolName, workspaceName, cachedPreviewSearchParam]
  );
}
function usePreviewUrlSecret(enabled, deps) {
  const client = sanity.useClient({ apiVersion: index.API_VERSION }), currentUser = sanity.useCurrentUser(), [secretLastExpiredAt, setSecretLastExpiredAt] = react.useState(""), previewUrlSecret = enabled ? suspendReact.suspend(async () => await createSecret.createPreviewSecret(
    client,
    "@sanity/presentation",
    typeof window > "u" ? "" : location.href,
    currentUser?.id
  ), [...deps, secretLastExpiredAt]) : null;
  return react.useEffect(() => {
    if (!previewUrlSecret) return;
    const timeout = setTimeout(() => {
      react.startTransition(() => setSecretLastExpiredAt(previewUrlSecret.expiresAt.toString()));
    }, previewUrlSecret.expiresAt.getTime() - Date.now());
    return () => clearTimeout(timeout);
  }, [previewUrlSecret]), previewUrlSecret?.secret || null;
}
function useStatus() {
  const [statusMap, setStatusMap] = react.useState(
    /* @__PURE__ */ new Map()
  ), status = react.useMemo(() => {
    const values = Array.from(statusMap.values()), handshaking = values.filter(({ status: status2 }) => status2 === "handshaking");
    return handshaking.length ? handshaking.some(({ hasConnected }) => !hasConnected) ? "connecting" : "reconnecting" : values.find(({ status: status2 }) => status2 === "connected") ? "connected" : "idle";
  }, [statusMap]), setStatusFromEvent = react.useCallback((event) => {
    setStatusMap((prev) => {
      const next = new Map(prev);
      if (event.status === "disconnected")
        next.delete(event.channel);
      else {
        const hasConnected = next.get(event.channel)?.hasConnected || event.status === "connected";
        next.set(event.channel, { status: event.status, hasConnected });
      }
      return next;
    });
  }, []);
  return [status, setStatusFromEvent];
}
const LoaderQueries = react.lazy(() => Promise.resolve().then(function() {
  return require("./LoaderQueries.cjs");
}));
react.lazy(() => Promise.resolve().then(function() {
  return require("./LiveQueries.cjs");
}));
const PostMessageDocuments = react.lazy(() => Promise.resolve().then(function() {
  return require("./PostMessageDocuments.cjs");
})), PostMessageFeatures = react.lazy(() => Promise.resolve().then(function() {
  return require("./PostMessageFeatures.cjs");
})), PostMessageRefreshMutations = react.lazy(() => Promise.resolve().then(function() {
  return require("./PostMessageRefreshMutations.cjs");
})), PostMessagePerspective = react.lazy(() => Promise.resolve().then(function() {
  return require("./PostMessagePerspective.cjs");
})), PostMessagePreviewSnapshots = react.lazy(() => Promise.resolve().then(function() {
  return require("./PostMessagePreviewSnapshots.cjs");
})), PostMessageSchema = react.lazy(() => Promise.resolve().then(function() {
  return require("./PostMessageSchema.cjs");
})), Container = styledComponents.styled(ui.Flex)`
  overflow-x: auto;
`;
function PresentationTool(props) {
  const { canCreateUrlPreviewSecrets, canToggleSharePreviewAccess, canUseSharedPreviewAccess, tool } = props, components = tool.options?.components, _previewUrl = tool.options?.previewUrl, name = tool.name || index.DEFAULT_TOOL_NAME, { unstable_navigator } = components || {}, { navigate: routerNavigate, state: routerState } = router.useRouter(), routerSearchParams = sanity.useUnique(Object.fromEntries(routerState._searchParams || [])), initialPreviewUrl = usePreviewUrl(
    _previewUrl || "/",
    name,
    routerSearchParams.perspective === "published" ? "published" : "previewDrafts",
    routerSearchParams.preview || null,
    canCreateUrlPreviewSecrets
  ), canSharePreviewAccess = react.useMemo(() => _previewUrl && typeof _previewUrl == "object" && "previewMode" in _previewUrl && _previewUrl.previewMode ? _previewUrl.previewMode.shareAccess !== !1 : !1, [_previewUrl]), [devMode] = react.useState(() => {
    const option = tool.options?.devMode;
    return typeof option == "function" ? option() : typeof option == "boolean" ? option : typeof window < "u" && window.location.hostname === "localhost";
  }), targetOrigin = react.useMemo(() => initialPreviewUrl.origin, [initialPreviewUrl.origin]), iframeRef = react.useRef(null), [controller, setController] = react.useState(), [visualEditingComlink, setVisualEditingComlink] = react.useState(
    null
  ), frameStateRef = react.useRef({
    title: void 0,
    url: void 0
  }), {
    navigate: _navigate,
    navigationHistory,
    params,
    searchParams,
    structureParams
  } = useParams({
    initialPreviewUrl,
    routerNavigate,
    routerState,
    routerSearchParams,
    frameStateRef
  }), navigate = react.useMemo(() => debounce(_navigate, 50), [_navigate]), [state, dispatch] = react.useReducer(presentationReducer, {}, presentationReducerInit), perspective = react.useMemo(
    () => params.perspective ? "published" : "previewDrafts",
    [params.perspective]
  ), viewport = react.useMemo(() => params.viewport ? "mobile" : "desktop", [params.viewport]), [documentsOnPage, setDocumentsOnPage] = useDocumentsOnPage(perspective, frameStateRef), projectId = sanity.useProjectId(), dataset = sanity.useDataset(), mainDocumentState = useMainDocument({
    // Prevent flash of content by using immediate navigation
    navigate: _navigate,
    navigationHistory,
    path: params.preview,
    previewUrl: tool.options?.previewUrl,
    resolvers: tool.options?.resolve?.mainDocuments
  }), [overlaysConnection, setOverlaysConnection] = useStatus(), [loadersConnection, setLoadersConnection] = useStatus(), [previewKitConnection, setPreviewKitConnection] = useStatus(), [popups, setPopups] = react.useState(() => /* @__PURE__ */ new Set()), handleOpenPopup = react.useCallback((url) => {
    const source = window.open(url, "_blank");
    source && setPopups((prev) => new Set(prev).add(source));
  }, []);
  react.useEffect(() => {
    const target = iframeRef.current?.contentWindow;
    if (!target || state.iframe.status === "loading") return;
    const controller2 = comlink.createController({ targetOrigin });
    return controller2.addTarget(target), setController(controller2), () => {
      controller2.destroy(), setController(void 0);
    };
  }, [targetOrigin, state.iframe.status]), react.useEffect(() => {
    const unsubs = [];
    if (popups.size && controller)
      for (const source of popups)
        source && "closed" in source && !source.closed && unsubs.push(controller.addTarget(source));
    return () => {
      unsubs.forEach((unsub) => unsub());
    };
  }, [controller, popups]), react.useEffect(() => {
    if (!controller) return;
    const comlink$1 = controller.createConnection(
      {
        name: "presentation",
        heartbeat: !0,
        connectTo: "visual-editing"
      },
      comlink.createChannelMachine().provide({
        actors: createCompatibilityActors()
      })
    );
    comlink$1.on("visual-editing/focus", (data) => {
      "id" in data && navigate({
        type: data.type,
        id: data.id,
        path: data.path
      });
    }), comlink$1.on("visual-editing/navigate", (data) => {
      const { title, url } = data;
      frameStateRef.current.url !== url && navigate({}, { preview: url }), frameStateRef.current = { title, url };
    }), comlink$1.on("visual-editing/meta", (data) => {
      frameStateRef.current.title = data.title;
    }), comlink$1.on("visual-editing/toggle", (data) => {
      dispatch({
        type: ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE,
        enabled: data.enabled
      });
    }), comlink$1.on("visual-editing/documents", (data) => {
      setDocumentsOnPage(
        "visual-editing",
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        data.perspective,
        data.documents
      );
    }), comlink$1.on("visual-editing/refreshing", (data) => {
      data.source === "manual" ? clearTimeout(refreshRef.current) : data.source === "mutation" && dispatch({ type: ACTION_IFRAME_REFRESH });
    }), comlink$1.on("visual-editing/refreshed", () => {
      dispatch({ type: ACTION_IFRAME_LOADED });
    }), comlink$1.onStatus(setOverlaysConnection);
    const stop = comlink$1.start();
    return setVisualEditingComlink(comlink$1), () => {
      stop(), setVisualEditingComlink(null);
    };
  }, [controller, navigate, setDocumentsOnPage, setOverlaysConnection, targetOrigin]), react.useEffect(() => {
    if (!controller) return;
    const comlink$1 = controller.createConnection(
      {
        name: "presentation",
        connectTo: "preview-kit",
        heartbeat: !0
      },
      comlink.createChannelMachine().provide({
        actors: createCompatibilityActors()
      })
    );
    return comlink$1.onStatus(setPreviewKitConnection), comlink$1.on("preview-kit/documents", (data) => {
      data.projectId === projectId && data.dataset === dataset && setDocumentsOnPage(
        "preview-kit",
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        data.perspective,
        data.documents
      );
    }), comlink$1.start();
  }, [controller, dataset, projectId, setDocumentsOnPage, setPreviewKitConnection, targetOrigin]);
  const handleFocusPath = react.useCallback(
    (nextPath) => {
      navigate({ path: csm.studioPath.toString(nextPath) }, {}, !0);
    },
    [navigate]
  ), handlePreviewPath = react.useCallback(
    (nextPath) => {
      const url = new URL(nextPath, initialPreviewUrl.origin), preview = url.pathname + url.search;
      url.origin === initialPreviewUrl.origin && preview !== params.preview && navigate({}, { preview });
    },
    [initialPreviewUrl, params, navigate]
  ), handleStructureParams = react.useCallback(
    (structureParams2) => {
      navigate({}, structureParams2);
    },
    [navigate]
  );
  react.useEffect(() => {
    params.id && params.path ? visualEditingComlink?.post({
      type: "presentation/focus",
      data: { id: params.id, path: params.path }
    }) : visualEditingComlink?.post({ type: "presentation/blur", data: void 0 });
  }, [params.id, params.path, visualEditingComlink]), react.useEffect(() => {
    frameStateRef.current.url && params.preview && frameStateRef.current.url !== params.preview && (frameStateRef.current.url = params.preview, overlaysConnection !== "connected" && iframeRef.current ? iframeRef.current.src = `${targetOrigin}${params.preview}` : visualEditingComlink?.post({
      type: "presentation/navigate",
      data: {
        url: params.preview,
        type: "replace"
      }
    }));
  }, [overlaysConnection, targetOrigin, params.preview, visualEditingComlink]);
  const toggleOverlay = react.useCallback(
    () => visualEditingComlink?.post({ type: "presentation/toggle-overlay", data: void 0 }),
    [visualEditingComlink]
  ), [displayedDocument, setDisplayedDocument] = react.useState(null);
  react.useEffect(() => {
    const handleKeyUp = (e) => {
      isAltKey(e) && toggleOverlay();
    }, handleKeydown = (e) => {
      isAltKey(e) && toggleOverlay(), isHotkey(["mod", "\\"], e) && toggleOverlay();
    };
    return window.addEventListener("keydown", handleKeydown), window.addEventListener("keyup", handleKeyUp), () => {
      window.removeEventListener("keydown", handleKeydown), window.removeEventListener("keyup", handleKeyUp);
    };
  }, [toggleOverlay]);
  const [boundaryElement, setBoundaryElement] = react.useState(null), [{ navigatorEnabled, toggleNavigator }, PresentationNavigator] = usePresentationNavigator({
    unstable_navigator
  }), idRef = react.useRef(params.id);
  react.useEffect(() => {
    params.rev && idRef.current && params.id !== idRef.current && navigate({}, { rev: void 0 }), idRef.current = params.id;
  });
  const refreshRef = react.useRef(), handleRefresh = react.useCallback(
    (fallback2) => {
      if (dispatch({ type: ACTION_IFRAME_REFRESH }), visualEditingComlink) {
        refreshRef.current = window.setTimeout(fallback2, 300), visualEditingComlink.post({
          type: "presentation/refresh",
          data: {
            source: "manual",
            livePreviewEnabled: previewKitConnection === "connected" || loadersConnection === "connected"
          }
        });
        return;
      }
      fallback2();
    },
    [loadersConnection, previewKitConnection, visualEditingComlink]
  ), workspace = sanity.useWorkspace(), getCommentIntent = react.useCallback(
    ({ id, type, path }) => {
      if (frameStateRef.current.url)
        return {
          title: frameStateRef.current.title || frameStateRef.current.url,
          name: "edit",
          params: {
            id,
            path,
            type,
            inspect: index.COMMENTS_INSPECTOR_NAME,
            workspace: workspace.name,
            mode: index.EDIT_INTENT_MODE,
            preview: params.preview
          }
        };
    },
    [params.preview, workspace.name]
  ), setViewport = react.useCallback(
    (next) => {
      navigate({}, { viewport: next === "desktop" ? void 0 : "mobile" }, !0);
    },
    [navigate]
  ), setPerspective = react.useCallback(
    (next) => {
      navigate({}, { perspective: next === "previewDrafts" ? void 0 : next });
    },
    [navigate]
  );
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
    /* @__PURE__ */ jsxRuntime.jsx(
      PresentationProvider,
      {
        devMode,
        name,
        navigate,
        params,
        searchParams,
        structureParams,
        children: /* @__PURE__ */ jsxRuntime.jsx(PresentationNavigateProvider, { navigate, children: /* @__PURE__ */ jsxRuntime.jsx(PresentationParamsProvider, { params, children: /* @__PURE__ */ jsxRuntime.jsx(Container, { height: "fill", children: /* @__PURE__ */ jsxRuntime.jsxs(Panels, { children: [
          /* @__PURE__ */ jsxRuntime.jsx(PresentationNavigator, {}),
          /* @__PURE__ */ jsxRuntime.jsx(
            Panel,
            {
              id: "preview",
              minWidth: 325,
              defaultSize: navigatorEnabled ? 50 : 75,
              order: 3,
              children: /* @__PURE__ */ jsxRuntime.jsx(ui.Flex, { direction: "column", flex: 1, height: "fill", ref: setBoundaryElement, children: /* @__PURE__ */ jsxRuntime.jsx(ui.BoundaryElementProvider, { element: boundaryElement, children: /* @__PURE__ */ jsxRuntime.jsx(
                PreviewFrame,
                {
                  canSharePreviewAccess,
                  canToggleSharePreviewAccess,
                  canUseSharedPreviewAccess,
                  dispatch,
                  iframe: state.iframe,
                  initialUrl: initialPreviewUrl,
                  loadersConnection,
                  navigatorEnabled,
                  onPathChange: handlePreviewPath,
                  onRefresh: handleRefresh,
                  openPopup: handleOpenPopup,
                  overlaysConnection,
                  previewUrl: params.preview,
                  perspective,
                  ref: iframeRef,
                  setPerspective,
                  setViewport,
                  targetOrigin,
                  toggleNavigator,
                  toggleOverlay,
                  viewport,
                  visualEditing: state.visualEditing
                }
              ) }) })
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(
            PresentationContent,
            {
              documentId: params.id,
              documentsOnPage,
              documentType: params.type,
              getCommentIntent,
              mainDocumentState,
              onFocusPath: handleFocusPath,
              onStructureParams: handleStructureParams,
              searchParams,
              setDisplayedDocument,
              structureParams
            }
          )
        ] }) }) }) })
      }
    ),
    controller && /* @__PURE__ */ jsxRuntime.jsx(react.Suspense, { children: /* @__PURE__ */ jsxRuntime.jsx(
      LoaderQueries,
      {
        controller,
        perspective,
        liveDocument: displayedDocument,
        onDocumentsOnPage: setDocumentsOnPage,
        onLoadersConnection: setLoadersConnection,
        documentsOnPage
      }
    ) }),
    visualEditingComlink && params.id && params.type && /* @__PURE__ */ jsxRuntime.jsx(react.Suspense, { children: /* @__PURE__ */ jsxRuntime.jsx(
      PostMessageRefreshMutations,
      {
        comlink: visualEditingComlink,
        id: params.id,
        type: params.type,
        loadersConnection,
        previewKitConnection
      }
    ) }),
    visualEditingComlink && /* @__PURE__ */ jsxRuntime.jsx(react.Suspense, { children: /* @__PURE__ */ jsxRuntime.jsx(PostMessageSchema, { comlink: visualEditingComlink, perspective }) }),
    visualEditingComlink && documentsOnPage.length > 0 && /* @__PURE__ */ jsxRuntime.jsx(react.Suspense, { children: /* @__PURE__ */ jsxRuntime.jsx(
      PostMessagePreviewSnapshots,
      {
        comlink: visualEditingComlink,
        perspective,
        refs: documentsOnPage
      }
    ) }),
    visualEditingComlink && /* @__PURE__ */ jsxRuntime.jsx(react.Suspense, { children: /* @__PURE__ */ jsxRuntime.jsx(PostMessageDocuments, { comlink: visualEditingComlink }) }),
    visualEditingComlink && /* @__PURE__ */ jsxRuntime.jsx(react.Suspense, { children: /* @__PURE__ */ jsxRuntime.jsx(PostMessageFeatures, { comlink: visualEditingComlink }) }),
    visualEditingComlink && /* @__PURE__ */ jsxRuntime.jsx(react.Suspense, { children: /* @__PURE__ */ jsxRuntime.jsx(PostMessagePerspective, { comlink: visualEditingComlink, perspective }) }),
    params.id && params.type && /* @__PURE__ */ jsxRuntime.jsx(
      RevisionSwitcher,
      {
        documentId: params.id,
        documentRevision: params.rev,
        documentType: params.type,
        navigate,
        perspective
      }
    )
  ] });
}
function PresentationToolGrantsCheck(props) {
  const { t } = sanity.useTranslation(index.presentationLocaleNamespace), { previewUrl } = props.tool.options ?? {}, { push: pushToast } = ui.useToast(), willGeneratePreviewUrlSecret = typeof previewUrl == "object" || typeof previewUrl == "function", grantsStore = sanity.useGrantsStore(), [previewAccessSharingCreatePermission, setCreateAccessSharingPermission] = react.useState(null), [previewAccessSharingUpdatePermission, setUpdateAccessSharingPermission] = react.useState(null), [previewAccessSharingReadPermission, setReadAccessSharingPermission] = react.useState(null), [previewUrlSecretPermission, setPreviewUrlSecretPermission] = react.useState(null);
  react.useEffect(() => {
    if (!willGeneratePreviewUrlSecret) return;
    const previewCreateAccessSharingPermissionSubscription = grantsStore.checkDocumentPermission("create", { _id: constants.schemaIdSingleton, _type: constants.schemaTypeSingleton }).subscribe(setCreateAccessSharingPermission), previewUpdateAccessSharingPermissionSubscription = grantsStore.checkDocumentPermission("update", { _id: constants.schemaIdSingleton, _type: constants.schemaTypeSingleton }).subscribe(setUpdateAccessSharingPermission), previewReadAccessSharingPermissionSubscription = grantsStore.checkDocumentPermission("read", { _id: constants.schemaIdSingleton, _type: constants.schemaTypeSingleton }).subscribe(setReadAccessSharingPermission), previewUrlSecretPermissionSubscription = grantsStore.checkDocumentPermission("create", { _id: `drafts.${uuid.uuid()}`, _type: constants.schemaType }).subscribe(setPreviewUrlSecretPermission);
    return () => {
      previewCreateAccessSharingPermissionSubscription.unsubscribe(), previewUpdateAccessSharingPermissionSubscription.unsubscribe(), previewReadAccessSharingPermissionSubscription.unsubscribe(), previewUrlSecretPermissionSubscription.unsubscribe();
    };
  }, [grantsStore, willGeneratePreviewUrlSecret]);
  const canCreateUrlPreviewSecrets = previewUrlSecretPermission?.granted;
  return react.useEffect(() => {
    if (!willGeneratePreviewUrlSecret || canCreateUrlPreviewSecrets !== !1) return;
    const raf = requestAnimationFrame(
      () => pushToast({
        closable: !0,
        status: "error",
        duration: 3e4,
        title: t("preview-url-secret.missing-grants")
      })
    );
    return () => cancelAnimationFrame(raf);
  }, [canCreateUrlPreviewSecrets, pushToast, t, willGeneratePreviewUrlSecret]), willGeneratePreviewUrlSecret && (!previewAccessSharingCreatePermission || typeof previewAccessSharingCreatePermission.granted > "u" || !previewAccessSharingUpdatePermission || typeof previewAccessSharingUpdatePermission.granted > "u" || !previewUrlSecretPermission || !previewAccessSharingReadPermission || typeof previewAccessSharingReadPermission.granted > "u" || typeof previewUrlSecretPermission.granted > "u") ? /* @__PURE__ */ jsxRuntime.jsx(index.PresentationSpinner, {}) : /* @__PURE__ */ jsxRuntime.jsx(
    PresentationTool,
    {
      ...props,
      canCreateUrlPreviewSecrets: canCreateUrlPreviewSecrets === !0,
      canToggleSharePreviewAccess: previewAccessSharingCreatePermission?.granted === !0 && previewAccessSharingUpdatePermission?.granted === !0,
      canUseSharedPreviewAccess: previewAccessSharingReadPermission?.granted === !0
    }
  );
}
var PresentationToolGrantsCheck$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  default: PresentationToolGrantsCheck
});
exports.PresentationToolGrantsCheck = PresentationToolGrantsCheck$1;
exports.createCompatibilityActors = createCompatibilityActors;
exports.getQueryCacheKey = getQueryCacheKey;
//# sourceMappingURL=PresentationToolGrantsCheck.cjs.map
