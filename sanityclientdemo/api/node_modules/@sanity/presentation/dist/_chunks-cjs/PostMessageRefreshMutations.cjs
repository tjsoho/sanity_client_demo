"use strict";
var jsxRuntime = require("react/jsx-runtime"), react = require("react"), sanity = require("sanity");
function PostMessageRefreshMutations(props) {
  const { comlink, type, previewKitConnection, loadersConnection } = props, id = react.useMemo(() => sanity.getPublishedId(props.id), [props.id]), { draft, published, ready } = sanity.useEditState(id, type, "low"), livePreviewEnabled = previewKitConnection === "connected" || loadersConnection === "connected";
  return ready && draft || published ? /* @__PURE__ */ jsxRuntime.jsx(
    PostMessageRefreshMutationsInner,
    {
      comlink,
      draft,
      livePreviewEnabled,
      published
    },
    id
  ) : null;
}
function PostMessageRefreshMutationsInner(props) {
  const { comlink, draft, published, livePreviewEnabled } = props, [prevDraft, setPrevDraft] = react.useState(draft), [prevPublished, setPrevPublished] = react.useState(published);
  return react.useEffect(() => {
    prevDraft?._rev !== draft?._rev && (react.startTransition(() => setPrevDraft(draft)), draft && comlink?.post({
      type: "presentation/refresh",
      data: {
        source: "mutation",
        livePreviewEnabled,
        document: parseDocument(draft)
      }
    })), prevPublished?._rev !== published?._rev && (react.startTransition(() => setPrevPublished(published)), published && comlink?.post({
      type: "presentation/refresh",
      data: {
        source: "mutation",
        livePreviewEnabled,
        document: parseDocument(published)
      }
    }));
  }, [comlink, draft, livePreviewEnabled, prevDraft?._rev, prevPublished?._rev, published]), null;
}
function parseDocument(document) {
  const { _id, _type, _rev, slug } = document;
  return { _id, _type, _rev, slug };
}
var PostMessageRefreshMutations$1 = react.memo(PostMessageRefreshMutations);
exports.default = PostMessageRefreshMutations$1;
//# sourceMappingURL=PostMessageRefreshMutations.cjs.map
