{"version":3,"file":"_singletons.mjs","sources":["../src/_singletons/context/ActiveWorkspaceMatcherContext.ts","../src/_singletons/context/AddonDatasetContext.ts","../src/_singletons/context/CalendarContext.ts","../src/_singletons/context/ChangeIndicatorTrackerContexts.ts","../src/_singletons/context/ColorSchemeSetValueContext.ts","../src/_singletons/context/ColorSchemeValueContext.ts","../src/_singletons/context/CommentInputContext.ts","../src/_singletons/context/CommentsAuthoringPathContext.ts","../src/_singletons/context/CommentsContext.ts","../src/_singletons/context/CommentsEnabledContext.ts","../src/_singletons/context/CommentsIntentContext.ts","../src/_singletons/context/CommentsOnboardingContext.ts","../src/_singletons/context/CommentsSelectedPathContext.ts","../src/_singletons/context/CommentsUpsellContext.ts","../src/_singletons/context/ConnectorContext.ts","../src/_singletons/context/CopyPasteContext.ts","../src/_singletons/context/DiffContext.ts","../src/_singletons/context/DocumentActionPropsContext.ts","../src/_singletons/context/DocumentChangeContext.ts","../src/_singletons/context/DocumentFieldActionsContext.ts","../src/_singletons/context/DocumentIdContext.ts","../src/_singletons/context/DocumentPaneContext.ts","../src/_singletons/context/DocumentSheetListContext.ts","../src/_singletons/context/FieldActionsContext.ts","../src/_singletons/context/FormBuilderContext.ts","../src/_singletons/context/FormCallbacksContext.ts","../src/_singletons/context/FormFieldPresenceContext.ts","../src/_singletons/context/FormValueContext.ts","../src/_singletons/context/FreeTrialContext.ts","../src/_singletons/context/GetFormValueContext.ts","../src/_singletons/context/HoveredFieldContext.ts","../src/_singletons/context/IsLastPaneContext.ts","../src/_singletons/context/LocaleContext.ts","../src/_singletons/context/MentionUserContext.ts","../src/_singletons/context/NavbarContext.ts","../src/_singletons/context/PaneContext.ts","../src/_singletons/context/PaneLayoutContext.ts","../src/_singletons/context/PaneRouterContext.tsx","../src/_singletons/context/PortableTextMarkersContext.ts","../src/_singletons/context/PortableTextMemberItemsContext.ts","../src/_singletons/context/PresenceContext.ts","../src/_singletons/context/PresenceTrackerContexts.ts","../src/_singletons/context/PreviewCardContext.ts","../src/_singletons/context/ReferenceInputOptionsContext.ts","../src/_singletons/context/ReferenceItemRefContext.ts","../src/_singletons/context/ResourceCacheContext.ts","../src/_singletons/context/ReviewChangesContext.ts","../src/_singletons/context/RouterContext.ts","../src/_singletons/context/RouterHistoryContext.ts","../src/_singletons/context/ScheduledPublishingEnabledContext.ts","../src/_singletons/context/SchedulePublishingUpsellContext.ts","../src/_singletons/context/Schedules.ts","../src/_singletons/context/ScrollContext.ts","../src/_singletons/context/SearchContext.ts","../src/_singletons/context/SortableItemIdContext.ts","../src/_singletons/context/SourceContext.ts","../src/_singletons/context/StructureToolContext.ts","../src/_singletons/context/StudioAnnouncementsContext.ts","../src/_singletons/context/TasksContext.ts","../src/_singletons/context/TasksEnabledContext.ts","../src/_singletons/context/TasksNavigationContext.ts","../src/_singletons/context/TasksUpsellContext.ts","../src/_singletons/context/TreeEditingEnabledContext.ts","../src/_singletons/context/UserColorManagerContext.ts","../src/_singletons/context/ValidationContext.ts","../src/_singletons/context/VirtualizerScrollInstanceContext.ts","../src/_singletons/context/WorkspaceContext.ts","../src/_singletons/context/WorkspacesContext.ts","../src/_singletons/context/ZIndexContext.ts"],"sourcesContent":["import {createContext} from 'sanity/_createContext'\n\nimport type {ActiveWorkspaceMatcherContextValue} from '../../core/studio/activeWorkspaceMatcher/ActiveWorkspaceMatcherContext'\n\n/** @internal */\nexport const ActiveWorkspaceMatcherContext =\n  createContext<ActiveWorkspaceMatcherContextValue | null>(\n    'sanity/_singletons/context/active-workspace-matcher',\n    null,\n  )\n","import {createContext} from 'sanity/_createContext'\n\nimport type {AddonDatasetContextValue} from '../../core/studio/addonDataset/types'\n\n/**\n * @beta\n * @hidden\n */\nexport const AddonDatasetContext = createContext<AddonDatasetContextValue | null>(\n  'sanity/_singletons/context/addon-dataset',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CalendarContextValue} from '../../core/studio/components/navbar/search/components/filters/filter/inputs/date/datePicker/calendar/contexts/CalendarContext'\n\n/**\n * @internal\n */\nexport const CalendarContext = createContext<CalendarContextValue | undefined>(\n  'sanity/_singletons/context/calendar',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {\n  ChangeIndicatorTrackerContextStoreType,\n  ChangeIndicatorTrackerGetSnapshotType,\n} from '../../core/changeIndicators/ChangeIndicatorTrackerContexts'\n\n/** @internal */\nexport const ChangeIndicatorTrackerContextStore =\n  createContext<ChangeIndicatorTrackerContextStoreType>(\n    'sanity/_singletons/context/change-indicator-tracker-store',\n    null,\n  )\n\n/** @internal */\nexport const ChangeIndicatorTrackerContextGetSnapshot =\n  createContext<ChangeIndicatorTrackerGetSnapshotType>(\n    'sanity/_singletons/context/change-indicator-tracker-get-snapshot',\n    null,\n  )\n","import {createContext} from 'sanity/_createContext'\n\nimport type {StudioThemeColorSchemeKey} from '../../core/theme/types'\n\n/**\n * The setter for ColorSchemeValueContext, in a separate context to avoid unnecessary re-renders\n * If set to false then the UI should adjust to reflect that the Studio can't change the color scheme\n * @internal\n */\nexport const ColorSchemeSetValueContext = createContext<\n  ((nextScheme: StudioThemeColorSchemeKey) => void) | false | null\n>('sanity/_singletons/context/color-scheme-set-value', null)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {StudioThemeColorSchemeKey} from '../../core/theme/types'\n\n/**\n * Used to keep track of the internal value, which can be \"system\" in addition to \"light\" and \"dark\"\n * @internal\n */\nexport const ColorSchemeValueContext = createContext<StudioThemeColorSchemeKey | null>(\n  'sanity/_singletons/context/color-scheme-value',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentInputContextValue} from '../../core/comments/components/pte/comment-input/CommentInputProvider'\n\n/**\n * @internal\n */\nexport const CommentInputContext = createContext<CommentInputContextValue | null>(\n  'sanity/_singletons/context/comment-input',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsAuthoringPathContextValue} from '../../core/comments/context/authoring-path/types'\n\n/**\n * @beta\n * @hidden\n */\nexport const CommentsAuthoringPathContext = createContext<CommentsAuthoringPathContextValue | null>(\n  'sanity/_singletons/context/comments-authoring-path',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsContextValue} from '../../core/comments/context/comments/types'\n\n/**\n * @internal\n */\nexport const CommentsContext = createContext<CommentsContextValue | null>(\n  'sanity/_singletons/context/comments',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsEnabledContextValue} from '../../core/comments/context/enabled/types'\n\n// NOTE: We initialize this context with a default value (`enabled: false`)\n// rather than `null` to handle cases where the comments feature's availability\n// isn't explicitly provided by a surrounding provider component. Typically,\n// comments functionality is included by default in all new studio\n// configurations. Therefore, in the absence of a specific provider\n// (CommentsEnabledProvider), we assume that the feature is disabled.\n/**\n * @internal\n */\nexport const CommentsEnabledContext = createContext<CommentsEnabledContextValue>(\n  'sanity/_singletons/context/comments-enabled',\n  {\n    enabled: false,\n    mode: null,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsIntentContextValue} from '../../core/comments/context/intent/types'\n\n/**\n * @internal\n */\nexport const CommentsIntentContext = createContext<CommentsIntentContextValue | undefined>(\n  'sanity/_singletons/context/comments-intent',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsOnboardingContextValue} from '../../core/comments/context/onboarding/types'\n\n/**\n * @internal\n */\nexport const CommentsOnboardingContext = createContext<CommentsOnboardingContextValue | null>(\n  'sanity/_singletons/context/comments-onboarding',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsSelectedPathContextValue} from '../../core/comments/context/selected-path/types'\n\n/**\n * @internal\n */\nexport const CommentsSelectedPathContext = createContext<CommentsSelectedPathContextValue | null>(\n  'sanity/_singletons/context/comments-selected-path',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsUpsellContextValue} from '../../core/comments/context/upsell/types'\n\n/**\n * @internal\n */\nexport const CommentsUpsellContext = createContext<CommentsUpsellContextValue | null>(\n  'sanity/_singletons/context/comments-upsell',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {ConnectorContextValue} from '../../core/changeIndicators/ConnectorContext'\n\n/** @internal */\nexport const ConnectorContext = createContext<ConnectorContextValue>(\n  'sanity/_singletons/context/connector',\n  {\n    isReviewChangesOpen: false,\n    onOpenReviewChanges: () => undefined,\n    onSetFocus: () => undefined,\n  } as ConnectorContextValue,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CopyPasteContextType} from '../../core/studio/copyPaste'\n\n/**\n * @beta\n * @hidden\n */\nexport const CopyPasteContext = createContext<CopyPasteContextType | null>(\n  'sanity/_singletons/context/copy-paste',\n  null,\n)\n","import type {Path} from '@sanity/types'\nimport {createContext} from 'sanity/_createContext'\n\n/** @internal */\nexport const DiffContext = createContext<{\n  path: Path\n}>('sanity/_singletons/context/diff', {\n  path: [],\n})\n","import {createContext} from 'sanity/_createContext'\n\nimport type {DocumentActionProps} from '../../core/config/document/actions'\n\n/**\n * @internal\n */\nexport const DocumentActionPropsContext = createContext<DocumentActionProps | undefined>(\n  'sanity/_singletons/context/document-action-props',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {DocumentChangeContextInstance} from '../../core/field/diff/contexts/DocumentChangeContext'\n\n/** @internal */\nexport const DocumentChangeContext = createContext<DocumentChangeContextInstance | null>(\n  'sanity/_singletons/context/document-change',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {DocumentFieldAction} from '../../core/config/document/fieldActions/types'\n\n/**\n * @internal\n */\nexport interface DocumentFieldActionsContextValue {\n  actions: DocumentFieldAction[]\n}\n\n/**\n * @internal\n */\nexport const DocumentFieldActionsContext = createContext<DocumentFieldActionsContextValue | null>(\n  'sanity/_singletons/context/document-field-actions',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\n/**\n * @internal\n */\nexport interface DocumentIdContextValue {\n  id: string\n}\n\n/**\n * @internal\n */\nexport const DocumentIdContext = createContext<DocumentIdContextValue | null>(\n  'sanity/_singletons/context/document-id',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {DocumentPaneContextValue} from '../../structure/panes/document/DocumentPaneContext'\n\n/** @internal */\nexport const DocumentPaneContext = createContext<DocumentPaneContextValue | null>(\n  'sanity/_singletons/context/document-pane',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {DocumentSheetListContextValue} from '../../structure/panes/documentList/sheetList/DocumentSheetListProvider'\n\n/** @internal */\nexport const DocumentSheetListContext = createContext<DocumentSheetListContextValue | undefined>(\n  'sanity/_singletons/context/document-sheet-list',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {DocumentFieldActionNode} from '../../core/config/document/fieldActions/types'\n\n/** @internal */\nexport interface FieldActionsContextValue {\n  actions: DocumentFieldActionNode[]\n  focused?: boolean\n  hovered: boolean\n  onMouseEnter: () => void\n  onMouseLeave: () => void\n}\n\n/** @internal */\nexport const FieldActionsContext = createContext<FieldActionsContextValue>(\n  'sanity/_singletons/context/field-actions',\n  {\n    actions: [],\n    focused: false,\n    hovered: false,\n    onMouseEnter: () => undefined,\n    onMouseLeave: () => undefined,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {FormBuilderContextValue} from '../../core/form/FormBuilderContext'\n\n/**\n * @internal\n */\nexport const FormBuilderContext = createContext<FormBuilderContextValue | null>(\n  'sanity/_singletons/context/form-builder',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {FormCallbacksValue} from '../../core/form/studio/contexts/FormCallbacks'\n\n/**\n * @internal\n */\nexport const FormCallbacksContext = createContext<FormCallbacksValue | null>(\n  'sanity/_singletons/context/form-callbacks',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {FormNodePresence} from '../../core/presence/types'\n\n/** @internal */\nexport const FormFieldPresenceContext = createContext<FormNodePresence[]>(\n  'sanity/_singletons/context/form-field-presence',\n  [],\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {FormValueContextValue} from '../../core/form/contexts/FormValue'\n\n/**\n * @internal\n */\nexport const FormValueContext = createContext<FormValueContextValue | null>(\n  'sanity/_singletons/context/form-value',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {FreeTrialContextProps} from '../../core/studio/components/navbar/free-trial/FreeTrialContext'\n\n/**\n * @internal\n */\nexport const FreeTrialContext = createContext<FreeTrialContextProps | undefined>(\n  'sanity/_singletons/context/free-trial',\n  undefined,\n)\n","import type {Path} from '@sanity/types'\nimport {createContext} from 'sanity/_createContext'\n\n/**\n * @internal\n * @hidden\n */\nexport type GetFormValueContextValue = (path: Path) => unknown\n\n/**\n * @internal\n */\nexport const GetFormValueContext = createContext<GetFormValueContextValue | null>(\n  'sanity/_singletons/context/get-form-value',\n  null,\n)\n","import type {Path} from '@sanity/types'\nimport {createContext} from 'sanity/_createContext'\n\n/** @internal */\nexport interface HoveredFieldContextValue {\n  hoveredStack: string[]\n  onMouseEnter: (path: Path) => void\n  onMouseLeave: (path: Path) => void\n}\n\n/** @internal */\nexport const HoveredFieldContext = createContext<HoveredFieldContextValue>(\n  'sanity/_singletons/context/hovered-field',\n  {\n    hoveredStack: [],\n    onMouseEnter: () => undefined,\n    onMouseLeave: () => undefined,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\n/**\n * TODO: remove this context when alternate document-specific context are\n * introduced.\n *\n * The following context is used in the structure tool to set the active\n * document if it's the last pane open in the structure tool. This is a\n * temporary context provider that was introduced when the comments and tasks\n * plugins were refactor and decoupled from the structure tool. ideally this\n * should be removed and replaced with a document-specific context that gives\n * plugin authors access to what the `usePane`, `usePaneRouter`, and\n * `useDocumentPane` provides without exposing specifics from the structure tool\n */\n/**\n * @internal\n */\nexport const IsLastPaneContext = createContext<boolean>(\n  'sanity/_singletons/context/is-last-pane',\n  false,\n)\n","import type {i18n} from 'i18next'\nimport {createContext} from 'sanity/_createContext'\n\nimport type {Locale} from '../../core/i18n/types'\n\n/**\n * @internal\n * @hidden\n */\nexport interface LocaleContextValue {\n  locales: Locale[]\n  currentLocale: Locale\n  __internal: {\n    i18next: i18n\n  }\n  changeLocale: (newLocale: string) => Promise<void>\n}\n\n/**\n * @internal\n * @hidden\n */\nexport const LocaleContext = createContext<LocaleContextValue | undefined>(\n  'sanity/_singletons/context/locale',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {MentionUserContextValue} from '../../core/tasks/context/mentionUser/types'\n\n/**\n * @internal\n */\nexport const MentionUserContext = createContext<MentionUserContextValue | null>(\n  'sanity/_singletons/context/mention-user',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {NavbarContextValue} from '../../core/studio/StudioLayout'\n\n/** @internal */\nexport const NavbarContext = createContext<NavbarContextValue>(\n  'sanity/_singletons/context/navbar',\n  {\n    onSearchFullscreenOpenChange: () => '',\n    onSearchOpenChange: () => '',\n    searchFullscreenOpen: false,\n    searchFullscreenPortalEl: null,\n    searchOpen: false,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PaneContextValue} from '../../structure/components/pane/types'\n\n/**\n * @internal\n */\nexport const PaneContext = createContext<PaneContextValue | null>(\n  'sanity/_singletons/context/pane',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PaneLayoutContextValue} from '../../structure/components/pane/types'\n\n/**\n * @internal\n */\nexport const PaneLayoutContext = createContext<PaneLayoutContextValue | null>(\n  'sanity/_singletons/context/pane-layout',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PaneRouterContextValue} from '../../structure/components/paneRouter/types'\n\nfunction missingContext<T = unknown>(): T {\n  throw new Error('Pane is missing router context')\n}\n\n/**\n *\n * @hidden\n * @beta\n */\nexport const PaneRouterContext = createContext<PaneRouterContextValue>(\n  'sanity/_singletons/context/pane-router',\n  {\n    index: 0,\n    groupIndex: 0,\n    siblingIndex: 0,\n    payload: undefined,\n    params: {},\n    hasGroupSiblings: false,\n    groupLength: 0,\n    routerPanesState: [],\n    BackLink: () => missingContext(),\n    ChildLink: () => missingContext(),\n    ReferenceChildLink: () => missingContext(),\n    handleEditReference: () => missingContext(),\n    ParameterizedLink: () => missingContext(),\n    replaceCurrent: () => missingContext(),\n    closeCurrentAndAfter: () => missingContext(),\n    closeCurrent: () => missingContext(),\n    duplicateCurrent: () => missingContext(),\n    setView: () => missingContext(),\n    setParams: () => missingContext(),\n    setPayload: () => missingContext(),\n    navigateIntent: () => missingContext(),\n    createPathWithParams: () => missingContext(),\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PortableTextMarker} from '../../core/form/types/_transitional'\n\n/**\n * @internal\n */\nexport const PortableTextMarkersContext = createContext<PortableTextMarker[]>(\n  'sanity/_singletons/context/portable-text-markers',\n  [],\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PortableTextMemberItem} from '../../core/form/inputs/PortableText/PortableTextInput'\n\n/**\n * @internal\n */\nexport const PortableTextMemberItemsContext = createContext<PortableTextMemberItem[]>(\n  'sanity/_singletons/context/portable-text-member-items',\n  [],\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {FormNodePresence} from '../../core/presence/types'\n\n/**\n * @internal\n */\nexport const PresenceContext = createContext<FormNodePresence[]>(\n  'sanity/_singletons/context/presence',\n  [],\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {\n  PresenceTrackerContextStoreType,\n  PresenceTrackerGetSnapshotType,\n} from '../../core/presence/overlay/PresenceTrackerContexts'\n\n/** @internal */\nexport const PresenceTrackerContextStore = createContext<PresenceTrackerContextStoreType>(\n  'sanity/_singletons/context/presence-tracker-store',\n  null,\n)\n\n/** @internal */\nexport const PresenceTrackerContextGetSnapshot = createContext<PresenceTrackerGetSnapshotType>(\n  'sanity/_singletons/context/presence-tracker-get-snapshot',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PreviewCardContextValue} from '../../core/components/previewCard/PreviewCard'\n\n/**\n * @internal\n */\nexport const PreviewCardContext = createContext<PreviewCardContextValue>(\n  'sanity/_singletons/context/preview-card',\n  {\n    selected: false,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {ReferenceInputOptions} from '../../core/form/studio/contexts/ReferenceInputOptions'\n\n/**\n * @internal\n */\nexport const ReferenceInputOptionsContext = createContext<ReferenceInputOptions>(\n  'sanity/_singletons/context/reference-input-options',\n  {},\n)\n","/* eslint-disable import/no-duplicates */\nimport type {MutableRefObject} from 'react'\nimport {createContext} from 'sanity/_createContext'\n\n/**\n * @internal\n */\nexport interface ReferenceItemRef {\n  menuRef: MutableRefObject<HTMLDivElement | null>\n  menuButtonRef: MutableRefObject<HTMLButtonElement | null>\n  containerRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * This is a way to store ref of the menu as well as the container of the ReferenceItem\n * so it can be used down the tree for clickOutside handling\n * @internal\n */\nexport const ReferenceItemRefContext = createContext<ReferenceItemRef | null>(\n  'sanity/_singletons/context/reference-item-ref',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {ResourceCache} from '../../core/store/_legacy/ResourceCacheProvider'\n\n/**\n * @internal\n */\nexport const ResourceCacheContext = createContext<ResourceCache | null>(\n  'sanity/_singletons/context/resource-cache',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {ReviewChangesContextValue} from '../../core/form/studio/contexts/reviewChanges/types'\n\n/**\n * @internal\n */\nexport const ReviewChangesContext = createContext<ReviewChangesContextValue | null>(\n  'sanity/_singletons/context/review-changes',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {RouterContextValue} from '../../router/types'\n\n/**\n * @internal\n */\nexport const RouterContext = createContext<RouterContextValue | null>(\n  'sanity/_singletons/context/router',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {RouterHistory} from '../../core/studio/router'\n\n/**\n * Internal use only. Userland should leverage the public `useRouter` APIs.\n * @internal\n */\nexport const RouterHistoryContext = createContext<RouterHistory | null>(\n  'sanity/_singletons/context/router-history',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {ScheduledPublishingEnabledContextValue} from '../../core/scheduledPublishing/tool/contexts/ScheduledPublishingEnabledProvider'\n\n/**\n * @internal\n */\nexport const ScheduledPublishingEnabledContext =\n  createContext<ScheduledPublishingEnabledContextValue | null>(\n    'sanity/_singletons/context/scheduled-publishing-enabled',\n    null,\n  )\n","import {createContext} from 'sanity/_createContext'\n\nimport type {SchedulePublishUpsellContextValue} from '../../core/scheduledPublishing/tool/contexts/SchedulePublishingUpsellProvider'\n\n/**\n * @internal\n */\nexport const SchedulePublishUpsellContext = createContext<SchedulePublishUpsellContextValue>(\n  'sanity/_singletons/context/schedule-publish-upsell',\n  {\n    upsellData: null,\n    handleOpenDialog: () => null,\n    upsellDialogOpen: false,\n    telemetryLogs: {\n      dialogSecondaryClicked: () => null,\n      dialogPrimaryClicked: () => null,\n      panelViewed: () => null,\n      panelDismissed: () => null,\n      panelPrimaryClicked: () => null,\n      panelSecondaryClicked: () => null,\n    },\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {SchedulesContextValue} from '../../core/scheduledPublishing/tool/contexts/schedules'\n\n/**\n * @internal\n */\nexport const SchedulesContext = createContext<SchedulesContextValue | undefined>(\n  'sanity/_singletons/context/schedules',\n  undefined,\n)\n","import type {PubSub} from 'nano-pubsub'\nimport {createContext} from 'sanity/_createContext'\n\n/**\n * @internal\n */\nexport const ScrollContext = createContext<null | PubSub<Event>>(\n  'sanity/_singletons/context/scroll',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {SearchContextValue} from '../../core/studio/components/navbar/search/contexts/search/SearchContext'\n\n/**\n * @internal\n */\nexport const SearchContext = createContext<SearchContextValue | undefined>(\n  'sanity/_singletons/context/search',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\n/**\n * @internal\n */\nexport const SortableItemIdContext = createContext<string | null>(\n  'sanity/_singletons/context/sortable-item-id',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {Source} from '../../core/config/types'\n\n/**\n * @internal\n */\nexport const SourceContext = createContext<Source | null>('sanity/_singletons/context/source', null)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {StructureToolContextValue} from '../../structure/types'\n\n/**\n * @internal\n */\nexport const StructureToolContext = createContext<StructureToolContextValue | null>(\n  'sanity/_singletons/context/structure-tool',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {StudioAnnouncementsContextValue} from '../../core/studio/studioAnnouncements/types'\n\n/**\n * @internal\n */\nexport const StudioAnnouncementContext = createContext<StudioAnnouncementsContextValue | undefined>(\n  'sanity/_singletons/context/studioAnnouncements',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {TasksContextValue} from '../../core/tasks/context/tasks/types'\n\n/**\n * @internal\n */\nexport const TasksContext = createContext<TasksContextValue | null>(\n  'sanity/_singletons/context/tasks',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {TasksEnabledContextValue} from '../../core/tasks/context/enabled/types'\n\n// NOTE: We initialize this context with a default value (`enabled: false`)\n// rather than `null` to handle cases where the tasks feature's availability\n// isn't explicitly provided by a surrounding provider component. Typically,\n// Tasks are included by default in all new Studio configurations. Therefore,\n// in the absence of a specific provider (TasksEnabledProvider), we assume that\n// the feature is disabled.\n/**\n * @internal\n */\nexport const TasksEnabledContext = createContext<TasksEnabledContextValue>(\n  'sanity/_singletons/context/tasks-enabled',\n  {\n    enabled: false,\n    mode: null,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {TasksNavigationContextValue} from '../../core/tasks/context/navigation/types'\n\n/**\n * @internal\n */\nexport const TasksNavigationContext = createContext<TasksNavigationContextValue | null>(\n  'sanity/_singletons/context/tasks-navigation',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {TasksUpsellContextValue} from '../../core/tasks/context/upsell/types'\n\n/**\n * @beta\n * @hidden\n */\nexport const TasksUpsellContext = createContext<TasksUpsellContextValue | null>(\n  'sanity/_singletons/context/tasks-upsell',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {TreeEditingEnabledContextValue} from '../../core/form/studio/tree-editing/context/enabled/useTreeEditingEnabled'\n\n/**\n * @internal\n */\nexport const TreeEditingEnabledContext = createContext<TreeEditingEnabledContextValue>(\n  'sanity/_singletons/context/tree-editing-enabled',\n  {\n    enabled: false,\n    legacyEditing: false,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {UserColorManager} from '../../core/user-color/types'\n\n/**\n * @internal\n */\nexport const UserColorManagerContext = createContext<UserColorManager | null>(\n  'sanity/_singletons/context/user-color-manager',\n  null,\n)\n","import type {ValidationMarker} from '@sanity/types'\nimport {createContext} from 'sanity/_createContext'\n\n/**\n * @internal\n */\nexport const ValidationContext = createContext<ValidationMarker[]>(\n  'sanity/_singletons/context/validation',\n  [],\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {VirtualizerScrollInstance} from '../../core/form/inputs/arrays/ArrayOfObjectsInput/List/useVirtualizerScrollInstance'\n\n/**\n * This is used to store the reference to the scroll element for virtualizer\n * @internal\n */\nexport const VirtualizerScrollInstanceContext = createContext<VirtualizerScrollInstance | null>(\n  'sanity/_singletons/context/virtualizer-scroll-instance',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {Workspace} from '../../core/config/types'\n\n/**\n * @internal\n */\nexport const WorkspaceContext = createContext<Workspace | null>(\n  'sanity/_singletons/context/workspace',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {WorkspacesContextValue} from '../../core/studio/workspaces/WorkspacesContext'\n\n/** @internal */\nexport const WorkspacesContext = createContext<WorkspacesContextValue | null>(\n  'sanity/_singletons/context/workspaces',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {ZIndexContextValue} from '../../core/components/zOffsets/types'\n\n/**\n * @internal\n */\nexport const zIndexContextDefaults: ZIndexContextValue = {\n  navbar: 200,\n  navbarPopover: 500000,\n  navbarDialog: 500001,\n  // pane\n  pane: 100,\n  paneHeader: [110, 15000],\n  paneFooter: [120, 20000],\n  paneResizer: [130, 25000],\n  paneDialog: [140, 5000],\n  //\n  popover: 200,\n  modal: 200,\n  movingItem: 10000,\n  drawershade: 1000000,\n  drawer: 1000001,\n  fullscreen: 1200000,\n  toast: [100, 11000],\n  // NOT IN USE\n  portal: 200,\n  dropdown: 200,\n  navbarFixed: 1010,\n  fullscreenEdit: 1050,\n  popoverBackground: 1060,\n  tooltip: 200,\n  modalBackground: 2000,\n  spinner: 3000,\n}\n\n/**\n * TODO: Rename to `ZOffsetsContext`\n *\n * @internal\n */\nexport const ZIndexContext = createContext<ZIndexContextValue>(\n  'sanity/_singletons/context/z-index',\n  zIndexContextDefaults,\n)\n"],"names":[],"mappings":"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"}