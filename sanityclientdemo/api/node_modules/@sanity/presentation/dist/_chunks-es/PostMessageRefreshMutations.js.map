{"version":3,"file":"PostMessageRefreshMutations.js","sources":["../../src/editor/PostMessageRefreshMutations.tsx"],"sourcesContent":["import type {Status} from '@sanity/comlink'\nimport {memo, startTransition, useEffect, useMemo, useState} from 'react'\nimport {type SanityDocument} from 'sanity'\nimport {getPublishedId, useEditState} from '../internals'\nimport type {VisualEditingConnection} from '../types'\n\nexport interface PostMessageRefreshMutationsProps {\n  id: string\n  type: string\n  comlink: VisualEditingConnection\n  previewKitConnection: Status\n  loadersConnection: Status\n}\n\nfunction PostMessageRefreshMutations(props: PostMessageRefreshMutationsProps): React.ReactNode {\n  const {comlink, type, previewKitConnection, loadersConnection} = props\n  const id = useMemo(() => getPublishedId(props.id), [props.id])\n  const {draft, published, ready} = useEditState(id, type, 'low')\n  const livePreviewEnabled =\n    previewKitConnection === 'connected' || loadersConnection === 'connected'\n\n  if ((ready && draft) || published) {\n    return (\n      <PostMessageRefreshMutationsInner\n        key={id}\n        comlink={comlink}\n        draft={draft}\n        livePreviewEnabled={livePreviewEnabled}\n        published={published}\n      />\n    )\n  }\n\n  return null\n}\n\ninterface PostMessageRefreshMutationsInnerProps\n  extends Pick<PostMessageRefreshMutationsProps, 'comlink'> {\n  livePreviewEnabled: boolean\n  draft: SanityDocument | null\n  published: SanityDocument | null\n}\nfunction PostMessageRefreshMutationsInner(props: PostMessageRefreshMutationsInnerProps) {\n  const {comlink, draft, published, livePreviewEnabled} = props\n  const [prevDraft, setPrevDraft] = useState(draft)\n  const [prevPublished, setPrevPublished] = useState(published)\n\n  useEffect(() => {\n    if (prevDraft?._rev !== draft?._rev) {\n      startTransition(() => setPrevDraft(draft))\n      if (draft) {\n        comlink?.post({\n          type: 'presentation/refresh',\n          data: {\n            source: 'mutation',\n            livePreviewEnabled,\n            document: parseDocument(draft),\n          },\n        })\n      }\n    }\n    if (prevPublished?._rev !== published?._rev) {\n      startTransition(() => setPrevPublished(published))\n      if (published) {\n        comlink?.post({\n          type: 'presentation/refresh',\n          data: {\n            source: 'mutation',\n            livePreviewEnabled,\n            document: parseDocument(published),\n          },\n        })\n      }\n    }\n  }, [comlink, draft, livePreviewEnabled, prevDraft?._rev, prevPublished?._rev, published])\n\n  return null\n}\n\nfunction parseDocument(document: SanityDocument & {slug?: {current?: string | null}}): {\n  _id: string\n  _type: string\n  _rev: string\n  slug?: {current?: string | null}\n} {\n  const {_id, _type, _rev, slug} = document\n  return {_id, _type, _rev, slug}\n}\n\nexport default memo(PostMessageRefreshMutations)\n"],"names":[],"mappings":";;;AAcA,SAAS,4BAA4B,OAA0D;AAC7F,QAAM,EAAC,SAAS,MAAM,sBAAsB,kBAAqB,IAAA,OAC3D,KAAK,QAAQ,MAAM,eAAe,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,GACvD,EAAC,OAAO,WAAW,MAAS,IAAA,aAAa,IAAI,MAAM,KAAK;AAIzD,SAAA,SAAS,SAAU,YAEpB;AAAA,IAAC;AAAA,IAAA;AAAA,MAEC;AAAA,MACA;AAAA,MACA,oBARJ,yBAAyB,eAAe,sBAAsB;AAAA,MAS1D;AAAA,IAAA;AAAA,IAJK;AAAA,EASJ,IAAA;AACT;AAQA,SAAS,iCAAiC,OAA8C;AACtF,QAAM,EAAC,SAAS,OAAO,WAAW,uBAAsB,OAClD,CAAC,WAAW,YAAY,IAAI,SAAS,KAAK,GAC1C,CAAC,eAAe,gBAAgB,IAAI,SAAS,SAAS;AAE5D,SAAA,UAAU,MAAM;AACV,eAAW,SAAS,OAAO,SAC7B,gBAAgB,MAAM,aAAa,KAAK,CAAC,GACrC,SACF,SAAS,KAAK;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,QACJ,QAAQ;AAAA,QACR;AAAA,QACA,UAAU,cAAc,KAAK;AAAA,MAC/B;AAAA,IACD,CAAA,IAGD,eAAe,SAAS,WAAW,SACrC,gBAAgB,MAAM,iBAAiB,SAAS,CAAC,GAC7C,aACF,SAAS,KAAK;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,QACJ,QAAQ;AAAA,QACR;AAAA,QACA,UAAU,cAAc,SAAS;AAAA,MACnC;AAAA,IACD,CAAA;AAAA,EAGP,GAAG,CAAC,SAAS,OAAO,oBAAoB,WAAW,MAAM,eAAe,MAAM,SAAS,CAAC,GAEjF;AACT;AAEA,SAAS,cAAc,UAKrB;AACA,QAAM,EAAC,KAAK,OAAO,MAAM,SAAQ;AACjC,SAAO,EAAC,KAAK,OAAO,MAAM,KAAI;AAChC;AAEA,IAAe,gCAAA,KAAK,2BAA2B;"}