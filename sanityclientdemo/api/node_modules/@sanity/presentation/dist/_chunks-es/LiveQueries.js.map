{"version":3,"file":"LiveQueries.js","sources":["../../src/loader/LiveQueries.tsx"],"sourcesContent":["import {\n  createCompatibilityActors,\n  getQueryCacheKey,\n  type LoaderControllerMsg,\n  type LoaderNodeMsg,\n} from '@repo/visual-editing-helpers'\nimport {useQueryParams, useRevalidate} from '@repo/visual-editing-helpers/hooks'\nimport {\n  createClient,\n  type ClientPerspective,\n  type ContentSourceMap,\n  type LiveEventMessage,\n  type QueryParams,\n  type SyncTag,\n} from '@sanity/client'\nimport {applySourceDocuments, getPublishedId} from '@sanity/client/csm'\nimport {\n  createChannelMachine,\n  type ConnectionInstance,\n  type Controller,\n  type StatusEvent,\n} from '@sanity/comlink'\nimport isEqual from 'fast-deep-equal'\n// import {createPreviewSecret} from '@sanity/preview-url-secret/create-secret'\nimport {memo, useDeferredValue, useEffect, useMemo, useState} from 'react'\nimport {\n  useClient,\n  // useCurrentUser,\n  useDataset,\n  useProjectId,\n  type SanityClient,\n  type SanityDocument,\n} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n// import {useEffectEvent} from 'use-effect-event'\nimport {MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL} from '../constants'\nimport type {\n  LiveQueriesState,\n  LiveQueriesStateValue,\n  LoaderConnection,\n  PresentationPerspective,\n} from '../types'\nimport type {DocumentOnPage} from '../useDocumentsOnPage'\n\nexport interface LoaderQueriesProps {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  controller: Controller | undefined\n  perspective: ClientPerspective\n  onLoadersConnection: (event: StatusEvent) => void\n  onDocumentsOnPage: (\n    key: string,\n    perspective: PresentationPerspective,\n    state: DocumentOnPage[],\n  ) => void\n}\n\nexport default function LoaderQueries(props: LoaderQueriesProps): JSX.Element {\n  const {\n    liveDocument: _liveDocument,\n    controller,\n    perspective: activePerspective,\n    onLoadersConnection,\n    onDocumentsOnPage,\n  } = props\n\n  const [comlink, setComlink] = useState<ConnectionInstance<LoaderNodeMsg, LoaderControllerMsg>>()\n  const [liveQueries, setLiveQueries] = useState<LiveQueriesState>({})\n\n  const projectId = useProjectId()\n  const dataset = useDataset()\n\n  useEffect(() => {\n    const interval = setInterval(\n      () =>\n        setLiveQueries((liveQueries) => {\n          if (Object.keys(liveQueries).length < 1) {\n            return liveQueries\n          }\n\n          const now = Date.now()\n          const hasAnyExpired = Object.values(liveQueries).some(\n            (liveQuery) =>\n              liveQuery.heartbeat !== false && now > liveQuery.receivedAt + liveQuery.heartbeat,\n          )\n          if (!hasAnyExpired) {\n            return liveQueries\n          }\n          const next = {} as LiveQueriesState\n          for (const [key, value] of Object.entries(liveQueries)) {\n            if (value.heartbeat !== false && now > value.receivedAt + value.heartbeat) {\n              continue\n            }\n            next[key] = value\n          }\n          return next\n        }),\n      MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n    )\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    if (controller) {\n      const comlink = controller.createConnection<LoaderNodeMsg, LoaderControllerMsg>(\n        {\n          name: 'presentation',\n          connectTo: 'loaders',\n          heartbeat: true,\n        },\n        createChannelMachine<LoaderNodeMsg, LoaderControllerMsg>().provide({\n          actors: createCompatibilityActors<LoaderControllerMsg>(),\n        }),\n      )\n      setComlink(comlink)\n\n      comlink.onStatus(onLoadersConnection)\n\n      comlink.on('loader/documents', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          onDocumentsOnPage(\n            'loaders',\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            data.perspective as unknown as any,\n            data.documents,\n          )\n        }\n      })\n\n      comlink.on('loader/query-listen', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          if (\n            typeof data.heartbeat === 'number' &&\n            data.heartbeat < MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL\n          ) {\n            throw new Error(\n              `Loader query listen heartbeat interval must be at least ${MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL}ms`,\n            )\n          }\n          setLiveQueries((prev) => ({\n            ...prev,\n            [getQueryCacheKey(data.query, data.params)]: {\n              perspective: data.perspective,\n              query: data.query,\n              params: data.params,\n              receivedAt: Date.now(),\n              heartbeat: data.heartbeat ?? false,\n            } satisfies LiveQueriesStateValue,\n          }))\n        }\n      })\n\n      return comlink.start()\n    }\n    return\n  }, [controller, dataset, onDocumentsOnPage, onLoadersConnection, projectId])\n\n  // const currentUser = useCurrentUser()\n  // const handleCreatePreviewUrlSecret = useEffectEvent(\n  //   async ({projectId, dataset}: {projectId: string; dataset: string}) => {\n  //     try {\n  //       // eslint-disable-next-line no-console\n  //       console.log('Creating preview URL secret for ', {projectId, dataset})\n  //       const {secret} = await createPreviewSecret(\n  //         client,\n  //         '@sanity/presentation',\n  //         typeof window === 'undefined' ? '' : location.href,\n  //         currentUser?.id,\n  //       )\n  //       return {secret}\n  //     } catch (err) {\n  //       // eslint-disable-next-line no-console\n  //       console.error('Failed to generate preview URL secret', err)\n  //       return {secret: null}\n  //     }\n  //   },\n  // )\n  // useEffect(() => {\n  //   return comlink?.on('loader/fetch-preview-url-secret', (data) =>\n  //     handleCreatePreviewUrlSecret(data),\n  //   )\n  // }, [comlink, handleCreatePreviewUrlSecret])\n\n  const [syncTagsInUse] = useState(() => new Set<SyncTag[]>())\n  const [lastLiveEventId, setLastLiveEventId] = useState<string | null>(null)\n  const studioClient = useClient({apiVersion: '2023-10-16'})\n  const clientConfig = useMemo(() => studioClient.config(), [studioClient])\n  const client = useMemo(\n    () =>\n      studioClient.withConfig({\n        resultSourceMap: 'withKeyArraySelector',\n      }),\n    [studioClient],\n  )\n  useEffect(() => {\n    if (comlink) {\n      const {projectId, dataset} = clientConfig\n      // @todo - Can this be migrated/deprecated in favour of emitting\n      // `presentation/perspective` at a higher level?\n      comlink.post({\n        type: 'loader/perspective',\n        data: {\n          projectId: projectId!,\n          dataset: dataset!,\n          perspective: activePerspective,\n        },\n      })\n    }\n  }, [comlink, clientConfig, activePerspective])\n\n  const handleSyncTags = useEffectEvent((event: LiveEventMessage) => {\n    const flattenedSyncTags = Array.from(syncTagsInUse).flat()\n    const hasMatchingTags = event.tags.some((tag) => flattenedSyncTags.includes(tag))\n    if (hasMatchingTags) {\n      setLastLiveEventId(event.id)\n    } else {\n      // eslint-disable-next-line no-console\n      console.log('No matching tags found', event.tags, {flattenedSyncTags})\n    }\n  })\n  useEffect(() => {\n    const liveClient = createClient(client.config()).withConfig({\n      // Necessary for the live drafts to work\n      apiVersion: 'vX',\n    })\n    const subscription = liveClient.live\n      .events({includeDrafts: true, tag: 'presentation-loader'})\n      .subscribe({\n        next: (event) => {\n          if (event.type === 'message') {\n            handleSyncTags(event)\n          } else if (event.type === 'restart') {\n            setLastLiveEventId(event.id)\n          } else if (event.type === 'reconnect') {\n            setLastLiveEventId(null)\n          }\n        },\n        // eslint-disable-next-line no-console\n        error: (err) => console.error('Error validating EventSource URL:', err),\n      })\n    return () => subscription.unsubscribe()\n  }, [client, handleSyncTags])\n\n  /**\n   * Defer the liveDocument to avoid unnecessary rerenders on rapid edits\n   */\n  const liveDocument = useDeferredValue(_liveDocument)\n\n  return (\n    <>\n      {Object.entries(liveQueries).map(([key, {query, params, perspective}]) => (\n        <QuerySubscription\n          key={`${key}${perspective}`}\n          projectId={clientConfig.projectId!}\n          dataset={clientConfig.dataset!}\n          perspective={perspective}\n          query={query}\n          params={params}\n          comlink={comlink}\n          client={client}\n          liveDocument={liveDocument}\n          lastLiveEventId={lastLiveEventId}\n          syncTagsInUse={syncTagsInUse}\n        />\n      ))}\n    </>\n  )\n}\n\ninterface SharedProps {\n  /**\n   * The Sanity client to use for fetching data and listening to mutations.\n   */\n  client: SanityClient\n}\n\ninterface QuerySubscriptionProps\n  extends Pick<UseQuerySubscriptionProps, 'client' | 'liveDocument' | 'lastLiveEventId'> {\n  projectId: string\n  dataset: string\n  perspective: ClientPerspective\n  query: string\n  params: QueryParams\n  comlink: LoaderConnection | undefined\n  syncTagsInUse: Set<SyncTag[]>\n}\nfunction QuerySubscriptionComponent(props: QuerySubscriptionProps) {\n  const {\n    projectId,\n    dataset,\n    perspective,\n    query,\n    client,\n    liveDocument,\n    comlink,\n    lastLiveEventId,\n    syncTagsInUse,\n  } = props\n\n  const params = useQueryParams(props.params)\n  const {\n    result,\n    resultSourceMap,\n    syncTags: tags,\n  } = useQuerySubscription({\n    client,\n    liveDocument,\n    params,\n    perspective,\n    query,\n    lastLiveEventId,\n  }) || {}\n\n  const handleQueryChange = useEffectEvent(\n    (\n      comlink: LoaderConnection | undefined,\n      perspective: ClientPerspective,\n      query: string,\n      params: QueryParams,\n      result: unknown,\n      resultSourceMap: ContentSourceMap | undefined,\n      tags: `s1:${string}`[] | undefined,\n    ) => {\n      comlink?.post({\n        type: 'loader/query-change',\n        data: {\n          projectId,\n          dataset,\n          perspective,\n          query,\n          params,\n          result,\n          resultSourceMap,\n          tags,\n        },\n      })\n    },\n  )\n  useEffect(() => {\n    if (resultSourceMap) {\n      handleQueryChange(comlink, perspective, query, params, result, resultSourceMap, tags)\n    }\n    if (Array.isArray(tags)) {\n      syncTagsInUse.add(tags)\n      return () => {\n        syncTagsInUse.delete(tags)\n      }\n    }\n\n    return\n  }, [\n    comlink,\n    handleQueryChange,\n    params,\n    perspective,\n    query,\n    result,\n    resultSourceMap,\n    syncTagsInUse,\n    tags,\n  ])\n\n  return null\n}\nconst QuerySubscription = memo(QuerySubscriptionComponent)\nQuerySubscription.displayName = 'Memo(QuerySubscription)'\n\ninterface UseQuerySubscriptionProps extends Required<Pick<SharedProps, 'client'>> {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  query: string\n  params: QueryParams\n  perspective: ClientPerspective\n  lastLiveEventId: string | null\n}\nfunction useQuerySubscription(props: UseQuerySubscriptionProps) {\n  const {liveDocument, client, query, params, perspective, lastLiveEventId} = props\n  const [snapshot, setSnapshot] = useState<{\n    result: unknown\n    resultSourceMap?: ContentSourceMap\n    syncTags?: SyncTag[]\n    lastLiveEventId: string | null\n  } | null>(null)\n  // Make sure any async errors bubble up to the nearest error boundary\n  const [error, setError] = useState<unknown>(null)\n  if (error) throw error\n\n  const [revalidate, startRefresh] = useRevalidate({\n    // Refresh interval is set to zero as we're using the Live Draft Content API to revalidate queries\n    refreshInterval: 0,\n  })\n  const shouldRefetch =\n    revalidate === 'refresh' ||\n    revalidate === 'inflight' ||\n    lastLiveEventId !== snapshot?.lastLiveEventId\n  useEffect(() => {\n    if (!shouldRefetch) {\n      return\n    }\n\n    let fulfilled = false\n    let fetching = false\n    const controller = new AbortController()\n    // eslint-disable-next-line no-inner-declarations\n    async function effect() {\n      const {signal} = controller\n      fetching = true\n      const {result, resultSourceMap, syncTags} = await client.fetch(query, params, {\n        lastLiveEventId,\n        tag: 'presentation-loader',\n        signal,\n        perspective,\n        filterResponse: false,\n        returnQuery: false,\n      })\n      fetching = false\n\n      if (!signal.aborted) {\n        setSnapshot((prev) => ({\n          result: isEqual(prev?.result, result) ? prev?.result : result,\n          resultSourceMap: isEqual(prev?.resultSourceMap, resultSourceMap)\n            ? prev?.resultSourceMap\n            : resultSourceMap,\n          syncTags: isEqual(prev?.syncTags, syncTags) ? prev?.syncTags : syncTags,\n          lastLiveEventId,\n        }))\n        fulfilled = true\n      }\n    }\n    const onFinally = startRefresh()\n    effect()\n      .catch((error) => {\n        fetching = false\n        if (error.name !== 'AbortError') {\n          setError(error)\n        }\n      })\n      .finally(onFinally)\n    return () => {\n      if (!fulfilled && !fetching) {\n        controller.abort()\n      }\n    }\n  }, [client, lastLiveEventId, params, perspective, query, shouldRefetch, startRefresh])\n\n  const {result, resultSourceMap, syncTags} = snapshot ?? {}\n  return useMemo(() => {\n    if (liveDocument && resultSourceMap) {\n      return {\n        result: turboChargeResultIfSourceMap(liveDocument, result, perspective, resultSourceMap),\n        resultSourceMap,\n        syncTags,\n      }\n    }\n    return {result, resultSourceMap, syncTags}\n  }, [liveDocument, perspective, result, resultSourceMap, syncTags])\n}\n\nexport function turboChargeResultIfSourceMap<T = unknown>(\n  liveDocument: Partial<SanityDocument> | null | undefined,\n  result: T,\n  perspective: ClientPerspective,\n  resultSourceMap?: ContentSourceMap,\n): T {\n  if (perspective === 'raw') {\n    throw new Error('turboChargeResultIfSourceMap does not support raw perspective')\n  }\n  return applySourceDocuments(\n    result,\n    resultSourceMap,\n    (sourceDocument) => {\n      // If there's a displayed document, always prefer it\n      if (\n        // If _projectId is set, it's a cross dataset reference and we should skip it\n        !sourceDocument._projectId &&\n        liveDocument?._id &&\n        getPublishedId(liveDocument._id) === getPublishedId(sourceDocument._id)\n      ) {\n        return liveDocument\n      }\n      return undefined\n    },\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (changedValue: any, {previousValue}) => {\n      if (typeof changedValue === 'number' && typeof previousValue === 'string') {\n        // If the string() function was used in the query, we need to convert the source value to a string as well\n        return `${changedValue}`\n      }\n      return changedValue\n    },\n    perspective,\n  )\n}\n"],"names":["liveQueries","comlink","projectId","dataset","perspective","query","params","result","resultSourceMap","tags","syncTags","error"],"mappings":"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"}