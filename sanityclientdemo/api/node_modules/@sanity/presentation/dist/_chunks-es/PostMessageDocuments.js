import { memo, useEffect } from "react";
import { filter, shareReplay, first, merge } from "rxjs";
import { useClient } from "sanity";
import { API_VERSION } from "./index.js";
const PostMessageDocuments = (props) => {
  const { comlink } = props, client = useClient({ apiVersion: API_VERSION });
  return useEffect(() => {
    const listener = client.listen(
      '*[!(_id in path("_.**"))]',
      {},
      {
        effectFormat: "mendoza",
        events: ["welcome", "mutation", "reconnect"],
        includePreviousRevision: !1,
        includeResult: !1,
        tag: "presentation-documents",
        visibility: "transaction"
      }
    ).pipe(
      filter(
        (event) => event.type === "welcome" || event.type === "reconnect" || event.type === "mutation"
      )
    ), welcome = listener.pipe(
      filter((event) => event.type === "welcome"),
      shareReplay({ bufferSize: 1, refCount: !1 })
    ), unsubscribe = comlink.on("visual-editing/snapshot-welcome", async () => ({ event: await new Promise((resolve) => {
      welcome.pipe(first()).subscribe((event2) => {
        resolve(event2);
      });
    }) })), reconnect = listener.pipe(
      filter((event) => event.type === "reconnect")
    ), mutations = listener.pipe(
      filter((event) => event.type === "mutation")
    ), events = merge(
      /**
       * @deprecated remove 'welcome' here and switch to explict welcome message fetching at next major
       */
      welcome,
      mutations,
      reconnect
    ).subscribe((event) => {
      comlink.post({ type: "presentation/snapshot-event", data: { event } });
    });
    return () => {
      unsubscribe(), events.unsubscribe();
    };
  }, [client, comlink]), useEffect(() => comlink.on("visual-editing/fetch-snapshot", async (data) => ({ snapshot: await client.getDocument(data.documentId, {
    tag: "document.snapshots"
  }) })), [client, comlink]), useEffect(() => comlink.on("visual-editing/mutate", async (data) => client.dataRequest("mutate", data, {
    visibility: "async",
    returnDocuments: !0
  })), [client, comlink]), null;
};
var PostMessageDocuments$1 = memo(PostMessageDocuments);
export {
  PostMessageDocuments$1 as default
};
//# sourceMappingURL=PostMessageDocuments.js.map
