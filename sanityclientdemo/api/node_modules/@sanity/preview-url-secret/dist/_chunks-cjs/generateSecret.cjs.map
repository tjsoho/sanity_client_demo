{"version":3,"file":"generateSecret.cjs","sources":["../../src/generateSecret.ts"],"sourcesContent":["/** @internal */\nexport function generateUrlSecret(): string {\n  // Try using WebCrypto if available\n  if (typeof crypto !== 'undefined') {\n    // Generate a random array of 16 bytes\n    const array = new Uint8Array(16)\n    crypto.getRandomValues(array)\n\n    // Convert the array to a URL-safe string\n    let key = ''\n    for (let i = 0; i < array.length; i++) {\n      // Convert each byte to a 2-digit hexadecimal number\n      key += array[i].toString(16).padStart(2, '0')\n    }\n\n    // Replace '+' and '/' from base64url to '-' and '_'\n    key = btoa(key).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/[=]+$/, '')\n\n    return key\n  }\n  // If not fallback to Math.random\n  return Math.random().toString(36).slice(2)\n}\n"],"names":[],"mappings":";;AACO,SAAS,iBAA4B,GAAA;AAE1C,EAAI,IAAA,OAAO,WAAW,WAAa,EAAA;AAEjC,IAAM,MAAA,KAAA,GAAQ,IAAI,UAAA,CAAW,EAAE,CAAA,CAAA;AAC/B,IAAA,MAAA,CAAO,gBAAgB,KAAK,CAAA,CAAA;AAG5B,IAAA,IAAI,GAAM,GAAA,EAAA,CAAA;AACV,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,CAAM,QAAQ,CAAK,EAAA,EAAA;AAErC,MAAO,GAAA,IAAA,KAAA,CAAM,CAAC,CAAE,CAAA,QAAA,CAAS,EAAE,CAAE,CAAA,QAAA,CAAS,GAAG,GAAG,CAAA,CAAA;AAAA,KAC9C;AAGA,IAAA,GAAA,GAAM,IAAK,CAAA,GAAG,CAAE,CAAA,OAAA,CAAQ,KAAO,EAAA,GAAG,CAAE,CAAA,OAAA,CAAQ,KAAO,EAAA,GAAG,CAAE,CAAA,OAAA,CAAQ,SAAS,EAAE,CAAA,CAAA;AAE3E,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AAEA,EAAA,OAAO,KAAK,MAAO,EAAA,CAAE,SAAS,EAAE,CAAA,CAAE,MAAM,CAAC,CAAA,CAAA;AAC3C;;;;"}