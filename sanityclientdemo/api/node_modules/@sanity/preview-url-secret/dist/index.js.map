{"version":3,"file":"index.js","sources":["../src/createClientWithConfig.ts","../src/parsePreviewUrl.ts","../src/validateSecret.ts","../src/validatePreviewUrl.ts"],"sourcesContent":["import {apiVersion} from './constants'\nimport type {SanityClientLike} from './types'\n\n/**\n * Validates the passed in client instance, then clones it and reconfigures it to fit the needs and spec of\n * this package.\n * @internal\n */\nexport function createClientWithConfig(client: SanityClientLike): SanityClientLike {\n  if (!client) {\n    throw new TypeError('`client` is required')\n  }\n\n  if (!client.config().token) {\n    throw new TypeError('`client` must have a `token` specified')\n  }\n\n  return client.withConfig({\n    perspective: 'raw',\n    // Userland might be using an API version that's too old to use perspectives\n    apiVersion,\n    // We can't use the CDN, the secret is typically validated right after it's created\n    useCdn: false,\n    // Don't waste time returning a source map, we don't need it\n    resultSourceMap: false,\n    // @ts-expect-error - If stega is enabled, make sure it's disabled\n    stega: false,\n  })\n}\n","import {\n  urlSearchParamPreviewPathname,\n  urlSearchParamPreviewPerspective,\n  urlSearchParamPreviewSecret,\n} from './constants'\nimport type {ParsedPreviewUrl} from './types'\n\n/**\n * @internal\n */\nexport function parsePreviewUrl(unsafeUrl: string): ParsedPreviewUrl {\n  const url = new URL(unsafeUrl, 'http://localhost')\n  const secret = url.searchParams.get(urlSearchParamPreviewSecret)\n  if (!secret) {\n    throw new Error('Missing secret')\n  }\n  const studioPreviewPerspective = url.searchParams.get(urlSearchParamPreviewPerspective)\n  let redirectTo = undefined\n  const unsafeRedirectTo = url.searchParams.get(urlSearchParamPreviewPathname)\n  if (unsafeRedirectTo) {\n    const {pathname, search, hash} = new URL(unsafeRedirectTo, 'http://localhost')\n    redirectTo = `${pathname}${search}${hash}`\n  }\n  return {secret, redirectTo, studioPreviewPerspective}\n}\n","import {fetchSecretQuery, fetchSharedAccessSecretQuery, tag} from './constants'\nimport type {\n  FetchPublicSecretQueryResponse,\n  FetchSecretQueryParams,\n  FetchSecretQueryResponse,\n  SanityClientLike,\n} from './types'\n\nexport type {SanityClientLike}\n\n/** @public */\nexport async function validateSecret(\n  client: SanityClientLike,\n  secret: string,\n  disableCacheNoStore: boolean,\n): Promise<{isValid: boolean; studioUrl: string | null}> {\n  // If we're in the Edge Runtime it's usually too quick and we need to delay fetching the secret a little bit\n  // @ts-expect-error -- this global exists if we're in the Edge Runtime\n  if (typeof EdgeRuntime !== 'undefined') {\n    await new Promise((resolve) => setTimeout(resolve, 300))\n  }\n  if (!secret || !secret.trim()) {\n    return {isValid: false, studioUrl: null}\n  }\n  const {private: privateSecret, public: publicSecret} = await client.fetch<\n    {\n      private: FetchSecretQueryResponse\n      public: FetchPublicSecretQueryResponse\n    },\n    FetchSecretQueryParams\n  >(\n    `{\n      \"private\": ${fetchSecretQuery},\n      \"public\": ${fetchSharedAccessSecretQuery}\n    }`,\n    {secret: secret},\n    {\n      tag,\n      // In CloudFlare Workers we can't pass the cache header\n      ...(!disableCacheNoStore ? {cache: 'no-store'} : undefined),\n    },\n  )\n  if (privateSecret) {\n    if (!privateSecret?._id || !privateSecret?._updatedAt || !privateSecret?.secret) {\n      return {isValid: false, studioUrl: null}\n    }\n    return {isValid: secret === privateSecret.secret, studioUrl: privateSecret.studioUrl}\n  }\n  if (!publicSecret?.secret) {\n    return {isValid: false, studioUrl: null}\n  }\n  return {isValid: secret === publicSecret.secret, studioUrl: publicSecret.studioUrl}\n}\n","import {isDev} from './constants'\nimport {createClientWithConfig} from './createClientWithConfig'\nimport {parsePreviewUrl} from './parsePreviewUrl'\nimport type {ParsedPreviewUrl, PreviewUrlValidateUrlResult, SanityClientLike} from './types'\nimport {validateSecret} from './validateSecret'\n\n/**\n * @public\n */\nexport async function validatePreviewUrl(\n  _client: SanityClientLike,\n  previewUrl: string,\n  /**\n   * @deprecated - this option is automatically determined based on the environment\n   */\n  // Default value based on https://developers.cloudflare.com/workers/runtime-apis/web-standards/#navigatoruseragent\n  disableCacheNoStore: boolean = globalThis.navigator?.userAgent === 'Cloudflare-Workers',\n): Promise<PreviewUrlValidateUrlResult> {\n  const client = createClientWithConfig(_client)\n  let parsedPreviewUrl: ParsedPreviewUrl\n  try {\n    parsedPreviewUrl = parsePreviewUrl(previewUrl)\n  } catch (error) {\n    if (isDev) {\n      // eslint-disable-next-line no-console\n      console.error('Failed to parse preview URL', error, {\n        previewUrl,\n        client,\n      })\n    }\n    return {isValid: false}\n  }\n\n  const {isValid, studioUrl} = await validateSecret(\n    client,\n    parsedPreviewUrl.secret,\n    disableCacheNoStore,\n  )\n  const redirectTo = isValid ? parsedPreviewUrl.redirectTo : undefined\n  const studioPreviewPerspective = isValid ? parsedPreviewUrl.studioPreviewPerspective : undefined\n  let studioOrigin: string | undefined\n  if (isValid) {\n    try {\n      studioOrigin = new URL(studioUrl!).origin\n    } catch (error) {\n      if (isDev) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to parse studioUrl', error, {\n          previewUrl,\n          studioUrl,\n        })\n      }\n    }\n  }\n\n  return {isValid, redirectTo, studioOrigin, studioPreviewPerspective}\n}\n\nexport type {PreviewUrlValidateUrlResult, SanityClientLike}\n"],"names":[],"mappings":"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"}