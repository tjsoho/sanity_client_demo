"use strict";
var react = require("react"), rxjs = require("rxjs"), sanity = require("sanity");
const PostMessagePreviews = (props) => {
  const { comlink, refs, perspective } = props, documentPreviewStore = sanity.useDocumentPreviewStore(), schema = sanity.useSchema(), refsSubject = react.useMemo(() => new rxjs.Subject(), []), previews$ = react.useMemo(() => refsSubject.asObservable().pipe(
    rxjs.switchMap((refs2) => rxjs.combineLatest(
      refs2.map((ref) => {
        const draftRef = { ...ref, _id: sanity.getDraftId(ref._id) }, draft$ = perspective === "previewDrafts" ? documentPreviewStore.observeForPreview(draftRef, schema.get(draftRef._type)).pipe(
          // Share to prevent double subscribe in the merge
          rxjs.share(),
          // Don't emit if no snapshot is returned
          rxjs.skipWhile((p) => p.snapshot === null)
        ) : (
          // Don't emit if not displaying drafts
          rxjs.NEVER
        ), publishedRef = { ...ref, _id: sanity.getPublishedId(ref._id) }, published$ = documentPreviewStore.observeForPreview(
          publishedRef,
          schema.get(publishedRef._type)
        );
        return rxjs.merge(published$.pipe(rxjs.takeUntil(draft$)), draft$);
      })
    )),
    rxjs.debounceTime(0)
  ), [documentPreviewStore, refsSubject, schema, perspective]);
  return react.useEffect(() => {
    const sub = previews$.subscribe((snapshots) => {
      comlink.post({
        type: "presentation/preview-snapshots",
        data: {
          snapshots: snapshots.filter((s) => s.snapshot).map((s) => {
            const snapshot = s.snapshot;
            return { ...snapshot, _id: sanity.getPublishedId(snapshot._id) };
          })
        }
      });
    });
    return () => {
      sub.unsubscribe();
    };
  }, [comlink, previews$]), react.useEffect(() => {
    refsSubject.next(refs);
  }, [refs, refsSubject]), null;
};
var PostMessagePreviewSnapshots = react.memo(PostMessagePreviews);
exports.default = PostMessagePreviewSnapshots;
//# sourceMappingURL=PostMessagePreviewSnapshots.cjs.map
