{"version":3,"file":"deployAction.js","sources":["../../src/_internal/cli/actions/deploy/deployAction.ts"],"sourcesContent":["/* eslint-disable max-statements */\nimport path from 'node:path'\nimport zlib from 'node:zlib'\n\nimport {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport tar from 'tar-fs'\n\nimport {shouldAutoUpdate} from '../../util/shouldAutoUpdate'\nimport buildSanityStudio, {type BuildSanityStudioCommandFlags} from '../build/buildAction'\nimport {extractManifestSafe} from '../manifest/extractManifestAction'\nimport {\n  checkDir,\n  createDeployment,\n  debug,\n  dirIsEmptyOrNonExistent,\n  getInstalledSanityVersion,\n  getOrCreateUserApplication,\n  getOrCreateUserApplicationFromConfig,\n  type UserApplication,\n} from './helpers'\n\nexport interface DeployStudioActionFlags extends BuildSanityStudioCommandFlags {\n  build?: boolean\n}\n\nexport default async function deployStudioAction(\n  args: CliCommandArguments<DeployStudioActionFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const {apiClient, workDir, chalk, output, prompt, cliConfig} = context\n  const flags = {build: true, ...args.extOptions}\n  const customSourceDir = args.argsWithoutOptions[0]\n  const sourceDir = path.resolve(process.cwd(), customSourceDir || path.join(workDir, 'dist'))\n  const isAutoUpdating = shouldAutoUpdate({flags, cliConfig})\n\n  const installedSanityVersion = await getInstalledSanityVersion()\n  const configStudioHost = cliConfig && 'studioHost' in cliConfig && cliConfig.studioHost\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: true,\n  }).withConfig({apiVersion: 'v2024-08-01'})\n\n  if (customSourceDir === 'graphql') {\n    throw new Error('Did you mean `sanity graphql deploy`?')\n  }\n\n  if (customSourceDir) {\n    let relativeOutput = path.relative(process.cwd(), sourceDir)\n    if (relativeOutput[0] !== '.') {\n      relativeOutput = `./${relativeOutput}`\n    }\n\n    const isEmpty = await dirIsEmptyOrNonExistent(sourceDir)\n    const shouldProceed =\n      isEmpty ||\n      (await prompt.single({\n        type: 'confirm',\n        message: `\"${relativeOutput}\" is not empty, do you want to proceed?`,\n        default: false,\n      }))\n\n    if (!shouldProceed) {\n      output.print('Cancelled.')\n      return\n    }\n\n    output.print(`Building to ${relativeOutput}\\n`)\n  }\n\n  // Check that the project has a studio hostname\n  let spinner = output.spinner('Checking project info').start()\n\n  let userApplication: UserApplication\n\n  try {\n    // If the user has provided a studioHost in the config, use that\n    if (configStudioHost) {\n      userApplication = await getOrCreateUserApplicationFromConfig({\n        client,\n        context,\n        spinner,\n        appHost: configStudioHost,\n      })\n    } else {\n      userApplication = await getOrCreateUserApplication({\n        client,\n        context,\n        spinner,\n      })\n    }\n  } catch (err) {\n    if (err.message) {\n      output.error(chalk.red(err.message))\n      return\n    }\n\n    debug('Error creating user application', err)\n    throw err\n  }\n\n  // Always build the project, unless --no-build is passed\n  const shouldBuild = flags.build\n  if (shouldBuild) {\n    const buildArgs = {\n      ...args,\n      extOptions: flags,\n      argsWithoutOptions: [customSourceDir].filter(Boolean),\n    }\n    const {didCompile} = await buildSanityStudio(buildArgs, context, {basePath: '/'})\n\n    if (!didCompile) {\n      return\n    }\n\n    await extractManifestSafe(\n      {\n        ...buildArgs,\n        extOptions: {},\n        extraArguments: [],\n      },\n      context,\n    )\n  }\n\n  // Ensure that the directory exists, is a directory and seems to have valid content\n  spinner = output.spinner('Verifying local content').start()\n  try {\n    await checkDir(sourceDir)\n    spinner.succeed()\n  } catch (err) {\n    spinner.fail()\n    debug('Error checking directory', err)\n    throw err\n  }\n\n  // Now create a tarball of the given directory\n  const parentDir = path.dirname(sourceDir)\n  const base = path.basename(sourceDir)\n  const tarball = tar.pack(parentDir, {entries: [base]}).pipe(zlib.createGzip())\n\n  spinner = output.spinner('Deploying to Sanity.Studio').start()\n  try {\n    const {location} = await createDeployment({\n      client,\n      applicationId: userApplication.id,\n      version: installedSanityVersion,\n      isAutoUpdating,\n      tarball,\n    })\n\n    spinner.succeed()\n\n    // And let the user know we're done\n    output.print(`\\nSuccess! Studio deployed to ${chalk.cyan(location)}`)\n\n    if (!configStudioHost) {\n      output.print(`\\nAdd ${chalk.cyan(`studioHost: '${userApplication.appHost}'`)}`)\n      output.print('to defineCliConfig root properties in sanity.cli.js or sanity.cli.ts')\n      output.print('to avoid prompting for hostname on next deploy.')\n    }\n  } catch (err) {\n    spinner.fail()\n    debug('Error deploying studio', err)\n    throw err\n  }\n}\n"],"names":["path","shouldAutoUpdate","getInstalledSanityVersion","dirIsEmptyOrNonExistent","getOrCreateUserApplicationFromConfig","getOrCreateUserApplication","debug","buildSanityStudio","extractManifestSafe","checkDir","tar","zlib","createDeployment"],"mappings":"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"}