"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });
var jsxRuntime = require("react/jsx-runtime"), isEqual = require("lodash/isEqual.js"), noop = require("lodash/noop.js"), react = require("react"), slate = require("slate"), slateReact = require("slate-react"), debug$m = require("debug"), types = require("@sanity/types"), styledComponents = require("styled-components"), uniq = require("lodash/uniq.js"), rxjs = require("rxjs"), xstate = require("xstate"), schema = require("@sanity/schema"), isHotkeyEsm = require("is-hotkey-esm"), patches = require("@portabletext/patches"), get = require("lodash/get.js"), isUndefined = require("lodash/isUndefined.js"), omitBy = require("lodash/omitBy.js"), flatten = require("lodash/flatten.js"), blockTools = require("@sanity/block-tools"), isPlainObject = require("lodash/isPlainObject.js"), throttle = require("lodash/throttle.js"), debounce = require("lodash/debounce.js"), content = require("@sanity/util/content");
function _interopDefaultCompat(e) {
  return e && typeof e == "object" && "default" in e ? e : { default: e };
}
var isEqual__default = /* @__PURE__ */ _interopDefaultCompat(isEqual), noop__default = /* @__PURE__ */ _interopDefaultCompat(noop), debug__default = /* @__PURE__ */ _interopDefaultCompat(debug$m), uniq__default = /* @__PURE__ */ _interopDefaultCompat(uniq), get__default = /* @__PURE__ */ _interopDefaultCompat(get), isUndefined__default = /* @__PURE__ */ _interopDefaultCompat(isUndefined), omitBy__default = /* @__PURE__ */ _interopDefaultCompat(omitBy), flatten__default = /* @__PURE__ */ _interopDefaultCompat(flatten), isPlainObject__default = /* @__PURE__ */ _interopDefaultCompat(isPlainObject), throttle__default = /* @__PURE__ */ _interopDefaultCompat(throttle), debounce__default = /* @__PURE__ */ _interopDefaultCompat(debounce);
const rootName = "sanity-pte:";
debug__default.default(rootName);
function debugWithName(name) {
  const namespace = `${rootName}${name}`;
  return debug__default.default && debug__default.default.enabled(namespace) ? debug__default.default(namespace) : debug__default.default(rootName);
}
function createKeyedPath(point, value, types2) {
  const blockPath = [point.path[0]];
  if (!value)
    return null;
  const block = value[blockPath[0]];
  if (!block)
    return null;
  const keyedBlockPath = [{ _key: block._key }];
  if (block._type !== types2.block.name)
    return keyedBlockPath;
  let keyedChildPath;
  const childPath = point.path.slice(0, 2), child = Array.isArray(block.children) && block.children[childPath[1]];
  return child && (keyedChildPath = ["children", { _key: child._key }]), keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath;
}
function createArrayedPath(point, editor) {
  if (!editor)
    return [];
  const [block, blockPath] = Array.from(
    slate.Editor.nodes(editor, {
      at: [],
      match: (n) => types.isKeySegment(point.path[0]) && n._key === point.path[0]._key
    })
  )[0] || [void 0, void 0];
  if (!block || !slate.Element.isElement(block))
    return [];
  if (editor.isVoid(block))
    return [blockPath[0], 0];
  const childPath = [point.path[2]], childIndex = block.children.findIndex(
    (child) => isEqual__default.default([{ _key: child._key }], childPath)
  );
  if (childIndex >= 0 && block.children[childIndex]) {
    const child = block.children[childIndex];
    return slate.Element.isElement(child) && editor.isVoid(child) ? blockPath.concat(childIndex).concat(0) : blockPath.concat(childIndex);
  }
  return blockPath;
}
function toPortableTextRange(value, range, types2) {
  if (!range)
    return null;
  let anchor = null, focus = null;
  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types2);
  anchorPath && range.anchor && (anchor = {
    path: anchorPath,
    offset: range.anchor.offset
  });
  const focusPath = range.focus && createKeyedPath(range.focus, value, types2);
  focusPath && range.focus && (focus = {
    path: focusPath,
    offset: range.focus.offset
  });
  const backward = !!(slate.Range.isRange(range) && slate.Range.isBackward(range));
  return anchor && focus ? { anchor, focus, backward } : null;
}
function toSlateRange(selection, editor) {
  if (!selection || !editor)
    return null;
  const anchor = {
    path: createArrayedPath(selection.anchor, editor),
    offset: selection.anchor.offset
  }, focus = {
    path: createArrayedPath(selection.focus, editor),
    offset: selection.focus.offset
  };
  return focus.path.length === 0 || anchor.path.length === 0 ? null : anchor && focus ? { anchor, focus } : null;
}
function moveRangeByOperation(range, operation) {
  const anchor = slate.Point.transform(range.anchor, operation), focus = slate.Point.transform(range.focus, operation);
  return anchor === null || focus === null ? null : slate.Point.equals(anchor, range.anchor) && slate.Point.equals(focus, range.focus) ? range : { anchor, focus };
}
function normalizePoint(point, value) {
  if (!point || !value)
    return null;
  const newPath = [];
  let newOffset = point.offset || 0;
  const blockKey = typeof point.path[0] == "object" && "_key" in point.path[0] && point.path[0]._key, childKey = typeof point.path[2] == "object" && "_key" in point.path[2] && point.path[2]._key, block = value.find(
    (blk) => blk._key === blockKey
  );
  if (block)
    newPath.push({ _key: block._key });
  else
    return null;
  if (block && point.path[1] === "children") {
    if (!block.children || Array.isArray(block.children) && block.children.length === 0)
      return null;
    const child = Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey);
    if (child)
      newPath.push("children"), newPath.push({ _key: child._key }), newOffset = child.text && child.text.length >= point.offset ? point.offset : child.text && child.text.length || 0;
    else
      return null;
  }
  return { path: newPath, offset: newOffset };
}
function normalizeSelection(selection, value) {
  if (!selection || !value || value.length === 0)
    return null;
  let newAnchor = null, newFocus = null;
  const { anchor, focus } = selection;
  return anchor && value.find((blk) => isEqual__default.default({ _key: blk._key }, anchor.path[0])) && (newAnchor = normalizePoint(anchor, value)), focus && value.find((blk) => isEqual__default.default({ _key: blk._key }, focus.path[0])) && (newFocus = normalizePoint(focus, value)), newAnchor && newFocus ? { anchor: newAnchor, focus: newFocus, backward: selection.backward } : null;
}
const VOID_CHILD_KEY = "void-child";
function keepObjectEquality(object, keyMap) {
  const value = keyMap[object._key];
  return value && isEqual__default.default(object, value) ? value : (keyMap[object._key] = object, object);
}
function toSlateValue(value, { schemaTypes }, keyMap = {}) {
  return value && Array.isArray(value) ? value.map((block) => {
    const { _type, _key, ...rest } = block, voidChildren = [
      { _key: VOID_CHILD_KEY, _type: "span", text: "", marks: [] }
    ];
    if (block && block._type === schemaTypes.block.name) {
      const textBlock = block;
      let hasInlines = !1;
      const hasMissingStyle = typeof textBlock.style > "u", hasMissingMarkDefs = typeof textBlock.markDefs > "u", hasMissingChildren = typeof textBlock.children > "u", children = (textBlock.children || []).map((child) => {
        const { _type: cType, _key: cKey, ...cRest } = child;
        return cType !== "span" ? (hasInlines = !0, keepObjectEquality(
          {
            _type: cType,
            _key: cKey,
            children: voidChildren,
            value: cRest,
            __inline: !0
          },
          keyMap
        )) : child;
      });
      return !hasMissingStyle && !hasMissingMarkDefs && !hasMissingChildren && !hasInlines && slate.Element.isElement(block) ? block : (hasMissingStyle && (rest.style = schemaTypes.styles[0].value), keepObjectEquality({ _type, _key, ...rest, children }, keyMap));
    }
    return keepObjectEquality(
      {
        _type,
        _key,
        children: voidChildren,
        value: rest
      },
      keyMap
    );
  }) : [];
}
function fromSlateValue(value, textBlockType, keyMap = {}) {
  return value.map((block) => {
    const { _key, _type } = block;
    if (!_key || !_type)
      throw new Error("Not a valid block");
    if (_type === textBlockType && "children" in block && Array.isArray(block.children) && _key) {
      let hasInlines = !1;
      const children = block.children.map((child) => {
        const { _type: _cType } = child;
        if ("value" in child && _cType !== "span") {
          hasInlines = !0;
          const {
            value: v,
            _key: k,
            _type: t,
            __inline: _i,
            children: _c,
            ...rest
          } = child;
          return keepObjectEquality(
            { ...rest, ...v, _key: k, _type: t },
            keyMap
          );
        }
        return child;
      });
      return hasInlines ? keepObjectEquality(
        { ...block, children, _key, _type },
        keyMap
      ) : block;
    }
    const blockValue = "value" in block && block.value;
    return keepObjectEquality(
      { _key, _type, ...typeof blockValue == "object" ? blockValue : {} },
      keyMap
    );
  });
}
function isEqualToEmptyEditor(children, schemaTypes) {
  return children === void 0 || children && Array.isArray(children) && children.length === 0 || children && Array.isArray(children) && children.length === 1 && slate.Element.isElement(children[0]) && children[0]._type === schemaTypes.block.name && "style" in children[0] && children[0].style === schemaTypes.styles[0].value && !("listItem" in children[0]) && Array.isArray(children[0].children) && children[0].children.length === 1 && slate.Text.isText(children[0].children[0]) && children[0].children[0]._type === "span" && !children[0].children[0].marks?.join("") && children[0].children[0].text === "";
}
const IS_PROCESSING_REMOTE_CHANGES = /* @__PURE__ */ new WeakMap(), IS_PROCESSING_LOCAL_CHANGES = /* @__PURE__ */ new WeakMap(), IS_DRAGGING = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_BLOCK_ELEMENT = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_ELEMENT_TARGET = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_BLOCK_TARGET_POSITION = /* @__PURE__ */ new WeakMap(), KEY_TO_SLATE_ELEMENT = /* @__PURE__ */ new WeakMap(), KEY_TO_VALUE_ELEMENT = /* @__PURE__ */ new WeakMap(), SLATE_TO_PORTABLE_TEXT_RANGE = /* @__PURE__ */ new WeakMap(), DefaultObject = (props) => /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx("pre", { children: JSON.stringify(props.value, null, 2) }) }), DefaultBlockObject = styledComponents.styled.div`
  user-select: none;
  border: ${(props) => props.selected ? "1px solid blue" : "1px solid transparent"};
`;
styledComponents.styled.span`
  background: #999;
  border: ${(props) => props.selected ? "1px solid blue" : "1px solid transparent"};
`;
const DefaultListItem = styledComponents.styled.div`
  &.pt-list-item {
    width: fit-content;
    position: relative;
    display: block;

    /* Important 'transform' in order to force refresh the ::before and ::after rules
      in Webkit: https://stackoverflow.com/a/21947628/831480
    */
    transform: translateZ(0);
    margin-left: ${(props) => getLeftPositionForListLevel(props.listLevel)};
  }
  &.pt-list-item > .pt-list-item-inner {
    display: flex;
    margin: 0;
    padding: 0;
    &:before {
      justify-content: flex-start;
      vertical-align: top;
    }
  }
  &.pt-list-item-bullet > .pt-list-item-inner:before {
      content: '${(props) => getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';
      font-size: 0.4375rem; /* 7px */
      line-height: 1.5rem; /* Same as body text */
      /* Optical alignment */
      position: relative;
    }
  }
  &.pt-list-item-bullet > .pt-list-item-inner {
    &:before {
      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */
    }
  }
  &.pt-list-item-number {
    counter-increment: ${(props) => getCounterIncrementForListLevel(props.listLevel)};
    counter-reset: ${(props) => getCounterResetForListLevel(props.listLevel)};
  }
  & + :not(.pt-list-item-number) {
    counter-reset: listItemNumber;
  }
  &.pt-list-item-number > .pt-list-item-inner:before {
    content: ${(props) => getCounterContentForListLevel(props.listLevel)};
    min-width: 1.5rem; /* Make sure space between number and text never shrinks */
    /* Optical alignment */
    position: relative;
    top: 1px;
  }
`, DefaultListItemInner = styledComponents.styled.div``;
function getLeftPositionForListLevel(level) {
  switch (Number(level)) {
    case 1:
      return "1.5em";
    case 2:
      return "3em";
    case 3:
      return "4.5em";
    case 4:
      return "6em";
    case 5:
      return "7.5em";
    case 6:
      return "9em";
    case 7:
      return "10.5em";
    case 8:
      return "12em";
    case 9:
      return "13.5em";
    case 10:
      return "15em";
    default:
      return "0em";
  }
}
const bullets = ["\u25CF", "\u25CB", "\u25A0"];
function getContentForListLevelAndStyle(level, style) {
  const normalizedLevel = (level - 1) % 3;
  return style === "bullet" ? bullets[normalizedLevel] : "*";
}
function getCounterIncrementForListLevel(level) {
  switch (level) {
    case 1:
      return "listItemNumber";
    case 2:
      return "listItemAlpha";
    case 3:
      return "listItemRoman";
    case 4:
      return "listItemNumberNext";
    case 5:
      return "listItemLetterNext";
    case 6:
      return "listItemRomanNext";
    case 7:
      return "listItemNumberNextNext";
    case 8:
      return "listItemAlphaNextNext";
    case 9:
      return "listItemRomanNextNext";
    default:
      return "listItemNumberNextNextNext";
  }
}
function getCounterResetForListLevel(level) {
  switch (level) {
    case 1:
      return "listItemAlpha";
    case 2:
      return "listItemRoman";
    case 3:
      return "listItemNumberNext";
    case 4:
      return "listItemLetterNext";
    case 5:
      return "listItemRomanNext";
    case 6:
      return "listItemNumberNextNext";
    case 7:
      return "listItemAlphaNextNext";
    case 8:
      return "listItemRomanNextNext";
    case 9:
      return "listItemNumberNextNextNext";
    default:
      return "listItemNumberNextNextNext";
  }
}
function getCounterContentForListLevel(level) {
  switch (level) {
    case 1:
      return "counter(listItemNumber) '. '";
    case 2:
      return "counter(listItemAlpha, lower-alpha) '. '";
    case 3:
      return "counter(listItemRoman, lower-roman) '. '";
    case 4:
      return "counter(listItemNumberNext) '. '";
    case 5:
      return "counter(listItemLetterNext, lower-alpha) '. '";
    case 6:
      return "counter(listItemRomanNext, lower-roman) '. '";
    case 7:
      return "counter(listItemNumberNextNext) '. '";
    case 8:
      return "counter(listItemAlphaNextNext, lower-alpha) '. '";
    case 9:
      return "counter(listItemRomanNextNext, lower-roman) '. '";
    default:
      return "counter(listItemNumberNextNextNext) '. '";
  }
}
const debug$l = debugWithName("components:DraggableBlock"), DraggableBlock = ({
  children,
  element,
  readOnly,
  blockRef
}) => {
  const editor = slateReact.useSlateStatic(), dragGhostRef = react.useRef(), [isDragOver, setIsDragOver] = react.useState(!1), isVoid = react.useMemo(
    () => slate.Editor.isVoid(editor, element),
    [editor, element]
  ), isInline = react.useMemo(
    () => slate.Editor.isInline(editor, element),
    [editor, element]
  ), [blockElement, setBlockElement] = react.useState(null);
  react.useEffect(
    () => setBlockElement(
      blockRef ? blockRef.current : slateReact.ReactEditor.toDOMNode(editor, element)
    ),
    [editor, element, blockRef]
  );
  const handleDragOver = react.useCallback(
    (event) => {
      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor);
      if (!isMyDragOver || !blockElement)
        return;
      event.preventDefault(), event.dataTransfer.dropEffect = "move", IS_DRAGGING_ELEMENT_TARGET.set(editor, element);
      const elementRect = blockElement.getBoundingClientRect(), offset = elementRect.top, height = elementRect.height, Y = event.pageY, loc = Math.abs(offset - Y);
      let position = "bottom";
      if (element === editor.children[0] ? position = "top" : loc < height / 2 ? (position = "top", IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)) : (position = "bottom", IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)), isMyDragOver === element) {
        event.dataTransfer.dropEffect = "none";
        return;
      }
      setIsDragOver(!0);
    },
    [blockElement, editor, element]
  ), handleDragLeave = react.useCallback(() => {
    setIsDragOver(!1);
  }, []), handleDragEnd = react.useCallback(
    (event) => {
      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor);
      if (targetBlock) {
        IS_DRAGGING.set(editor, !1), event.preventDefault(), event.stopPropagation(), IS_DRAGGING_ELEMENT_TARGET.delete(editor), dragGhostRef.current && (debug$l("Removing drag ghost"), document.body.removeChild(dragGhostRef.current));
        const dragPosition2 = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor);
        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor);
        let targetPath = slateReact.ReactEditor.findPath(editor, targetBlock);
        const myPath = slateReact.ReactEditor.findPath(editor, element), isBefore = slate.Path.isBefore(myPath, targetPath);
        if (dragPosition2 === "bottom" && !isBefore) {
          if (targetPath[0] >= editor.children.length - 1) {
            debug$l("target is already at the bottom, not moving");
            return;
          }
          const originalPath = targetPath;
          targetPath = slate.Path.next(targetPath), debug$l(
            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(
              targetPath
            )}`
          );
        }
        if (dragPosition2 === "top" && isBefore && targetPath[0] !== editor.children.length - 1) {
          const originalPath = targetPath;
          targetPath = slate.Path.previous(targetPath), debug$l(
            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(
              targetPath
            )}`
          );
        }
        if (slate.Path.equals(targetPath, myPath)) {
          event.preventDefault(), debug$l("targetPath and myPath is the same, not moving");
          return;
        }
        debug$l(
          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(
            targetPath
          )} (${dragPosition2})`
        ), slate.Transforms.moveNodes(editor, { at: myPath, to: targetPath }), editor.onChange();
        return;
      }
      debug$l("No target element, not doing anything");
    },
    [editor, element]
  ), handleDrop = react.useCallback(
    (event) => {
      IS_DRAGGING_BLOCK_ELEMENT.get(editor) && (debug$l("On drop (prevented)", element), event.preventDefault(), event.stopPropagation(), setIsDragOver(!1));
    },
    [editor, element]
  ), handleDrag = react.useCallback(
    (event) => {
      if (!isVoid) {
        IS_DRAGGING_BLOCK_ELEMENT.delete(editor);
        return;
      }
      IS_DRAGGING.set(editor, !0), IS_DRAGGING_BLOCK_ELEMENT.set(editor, element), event.stopPropagation();
      const target = event.target;
      target instanceof HTMLElement && (target.style.opacity = "1");
    },
    [editor, element, isVoid]
  ), handleDragStart = react.useCallback(
    (event) => {
      if (!isVoid || isInline) {
        debug$l("Not dragging block"), IS_DRAGGING_BLOCK_ELEMENT.delete(editor), IS_DRAGGING.set(editor, !1);
        return;
      }
      if (debug$l("Drag start"), IS_DRAGGING.set(editor, !0), event.dataTransfer && (event.dataTransfer.setData("application/portable-text", "something"), event.dataTransfer.effectAllowed = "move"), blockElement && blockElement instanceof HTMLElement) {
        let dragGhost = blockElement.cloneNode(!0);
        const customGhost = dragGhost.querySelector(
          "[data-pt-drag-ghost-element]"
        );
        if (customGhost && (dragGhost = customGhost), dragGhost.setAttribute("data-dragged", ""), document.body) {
          dragGhostRef.current = dragGhost, dragGhost.style.position = "absolute", dragGhost.style.left = "-99999px", dragGhost.style.boxSizing = "border-box", document.body.appendChild(dragGhost);
          const rect = blockElement.getBoundingClientRect(), x = event.clientX - rect.left, y = event.clientY - rect.top;
          dragGhost.style.width = `${rect.width}px`, dragGhost.style.height = `${rect.height}px`, event.dataTransfer.setDragImage(dragGhost, x, y);
        }
      }
      handleDrag(event);
    },
    [blockElement, editor, handleDrag, isInline, isVoid]
  ), isDraggingOverFirstBlock = isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor), isDraggingOverLastBlock = isDragOver && editor.children[editor.children.length - 1] === IS_DRAGGING_ELEMENT_TARGET.get(editor), dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor), isDraggingOverTop = isDraggingOverFirstBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition === "top", isDraggingOverBottom = isDraggingOverLastBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition === "bottom", dropIndicator = react.useMemo(
    () => /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        className: "pt-drop-indicator",
        style: {
          position: "absolute",
          width: "100%",
          height: 1,
          borderBottom: "1px solid currentColor",
          zIndex: 5
        }
      }
    ),
    []
  );
  return readOnly ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children }) : /* @__PURE__ */ jsxRuntime.jsxs(
    "div",
    {
      draggable: isVoid,
      onDragStart: handleDragStart,
      onDrag: handleDrag,
      onDragOver: handleDragOver,
      onDragLeave: handleDragLeave,
      onDragEnd: handleDragEnd,
      onDrop: handleDrop,
      children: [
        isDraggingOverTop && dropIndicator,
        children,
        isDraggingOverBottom && dropIndicator
      ]
    }
  );
};
debugWithName("components:Element");
const EMPTY_ANNOTATIONS = [], inlineBlockStyle = { display: "inline-block" }, Element = ({
  attributes,
  children,
  element,
  schemaTypes,
  readOnly,
  renderBlock,
  renderChild,
  renderListItem,
  renderStyle,
  spellCheck
}) => {
  const editor = slateReact.useSlateStatic(), selected = slateReact.useSelected(), blockRef = react.useRef(null), inlineBlockObjectRef = react.useRef(null), focused = selected && editor.selection && slate.Range.isCollapsed(editor.selection) || !1, value = react.useMemo(
    () => fromSlateValue(
      [element],
      schemaTypes.block.name,
      KEY_TO_VALUE_ELEMENT.get(editor)
    )[0],
    [editor, element, schemaTypes.block.name]
  );
  let renderedBlock = children, className;
  const blockPath = react.useMemo(() => [{ _key: element._key }], [element]);
  if (typeof element._type != "string")
    throw new Error("Expected element to have a _type property");
  if (typeof element._key != "string")
    throw new Error("Expected element to have a _key property");
  if (editor.isInline(element)) {
    const path = slateReact.ReactEditor.findPath(editor, element), [block2] = slate.Editor.node(editor, path, { depth: 1 }), schemaType2 = schemaTypes.inlineObjects.find(
      (_type) => _type.name === element._type
    );
    if (!schemaType2)
      throw new Error("Could not find type for inline block element");
    if (slate.Element.isElement(block2)) {
      const elmPath = [
        { _key: block2._key },
        "children",
        { _key: element._key }
      ];
      return /* @__PURE__ */ jsxRuntime.jsxs("span", { ...attributes, children: [
        children,
        /* @__PURE__ */ jsxRuntime.jsxs(
          "span",
          {
            draggable: !readOnly,
            className: "pt-inline-object",
            "data-testid": "pt-inline-object",
            ref: inlineBlockObjectRef,
            style: inlineBlockStyle,
            contentEditable: !1,
            children: [
              renderChild && renderChild({
                annotations: EMPTY_ANNOTATIONS,
                // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.
                children: /* @__PURE__ */ jsxRuntime.jsx(DefaultObject, { value }),
                editorElementRef: inlineBlockObjectRef,
                focused,
                path: elmPath,
                schemaType: schemaType2,
                selected,
                type: schemaType2,
                value
              }),
              !renderChild && /* @__PURE__ */ jsxRuntime.jsx(DefaultObject, { value })
            ]
          },
          element._key
        )
      ] });
    }
    throw new Error("Block not found!");
  }
  if (element._type === schemaTypes.block.name) {
    className = "pt-block pt-text-block";
    const isListItem = "listItem" in element, style = "style" in element && element.style || "normal";
    className = `pt-block pt-text-block pt-text-block-style-${style}`;
    const blockStyleType = schemaTypes.styles.find(
      (item) => item.value === style
    );
    renderStyle && blockStyleType && (renderedBlock = renderStyle({
      block: element,
      children,
      focused,
      selected,
      value: style,
      path: blockPath,
      schemaType: blockStyleType,
      editorElementRef: blockRef
    }));
    let level;
    if (isListItem && (typeof element.level == "number" && (level = element.level), className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`), editor.isListBlock(value) && isListItem && element.listItem) {
      const listType = schemaTypes.lists.find(
        (item) => item.value === element.listItem
      );
      renderListItem && listType ? renderedBlock = renderListItem({
        block: value,
        children: renderedBlock,
        focused,
        selected,
        value: element.listItem,
        path: blockPath,
        schemaType: listType,
        level: value.level || 1,
        editorElementRef: blockRef
      }) : renderedBlock = /* @__PURE__ */ jsxRuntime.jsx(
        DefaultListItem,
        {
          listStyle: value.listItem || schemaTypes.lists[0].value,
          listLevel: value.level || 1,
          children: /* @__PURE__ */ jsxRuntime.jsx(DefaultListItemInner, { children: renderedBlock })
        }
      );
    }
    const renderProps = Object.defineProperty(
      {
        children: renderedBlock,
        editorElementRef: blockRef,
        focused,
        level,
        listItem: isListItem ? element.listItem : void 0,
        path: blockPath,
        selected,
        style,
        schemaType: schemaTypes.block,
        value
      },
      "type",
      {
        enumerable: !1,
        get() {
          return console.warn(
            "Property 'type' is deprecated, use 'schemaType' instead."
          ), schemaTypes.block;
        }
      }
    ), propsOrDefaultRendered = renderBlock ? renderBlock(renderProps) : children;
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        ...attributes,
        className,
        spellCheck,
        children: /* @__PURE__ */ jsxRuntime.jsx(
          DraggableBlock,
          {
            element,
            readOnly,
            blockRef,
            children: /* @__PURE__ */ jsxRuntime.jsx("div", { ref: blockRef, children: propsOrDefaultRendered })
          }
        )
      },
      element._key
    );
  }
  const schemaType = schemaTypes.blockObjects.find(
    (_type) => _type.name === element._type
  );
  if (!schemaType)
    throw new Error(
      `Could not find schema type for block element of _type ${element._type}`
    );
  className = "pt-block pt-object-block";
  const block = fromSlateValue(
    [element],
    schemaTypes.block.name,
    KEY_TO_VALUE_ELEMENT.get(editor)
  )[0];
  let renderedBlockFromProps;
  if (renderBlock) {
    const _props = Object.defineProperty(
      {
        children: /* @__PURE__ */ jsxRuntime.jsx(DefaultObject, { value }),
        editorElementRef: blockRef,
        focused,
        path: blockPath,
        schemaType,
        selected,
        value: block
      },
      "type",
      {
        enumerable: !1,
        get() {
          return console.warn(
            "Property 'type' is deprecated, use 'schemaType' instead."
          ), schemaType;
        }
      }
    );
    renderedBlockFromProps = renderBlock(_props);
  }
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { ...attributes, className, children: [
    children,
    /* @__PURE__ */ jsxRuntime.jsxs(DraggableBlock, { element, readOnly, blockRef, children: [
      renderedBlockFromProps && /* @__PURE__ */ jsxRuntime.jsx("div", { ref: blockRef, contentEditable: !1, children: renderedBlockFromProps }),
      !renderedBlockFromProps && /* @__PURE__ */ jsxRuntime.jsx(DefaultBlockObject, { selected, children: /* @__PURE__ */ jsxRuntime.jsx(DefaultObject, { value }) })
    ] })
  ] }, element._key);
}, PortableTextEditorContext = react.createContext(null), usePortableTextEditor = () => {
  const editor = react.useContext(PortableTextEditorContext);
  if (!editor)
    throw new Error(
      "The `usePortableTextEditor` hook must be used inside the <PortableTextEditor> component's context."
    );
  return editor;
};
function DefaultAnnotation(props) {
  const handleClick = react.useCallback(
    () => alert(JSON.stringify(props.annotation)),
    [props.annotation]
  );
  return /* @__PURE__ */ jsxRuntime.jsx("span", { style: { color: "blue" }, onClick: handleClick, children: props.children });
}
function getPortableTextMemberSchemaTypes(portableTextType) {
  if (!portableTextType)
    throw new Error("Parameter 'portabletextType' missing (required)");
  const blockType = portableTextType.of?.find(findBlockType);
  if (!blockType)
    throw new Error("Block type is not defined in this schema (required)");
  const childrenField = blockType.fields?.find(
    (field) => field.name === "children"
  );
  if (!childrenField)
    throw new Error("Children field for block type found in schema (required)");
  const ofType = childrenField.type.of;
  if (!ofType)
    throw new Error(
      "Valid types for block children not found in schema (required)"
    );
  const spanType = ofType.find((memberType) => memberType.name === "span");
  if (!spanType)
    throw new Error("Span type not found in schema (required)");
  const inlineObjectTypes = ofType.filter(
    (memberType) => memberType.name !== "span"
  ) || [], blockObjectTypes = portableTextType.of?.filter(
    (field) => field.name !== blockType.name
  ) || [];
  return {
    styles: resolveEnabledStyles(blockType),
    decorators: resolveEnabledDecorators(spanType),
    lists: resolveEnabledListItems(blockType),
    block: blockType,
    span: spanType,
    portableText: portableTextType,
    inlineObjects: inlineObjectTypes,
    blockObjects: blockObjectTypes,
    annotations: spanType.annotations
  };
}
function resolveEnabledStyles(blockType) {
  const styleField = blockType.fields?.find(
    (btField) => btField.name === "style"
  );
  if (!styleField)
    throw new Error(
      "A field with name 'style' is not defined in the block type (required)."
    );
  const textStyles = styleField.type.options?.list && styleField.type.options.list?.filter(
    (style) => style.value
  );
  if (!textStyles || textStyles.length === 0)
    throw new Error(
      "The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}."
    );
  return textStyles;
}
function resolveEnabledDecorators(spanType) {
  return spanType.decorators;
}
function resolveEnabledListItems(blockType) {
  const listField = blockType.fields?.find(
    (btField) => btField.name === "listItem"
  );
  if (!listField)
    throw new Error(
      "A field with name 'listItem' is not defined in the block type (required)."
    );
  const listItems = listField.type.options?.list && listField.type.options.list.filter((list) => list.value);
  if (!listItems)
    throw new Error("The list field need at least to be an empty array");
  return listItems;
}
function findBlockType(type) {
  return type.type ? findBlockType(type.type) : type.name === "block" ? type : null;
}
function compileType(rawType) {
  return schema.Schema.compile({
    name: "blockTypeSchema",
    types: [rawType]
  }).get(rawType.name);
}
function getFocusBlock(context) {
  const key = context.selection && types.isKeySegment(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;
  return node && key ? { node, path: [{ _key: key }] } : void 0;
}
function getFocusBlockObject(context) {
  const focusBlock = getFocusBlock(context);
  return focusBlock && !types.isPortableTextTextBlock(focusBlock.node) ? { node: focusBlock.node, path: focusBlock.path } : void 0;
}
const overwriteSoftReturn = {
  on: "key down",
  guard: ({ event }) => isHotkeyEsm.isHotkey("shift+enter", event.nativeEvent),
  actions: [
    ({ event }) => (event.nativeEvent.preventDefault(), { type: "insert text", text: `
` })
  ]
}, enterOnVoidBlock = {
  on: "key down",
  guard: ({ context, event }) => isHotkeyEsm.isHotkey("enter", event.nativeEvent) ? !!getFocusBlockObject(context) : !1,
  actions: [
    ({ event }) => (event.nativeEvent.preventDefault(), { type: "insert text block", decorators: [] })
  ]
}, coreBehaviors = [overwriteSoftReturn, enterOnVoidBlock], debug$k = debugWithName("operationToPatches");
function createOperationToPatches(types2) {
  const textBlockName = types2.block.name;
  function insertTextPatch(editor, operation, beforeValue) {
    debug$k.enabled && debug$k("Operation", JSON.stringify(operation, null, 2));
    const block = editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]];
    if (!block)
      throw new Error("Could not find block");
    const textChild = editor.isTextBlock(block) && editor.isTextSpan(block.children[operation.path[1]]) && block.children[operation.path[1]];
    if (!textChild)
      throw new Error("Could not find child");
    const path = [
      { _key: block._key },
      "children",
      { _key: textChild._key },
      "text"
    ], prevBlock = beforeValue[operation.path[0]], prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevChild) ? prevChild.text : "", patch = patches.diffMatchPatch(prevText, textChild.text, path);
    return patch.value.length ? [patch] : [];
  }
  function removeTextPatch(editor, operation, beforeValue) {
    const block = editor && editor.children[operation.path[0]];
    if (!block)
      throw new Error("Could not find block");
    const child = editor.isTextBlock(block) && block.children[operation.path[1]] || void 0, textChild = editor.isTextSpan(child) ? child : void 0;
    if (child && !textChild)
      throw new Error("Expected span");
    if (!textChild)
      throw new Error("Could not find child");
    const path = [
      { _key: block._key },
      "children",
      { _key: textChild._key },
      "text"
    ], beforeBlock = beforeValue[operation.path[0]], prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text, patch = patches.diffMatchPatch(prevText || "", textChild.text, path);
    return patch.value ? [patch] : [];
  }
  function setNodePatch(editor, operation) {
    if (operation.path.length === 1) {
      const block = editor.children[operation.path[0]];
      if (typeof block._key != "string")
        throw new Error("Expected block to have a _key");
      const setNode = omitBy__default.default(
        { ...editor.children[operation.path[0]], ...operation.newProperties },
        isUndefined__default.default
      );
      return [
        patches.set(fromSlateValue([setNode], textBlockName)[0], [{ _key: block._key }])
      ];
    } else if (operation.path.length === 2) {
      const block = editor.children[operation.path[0]];
      if (editor.isTextBlock(block)) {
        const child = block.children[operation.path[1]];
        if (child) {
          const blockKey = block._key, childKey = child._key, patches$1 = [], keys = Object.keys(operation.newProperties);
          return keys.forEach((keyName) => {
            if (keys.length === 1 && keyName === "_key") {
              const val = get__default.default(operation.newProperties, keyName);
              patches$1.push(
                patches.set(val, [
                  { _key: blockKey },
                  "children",
                  block.children.indexOf(child),
                  keyName
                ])
              );
            } else {
              const val = get__default.default(operation.newProperties, keyName);
              patches$1.push(
                patches.set(val, [
                  { _key: blockKey },
                  "children",
                  { _key: childKey },
                  keyName
                ])
              );
            }
          }), patches$1;
        }
        throw new Error("Could not find a valid child");
      }
      throw new Error("Could not find a valid block");
    } else
      throw new Error(
        `Unexpected path encountered: ${JSON.stringify(operation.path)}`
      );
  }
  function insertNodePatch(editor, operation, beforeValue) {
    const block = beforeValue[operation.path[0]], isTextBlock = editor.isTextBlock(block);
    if (operation.path.length === 1) {
      const position = operation.path[0] === 0 ? "before" : "after", beforeBlock = beforeValue[operation.path[0] - 1], targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key;
      return targetKey ? [
        patches.insert(
          [fromSlateValue([operation.node], textBlockName)[0]],
          position,
          [{ _key: targetKey }]
        )
      ] : [
        patches.setIfMissing(beforeValue, []),
        patches.insert(
          [fromSlateValue([operation.node], textBlockName)[0]],
          "before",
          [operation.path[0]]
        )
      ];
    } else if (isTextBlock && operation.path.length === 2 && editor.children[operation.path[0]]) {
      const position = block.children.length === 0 || !block.children[operation.path[1] - 1] ? "before" : "after", node = { ...operation.node };
      !node._type && slate.Text.isText(node) && (node._type = "span", node.marks = []);
      const child = fromSlateValue(
        [
          {
            _key: "bogus",
            _type: textBlockName,
            children: [node]
          }
        ],
        textBlockName
      )[0].children[0];
      return [
        patches.insert([child], position, [
          { _key: block._key },
          "children",
          block.children.length <= 1 || !block.children[operation.path[1] - 1] ? 0 : { _key: block.children[operation.path[1] - 1]._key }
        ])
      ];
    }
    return debug$k(
      "Something was inserted into a void block. Not producing editor patches."
    ), [];
  }
  function splitNodePatch(editor, operation, beforeValue) {
    const patches$1 = [], splitBlock = editor.children[operation.path[0]];
    if (!editor.isTextBlock(splitBlock))
      throw new Error(
        `Block with path ${JSON.stringify(
          operation.path[0]
        )} is not a text block and can't be split`
      );
    if (operation.path.length === 1) {
      const oldBlock = beforeValue[operation.path[0]];
      if (editor.isTextBlock(oldBlock)) {
        const targetValue = fromSlateValue(
          [editor.children[operation.path[0] + 1]],
          textBlockName
        )[0];
        targetValue && (patches$1.push(
          patches.insert([targetValue], "after", [{ _key: splitBlock._key }])
        ), oldBlock.children.slice(operation.position).forEach((span) => {
          const path = [{ _key: oldBlock._key }, "children", { _key: span._key }];
          patches$1.push(patches.unset(path));
        }));
      }
      return patches$1;
    }
    if (operation.path.length === 2) {
      const splitSpan = splitBlock.children[operation.path[1]];
      if (editor.isTextSpan(splitSpan)) {
        const targetSpans = fromSlateValue(
          [
            {
              ...splitBlock,
              children: splitBlock.children.slice(
                operation.path[1] + 1,
                operation.path[1] + 2
              )
            }
          ],
          textBlockName
        )[0].children;
        patches$1.push(
          patches.insert(targetSpans, "after", [
            { _key: splitBlock._key },
            "children",
            { _key: splitSpan._key }
          ])
        ), patches$1.push(
          patches.set(splitSpan.text, [
            { _key: splitBlock._key },
            "children",
            { _key: splitSpan._key },
            "text"
          ])
        );
      }
      return patches$1;
    }
    return patches$1;
  }
  function removeNodePatch(editor, operation, beforeValue) {
    const block = beforeValue[operation.path[0]];
    if (operation.path.length === 1) {
      if (block && block._key)
        return [patches.unset([{ _key: block._key }])];
      throw new Error("Block not found");
    } else if (editor.isTextBlock(block) && operation.path.length === 2) {
      const spanToRemove = block.children[operation.path[1]];
      return spanToRemove ? block.children.filter(
        (span) => span._key === operation.node._key
      ).length > 1 ? (console.warn(
        `Multiple spans have \`_key\` ${operation.node._key}. It's ambiguous which one to remove.`,
        JSON.stringify(block, null, 2)
      ), []) : [
        patches.unset([{ _key: block._key }, "children", { _key: spanToRemove._key }])
      ] : (debug$k("Span not found in editor trying to remove node"), []);
    } else
      return debug$k("Not creating patch inside object block"), [];
  }
  function mergeNodePatch(editor, operation, beforeValue) {
    const patches$1 = [], block = beforeValue[operation.path[0]], updatedBlock = editor.children[operation.path[0]];
    if (operation.path.length === 1)
      if (block?._key) {
        const newBlock = fromSlateValue(
          [editor.children[operation.path[0] - 1]],
          textBlockName
        )[0];
        patches$1.push(patches.set(newBlock, [{ _key: newBlock._key }])), patches$1.push(patches.unset([{ _key: block._key }]));
      } else
        throw new Error("Target key not found!");
    else if (editor.isTextBlock(block) && editor.isTextBlock(updatedBlock) && operation.path.length === 2) {
      const updatedSpan = updatedBlock.children[operation.path[1] - 1] && editor.isTextSpan(updatedBlock.children[operation.path[1] - 1]) ? updatedBlock.children[operation.path[1] - 1] : void 0, removedSpan = block.children[operation.path[1]] && editor.isTextSpan(block.children[operation.path[1]]) ? block.children[operation.path[1]] : void 0;
      updatedSpan && (block.children.filter(
        (span) => span._key === updatedSpan._key
      ).length === 1 ? patches$1.push(
        patches.set(updatedSpan.text, [
          { _key: block._key },
          "children",
          { _key: updatedSpan._key },
          "text"
        ])
      ) : console.warn(
        `Multiple spans have \`_key\` ${updatedSpan._key}. It's ambiguous which one to update.`,
        JSON.stringify(block, null, 2)
      )), removedSpan && (block.children.filter(
        (span) => span._key === removedSpan._key
      ).length === 1 ? patches$1.push(
        patches.unset([{ _key: block._key }, "children", { _key: removedSpan._key }])
      ) : console.warn(
        `Multiple spans have \`_key\` ${removedSpan._key}. It's ambiguous which one to remove.`,
        JSON.stringify(block, null, 2)
      ));
    } else
      debug$k("Void nodes can't be merged, not creating any patches");
    return patches$1;
  }
  function moveNodePatch(editor, operation, beforeValue) {
    const patches$1 = [], block = beforeValue[operation.path[0]], targetBlock = beforeValue[operation.newPath[0]];
    if (operation.path.length === 1) {
      const position = operation.path[0] > operation.newPath[0] ? "before" : "after";
      patches$1.push(patches.unset([{ _key: block._key }])), patches$1.push(
        patches.insert([fromSlateValue([block], textBlockName)[0]], position, [
          { _key: targetBlock._key }
        ])
      );
    } else if (operation.path.length === 2 && editor.isTextBlock(block) && editor.isTextBlock(targetBlock)) {
      const child = block.children[operation.path[1]], targetChild = targetBlock.children[operation.newPath[1]], position = operation.newPath[1] === targetBlock.children.length ? "after" : "before", childToInsert = fromSlateValue([block], textBlockName)[0].children[operation.path[1]];
      patches$1.push(patches.unset([{ _key: block._key }, "children", { _key: child._key }])), patches$1.push(
        patches.insert([childToInsert], position, [
          { _key: targetBlock._key },
          "children",
          { _key: targetChild._key }
        ])
      );
    }
    return patches$1;
  }
  return {
    insertNodePatch,
    insertTextPatch,
    mergeNodePatch,
    moveNodePatch,
    removeNodePatch,
    removeTextPatch,
    setNodePatch,
    splitNodePatch
  };
}
const debug$j = debugWithName("API:editable");
function createWithEditableAPI(editorActor, portableTextEditor, types$1) {
  return function(editor) {
    return portableTextEditor.setEditable({
      focus: () => {
        slateReact.ReactEditor.focus(editor);
      },
      blur: () => {
        slateReact.ReactEditor.blur(editor);
      },
      toggleMark: (mark) => {
        editor.pteToggleMark(mark);
      },
      toggleList: (listStyle) => {
        editor.pteToggleListItem(listStyle);
      },
      toggleBlockStyle: (blockStyle) => {
        editor.pteToggleBlockStyle(blockStyle);
      },
      isMarkActive: (mark) => {
        try {
          return editor.pteIsMarkActive(mark);
        } catch (err) {
          return console.warn(err), !1;
        }
      },
      marks: () => ({
        ...slate.Editor.marks(editor) || {}
      }).marks || [],
      undo: () => editor.undo(),
      redo: () => editor.redo(),
      select: (selection) => {
        const slateSelection = toSlateRange(selection, editor);
        slateSelection ? slate.Transforms.select(editor, slateSelection) : slate.Transforms.deselect(editor), editor.onChange();
      },
      focusBlock: () => {
        if (editor.selection) {
          const block = slate.Node.descendant(
            editor,
            editor.selection.focus.path.slice(0, 1)
          );
          if (block)
            return fromSlateValue(
              [block],
              types$1.block.name,
              KEY_TO_VALUE_ELEMENT.get(editor)
            )[0];
        }
      },
      focusChild: () => {
        if (editor.selection) {
          const block = slate.Node.descendant(
            editor,
            editor.selection.focus.path.slice(0, 1)
          );
          if (block && editor.isTextBlock(block))
            return fromSlateValue(
              [block],
              types$1.block.name,
              KEY_TO_VALUE_ELEMENT.get(editor)
            )[0].children[editor.selection.focus.path[1]];
        }
      },
      insertChild: (type, value) => {
        if (!editor.selection)
          throw new Error("The editor has no selection");
        const [focusBlock] = Array.from(
          slate.Editor.nodes(editor, {
            at: editor.selection.focus.path.slice(0, 1),
            match: (n) => n._type === types$1.block.name
          })
        )[0] || [void 0];
        if (!focusBlock)
          throw new Error("No focused text block");
        if (type.name !== types$1.span.name && !types$1.inlineObjects.some((t) => t.name === type.name))
          throw new Error(
            "This type cannot be inserted as a child to a text block"
          );
        const child = toSlateValue(
          [
            {
              _key: editorActor.getSnapshot().context.keyGenerator(),
              _type: types$1.block.name,
              children: [
                {
                  _key: editorActor.getSnapshot().context.keyGenerator(),
                  _type: type.name,
                  ...value || {}
                }
              ]
            }
          ],
          portableTextEditor
        )[0].children[0], focusChildPath = editor.selection.focus.path.slice(0, 2), isSpanNode = child._type === types$1.span.name, focusNode = slate.Node.get(editor, focusChildPath);
        return isSpanNode && focusNode._type !== types$1.span.name && (debug$j(
          "Inserting span child next to inline object child, moving selection + 1"
        ), editor.move({ distance: 1, unit: "character" })), slate.Transforms.insertNodes(editor, child, {
          select: !0,
          at: editor.selection
        }), editor.onChange(), toPortableTextRange(
          fromSlateValue(
            editor.children,
            types$1.block.name,
            KEY_TO_VALUE_ELEMENT.get(editor)
          ),
          editor.selection,
          types$1
        )?.focus.path || [];
      },
      insertBlock: (type, value) => {
        const block = toSlateValue(
          [
            {
              _key: editorActor.getSnapshot().context.keyGenerator(),
              _type: type.name,
              ...value || {}
            }
          ],
          portableTextEditor
        )[0];
        if (!editor.selection) {
          const lastBlock = Array.from(
            slate.Editor.nodes(editor, {
              match: (n) => !slate.Editor.isEditor(n),
              at: [],
              reverse: !0
            })
          )[0];
          return slate.Editor.insertNode(editor, block), lastBlock && isEqualToEmptyEditor([lastBlock[0]], types$1) && slate.Transforms.removeNodes(editor, { at: lastBlock[1] }), editor.onChange(), toPortableTextRange(
            fromSlateValue(
              editor.children,
              types$1.block.name,
              KEY_TO_VALUE_ELEMENT.get(editor)
            ),
            editor.selection,
            types$1
          )?.focus.path ?? [];
        }
        const focusBlock = Array.from(
          slate.Editor.nodes(editor, {
            at: editor.selection.focus.path.slice(0, 1),
            match: (n) => n._type === types$1.block.name
          })
        )[0];
        return slate.Editor.insertNode(editor, block), focusBlock && isEqualToEmptyEditor([focusBlock[0]], types$1) && slate.Transforms.removeNodes(editor, { at: focusBlock[1] }), editor.onChange(), toPortableTextRange(
          fromSlateValue(
            editor.children,
            types$1.block.name,
            KEY_TO_VALUE_ELEMENT.get(editor)
          ),
          editor.selection,
          types$1
        )?.focus.path || [];
      },
      hasBlockStyle: (style) => {
        try {
          return editor.pteHasBlockStyle(style);
        } catch {
          return !1;
        }
      },
      hasListStyle: (listStyle) => {
        try {
          return editor.pteHasListStyle(listStyle);
        } catch {
          return !1;
        }
      },
      isVoid: (element) => ![types$1.block.name, types$1.span.name].includes(element._type),
      findByPath: (path) => {
        const slatePath = toSlateRange(
          { focus: { path, offset: 0 }, anchor: { path, offset: 0 } },
          editor
        );
        if (slatePath) {
          const [block, blockPath] = slate.Editor.node(
            editor,
            slatePath.focus.path.slice(0, 1)
          );
          if (block && blockPath && typeof block._key == "string") {
            if (path.length === 1 && slatePath.focus.path.length === 1)
              return [
                fromSlateValue([block], types$1.block.name)[0],
                [{ _key: block._key }]
              ];
            const ptBlock = fromSlateValue(
              [block],
              types$1.block.name,
              KEY_TO_VALUE_ELEMENT.get(editor)
            )[0];
            if (editor.isTextBlock(ptBlock)) {
              const ptChild = ptBlock.children[slatePath.focus.path[1]];
              if (ptChild)
                return [
                  ptChild,
                  [{ _key: block._key }, "children", { _key: ptChild._key }]
                ];
            }
          }
        }
        return [void 0, void 0];
      },
      findDOMNode: (element) => {
        let node;
        try {
          const [item] = Array.from(
            slate.Editor.nodes(editor, {
              at: [],
              match: (n) => n._key === element._key
            }) || []
          )[0] || [void 0];
          node = slateReact.ReactEditor.toDOMNode(editor, item);
        } catch {
        }
        return node;
      },
      activeAnnotations: () => {
        if (!editor.selection || editor.selection.focus.path.length < 2)
          return [];
        try {
          const activeAnnotations = [], spans = slate.Editor.nodes(editor, {
            at: editor.selection,
            match: (node) => slate.Text.isText(node) && node.marks !== void 0 && Array.isArray(node.marks) && node.marks.length > 0
          });
          for (const [span, path] of spans) {
            const [block] = slate.Editor.node(editor, path, { depth: 1 });
            editor.isTextBlock(block) && block.markDefs?.forEach((def) => {
              slate.Text.isText(span) && span.marks && Array.isArray(span.marks) && span.marks.includes(def._key) && activeAnnotations.push(def);
            });
          }
          return activeAnnotations;
        } catch {
          return [];
        }
      },
      isAnnotationActive: (annotationType) => {
        if (!editor.selection || editor.selection.focus.path.length < 2)
          return !1;
        try {
          const spans = [
            ...slate.Editor.nodes(editor, {
              at: editor.selection,
              match: (node) => slate.Text.isText(node)
            })
          ];
          if (spans.length === 0 || spans.some(
            ([span]) => !types.isPortableTextSpan(span) || !span.marks || span.marks?.length === 0
          ))
            return !1;
          const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {
            const [block] = slate.Editor.node(editor, path, { depth: 1 });
            return editor.isTextBlock(block) && block.markDefs ? [...accMarkDefs, ...block.markDefs] : accMarkDefs;
          }, []);
          return spans.every(([span]) => types.isPortableTextSpan(span) ? span.marks?.map(
            (markKey) => selectionMarkDefs.find((def) => def?._key === markKey)?._type
          )?.includes(annotationType) : !1);
        } catch {
          return !1;
        }
      },
      addAnnotation: (type, value) => {
        const { selection: originalSelection } = editor;
        let returnValue;
        if (originalSelection && (slate.Range.isCollapsed(originalSelection) && (editor.pteExpandToWord(), editor.onChange()), editor.selection)) {
          let spanPath, markDefPath;
          const markDefPaths = [];
          slate.Editor.withoutNormalizing(editor, () => {
            if (!editor.selection)
              return;
            const selectedBlocks = slate.Editor.nodes(editor, {
              at: editor.selection,
              match: (node) => editor.isTextBlock(node),
              reverse: slate.Range.isBackward(editor.selection)
            });
            for (const [block, blockPath] of selectedBlocks) {
              if (block.children.length === 0 || block.children.length === 1 && block.children[0].text === "")
                continue;
              const annotationKey = editorActor.getSnapshot().context.keyGenerator(), markDefs = block.markDefs ?? [];
              markDefs.find(
                (markDef) => markDef._type === type.name && markDef._key === annotationKey
              ) === void 0 && (slate.Transforms.setNodes(
                editor,
                {
                  markDefs: [
                    ...markDefs,
                    {
                      _type: type.name,
                      _key: annotationKey,
                      ...value
                    }
                  ]
                },
                { at: blockPath }
              ), markDefPath = [
                { _key: block._key },
                "markDefs",
                { _key: annotationKey }
              ], slate.Range.isBackward(editor.selection) ? markDefPaths.unshift(markDefPath) : markDefPaths.push(markDefPath)), slate.Transforms.setNodes(
                editor,
                {},
                { match: slate.Text.isText, split: !0 }
              );
              const children = slate.Node.children(editor, blockPath);
              for (const [span, path] of children) {
                if (!editor.isTextSpan(span) || !slate.Range.includes(editor.selection, path))
                  continue;
                const marks = span.marks ?? [], existingSameTypeAnnotations = marks.filter(
                  (mark) => markDefs.some(
                    (markDef) => markDef._key === mark && markDef._type === type.name
                  )
                );
                slate.Transforms.setNodes(
                  editor,
                  {
                    marks: [
                      ...marks.filter(
                        (mark) => !existingSameTypeAnnotations.includes(mark)
                      ),
                      annotationKey
                    ]
                  },
                  { at: path }
                ), spanPath = [{ _key: block._key }, "children", { _key: span._key }];
              }
            }
            markDefPath && spanPath && (returnValue = {
              markDefPath,
              markDefPaths,
              spanPath
            });
          }), editor.onChange();
        }
        return returnValue;
      },
      delete: (selection, options) => {
        if (selection) {
          const range = toSlateRange(selection, editor);
          if (!(range && range.anchor.path.length > 0 && range.focus.path.length > 0))
            throw new Error("Invalid range");
          if (range) {
            if (!options?.mode || options?.mode === "selected") {
              debug$j("Deleting content in selection"), slate.Transforms.delete(editor, {
                at: range,
                hanging: !0,
                voids: !0
              }), editor.onChange();
              return;
            }
            options?.mode === "blocks" && (debug$j("Deleting blocks touched by selection"), slate.Transforms.removeNodes(editor, {
              at: range,
              voids: !0,
              match: (node) => editor.isTextBlock(node) || !editor.isTextBlock(node) && slate.Element.isElement(node)
            })), options?.mode === "children" && (debug$j("Deleting children touched by selection"), slate.Transforms.removeNodes(editor, {
              at: range,
              voids: !0,
              match: (node) => node._type === types$1.span.name || // Text children
              !editor.isTextBlock(node) && slate.Element.isElement(node)
            })), editor.children.length === 0 && (editor.children = [editor.pteCreateTextBlock({ decorators: [] })]), editor.onChange();
          }
        }
      },
      removeAnnotation: (type) => {
        debug$j("Removing annotation", type), slate.Editor.withoutNormalizing(editor, () => {
          if (editor.selection)
            if (slate.Range.isCollapsed(editor.selection)) {
              const [block, blockPath] = slate.Editor.node(editor, editor.selection, {
                depth: 1
              });
              if (!editor.isTextBlock(block))
                return;
              const potentialAnnotations = (block.markDefs ?? []).filter(
                (markDef) => markDef._type === type.name
              ), [selectedChild, selectedChildPath] = slate.Editor.node(
                editor,
                editor.selection,
                {
                  depth: 2
                }
              );
              if (!editor.isTextSpan(selectedChild))
                return;
              const annotationToRemove = selectedChild.marks?.find(
                (mark) => potentialAnnotations.some((markDef) => markDef._key === mark)
              );
              if (!annotationToRemove)
                return;
              const previousSpansWithSameAnnotation = [];
              for (const [child, childPath] of slate.Node.children(editor, blockPath, {
                reverse: !0
              }))
                if (editor.isTextSpan(child) && slate.Path.isBefore(childPath, selectedChildPath))
                  if (child.marks?.includes(annotationToRemove))
                    previousSpansWithSameAnnotation.push([child, childPath]);
                  else
                    break;
              const nextSpansWithSameAnnotation = [];
              for (const [child, childPath] of slate.Node.children(editor, blockPath))
                if (editor.isTextSpan(child) && slate.Path.isAfter(childPath, selectedChildPath))
                  if (child.marks?.includes(annotationToRemove))
                    nextSpansWithSameAnnotation.push([child, childPath]);
                  else
                    break;
              for (const [child, childPath] of [
                ...previousSpansWithSameAnnotation,
                [selectedChild, selectedChildPath],
                ...nextSpansWithSameAnnotation
              ])
                slate.Transforms.setNodes(
                  editor,
                  {
                    marks: child.marks?.filter(
                      (mark) => mark !== annotationToRemove
                    )
                  },
                  { at: childPath }
                );
            } else {
              slate.Transforms.setNodes(
                editor,
                {},
                {
                  match: (node) => editor.isTextSpan(node),
                  split: !0,
                  hanging: !0
                }
              );
              const blocks = slate.Editor.nodes(editor, {
                at: editor.selection,
                match: (node) => editor.isTextBlock(node)
              });
              for (const [block, blockPath] of blocks) {
                const children = slate.Node.children(editor, blockPath);
                for (const [child, childPath] of children) {
                  if (!editor.isTextSpan(child) || !slate.Range.includes(editor.selection, childPath))
                    continue;
                  const markDefs = block.markDefs ?? [], marks = child.marks ?? [], marksWithoutAnnotation = marks.filter((mark) => markDefs.find(
                    (markDef2) => markDef2._key === mark
                  )?._type !== type.name);
                  marksWithoutAnnotation.length !== marks.length && slate.Transforms.setNodes(
                    editor,
                    {
                      marks: marksWithoutAnnotation
                    },
                    { at: childPath }
                  );
                }
              }
            }
        }), editor.onChange();
      },
      getSelection: () => {
        let ptRange = null;
        if (editor.selection) {
          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);
          if (existing)
            return existing;
          ptRange = toPortableTextRange(
            fromSlateValue(
              editor.children,
              types$1.block.name,
              KEY_TO_VALUE_ELEMENT.get(editor)
            ),
            editor.selection,
            types$1
          ), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);
        }
        return ptRange;
      },
      getValue: () => fromSlateValue(
        editor.children,
        types$1.block.name,
        KEY_TO_VALUE_ELEMENT.get(editor)
      ),
      isCollapsedSelection: () => !!editor.selection && slate.Range.isCollapsed(editor.selection),
      isExpandedSelection: () => !!editor.selection && slate.Range.isExpanded(editor.selection),
      insertBreak: () => {
        editor.insertBreak(), editor.onChange();
      },
      getFragment: () => fromSlateValue(editor.getFragment(), types$1.block.name),
      isSelectionsOverlapping: (selectionA, selectionB) => {
        const rangeA = toSlateRange(selectionA, editor), rangeB = toSlateRange(selectionB, editor);
        return slate.Range.isRange(rangeA) && slate.Range.isRange(rangeB) && slate.Range.includes(rangeA, rangeB);
      }
    }), editor;
  };
}
function createWithInsertBreak(editorActor, types2) {
  return function(editor) {
    const { insertBreak } = editor;
    return editor.insertBreak = () => {
      if (!editor.selection) {
        insertBreak();
        return;
      }
      const [focusSpan] = Array.from(
        slate.Editor.nodes(editor, {
          mode: "lowest",
          at: editor.selection.focus,
          match: (n) => editor.isTextSpan(n),
          voids: !1
        })
      )[0] ?? [void 0], focusDecorators = focusSpan.marks?.filter(
        (mark) => types2.decorators.some((decorator) => decorator.value === mark)
      ) ?? [], focusAnnotations = focusSpan.marks?.filter(
        (mark) => !types2.decorators.some((decorator) => decorator.value === mark)
      ) ?? [], focusBlockPath = editor.selection.focus.path.slice(0, 1), focusBlock = slate.Node.descendant(editor, focusBlockPath);
      if (editor.isTextBlock(focusBlock)) {
        const [start, end] = slate.Range.edges(editor.selection), isEndAtStartOfBlock = isEqual__default.default(end, {
          path: [...focusBlockPath, 0],
          offset: 0
        });
        if (isEndAtStartOfBlock && slate.Range.isCollapsed(editor.selection)) {
          slate.Editor.insertNode(
            editor,
            editor.pteCreateTextBlock({
              decorators: focusAnnotations.length === 0 ? focusDecorators : []
            })
          );
          const [nextBlockPath] = slate.Path.next(focusBlockPath);
          slate.Transforms.select(editor, {
            anchor: { path: [nextBlockPath, 0], offset: 0 },
            focus: { path: [nextBlockPath, 0], offset: 0 }
          }), editor.onChange();
          return;
        }
        const lastFocusBlockChild = focusBlock.children[focusBlock.children.length - 1], isStartAtEndOfBlock = isEqual__default.default(start, {
          path: [...focusBlockPath, focusBlock.children.length - 1],
          offset: editor.isTextSpan(lastFocusBlockChild) ? lastFocusBlockChild.text.length : 0
        });
        if (isStartAtEndOfBlock && slate.Range.isCollapsed(editor.selection) && focusDecorators.length > 0 && focusAnnotations.length > 0) {
          slate.Editor.withoutNormalizing(editor, () => {
            if (!editor.selection)
              return;
            slate.Editor.insertNode(
              editor,
              editor.pteCreateTextBlock({
                decorators: []
              })
            );
            const [nextBlockPath] = slate.Path.next(focusBlockPath);
            slate.Transforms.setSelection(editor, {
              anchor: { path: [nextBlockPath, 0], offset: 0 },
              focus: { path: [nextBlockPath, 0], offset: 0 }
            });
          }), editor.onChange();
          return;
        }
        if (!isEndAtStartOfBlock && !isStartAtEndOfBlock) {
          slate.Editor.withoutNormalizing(editor, () => {
            if (!editor.selection)
              return;
            slate.Transforms.splitNodes(editor, {
              at: editor.selection
            });
            const [nextNode, nextNodePath] = slate.Editor.node(
              editor,
              slate.Path.next(focusBlockPath),
              { depth: 1 }
            );
            if (slate.Transforms.setSelection(editor, {
              anchor: { path: [...nextNodePath, 0], offset: 0 },
              focus: { path: [...nextNodePath, 0], offset: 0 }
            }), editor.isTextBlock(nextNode) && nextNode.markDefs && nextNode.markDefs.length > 0) {
              const newMarkDefKeys = /* @__PURE__ */ new Map(), prevNodeSpans = Array.from(
                slate.Node.children(editor, focusBlockPath)
              ).map((entry) => entry[0]).filter((node) => editor.isTextSpan(node)), children = slate.Node.children(editor, nextNodePath);
              for (const [child, childPath] of children) {
                if (!editor.isTextSpan(child))
                  continue;
                const marks = child.marks ?? [];
                for (const mark of marks)
                  types2.decorators.some(
                    (decorator) => decorator.value === mark
                  ) || prevNodeSpans.some(
                    (prevNodeSpan) => prevNodeSpan.marks?.includes(mark)
                  ) && !newMarkDefKeys.has(mark) && newMarkDefKeys.set(
                    mark,
                    editorActor.getSnapshot().context.keyGenerator()
                  );
                const newMarks = marks.map(
                  (mark) => newMarkDefKeys.get(mark) ?? mark
                );
                isEqual__default.default(marks, newMarks) || slate.Transforms.setNodes(
                  editor,
                  { marks: newMarks },
                  {
                    at: childPath
                  }
                );
              }
              const newMarkDefs = nextNode.markDefs.map((markDef) => ({
                ...markDef,
                _key: newMarkDefKeys.get(markDef._key) ?? markDef._key
              }));
              isEqual__default.default(nextNode.markDefs, newMarkDefs) || slate.Transforms.setNodes(
                editor,
                { markDefs: newMarkDefs },
                {
                  at: nextNodePath,
                  match: (node) => editor.isTextBlock(node)
                }
              );
            }
          }), editor.onChange();
          return;
        }
      }
      insertBreak();
    }, editor;
  };
}
function withRemoteChanges(editor, fn) {
  const prev = isChangingRemotely(editor) || !1;
  IS_PROCESSING_REMOTE_CHANGES.set(editor, !0), fn(), IS_PROCESSING_REMOTE_CHANGES.set(editor, prev);
}
function isChangingRemotely(editor) {
  return IS_PROCESSING_REMOTE_CHANGES.get(editor);
}
function isChangingLocally(editor) {
  return IS_PROCESSING_LOCAL_CHANGES.get(editor);
}
const IS_UDOING = /* @__PURE__ */ new WeakMap(), IS_REDOING = /* @__PURE__ */ new WeakMap();
function withUndoing(editor, fn) {
  const prev = isUndoing(editor);
  IS_UDOING.set(editor, !0), fn(), IS_UDOING.set(editor, prev);
}
function isUndoing(editor) {
  return IS_UDOING.get(editor) ?? !1;
}
function setIsUndoing(editor, isUndoing2) {
  IS_UDOING.set(editor, isUndoing2);
}
function withRedoing(editor, fn) {
  const prev = isRedoing(editor);
  IS_REDOING.set(editor, !0), fn(), IS_REDOING.set(editor, prev);
}
function isRedoing(editor) {
  return IS_REDOING.get(editor) ?? !1;
}
function setIsRedoing(editor, isRedoing2) {
  IS_REDOING.set(editor, isRedoing2);
}
function createWithMaxBlocks(maxBlocks) {
  return function(editor) {
    const { apply: apply2 } = editor;
    return editor.apply = (operation) => {
      if (isChangingRemotely(editor)) {
        apply2(operation);
        return;
      }
      if (isUndoing(editor) || isRedoing(editor)) {
        apply2(operation);
        return;
      }
      const rows = maxBlocks;
      rows > 0 && editor.children.length >= rows && (operation.type === "insert_node" || operation.type === "split_node") && operation.path.length === 1 || apply2(operation);
    }, editor;
  };
}
function createWithObjectKeys(editorActor, schemaTypes) {
  return function(editor) {
    const { apply: apply2, normalizeNode } = editor;
    return editor.apply = (operation) => {
      if (isChangingRemotely(editor)) {
        apply2(operation);
        return;
      }
      if (isUndoing(editor) || isRedoing(editor)) {
        apply2(operation);
        return;
      }
      if (operation.type === "split_node") {
        apply2({
          ...operation,
          properties: {
            ...operation.properties,
            _key: editorActor.getSnapshot().context.keyGenerator()
          }
        });
        return;
      }
      if (operation.type === "insert_node" && !slate.Editor.isEditor(operation.node)) {
        apply2({
          ...operation,
          node: {
            ...operation.node,
            _key: editorActor.getSnapshot().context.keyGenerator()
          }
        });
        return;
      }
      apply2(operation);
    }, editor.normalizeNode = (entry) => {
      const [node, path] = entry;
      if (slate.Element.isElement(node) && node._type === schemaTypes.block.name) {
        if (!node._key) {
          editorActor.send({ type: "normalizing" }), slate.Transforms.setNodes(
            editor,
            { _key: editorActor.getSnapshot().context.keyGenerator() },
            { at: path }
          ), editorActor.send({ type: "done normalizing" });
          return;
        }
        for (const [child, childPath] of slate.Node.children(editor, path))
          if (!child._key) {
            editorActor.send({ type: "normalizing" }), slate.Transforms.setNodes(
              editor,
              { _key: editorActor.getSnapshot().context.keyGenerator() },
              { at: childPath }
            ), editorActor.send({ type: "done normalizing" });
            return;
          }
      }
      normalizeNode(entry);
    }, editor;
  };
}
function isHighSurrogate(char) {
  const charCode = char.charCodeAt(0);
  return charCode >= 55296 && charCode <= 56319;
}
function isLowSurrogate(char) {
  const charCode = char.charCodeAt(0);
  return charCode >= 56320 && charCode <= 57343;
}
function cloneDiff(diff2) {
  const [type, patch] = diff2;
  return [type, patch];
}
function getCommonOverlap(textA, textB) {
  let text1 = textA, text2 = textB;
  const text1Length = text1.length, text2Length = text2.length;
  if (text1Length === 0 || text2Length === 0)
    return 0;
  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));
  const textLength = Math.min(text1Length, text2Length);
  if (text1 === text2)
    return textLength;
  let best = 0, length = 1;
  for (let found = 0; found !== -1; ) {
    const pattern = text1.substring(textLength - length);
    if (found = text2.indexOf(pattern), found === -1)
      return best;
    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);
  }
  return best;
}
function getCommonPrefix(text1, text2) {
  if (!text1 || !text2 || text1[0] !== text2[0])
    return 0;
  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;
  for (; pointerMin < pointerMid; )
    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);
  return pointerMid;
}
function getCommonSuffix(text1, text2) {
  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])
    return 0;
  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;
  for (; pointerMin < pointerMid; )
    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);
  return pointerMid;
}
function cleanupSemantic(rawDiffs) {
  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;
  const equalities = [];
  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;
  for (; pointer < diffs.length; )
    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;
  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {
    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {
      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);
      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;
    }
    pointer++;
  }
  return diffs;
}
const nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\s/, linebreakRegex = /[\r\n]/, blanklineEndRegex = /\n\r?\n$/, blanklineStartRegex = /^\r?\n\r?\n/;
function cleanupSemanticLossless(rawDiffs) {
  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));
  function diffCleanupSemanticScore(one, two) {
    if (!one || !two)
      return 6;
    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);
    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;
  }
  let pointer = 1;
  for (; pointer < diffs.length - 1; ) {
    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {
      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];
      const commonOffset = getCommonSuffix(equality1, edit);
      if (commonOffset) {
        const commonString = edit.substring(edit.length - commonOffset);
        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;
      }
      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);
      for (; edit.charAt(0) === equality2.charAt(0); ) {
        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);
        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);
        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);
      }
      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));
    }
    pointer++;
  }
  return diffs;
}
function cleanupMerge(rawDiffs) {
  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));
  diffs.push([DIFF_EQUAL, ""]);
  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = "", textInsert = "", commonlength;
  for (; pointer < diffs.length; )
    switch (diffs[pointer][0]) {
      case DIFF_INSERT:
        countInsert++, textInsert += diffs[pointer][1], pointer++;
        break;
      case DIFF_DELETE:
        countDelete++, textDelete += diffs[pointer][1], pointer++;
        break;
      case DIFF_EQUAL:
        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = "", textInsert = "";
        break;
      default:
        throw new Error("Unknown diff operation");
    }
  diffs[diffs.length - 1][1] === "" && diffs.pop();
  let hasChanges = !1;
  for (pointer = 1; pointer < diffs.length - 1; )
    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;
  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;
}
function trueCount() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
    args[_key] = arguments[_key];
  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);
}
function cleanupEfficiency(rawDiffs) {
  let editCost = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 4, diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;
  const equalities = [];
  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;
  for (; pointer < diffs.length; )
    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;
  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;
}
function bisect(text1, text2, deadline) {
  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);
  for (let x = 0; x < vLength; x++)
    v1[x] = -1, v2[x] = -1;
  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;
  const delta = text1Length - text2Length, front = delta % 2 !== 0;
  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;
  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {
    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
      const k1Offset = vOffset + k1;
      let x1;
      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;
      let y1 = x1 - k1;
      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )
        x1++, y1++;
      if (v1[k1Offset] = x1, x1 > text1Length)
        k1end += 2;
      else if (y1 > text2Length)
        k1start += 2;
      else if (front) {
        const k2Offset = vOffset + delta - k1;
        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {
          const x2 = text1Length - v2[k2Offset];
          if (x1 >= x2)
            return bisectSplit(text1, text2, x1, y1, deadline);
        }
      }
    }
    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
      const k2Offset = vOffset + k2;
      let x2;
      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;
      let y2 = x2 - k2;
      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )
        x2++, y2++;
      if (v2[k2Offset] = x2, x2 > text1Length)
        k2end += 2;
      else if (y2 > text2Length)
        k2start += 2;
      else if (!front) {
        const k1Offset = vOffset + delta - k2;
        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {
          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;
          if (x2 = text1Length - x2, x1 >= x2)
            return bisectSplit(text1, text2, x1, y1, deadline);
        }
      }
    }
  }
  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
}
function bisectSplit(text1, text2, x, y, deadline) {
  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, {
    checkLines: !1,
    deadline
  }), diffsb = doDiff(text1b, text2b, {
    checkLines: !1,
    deadline
  });
  return diffs.concat(diffsb);
}
function findHalfMatch(text1, text2) {
  if ((arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1) <= 0)
    return null;
  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;
  if (longText.length < 4 || shortText.length * 2 < longText.length)
    return null;
  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));
  let halfMatch;
  if (halfMatch1 && halfMatch2)
    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;
  else {
    if (!halfMatch1 && !halfMatch2)
      return null;
    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;
  }
  if (!halfMatch)
    throw new Error("Unable to find a half match.");
  let text1A, text1B, text2A, text2B;
  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);
  const midCommon = halfMatch[4];
  return [text1A, text1B, text2A, text2B, midCommon];
}
function halfMatchI(longText, shortText, i) {
  const seed = longText.slice(i, i + Math.floor(longText.length / 4));
  let j = -1, bestCommon = "", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;
  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {
    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));
    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));
  }
  return bestCommon.length * 2 >= longText.length ? [bestLongTextA || "", bestLongTextB || "", bestShortTextA || "", bestShortTextB || "", bestCommon || ""] : null;
}
function charsToLines(diffs, lineArray) {
  for (let x = 0; x < diffs.length; x++) {
    const chars = diffs[x][1], text = [];
    for (let y = 0; y < chars.length; y++)
      text[y] = lineArray[chars.charCodeAt(y)];
    diffs[x][1] = text.join("");
  }
}
function linesToChars(textA, textB) {
  const lineArray = [], lineHash = {};
  lineArray[0] = "";
  function diffLinesToMunge(text) {
    let chars = "", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;
    for (; lineEnd < text.length - 1; ) {
      lineEnd = text.indexOf(`
`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);
      let line = text.slice(lineStart, lineEnd + 1);
      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;
    }
    return chars;
  }
  let maxLines = 4e4;
  const chars1 = diffLinesToMunge(textA);
  maxLines = 65535;
  const chars2 = diffLinesToMunge(textB);
  return {
    chars1,
    chars2,
    lineArray
  };
}
function doLineModeDiff(textA, textB, opts) {
  let text1 = textA, text2 = textB;
  const a = linesToChars(text1, text2);
  text1 = a.chars1, text2 = a.chars2;
  const linearray = a.lineArray;
  let diffs = doDiff(text1, text2, {
    checkLines: !1,
    deadline: opts.deadline
  });
  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, ""]);
  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = "", textInsert = "";
  for (; pointer < diffs.length; ) {
    switch (diffs[pointer][0]) {
      case DIFF_INSERT:
        countInsert++, textInsert += diffs[pointer][1];
        break;
      case DIFF_DELETE:
        countDelete++, textDelete += diffs[pointer][1];
        break;
      case DIFF_EQUAL:
        if (countDelete >= 1 && countInsert >= 1) {
          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;
          const aa = doDiff(textDelete, textInsert, {
            checkLines: !1,
            deadline: opts.deadline
          });
          for (let j = aa.length - 1; j >= 0; j--)
            diffs.splice(pointer, 0, aa[j]);
          pointer += aa.length;
        }
        countInsert = 0, countDelete = 0, textDelete = "", textInsert = "";
        break;
      default:
        throw new Error("Unknown diff operation.");
    }
    pointer++;
  }
  return diffs.pop(), diffs;
}
function computeDiff(text1, text2, opts) {
  let diffs;
  if (!text1)
    return [[DIFF_INSERT, text2]];
  if (!text2)
    return [[DIFF_DELETE, text1]];
  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);
  if (i !== -1)
    return diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;
  if (shorttext.length === 1)
    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
  const halfMatch = findHalfMatch(text1, text2);
  if (halfMatch) {
    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);
    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);
  }
  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);
}
const DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;
function diff(textA, textB, opts) {
  if (textA === null || textB === null)
    throw new Error("Null input. (diff)");
  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));
  return adjustDiffForSurrogatePairs(diffs), diffs;
}
function doDiff(textA, textB, options) {
  let text1 = textA, text2 = textB;
  if (text1 === text2)
    return text1 ? [[DIFF_EQUAL, text1]] : [];
  let commonlength = getCommonPrefix(text1, text2);
  const commonprefix = text1.substring(0, commonlength);
  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);
  const commonsuffix = text1.substring(text1.length - commonlength);
  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);
  let diffs = computeDiff(text1, text2, options);
  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;
}
function createDeadLine(timeout) {
  let t = 1;
  return typeof timeout < "u" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;
}
function createInternalOpts(opts) {
  return {
    checkLines: !0,
    deadline: createDeadLine(opts.timeout || 1),
    ...opts
  };
}
function combineChar(data, char, dir) {
  return dir === 1 ? data + char : char + data;
}
function splitChar(data, dir) {
  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];
}
function hasSharedChar(diffs, i, j, dir) {
  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];
}
function deisolateChar(diffs, i, dir) {
  const inv = dir === 1 ? -1 : 1;
  let insertIdx = null, deleteIdx = null, j = i + dir;
  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {
    const [op, text2] = diffs[j];
    if (text2.length !== 0) {
      if (op === DIFF_INSERT) {
        insertIdx === null && (insertIdx = j);
        continue;
      } else if (op === DIFF_DELETE) {
        deleteIdx === null && (deleteIdx = j);
        continue;
      } else if (op === DIFF_EQUAL) {
        if (insertIdx === null && deleteIdx === null) {
          const [rest, char2] = splitChar(diffs[i][1], dir);
          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);
          return;
        }
        break;
      }
    }
  }
  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {
    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);
    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);
    return;
  }
  const [text, char] = splitChar(diffs[i][1], dir);
  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);
}
function adjustDiffForSurrogatePairs(diffs) {
  for (let i = 0; i < diffs.length; i++) {
    const [diffType, diffText] = diffs[i];
    if (diffText.length === 0) continue;
    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];
    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);
  }
  for (let i = 0; i < diffs.length; i++)
    diffs[i][1].length === 0 && diffs.splice(i, 1);
}
const DEFAULT_OPTIONS = {
  /**
   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).
   */
  threshold: 0.5,
  /**
   * How far to search for a match (0 = exact location, 1000+ = broad match).
   * A match this many characters away from the expected location will add
   * 1.0 to the score (0.0 is a perfect match).
   */
  distance: 1e3
};
function applyDefaults(options) {
  return {
    ...DEFAULT_OPTIONS,
    ...options
  };
}
const MAX_BITS$1 = 32;
function bitap(text, pattern, loc) {
  let opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  if (pattern.length > MAX_BITS$1)
    throw new Error("Pattern too long for this browser.");
  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);
  function getBitapScore(e, x) {
    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);
    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;
  }
  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);
  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));
  const matchmask = 1 << pattern.length - 1;
  bestLoc = -1;
  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];
  for (let d = 0; d < pattern.length; d++) {
    for (binMin = 0, binMid = binMax; binMin < binMid; )
      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);
    binMax = binMid;
    let start = Math.max(1, loc - binMid + 1);
    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);
    rd[finish + 1] = (1 << d) - 1;
    for (let j = finish; j >= start; j--) {
      const charMatch = s[text.charAt(j - 1)];
      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {
        const score = getBitapScore(d, j - 1);
        if (score <= scoreThreshold)
          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)
            start = Math.max(1, 2 * loc - bestLoc);
          else
            break;
      }
    }
    if (getBitapScore(d + 1, loc) > scoreThreshold)
      break;
    lastRd = rd;
  }
  return bestLoc;
}
function getAlphabetFromPattern(pattern) {
  const s = {};
  for (let i = 0; i < pattern.length; i++)
    s[pattern.charAt(i)] = 0;
  for (let i = 0; i < pattern.length; i++)
    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;
  return s;
}
function match(text, pattern, searchLocation) {
  if (text === null || pattern === null || searchLocation === null)
    throw new Error("Null input. (match())");
  const loc = Math.max(0, Math.min(searchLocation, text.length));
  if (text === pattern)
    return 0;
  if (text.length) {
    if (text.substring(loc, loc + pattern.length) === pattern)
      return loc;
  } else return -1;
  return bitap(text, pattern, loc);
}
function createPatchObject(start1, start2) {
  return {
    diffs: [],
    start1,
    start2,
    utf8Start1: start1,
    utf8Start2: start2,
    length1: 0,
    length2: 0,
    utf8Length1: 0,
    utf8Length2: 0
  };
}
function diffText1(diffs) {
  const text = [];
  for (let x = 0; x < diffs.length; x++)
    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);
  return text.join("");
}
function diffText2(diffs) {
  const text = [];
  for (let x = 0; x < diffs.length; x++)
    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);
  return text.join("");
}
function countUtf8Bytes(str) {
  let bytes = 0;
  for (let i = 0; i < str.length; i++) {
    const codePoint = str.codePointAt(i);
    if (typeof codePoint > "u")
      throw new Error("Failed to get codepoint");
    bytes += utf8len(codePoint);
  }
  return bytes;
}
function adjustIndiciesToUcs2(patches2, base) {
  let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, byteOffset = 0, idx = 0;
  function advanceTo(target) {
    for (; byteOffset < target; ) {
      const codePoint = base.codePointAt(idx);
      if (typeof codePoint > "u")
        return idx;
      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;
    }
    if (!options.allowExceedingIndices && byteOffset !== target)
      throw new Error("Failed to determine byte offset");
    return idx;
  }
  const adjusted = [];
  for (const patch of patches2)
    adjusted.push({
      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),
      start1: advanceTo(patch.start1),
      start2: advanceTo(patch.start2),
      utf8Start1: patch.utf8Start1,
      utf8Start2: patch.utf8Start2,
      length1: patch.length1,
      length2: patch.length2,
      utf8Length1: patch.utf8Length1,
      utf8Length2: patch.utf8Length2
    });
  return adjusted;
}
function utf8len(codePoint) {
  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;
}
const MAX_BITS = 32, DEFAULT_MARGIN = 4;
function levenshtein(diffs) {
  let leven = 0, insertions = 0, deletions = 0;
  for (let x = 0; x < diffs.length; x++) {
    const op = diffs[x][0], data = diffs[x][1];
    switch (op) {
      case DIFF_INSERT:
        insertions += data.length;
        break;
      case DIFF_DELETE:
        deletions += data.length;
        break;
      case DIFF_EQUAL:
        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;
        break;
      default:
        throw new Error("Unknown diff operation.");
    }
  }
  return leven += Math.max(insertions, deletions), leven;
}
function xIndex(diffs, loc) {
  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;
  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > loc)); x++)
    lastChars1 = chars1, lastChars2 = chars2;
  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (loc - lastChars1);
}
function addPadding(patches2) {
  const paddingLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_MARGIN;
  let nullPadding = "";
  for (let x = 1; x <= paddingLength; x++)
    nullPadding += String.fromCharCode(x);
  for (const p of patches2)
    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;
  let patch = patches2[0], diffs = patch.diffs;
  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)
    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;
  else if (paddingLength > diffs[0][1].length) {
    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;
    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;
  }
  if (patch = patches2[patches2.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)
    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;
  else if (paddingLength > diffs[diffs.length - 1][1].length) {
    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;
    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;
  }
  return nullPadding;
}
function splitMax(patches2) {
  let margin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_MARGIN;
  const patchSize = MAX_BITS;
  for (let x = 0; x < patches2.length; x++) {
    if (patches2[x].length1 <= patchSize)
      continue;
    const bigpatch = patches2[x];
    patches2.splice(x--, 1);
    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = "";
    for (; bigpatch.diffs.length !== 0; ) {
      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);
      let empty = !0;
      if (preContext !== "") {
        const precontextByteCount = countUtf8Bytes(preContext);
        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);
      }
      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {
        const diffType = bigpatch.diffs[0][0];
        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);
        if (diffType === DIFF_INSERT) {
          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;
          const diff2 = bigpatch.diffs.shift();
          diff2 && patch.diffs.push(diff2), empty = !1;
        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));
      }
      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);
      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);
      postContext !== "" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches2.splice(++x, 0, patch);
    }
  }
}
function apply(patches2, originalText) {
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  if (typeof patches2 == "string")
    throw new Error("Patches must be an array - pass the patch to `parsePatch()` first");
  let text = originalText;
  if (patches2.length === 0)
    return [text, []];
  const parsed = adjustIndiciesToUcs2(patches2, text, {
    allowExceedingIndices: opts.allowExceedingIndices
  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);
  text = nullPadding + text + nullPadding, splitMax(parsed, margin);
  let delta = 0;
  const results = [];
  for (let x = 0; x < parsed.length; x++) {
    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);
    let startLoc, endLoc = -1;
    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)
      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;
    else {
      results[x] = !0, delta = startLoc - expectedLoc;
      let text2;
      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)
        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);
      else {
        let diffs = diff(text1, text2, {
          checkLines: !1
        });
        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)
          results[x] = !1;
        else {
          diffs = cleanupSemanticLossless(diffs);
          let index1 = 0, index2 = 0;
          for (let y = 0; y < parsed[x].diffs.length; y++) {
            const mod = parsed[x].diffs[y];
            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);
          }
        }
      }
    }
  }
  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];
}
const patchHeader = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/;
function parse(textline) {
  if (!textline)
    return [];
  const patches2 = [], lines = textline.split(`
`);
  let textPointer = 0;
  for (; textPointer < lines.length; ) {
    const m = lines[textPointer].match(patchHeader);
    if (!m)
      throw new Error("Invalid patch string: ".concat(lines[textPointer]));
    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));
    for (patches2.push(patch), m[2] === "" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === "0" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === "" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === "0" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {
      const currentLine = lines[textPointer], sign = currentLine.charAt(0);
      if (sign === "@")
        break;
      if (sign === "") {
        textPointer++;
        continue;
      }
      let line;
      try {
        line = decodeURI(currentLine.slice(1));
      } catch {
        throw new Error("Illegal escape in parse: ".concat(currentLine));
      }
      const utf8Diff = countUtf8Bytes(line) - line.length;
      if (sign === "-")
        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;
      else if (sign === "+")
        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;
      else if (sign === " ")
        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;
      else
        throw new Error('Invalid patch mode "'.concat(sign, '" in: ').concat(line));
      textPointer++;
    }
  }
  return patches2;
}
function toInt(num) {
  return parseInt(num, 10);
}
const debug$i = debugWithName("applyPatches"), debugVerbose$4 = debug$i.enabled && !0;
function createApplyPatch(schemaTypes) {
  return (editor, patch) => {
    let changed = !1;
    debugVerbose$4 && (debug$i(
      `

NEW PATCH =============================================================`
    ), debug$i(JSON.stringify(patch, null, 2)));
    try {
      switch (patch.type) {
        case "insert":
          changed = insertPatch(editor, patch, schemaTypes);
          break;
        case "unset":
          changed = unsetPatch(editor, patch);
          break;
        case "set":
          changed = setPatch(editor, patch);
          break;
        case "diffMatchPatch":
          changed = diffMatchPatch(editor, patch);
          break;
        default:
          debug$i("Unhandled patch", patch.type);
      }
    } catch (err) {
      console.error(err);
    }
    return changed;
  };
}
function diffMatchPatch(editor, patch) {
  const { block, child, childPath } = findBlockAndChildFromPath(
    editor,
    patch.path
  );
  if (!block)
    return debug$i("Block not found"), !1;
  if (!child || !childPath)
    return debug$i("Child not found"), !1;
  if (!(block && editor.isTextBlock(block) && patch.path.length === 4 && patch.path[1] === "children" && patch.path[3] === "text") || !slate.Text.isText(child))
    return !1;
  const patches2 = parse(patch.value), [newValue] = apply(patches2, child.text, {
    allowExceedingIndices: !0
  }), diff$1 = cleanupEfficiency(diff(child.text, newValue), 5);
  debugState(editor, "before");
  let offset = 0;
  for (const [op, text] of diff$1)
    op === DIFF_INSERT ? (editor.apply({ type: "insert_text", path: childPath, offset, text }), offset += text.length) : op === DIFF_DELETE ? editor.apply({ type: "remove_text", path: childPath, offset, text }) : op === DIFF_EQUAL && (offset += text.length);
  return debugState(editor, "after"), !0;
}
function insertPatch(editor, patch, schemaTypes) {
  const {
    block: targetBlock,
    child: targetChild,
    blockPath: targetBlockPath,
    childPath: targetChildPath
  } = findBlockAndChildFromPath(editor, patch.path);
  if (!targetBlock || !targetBlockPath)
    return debug$i("Block not found"), !1;
  if (patch.path.length > 1 && patch.path[1] !== "children")
    return debug$i("Ignoring patch targeting void value"), !1;
  if (patch.path.length === 1) {
    const { items: items2, position: position2 } = patch, blocksToInsert = toSlateValue(
      items2,
      { schemaTypes },
      KEY_TO_SLATE_ELEMENT.get(editor)
    ), targetBlockIndex = targetBlockPath[0], normalizedIdx2 = position2 === "after" ? targetBlockIndex + 1 : targetBlockIndex;
    return debug$i(`Inserting blocks at path [${normalizedIdx2}]`), debugState(editor, "before"), slate.Transforms.insertNodes(editor, blocksToInsert, { at: [normalizedIdx2] }), debugState(editor, "after"), !0;
  }
  const { items, position } = patch;
  if (!targetChild || !targetChildPath)
    return debug$i("Child not found"), !1;
  const childrenToInsert = targetBlock && toSlateValue(
    [{ ...targetBlock, children: items }],
    { schemaTypes },
    KEY_TO_SLATE_ELEMENT.get(editor)
  ), targetChildIndex = targetChildPath[1], normalizedIdx = position === "after" ? targetChildIndex + 1 : targetChildIndex, childInsertPath = [targetChildPath[0], normalizedIdx];
  return debug$i(`Inserting children at path ${childInsertPath}`), debugState(editor, "before"), childrenToInsert && slate.Element.isElement(childrenToInsert[0]) && slate.Transforms.insertNodes(editor, childrenToInsert[0].children, {
    at: childInsertPath
  }), debugState(editor, "after"), !0;
}
function setPatch(editor, patch) {
  let value = patch.value;
  typeof patch.path[3] == "string" && (value = {}, value[patch.path[3]] = patch.value);
  const { block, blockPath, child, childPath } = findBlockAndChildFromPath(
    editor,
    patch.path
  );
  if (!block)
    return debug$i("Block not found"), !1;
  const isTextBlock = editor.isTextBlock(block);
  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== "children")
    return debug$i("Ignoring setting void value"), !1;
  if (debugState(editor, "before"), isTextBlock && child && childPath) {
    if (slate.Text.isText(value) && slate.Text.isText(child)) {
      const newText = child.text;
      value.text !== newText && (debug$i("Setting text property"), editor.apply({
        type: "remove_text",
        path: childPath,
        offset: 0,
        text: newText
      }), editor.apply({
        type: "insert_text",
        path: childPath,
        offset: 0,
        text: value.text
      }), editor.onChange());
    } else
      debug$i("Setting non-text property"), editor.apply({
        type: "set_node",
        path: childPath,
        properties: {},
        newProperties: value
      });
    return !0;
  } else if (slate.Element.isElement(block) && patch.path.length === 1 && blockPath) {
    debug$i("Setting block property");
    const { children, ...nextRest } = value, { children: prevChildren, ...prevRest } = block || { children: void 0 };
    editor.apply({
      type: "set_node",
      path: blockPath,
      properties: { ...prevRest },
      newProperties: nextRest
    }), debug$i("Setting children"), block.children.forEach((c, cIndex) => {
      editor.apply({
        type: "remove_node",
        path: blockPath.concat(block.children.length - 1 - cIndex),
        node: c
      });
    }), Array.isArray(children) && children.forEach((c, cIndex) => {
      editor.apply({
        type: "insert_node",
        path: blockPath.concat(cIndex),
        node: c
      });
    });
  } else if (block && "value" in block) {
    const newVal = patches.applyAll([block.value], [patch])[0];
    return slate.Transforms.setNodes(editor, { ...block, value: newVal }, { at: blockPath }), !0;
  }
  return debugState(editor, "after"), !0;
}
function unsetPatch(editor, patch) {
  if (patch.path.length === 0) {
    debug$i("Removing everything"), debugState(editor, "before");
    const previousSelection = editor.selection;
    return slate.Transforms.deselect(editor), editor.children.forEach((_child, i) => {
      slate.Transforms.removeNodes(editor, { at: [i] });
    }), slate.Transforms.insertNodes(editor, editor.pteCreateTextBlock({ decorators: [] })), previousSelection && slate.Transforms.select(editor, {
      anchor: { path: [0, 0], offset: 0 },
      focus: { path: [0, 0], offset: 0 }
    }), editor.onChange(), debugState(editor, "after"), !0;
  }
  const { block, blockPath, child, childPath } = findBlockAndChildFromPath(
    editor,
    patch.path
  );
  if (patch.path.length === 1) {
    if (!block || !blockPath)
      return debug$i("Block not found"), !1;
    const blockIndex = blockPath[0];
    return debug$i(`Removing block at path [${blockIndex}]`), debugState(editor, "before"), slate.Transforms.removeNodes(editor, { at: [blockIndex] }), debugState(editor, "after"), !0;
  }
  return editor.isTextBlock(block) && patch.path[1] === "children" && patch.path.length === 3 ? !child || !childPath ? (debug$i("Child not found"), !1) : (debug$i(`Unsetting child at path ${JSON.stringify(childPath)}`), debugState(editor, "before"), debugVerbose$4 && debug$i(`Removing child at path ${JSON.stringify(childPath)}`), slate.Transforms.removeNodes(editor, { at: childPath }), debugState(editor, "after"), !0) : !1;
}
function isKeyedSegment(segment) {
  return typeof segment == "object" && "_key" in segment;
}
function debugState(editor, stateName) {
  debugVerbose$4 && (debug$i(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2)), debug$i(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2)));
}
function findBlockFromPath(editor, path) {
  let blockIndex = -1;
  const block = editor.children.find((node, index) => {
    const isMatch = isKeyedSegment(path[0]) ? node._key === path[0]._key : index === path[0];
    return isMatch && (blockIndex = index), isMatch;
  });
  return block ? { block, path: [blockIndex] } : {};
}
function findBlockAndChildFromPath(editor, path) {
  const { block, path: blockPath } = findBlockFromPath(editor, path);
  if (!(slate.Element.isElement(block) && path[1] === "children"))
    return { block, blockPath, child: void 0, childPath: void 0 };
  let childIndex = -1;
  const child = block.children.find((node, index) => {
    const isMatch = isKeyedSegment(path[2]) ? node._key === path[2]._key : index === path[2];
    return isMatch && (childIndex = index), isMatch;
  });
  return child ? {
    block,
    child,
    blockPath,
    childPath: blockPath?.concat(childIndex)
  } : { block, blockPath, child: void 0, childPath: void 0 };
}
const PATCHING = /* @__PURE__ */ new WeakMap();
function withoutPatching(editor, fn) {
  const prev = isPatching(editor);
  PATCHING.set(editor, !1), fn(), PATCHING.set(editor, prev);
}
function isPatching(editor) {
  return PATCHING.get(editor);
}
const debug$h = debugWithName("plugin:withUndoRedo"), debugVerbose$3 = debug$h.enabled && !1, SAVING = /* @__PURE__ */ new WeakMap(), REMOTE_PATCHES = /* @__PURE__ */ new WeakMap(), UNDO_STEP_LIMIT = 1e3, isSaving = (editor) => {
  const state = SAVING.get(editor);
  return state === void 0 ? !0 : state;
}, getRemotePatches = (editor) => (REMOTE_PATCHES.get(editor) || REMOTE_PATCHES.set(editor, []), REMOTE_PATCHES.get(editor) || []);
function createWithUndoRedo(options) {
  const { readOnly, patches$, blockSchemaType } = options;
  return (editor) => {
    let previousSnapshot = fromSlateValue(
      editor.children,
      blockSchemaType.name
    );
    const remotePatches = getRemotePatches(editor);
    patches$ && editor.subscriptions.push(() => {
      debug$h("Subscribing to patches");
      const sub = patches$.subscribe(({ patches: patches2, snapshot }) => {
        let reset = !1;
        patches2.forEach((patch) => {
          if (!reset && patch.origin !== "local" && remotePatches) {
            if (patch.type === "unset" && patch.path.length === 0) {
              debug$h(
                "Someone else cleared the content, resetting undo/redo history"
              ), editor.history = { undos: [], redos: [] }, remotePatches.splice(0, remotePatches.length), SAVING.set(editor, !0), reset = !0;
              return;
            }
            remotePatches.push({
              patch,
              time: /* @__PURE__ */ new Date(),
              snapshot,
              previousSnapshot
            });
          }
        }), previousSnapshot = snapshot;
      });
      return () => {
        debug$h("Unsubscribing to patches"), sub.unsubscribe();
      };
    }), editor.history = { undos: [], redos: [] };
    const { apply: apply2 } = editor;
    return editor.apply = (op) => {
      if (readOnly) {
        apply2(op);
        return;
      }
      const { operations, history } = editor, { undos } = history, step = undos[undos.length - 1], lastOp = step && step.operations && step.operations[step.operations.length - 1], overwrite = shouldOverwrite(op, lastOp), save = isSaving(editor);
      let merge = !0;
      if (save) {
        if (step ? operations.length === 0 && (merge = shouldMerge(op, lastOp) || overwrite) : merge = !1, step && merge)
          step.operations.push(op);
        else {
          const newStep = {
            operations: [
              ...editor.selection === null ? [] : [createSelectOperation(editor)],
              op
            ],
            timestamp: /* @__PURE__ */ new Date()
          };
          undos.push(newStep), debug$h("Created new undo step", step);
        }
        for (; undos.length > UNDO_STEP_LIMIT; )
          undos.shift();
        shouldClear(op) && (history.redos = []);
      }
      apply2(op);
    }, editor.undo = () => {
      if (readOnly)
        return;
      const { undos } = editor.history;
      if (undos.length > 0) {
        const step = undos[undos.length - 1];
        if (debug$h("Undoing", step), step.operations.length > 0) {
          const otherPatches = remotePatches.filter(
            (item) => item.time >= step.timestamp
          );
          let transformedOperations = step.operations;
          otherPatches.forEach((item) => {
            transformedOperations = flatten__default.default(
              transformedOperations.map(
                (op) => transformOperation(
                  editor,
                  item.patch,
                  op,
                  item.snapshot,
                  item.previousSnapshot
                )
              )
            );
          });
          const reversedOperations = transformedOperations.map(slate.Operation.inverse).reverse();
          try {
            slate.Editor.withoutNormalizing(editor, () => {
              withUndoing(editor, () => {
                withoutSaving(editor, () => {
                  reversedOperations.forEach((op) => {
                    editor.apply(op);
                  });
                });
              });
            }), editor.normalize(), editor.onChange();
          } catch (err) {
            debug$h("Could not perform undo step", err), remotePatches.splice(0, remotePatches.length), slate.Transforms.deselect(editor), editor.history = { undos: [], redos: [] }, SAVING.set(editor, !0), setIsUndoing(editor, !1), editor.onChange();
            return;
          }
          editor.history.redos.push(step), editor.history.undos.pop();
        }
      }
    }, editor.redo = () => {
      if (readOnly)
        return;
      const { redos } = editor.history;
      if (redos.length > 0) {
        const step = redos[redos.length - 1];
        if (debug$h("Redoing", step), step.operations.length > 0) {
          const otherPatches = remotePatches.filter(
            (item) => item.time >= step.timestamp
          );
          let transformedOperations = step.operations;
          otherPatches.forEach((item) => {
            transformedOperations = flatten__default.default(
              transformedOperations.map(
                (op) => transformOperation(
                  editor,
                  item.patch,
                  op,
                  item.snapshot,
                  item.previousSnapshot
                )
              )
            );
          });
          try {
            slate.Editor.withoutNormalizing(editor, () => {
              withRedoing(editor, () => {
                withoutSaving(editor, () => {
                  transformedOperations.forEach((op) => {
                    editor.apply(op);
                  });
                });
              });
            }), editor.normalize(), editor.onChange();
          } catch (err) {
            debug$h("Could not perform redo step", err), remotePatches.splice(0, remotePatches.length), slate.Transforms.deselect(editor), editor.history = { undos: [], redos: [] }, SAVING.set(editor, !0), setIsRedoing(editor, !1), editor.onChange();
            return;
          }
          editor.history.undos.push(step), editor.history.redos.pop();
        }
      }
    }, editor;
  };
}
function transformOperation(editor, patch, operation, snapshot, previousSnapshot) {
  debugVerbose$3 && (debug$h(
    `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`
  ), debug$h(`Operation ${JSON.stringify(operation)}`), debug$h(`Patch ${JSON.stringify(patch)}`));
  const transformedOperation = { ...operation };
  if (patch.type === "insert" && patch.path.length === 1) {
    const insertBlockIndex = (snapshot || []).findIndex(
      (blk) => isEqual__default.default({ _key: blk._key }, patch.path[0])
    );
    return debug$h(
      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`
    ), [
      adjustBlockPath(
        transformedOperation,
        patch.items.length,
        insertBlockIndex
      )
    ];
  }
  if (patch.type === "unset" && patch.path.length === 1) {
    const unsetBlockIndex = (previousSnapshot || []).findIndex(
      (blk) => isEqual__default.default({ _key: blk._key }, patch.path[0])
    );
    return "path" in transformedOperation && Array.isArray(transformedOperation.path) && transformedOperation.path[0] === unsetBlockIndex ? (debug$h("Skipping transformation that targeted removed block"), []) : (debugVerbose$3 && (debug$h(`Selection ${JSON.stringify(editor.selection)}`), debug$h(
      `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`
    )), [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]);
  }
  if (patch.type === "unset" && patch.path.length === 0)
    return debug$h(
      `Adjusting selection for unset everything patch and ${operation.type} operation`
    ), [];
  if (patch.type === "diffMatchPatch") {
    const operationTargetBlock = findOperationTargetBlock(
      editor,
      transformedOperation
    );
    return !operationTargetBlock || !isEqual__default.default({ _key: operationTargetBlock._key }, patch.path[0]) ? [transformedOperation] : (parse(patch.value).forEach((diffPatch) => {
      let adjustOffsetBy = 0, changedOffset = diffPatch.utf8Start1;
      const { diffs } = diffPatch;
      if (diffs.forEach((diff2, index) => {
        const [diffType, text] = diff2;
        diffType === DIFF_INSERT ? (adjustOffsetBy += text.length, changedOffset += text.length) : diffType === DIFF_DELETE ? (adjustOffsetBy -= text.length, changedOffset -= text.length) : diffType === DIFF_EQUAL && (diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL) || (changedOffset += text.length));
      }), transformedOperation.type === "insert_text" && changedOffset < transformedOperation.offset && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === "remove_text" && changedOffset <= transformedOperation.offset - transformedOperation.text.length && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === "set_selection") {
        const currentFocus = transformedOperation.properties?.focus ? { ...transformedOperation.properties.focus } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? { ...transformedOperation.properties.anchor } : void 0, newFocus = transformedOperation?.newProperties?.focus ? { ...transformedOperation.newProperties.focus } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? { ...transformedOperation.newProperties.anchor } : void 0;
        (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {
          point && changedOffset < point.offset && (point.offset += adjustOffsetBy);
        }), currentFocus && currentAnchor && (transformedOperation.properties = {
          focus: currentFocus,
          anchor: currentAnchor
        }), newFocus && newAnchor && (transformedOperation.newProperties = {
          focus: newFocus,
          anchor: newAnchor
        }));
      }
    }), [transformedOperation]);
  }
  return [transformedOperation];
}
function adjustBlockPath(operation, level, blockIndex) {
  const transformedOperation = { ...operation };
  if (blockIndex >= 0 && transformedOperation.type !== "set_selection" && Array.isArray(transformedOperation.path) && transformedOperation.path[0] >= blockIndex + level && transformedOperation.path[0] + level > -1) {
    const newPath = [
      transformedOperation.path[0] + level,
      ...transformedOperation.path.slice(1)
    ];
    transformedOperation.path = newPath;
  }
  if (transformedOperation.type === "set_selection") {
    const currentFocus = transformedOperation.properties?.focus ? { ...transformedOperation.properties.focus } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? { ...transformedOperation.properties.anchor } : void 0, newFocus = transformedOperation?.newProperties?.focus ? { ...transformedOperation.newProperties.focus } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? { ...transformedOperation.newProperties.anchor } : void 0;
    (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {
      point && point.path[0] >= blockIndex + level && point.path[0] + level > -1 && (point.path = [point.path[0] + level, ...point.path.slice(1)]);
    }), currentFocus && currentAnchor && (transformedOperation.properties = {
      focus: currentFocus,
      anchor: currentAnchor
    }), newFocus && newAnchor && (transformedOperation.newProperties = {
      focus: newFocus,
      anchor: newAnchor
    }));
  }
  return transformedOperation;
}
const shouldMerge = (op, prev) => !!(op.type === "set_selection" || prev && op.type === "insert_text" && prev.type === "insert_text" && op.offset === prev.offset + prev.text.length && slate.Path.equals(op.path, prev.path) && op.text !== " " || prev && op.type === "remove_text" && prev.type === "remove_text" && op.offset + op.text.length === prev.offset && slate.Path.equals(op.path, prev.path)), shouldOverwrite = (op, prev) => !!(prev && op.type === "set_selection" && prev.type === "set_selection"), shouldClear = (op) => op.type !== "set_selection";
function withoutSaving(editor, fn) {
  const prev = isSaving(editor);
  SAVING.set(editor, !1), fn(), SAVING.set(editor, prev);
}
function createSelectOperation(editor) {
  return {
    type: "set_selection",
    properties: { ...editor.selection },
    newProperties: { ...editor.selection }
  };
}
function findOperationTargetBlock(editor, operation) {
  let block;
  return operation.type === "set_selection" && editor.selection ? block = editor.children[editor.selection.focus.path[0]] : "path" in operation && (block = editor.children[operation.path[0]]), block;
}
const debug$g = debugWithName("plugin:withPatches");
function createWithPatches({
  editorActor,
  patches$,
  patchFunctions,
  readOnly,
  schemaTypes
}) {
  let previousChildren;
  const applyPatch = createApplyPatch(schemaTypes);
  return function(editor) {
    IS_PROCESSING_REMOTE_CHANGES.set(editor, !1), PATCHING.set(editor, !0), previousChildren = [...editor.children];
    const { apply: apply2 } = editor;
    let bufferedPatches = [];
    const handleBufferedRemotePatches = () => {
      if (bufferedPatches.length === 0)
        return;
      const patches2 = bufferedPatches;
      bufferedPatches = [];
      let changed = !1;
      withRemoteChanges(editor, () => {
        slate.Editor.withoutNormalizing(editor, () => {
          withoutPatching(editor, () => {
            withoutSaving(editor, () => {
              patches2.forEach((patch) => {
                debug$g.enabled && debug$g(`Handling remote patch ${JSON.stringify(patch)}`), changed = applyPatch(editor, patch);
              });
            });
          });
        }), changed && (editor.normalize(), editor.onChange());
      });
    }, handlePatches = ({ patches: patches2 }) => {
      const remotePatches = patches2.filter((p) => p.origin !== "local");
      remotePatches.length !== 0 && (bufferedPatches = bufferedPatches.concat(remotePatches), handleBufferedRemotePatches());
    };
    return patches$ && editor.subscriptions.push(() => {
      debug$g("Subscribing to patches$");
      const sub = patches$.subscribe(handlePatches);
      return () => {
        debug$g("Unsubscribing to patches$"), sub.unsubscribe();
      };
    }), editor.apply = (operation) => {
      if (readOnly)
        return apply2(operation), editor;
      let patches$1 = [];
      previousChildren = editor.children;
      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes);
      apply2(operation);
      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes);
      if (!isPatching(editor))
        return editor;
      switch (editorWasEmpty && !editorIsEmpty && operation.type !== "set_selection" && patches$1.push(patches.insert(previousChildren, "before", [0])), operation.type) {
        case "insert_text":
          patches$1 = [
            ...patches$1,
            ...patchFunctions.insertTextPatch(
              editor,
              operation,
              previousChildren
            )
          ];
          break;
        case "remove_text":
          patches$1 = [
            ...patches$1,
            ...patchFunctions.removeTextPatch(
              editor,
              operation,
              previousChildren
            )
          ];
          break;
        case "remove_node":
          patches$1 = [
            ...patches$1,
            ...patchFunctions.removeNodePatch(
              editor,
              operation,
              previousChildren
            )
          ];
          break;
        case "split_node":
          patches$1 = [
            ...patches$1,
            ...patchFunctions.splitNodePatch(
              editor,
              operation,
              previousChildren
            )
          ];
          break;
        case "insert_node":
          patches$1 = [
            ...patches$1,
            ...patchFunctions.insertNodePatch(
              editor,
              operation,
              previousChildren
            )
          ];
          break;
        case "set_node":
          patches$1 = [
            ...patches$1,
            ...patchFunctions.setNodePatch(editor, operation, previousChildren)
          ];
          break;
        case "merge_node":
          patches$1 = [
            ...patches$1,
            ...patchFunctions.mergeNodePatch(
              editor,
              operation,
              previousChildren
            )
          ];
          break;
        case "move_node":
          patches$1 = [
            ...patches$1,
            ...patchFunctions.moveNodePatch(
              editor,
              operation,
              previousChildren
            )
          ];
          break;
      }
      return !editorWasEmpty && editorIsEmpty && ["merge_node", "set_node", "remove_text", "remove_node"].includes(
        operation.type
      ) && (patches$1 = [...patches$1, patches.unset([])], editorActor.send({
        type: "unset",
        previousValue: fromSlateValue(
          previousChildren,
          schemaTypes.block.name,
          KEY_TO_VALUE_ELEMENT.get(editor)
        )
      })), editorWasEmpty && patches$1.length > 0 && (patches$1 = [patches.setIfMissing([], []), ...patches$1]), patches$1.length > 0 && patches$1.forEach((patch) => {
        editorActor.send({
          type: "patch",
          patch: { ...patch, origin: "local" }
        });
      }), editor;
    }, editor;
  };
}
const debug$f = debugWithName("plugin:withPlaceholderBlock");
function createWithPlaceholderBlock() {
  return function(editor) {
    const { apply: apply2 } = editor;
    return editor.apply = (op) => {
      if (isChangingRemotely(editor)) {
        apply2(op);
        return;
      }
      if (isUndoing(editor) || isRedoing(editor)) {
        apply2(op);
        return;
      }
      if (op.type === "remove_node") {
        const node = op.node;
        if (op.path[0] === 0 && slate.Editor.isVoid(editor, node)) {
          const nextPath = slate.Path.next(op.path);
          editor.children[nextPath[0]] || (debug$f("Adding placeholder block"), slate.Editor.insertNode(
            editor,
            editor.pteCreateTextBlock({ decorators: [] })
          ));
        }
      }
      apply2(op);
    }, editor;
  };
}
const debug$e = debugWithName("plugin:withPortableTextBlockStyle");
function createWithPortableTextBlockStyle(editorActor, types2) {
  const defaultStyle = types2.styles[0].value;
  return function(editor) {
    const { normalizeNode } = editor;
    return editor.normalizeNode = (nodeEntry) => {
      const [, path] = nodeEntry;
      for (const op of editor.operations)
        if (op.type === "split_node" && op.path.length === 1 && editor.isTextBlock(op.properties) && op.properties.style !== defaultStyle && op.path[0] === path[0] && !slate.Path.equals(path, op.path)) {
          const [child] = slate.Editor.node(editor, [op.path[0] + 1, 0]);
          if (slate.Text.isText(child) && child.text === "") {
            debug$e(`Normalizing split node to ${defaultStyle} style`, op), editorActor.send({ type: "normalizing" }), slate.Transforms.setNodes(
              editor,
              { style: defaultStyle },
              { at: [op.path[0] + 1], voids: !1 }
            ), editorActor.send({ type: "done normalizing" });
            return;
          }
        }
      normalizeNode(nodeEntry);
    }, editor.pteHasBlockStyle = (style) => editor.selection ? [
      ...slate.Editor.nodes(editor, {
        at: editor.selection,
        match: (node) => editor.isTextBlock(node) && node.style === style
      })
    ].length > 0 : !1, editor.pteToggleBlockStyle = (blockStyle) => {
      editor.selection && ([
        ...slate.Editor.nodes(editor, {
          at: editor.selection,
          match: (node) => editor.isTextBlock(node)
        })
      ].forEach(([node, path]) => {
        editor.isTextBlock(node) && node.style === blockStyle ? (debug$e(`Unsetting block style '${blockStyle}'`), slate.Transforms.setNodes(
          editor,
          { ...node, style: defaultStyle },
          {
            at: path
          }
        )) : (blockStyle ? debug$e(`Setting style '${blockStyle}'`) : debug$e("Setting default style", defaultStyle), slate.Transforms.setNodes(
          editor,
          {
            ...node,
            style: blockStyle || defaultStyle
          },
          { at: path }
        ));
      }), editor.onChange());
    }, editor;
  };
}
const debug$d = debugWithName("plugin:withPortableTextLists"), MAX_LIST_LEVEL = 10;
function createWithPortableTextLists(types2) {
  return function(editor) {
    return editor.pteToggleListItem = (listItemStyle) => {
      editor.pteHasListStyle(listItemStyle) ? (debug$d(`Remove list item '${listItemStyle}'`), editor.pteUnsetListItem(listItemStyle)) : (debug$d(`Add list item '${listItemStyle}'`), editor.pteSetListItem(listItemStyle));
    }, editor.pteUnsetListItem = (listItemStyle) => {
      editor.selection && [
        ...slate.Editor.nodes(editor, {
          at: editor.selection,
          match: (node) => slate.Element.isElement(node) && node._type === types2.block.name
        })
      ].forEach(([node, path]) => {
        if (editor.isListBlock(node)) {
          const { listItem, level, ...rest } = node, newNode = {
            ...rest,
            listItem: void 0,
            level: void 0
          };
          debug$d(`Unsetting list '${listItemStyle}'`), slate.Transforms.setNodes(editor, newNode, { at: path });
        }
      });
    }, editor.pteSetListItem = (listItemStyle) => {
      editor.selection && [
        ...slate.Editor.nodes(editor, {
          at: editor.selection,
          match: (node) => editor.isTextBlock(node)
        })
      ].forEach(([node, path]) => {
        debug$d(`Setting list '${listItemStyle}'`), slate.Transforms.setNodes(
          editor,
          {
            ...node,
            level: 1,
            listItem: listItemStyle || types2.lists[0] && types2.lists[0].value
          },
          { at: path }
        );
      });
    }, editor.pteEndList = () => {
      if (!editor.selection)
        return !1;
      const selectedBlocks = [
        ...slate.Editor.nodes(editor, {
          at: editor.selection,
          match: (node) => slate.Element.isElement(node) && editor.isListBlock(node) && node.children.length === 1 && slate.Text.isText(node.children[0]) && node.children[0].text === ""
        })
      ];
      return selectedBlocks.length === 0 ? !1 : (selectedBlocks.forEach(([node, path]) => {
        slate.Element.isElement(node) && (debug$d("Unset list"), slate.Transforms.setNodes(
          editor,
          {
            ...node,
            level: void 0,
            listItem: void 0
          },
          { at: path }
        ));
      }), !0);
    }, editor.pteIncrementBlockLevels = (reverse) => {
      if (!editor.selection)
        return !1;
      const selectedBlocks = [
        ...slate.Editor.nodes(editor, {
          at: editor.selection,
          match: (node) => !!editor.isListBlock(node)
        })
      ];
      return selectedBlocks.length === 0 ? !1 : (selectedBlocks.forEach(([node, path]) => {
        if (editor.isListBlock(node)) {
          let level = node.level || 1;
          reverse ? (level--, debug$d(
            "Decrementing list level",
            Math.min(MAX_LIST_LEVEL, Math.max(1, level))
          )) : (level++, debug$d(
            "Incrementing list level",
            Math.min(MAX_LIST_LEVEL, Math.max(1, level))
          )), slate.Transforms.setNodes(
            editor,
            { level: Math.min(MAX_LIST_LEVEL, Math.max(1, level)) },
            { at: path }
          );
        }
      }), !0);
    }, editor.pteHasListStyle = (listStyle) => {
      if (!editor.selection)
        return !1;
      const selectedBlocks = [
        ...slate.Editor.nodes(editor, {
          at: editor.selection,
          match: (node) => editor.isTextBlock(node)
        })
      ];
      return selectedBlocks.length > 0 ? selectedBlocks.every(
        ([node]) => editor.isListBlock(node) && node.listItem === listStyle
      ) : !1;
    }, editor;
  };
}
function isPortableTextBlock(node) {
  return (
    // A block doesn't _have_ to be named 'block' - to differentiate between
    // allowed child types and marks, one might name them differently
    typeof node._type == "string" && // Toolkit-types like nested spans are @-prefixed
    node._type[0] !== "@" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array
    (!("markDefs" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans
    node.markDefs.every((def) => typeof def._key == "string")) && // `children` is required and needs to be an array
    "children" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)
    node.children.every((child) => typeof child == "object" && "_type" in child)
  );
}
function getPreviousSpan({
  editor,
  blockPath,
  spanPath
}) {
  let previousSpan;
  for (const [child, childPath] of slate.Node.children(editor, blockPath, {
    reverse: !0
  }))
    if (editor.isTextSpan(child) && slate.Path.isBefore(childPath, spanPath)) {
      previousSpan = child;
      break;
    }
  return previousSpan;
}
function getNextSpan({
  editor,
  blockPath,
  spanPath
}) {
  let nextSpan;
  for (const [child, childPath] of slate.Node.children(editor, blockPath))
    if (editor.isTextSpan(child) && slate.Path.isAfter(childPath, spanPath)) {
      nextSpan = child;
      break;
    }
  return nextSpan;
}
const debug$c = debugWithName("plugin:withPortableTextMarkModel");
function createWithPortableTextMarkModel(editorActor, types2) {
  return function(editor) {
    const { apply: apply2, normalizeNode } = editor, decorators = types2.decorators.map((t) => t.value), forceNewSelection = () => {
      editor.selection && (slate.Transforms.select(editor, { ...editor.selection }), editor.selection = { ...editor.selection });
      const ptRange = toPortableTextRange(
        editor.children,
        editor.selection,
        types2
      );
      editorActor.send({ type: "selection", selection: ptRange });
    };
    return editor.normalizeNode = (nodeEntry) => {
      const [node, path] = nodeEntry;
      if (editor.isTextBlock(node)) {
        const children = slate.Node.children(editor, path);
        for (const [child, childPath] of children) {
          const nextNode = node.children[childPath[1] + 1];
          if (editor.isTextSpan(child) && editor.isTextSpan(nextNode) && isEqual__default.default(child.marks, nextNode.marks)) {
            debug$c(
              "Merging spans",
              JSON.stringify(child, null, 2),
              JSON.stringify(nextNode, null, 2)
            ), editorActor.send({ type: "normalizing" }), slate.Transforms.mergeNodes(editor, {
              at: [childPath[0], childPath[1] + 1],
              voids: !0
            }), editorActor.send({ type: "done normalizing" });
            return;
          }
        }
      }
      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {
        debug$c("Adding .markDefs to block node"), editorActor.send({ type: "normalizing" }), slate.Transforms.setNodes(editor, { markDefs: [] }, { at: path }), editorActor.send({ type: "done normalizing" });
        return;
      }
      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {
        debug$c("Adding .marks to span node"), editorActor.send({ type: "normalizing" }), slate.Transforms.setNodes(editor, { marks: [] }, { at: path }), editorActor.send({ type: "done normalizing" });
        return;
      }
      if (editor.isTextSpan(node)) {
        const blockPath = slate.Path.parent(path), [block] = slate.Editor.node(editor, blockPath), decorators2 = types2.decorators.map((decorator) => decorator.value), annotations = node.marks?.filter(
          (mark) => !decorators2.includes(mark)
        );
        if (editor.isTextBlock(block) && node.text === "" && annotations && annotations.length > 0) {
          debug$c("Removing annotations from empty span node"), editorActor.send({ type: "normalizing" }), slate.Transforms.setNodes(
            editor,
            { marks: node.marks?.filter((mark) => decorators2.includes(mark)) },
            { at: path }
          ), editorActor.send({ type: "done normalizing" });
          return;
        }
      }
      if (editor.isTextBlock(node)) {
        const decorators2 = types2.decorators.map((decorator) => decorator.value);
        for (const [child, childPath] of slate.Node.children(editor, path))
          if (editor.isTextSpan(child)) {
            const marks = child.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !node.markDefs?.find((def) => def._key === mark));
            if (orphanedAnnotations.length > 0) {
              debug$c("Removing orphaned annotations from span node"), editorActor.send({ type: "normalizing" }), slate.Transforms.setNodes(
                editor,
                {
                  marks: marks.filter(
                    (mark) => !orphanedAnnotations.includes(mark)
                  )
                },
                { at: childPath }
              ), editorActor.send({ type: "done normalizing" });
              return;
            }
          }
      }
      if (editor.isTextSpan(node)) {
        const blockPath = slate.Path.parent(path), [block] = slate.Editor.node(editor, blockPath);
        if (editor.isTextBlock(block)) {
          const decorators2 = types2.decorators.map(
            (decorator) => decorator.value
          ), marks = node.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !block.markDefs?.find((def) => def._key === mark));
          if (orphanedAnnotations.length > 0) {
            debug$c("Removing orphaned annotations from span node"), editorActor.send({ type: "normalizing" }), slate.Transforms.setNodes(
              editor,
              {
                marks: marks.filter(
                  (mark) => !orphanedAnnotations.includes(mark)
                )
              },
              { at: path }
            ), editorActor.send({ type: "done normalizing" });
            return;
          }
        }
      }
      if (editor.isTextBlock(node)) {
        const markDefs = node.markDefs ?? [], markDefKeys = /* @__PURE__ */ new Set(), newMarkDefs = [];
        for (const markDef of markDefs)
          markDefKeys.has(markDef._key) || (markDefKeys.add(markDef._key), newMarkDefs.push(markDef));
        if (markDefs.length !== newMarkDefs.length) {
          debug$c("Removing duplicate markDefs"), editorActor.send({ type: "normalizing" }), slate.Transforms.setNodes(editor, { markDefs: newMarkDefs }, { at: path }), editorActor.send({ type: "done normalizing" });
          return;
        }
      }
      if (editor.isTextBlock(node) && !editor.operations.some(
        (op) => op.type === "merge_node" && "markDefs" in op.properties && op.path.length === 1
      )) {
        const newMarkDefs = (node.markDefs || []).filter((def) => node.children.find((child) => slate.Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)));
        if (node.markDefs && !isEqual__default.default(newMarkDefs, node.markDefs)) {
          debug$c("Removing markDef not in use"), editorActor.send({ type: "normalizing" }), slate.Transforms.setNodes(
            editor,
            {
              markDefs: newMarkDefs
            },
            { at: path }
          ), editorActor.send({ type: "done normalizing" });
          return;
        }
      }
      normalizeNode(nodeEntry);
    }, editor.apply = (op) => {
      if (isChangingRemotely(editor)) {
        apply2(op);
        return;
      }
      if (isUndoing(editor) || isRedoing(editor)) {
        apply2(op);
        return;
      }
      if (op.type === "insert_text") {
        const { selection } = editor, collapsedSelection = selection ? slate.Range.isCollapsed(selection) : !1;
        if (selection && collapsedSelection) {
          const [_block, blockPath] = slate.Editor.node(editor, selection, {
            depth: 1
          }), [span, spanPath] = Array.from(
            slate.Editor.nodes(editor, {
              mode: "lowest",
              at: selection.focus,
              match: (n) => editor.isTextSpan(n),
              voids: !1
            })
          )[0] ?? [void 0, void 0], marks = span.marks ?? [], marksWithoutAnnotations = marks.filter(
            (mark) => decorators.includes(mark)
          ), spanHasAnnotations = marks.length > marksWithoutAnnotations.length, spanIsEmpty = span.text.length === 0, atTheBeginningOfSpan = selection.anchor.offset === 0, atTheEndOfSpan = selection.anchor.offset === span.text.length, previousSpan = getPreviousSpan({ editor, blockPath, spanPath }), nextSpan = getNextSpan({ editor, blockPath, spanPath }), nextSpanAnnotations = nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? [], spanAnnotations = marks.filter(
            (mark) => !decorators.includes(mark)
          ), previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some(
            (mark) => !decorators.includes(mark) && marks.includes(mark)
          ) : !1, previousSpanHasSameMarks = previousSpan ? previousSpan.marks?.every((mark) => marks.includes(mark)) : !1, nextSpanSharesSomeAnnotations = spanAnnotations.some(
            (mark) => nextSpanAnnotations?.includes(mark)
          );
          if (spanHasAnnotations && !spanIsEmpty) {
            if (atTheBeginningOfSpan) {
              previousSpanHasSameMarks ? slate.Transforms.insertNodes(editor, {
                _type: "span",
                _key: editorActor.getSnapshot().context.keyGenerator(),
                text: op.text,
                marks: previousSpan?.marks ?? []
              }) : previousSpanHasSameAnnotation ? apply2(op) : slate.Transforms.insertNodes(editor, {
                _type: "span",
                _key: editorActor.getSnapshot().context.keyGenerator(),
                text: op.text,
                marks: []
              });
              return;
            }
            if (atTheEndOfSpan) {
              if (nextSpan && nextSpanSharesSomeAnnotations && nextSpanAnnotations.length < spanAnnotations.length || !nextSpanSharesSomeAnnotations) {
                slate.Transforms.insertNodes(editor, {
                  _type: "span",
                  _key: editorActor.getSnapshot().context.keyGenerator(),
                  text: op.text,
                  marks: nextSpan?.marks ?? []
                });
                return;
              }
              if (!nextSpan) {
                slate.Transforms.insertNodes(editor, {
                  _type: "span",
                  _key: editorActor.getSnapshot().context.keyGenerator(),
                  text: op.text,
                  marks: []
                });
                return;
              }
            }
          }
        }
      }
      if (op.type === "remove_text") {
        const { selection } = editor;
        if (selection && slate.Range.isExpanded(selection)) {
          const [block, blockPath] = slate.Editor.node(editor, selection, {
            depth: 1
          }), [span, spanPath] = Array.from(
            slate.Editor.nodes(editor, {
              mode: "lowest",
              at: { path: op.path, offset: op.offset },
              match: (n) => editor.isTextSpan(n),
              voids: !1
            })
          )[0] ?? [void 0, void 0];
          if (span && block && isPortableTextBlock(block)) {
            const markDefs = block.markDefs ?? [], marks = span.marks ?? [], spanHasAnnotations = marks.some(
              (mark) => markDefs.find((markDef) => markDef._key === mark)
            ), deletingFromTheEnd = op.offset + op.text.length === span.text.length, deletingAllText = op.offset === 0 && deletingFromTheEnd, previousSpan = getPreviousSpan({ editor, blockPath, spanPath }), nextSpan = getNextSpan({ editor, blockPath, spanPath }), previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some(
              (mark) => !decorators.includes(mark) && marks.includes(mark)
            ) : !1, nextSpanHasSameAnnotation = nextSpan ? nextSpan.marks?.some(
              (mark) => !decorators.includes(mark) && marks.includes(mark)
            ) : !1;
            if (spanHasAnnotations && deletingAllText && !previousSpanHasSameAnnotation && !nextSpanHasSameAnnotation) {
              const marksWithoutAnnotationMarks = ({
                ...slate.Editor.marks(editor) || {}
              }.marks || []).filter((mark) => decorators.includes(mark));
              slate.Editor.withoutNormalizing(editor, () => {
                apply2(op), slate.Transforms.setNodes(
                  editor,
                  { marks: marksWithoutAnnotationMarks },
                  { at: op.path }
                );
              }), editor.onChange();
              return;
            }
          }
        }
      }
      if (op.type === "merge_node" && op.path.length === 1 && "markDefs" in op.properties && op.properties._type === types2.block.name && Array.isArray(op.properties.markDefs) && op.properties.markDefs.length > 0 && op.path[0] - 1 >= 0) {
        const [targetBlock, targetPath] = slate.Editor.node(editor, [op.path[0] - 1]);
        if (editor.isTextBlock(targetBlock)) {
          const oldDefs = Array.isArray(targetBlock.markDefs) && targetBlock.markDefs || [], newMarkDefs = uniq__default.default([...oldDefs, ...op.properties.markDefs]);
          debug$c("Copying markDefs over to merged block", op), slate.Transforms.setNodes(
            editor,
            { markDefs: newMarkDefs },
            { at: targetPath, voids: !1 }
          ), apply2(op);
          return;
        }
      }
      apply2(op);
    }, editor.addMark = (mark) => {
      if (editor.selection) {
        if (slate.Range.isExpanded(editor.selection))
          slate.Editor.withoutNormalizing(editor, () => {
            slate.Transforms.setNodes(
              editor,
              {},
              { match: slate.Text.isText, split: !0, hanging: !0 }
            );
            const splitTextNodes = slate.Range.isRange(editor.selection) ? [
              ...slate.Editor.nodes(editor, {
                at: editor.selection,
                match: slate.Text.isText
              })
            ] : [];
            splitTextNodes.length > 1 && splitTextNodes.every((node) => node[0].marks?.includes(mark)) ? editor.removeMark(mark) : splitTextNodes.forEach(([node, path]) => {
              const marks = [
                ...(Array.isArray(node.marks) ? node.marks : []).filter(
                  (eMark) => eMark !== mark
                ),
                mark
              ];
              slate.Transforms.setNodes(
                editor,
                { marks },
                { at: path, match: slate.Text.isText, split: !0, hanging: !0 }
              );
            });
          });
        else {
          const [block, blockPath] = slate.Editor.node(editor, editor.selection, {
            depth: 1
          }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === "" ? block.children[0] : void 0;
          if (lonelyEmptySpan) {
            const existingMarks = lonelyEmptySpan.marks ?? [], existingMarksWithoutDecorator = existingMarks.filter(
              (existingMark) => existingMark !== mark
            );
            slate.Transforms.setNodes(
              editor,
              {
                marks: existingMarks.length === existingMarksWithoutDecorator.length ? [...existingMarks, mark] : existingMarksWithoutDecorator
              },
              {
                at: blockPath,
                match: (node) => editor.isTextSpan(node)
              }
            );
          } else {
            const existingMarks = {
              ...slate.Editor.marks(editor) || {}
            }.marks || [], marks = {
              ...slate.Editor.marks(editor) || {},
              marks: [...existingMarks, mark]
            };
            return editor.marks = marks, forceNewSelection(), editor;
          }
        }
        editor.onChange(), forceNewSelection();
      }
      return editor;
    }, editor.removeMark = (mark) => {
      const { selection } = editor;
      if (selection) {
        if (slate.Range.isExpanded(selection))
          slate.Editor.withoutNormalizing(editor, () => {
            slate.Transforms.setNodes(
              editor,
              {},
              { match: slate.Text.isText, split: !0, hanging: !0 }
            ), editor.selection && [
              ...slate.Editor.nodes(editor, {
                at: editor.selection,
                match: slate.Text.isText
              })
            ].forEach(([node, path]) => {
              const block = editor.children[path[0]];
              slate.Element.isElement(block) && block.children.includes(node) && slate.Transforms.setNodes(
                editor,
                {
                  marks: (Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark),
                  _type: "span"
                },
                { at: path }
              );
            });
          }), slate.Editor.normalize(editor);
        else {
          const [block, blockPath] = slate.Editor.node(editor, selection, {
            depth: 1
          }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === "" ? block.children[0] : void 0;
          if (lonelyEmptySpan) {
            const existingMarksWithoutDecorator = (lonelyEmptySpan.marks ?? []).filter(
              (existingMark) => existingMark !== mark
            );
            slate.Transforms.setNodes(
              editor,
              {
                marks: existingMarksWithoutDecorator
              },
              {
                at: blockPath,
                match: (node) => editor.isTextSpan(node)
              }
            );
          } else {
            const existingMarks = {
              ...slate.Editor.marks(editor) || {}
            }.marks || [], marks = {
              ...slate.Editor.marks(editor) || {},
              marks: existingMarks.filter((eMark) => eMark !== mark)
            };
            return editor.marks = { marks: marks.marks, _type: "span" }, forceNewSelection(), editor;
          }
        }
        editor.onChange(), forceNewSelection();
      }
      return editor;
    }, editor.pteIsMarkActive = (mark) => {
      if (!editor.selection)
        return !1;
      const selectedNodes = Array.from(
        slate.Editor.nodes(editor, { match: slate.Text.isText, at: editor.selection })
      );
      return slate.Range.isExpanded(editor.selection) ? selectedNodes.every((n) => {
        const [node] = n;
        return node.marks?.includes(mark);
      }) : ({
        ...slate.Editor.marks(editor) || {}
      }.marks || []).includes(mark);
    }, editor.pteToggleMark = (mark) => {
      editor.pteIsMarkActive(mark) ? (debug$c(`Remove mark '${mark}'`), slate.Editor.removeMark(editor, mark)) : (debug$c(`Add mark '${mark}'`), slate.Editor.addMark(editor, mark, !0));
    }, editor;
  };
}
const debug$b = debugWithName("plugin:withPortableTextSelections"), debugVerbose$2 = debug$b.enabled && !1;
function createWithPortableTextSelections(editorActor, types2) {
  let prevSelection = null;
  return function(editor) {
    const emitPortableTextSelection = () => {
      if (prevSelection !== editor.selection) {
        let ptRange = null;
        if (editor.selection) {
          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);
          if (existing)
            ptRange = existing;
          else {
            const value = editor.children;
            ptRange = toPortableTextRange(value, editor.selection, types2), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);
          }
        }
        debugVerbose$2 && debug$b(
          `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(
            editor.selection
          )})`
        ), ptRange ? editorActor.send({ type: "selection", selection: ptRange }) : editorActor.send({ type: "selection", selection: null });
      }
      prevSelection = editor.selection;
    }, { onChange } = editor;
    return editor.onChange = () => {
      const hasChanges = editor.operations.length > 0;
      onChange(), hasChanges && emitPortableTextSelection();
    }, editor;
  };
}
const debug$a = debugWithName("plugin:withSchemaTypes");
function createWithSchemaTypes({
  editorActor,
  schemaTypes
}) {
  return function(editor) {
    editor.isTextBlock = (value) => types.isPortableTextTextBlock(value) && value._type === schemaTypes.block.name, editor.isTextSpan = (value) => types.isPortableTextSpan(value) && value._type === schemaTypes.span.name, editor.isListBlock = (value) => types.isPortableTextListBlock(value) && value._type === schemaTypes.block.name, editor.isVoid = (element) => schemaTypes.block.name !== element._type && (schemaTypes.blockObjects.map((obj) => obj.name).includes(element._type) || schemaTypes.inlineObjects.map((obj) => obj.name).includes(element._type)), editor.isInline = (element) => schemaTypes.inlineObjects.map((obj) => obj.name).includes(element._type) && "__inline" in element && element.__inline === !0;
    const { normalizeNode } = editor;
    return editor.normalizeNode = (entry) => {
      const [node, path] = entry;
      if (node._type === void 0 && path.length === 2) {
        debug$a("Setting span type on text node without a type");
        const span = node, key = span._key || editorActor.getSnapshot().context.keyGenerator();
        editorActor.send({ type: "normalizing" }), slate.Transforms.setNodes(
          editor,
          { ...span, _type: schemaTypes.span.name, _key: key },
          { at: path }
        ), editorActor.send({ type: "done normalizing" });
        return;
      }
      if (node._key === void 0 && (path.length === 1 || path.length === 2)) {
        debug$a("Setting missing key on child node without a key");
        const key = editorActor.getSnapshot().context.keyGenerator();
        editorActor.send({ type: "normalizing" }), slate.Transforms.setNodes(editor, { _key: key }, { at: path }), editorActor.send({ type: "done normalizing" });
        return;
      }
      normalizeNode(entry);
    }, editor;
  };
}
const debug$9 = debugWithName("plugin:withUtils");
function createWithUtils({
  editorActor,
  schemaTypes,
  portableTextEditor
}) {
  return function(editor) {
    return editor.pteExpandToWord = () => {
      const { selection } = editor;
      if (selection && !slate.Range.isExpanded(selection)) {
        const [textNode] = slate.Editor.node(editor, selection.focus, { depth: 2 });
        if (!textNode || !slate.Text.isText(textNode) || textNode.text.length === 0) {
          debug$9("pteExpandToWord: Can't expand to word here");
          return;
        }
        const { focus } = selection, focusOffset = focus.offset, charsBefore = textNode.text.slice(0, focusOffset), charsAfter = textNode.text.slice(focusOffset, -1), isEmpty = (str) => str.match(/\s/g), whiteSpaceBeforeIndex = charsBefore.split("").reverse().findIndex((str) => isEmpty(str)), newStartOffset = whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0, whiteSpaceAfterIndex = charsAfter.split("").findIndex((obj) => isEmpty(obj)), newEndOffset = charsBefore.length + (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1);
        if (!(newStartOffset === newEndOffset || Number.isNaN(newStartOffset) || Number.isNaN(newEndOffset))) {
          debug$9("pteExpandToWord: Expanding to focused word"), slate.Transforms.setSelection(editor, {
            anchor: { ...selection.anchor, offset: newStartOffset },
            focus: { ...selection.focus, offset: newEndOffset }
          });
          return;
        }
        debug$9("pteExpandToWord: Can't expand to word here");
      }
    }, editor.pteCreateTextBlock = (options) => toSlateValue(
      [
        {
          _type: schemaTypes.block.name,
          _key: editorActor.getSnapshot().context.keyGenerator(),
          style: schemaTypes.styles[0].value || "normal",
          markDefs: [],
          children: [
            {
              _type: "span",
              _key: editorActor.getSnapshot().context.keyGenerator(),
              text: "",
              marks: options.decorators.filter(
                (decorator) => schemaTypes.decorators.find(({ value }) => value === decorator)
              )
            }
          ]
        }
      ],
      portableTextEditor
    )[0], editor;
  };
}
const debug$8 = debugWithName("plugin:withHotKeys"), DEFAULT_HOTKEYS = {
  marks: {
    "mod+b": "strong",
    "mod+i": "em",
    "mod+u": "underline",
    "mod+'": "code"
  },
  custom: {}
};
function createWithHotkeys(types$1, portableTextEditor, hotkeysFromOptions) {
  const reservedHotkeys = ["enter", "tab", "shift", "delete", "end"], activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS;
  return function(editor) {
    return editor.pteWithHotKeys = (event) => {
      Object.keys(activeHotkeys).forEach((cat) => {
        if (cat === "marks")
          for (const hotkey in activeHotkeys[cat]) {
            if (reservedHotkeys.includes(hotkey))
              throw new Error(`The hotkey ${hotkey} is reserved!`);
            if (isHotkeyEsm.isHotkey(hotkey, event.nativeEvent)) {
              event.preventDefault();
              const possibleMark = activeHotkeys[cat];
              if (possibleMark) {
                const mark = possibleMark[hotkey];
                debug$8(`HotKey ${hotkey} to toggle ${mark}`), editor.pteToggleMark(mark);
              }
            }
          }
        if (cat === "custom")
          for (const hotkey in activeHotkeys[cat]) {
            if (reservedHotkeys.includes(hotkey))
              throw new Error(`The hotkey ${hotkey} is reserved!`);
            if (isHotkeyEsm.isHotkey(hotkey, event.nativeEvent)) {
              const possibleCommand = activeHotkeys[cat];
              if (possibleCommand) {
                const command = possibleCommand[hotkey];
                command(event, portableTextEditor);
              }
            }
          }
      });
      const isEnter = isHotkeyEsm.isHotkey("enter", event.nativeEvent), isTab = isHotkeyEsm.isHotkey("tab", event.nativeEvent), isShiftEnter = isHotkeyEsm.isHotkey("shift+enter", event.nativeEvent), isShiftTab = isHotkeyEsm.isHotkey("shift+tab", event.nativeEvent), isArrowDown = isHotkeyEsm.isHotkey("down", event.nativeEvent), isArrowUp = isHotkeyEsm.isHotkey("up", event.nativeEvent);
      if (isArrowDown && editor.selection) {
        const focusBlock = slate.Node.descendant(
          editor,
          editor.selection.focus.path.slice(0, 1)
        );
        if (focusBlock && slate.Editor.isVoid(editor, focusBlock)) {
          const nextPath = slate.Path.next(editor.selection.focus.path.slice(0, 1));
          if (!slate.Node.has(editor, nextPath)) {
            slate.Transforms.insertNodes(
              editor,
              editor.pteCreateTextBlock({ decorators: [] }),
              {
                at: nextPath
              }
            ), slate.Transforms.select(editor, { path: [...nextPath, 0], offset: 0 }), editor.onChange();
            return;
          }
        }
      }
      if (isArrowUp && editor.selection) {
        const isFirstBlock = editor.selection.focus.path[0] === 0, focusBlock = slate.Node.descendant(
          editor,
          editor.selection.focus.path.slice(0, 1)
        );
        if (isFirstBlock && focusBlock && slate.Editor.isVoid(editor, focusBlock)) {
          slate.Transforms.insertNodes(
            editor,
            editor.pteCreateTextBlock({ decorators: [] }),
            {
              at: [0]
            }
          ), slate.Transforms.select(editor, { path: [0, 0], offset: 0 }), editor.onChange();
          return;
        }
      }
      if ((isTab || isShiftTab) && editor.selection) {
        const [focusChild] = slate.Editor.node(editor, editor.selection.focus, {
          depth: 2
        }), [focusBlock] = types.isPortableTextSpan(focusChild) ? slate.Editor.node(editor, editor.selection.focus, { depth: 1 }) : [], hasAnnotationFocus = focusChild && types.isPortableTextTextBlock(focusBlock) && types.isPortableTextSpan(focusChild) && (focusChild.marks || []).filter(
          (m) => (focusBlock.markDefs || []).map((def) => def._key).includes(m)
        ).length > 0, [start] = slate.Range.edges(editor.selection), atStartOfNode = slate.Editor.isStart(editor, start, start.path);
        focusChild && types.isPortableTextSpan(focusChild) && (!hasAnnotationFocus || atStartOfNode) && editor.pteIncrementBlockLevels(isShiftTab) && event.preventDefault();
      }
      if (isEnter && !isShiftEnter && editor.selection) {
        const focusBlockPath = editor.selection.focus.path.slice(0, 1), focusBlock = slate.Node.descendant(editor, focusBlockPath);
        if (editor.isListBlock(focusBlock)) {
          editor.pteEndList() && event.preventDefault();
          return;
        }
        if (editor.isTextBlock(focusBlock) && focusBlock.style && focusBlock.style !== types$1.styles[0].value) {
          const [, end] = slate.Range.edges(editor.selection);
          if (slate.Editor.isEnd(editor, end, end.path)) {
            slate.Editor.insertNode(
              editor,
              editor.pteCreateTextBlock({ decorators: [] })
            ), event.preventDefault(), editor.onChange();
            return;
          }
        }
      }
    }, editor;
  };
}
function validateValue(value, types$1, keyGenerator) {
  let resolution = null, valid = !0;
  const validChildTypes = [
    types$1.span.name,
    ...types$1.inlineObjects.map((t) => t.name)
  ], validBlockTypes = [
    types$1.block.name,
    ...types$1.blockObjects.map((t) => t.name)
  ];
  return value === void 0 ? { valid: !0, resolution: null, value } : !Array.isArray(value) || value.length === 0 ? {
    valid: !1,
    resolution: {
      patches: [patches.unset([])],
      description: "Editor value must be an array of Portable Text blocks, or undefined.",
      action: "Unset the value",
      item: value,
      i18n: {
        description: "inputs.portable-text.invalid-value.not-an-array.description",
        action: "inputs.portable-text.invalid-value.not-an-array.action"
      }
    },
    value
  } : (value.some((blk, index) => {
    if (!isPlainObject__default.default(blk))
      return resolution = {
        patches: [patches.unset([index])],
        description: `Block must be an object, got ${String(blk)}`,
        action: "Unset invalid item",
        item: blk,
        i18n: {
          description: "inputs.portable-text.invalid-value.not-an-object.description",
          action: "inputs.portable-text.invalid-value.not-an-object.action",
          values: { index }
        }
      }, !0;
    if (!blk._key || typeof blk._key != "string")
      return resolution = {
        patches: [patches.set({ ...blk, _key: keyGenerator() }, [index])],
        description: `Block at index ${index} is missing required _key.`,
        action: "Set the block with a random _key value",
        item: blk,
        i18n: {
          description: "inputs.portable-text.invalid-value.missing-key.description",
          action: "inputs.portable-text.invalid-value.missing-key.action",
          values: { index }
        }
      }, !0;
    if (!blk._type || !validBlockTypes.includes(blk._type)) {
      if (blk._type === "block") {
        const currentBlockTypeName = types$1.block.name;
        return resolution = {
          patches: [
            patches.set({ ...blk, _type: currentBlockTypeName }, [{ _key: blk._key }])
          ],
          description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,
          action: `Use type '${currentBlockTypeName}'`,
          item: blk,
          i18n: {
            description: "inputs.portable-text.invalid-value.incorrect-block-type.description",
            action: "inputs.portable-text.invalid-value.incorrect-block-type.action",
            values: { key: blk._key, expectedTypeName: currentBlockTypeName }
          }
        }, !0;
      }
      return !blk._type && types.isPortableTextTextBlock({ ...blk, _type: types$1.block.name }) ? (resolution = {
        patches: [
          patches.set({ ...blk, _type: types$1.block.name }, [{ _key: blk._key }])
        ],
        description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types$1.block.name}'`,
        action: `Use type '${types$1.block.name}'`,
        item: blk,
        i18n: {
          description: "inputs.portable-text.invalid-value.missing-block-type.description",
          action: "inputs.portable-text.invalid-value.missing-block-type.action",
          values: { key: blk._key, expectedTypeName: types$1.block.name }
        }
      }, !0) : blk._type ? (resolution = {
        patches: [patches.unset([{ _key: blk._key }])],
        description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,
        action: "Remove the block",
        item: blk,
        i18n: {
          description: "inputs.portable-text.invalid-value.disallowed-type.description",
          action: "inputs.portable-text.invalid-value.disallowed-type.action",
          values: { key: blk._key, typeName: blk._type }
        }
      }, !0) : (resolution = {
        patches: [patches.unset([{ _key: blk._key }])],
        description: `Block with _key '${blk._key}' is missing an _type property`,
        action: "Remove the block",
        item: blk,
        i18n: {
          description: "inputs.portable-text.invalid-value.missing-type.description",
          action: "inputs.portable-text.invalid-value.missing-type.action",
          values: { key: blk._key }
        }
      }, !0);
    }
    if (blk._type === types$1.block.name) {
      const textBlock = blk;
      if (textBlock.children && !Array.isArray(textBlock.children))
        return resolution = {
          patches: [patches.set({ children: [] }, [{ _key: textBlock._key }])],
          description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,
          action: "Reset the children property",
          item: textBlock,
          i18n: {
            description: "inputs.portable-text.invalid-value.missing-or-invalid-children.description",
            action: "inputs.portable-text.invalid-value.missing-or-invalid-children.action",
            values: { key: textBlock._key }
          }
        }, !0;
      if (textBlock.children === void 0 || Array.isArray(textBlock.children) && textBlock.children.length === 0) {
        const newSpan = {
          _type: types$1.span.name,
          _key: keyGenerator(),
          text: "",
          marks: []
        };
        return resolution = {
          autoResolve: !0,
          patches: [
            patches.setIfMissing([], [{ _key: blk._key }, "children"]),
            patches.insert([newSpan], "after", [{ _key: blk._key }, "children", 0])
          ],
          description: `Children for text block with _key '${blk._key}' is empty.`,
          action: "Insert an empty text",
          item: blk,
          i18n: {
            description: "inputs.portable-text.invalid-value.empty-children.description",
            action: "inputs.portable-text.invalid-value.empty-children.action",
            values: { key: blk._key }
          }
        }, !0;
      }
      const allUsedMarks = uniq__default.default(
        flatten__default.default(
          textBlock.children.filter((cld) => cld._type === types$1.span.name).map((cld) => cld.marks || [])
        )
      );
      if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {
        const unusedMarkDefs = uniq__default.default(
          blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key))
        );
        if (unusedMarkDefs.length > 0)
          return resolution = {
            autoResolve: !0,
            patches: unusedMarkDefs.map(
              (markDefKey) => patches.unset([{ _key: blk._key }, "markDefs", { _key: markDefKey }])
            ),
            description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(
              ", "
            )}.`,
            action: "Remove unused mark definition item",
            item: blk,
            i18n: {
              description: "inputs.portable-text.invalid-value.orphaned-mark-defs.description",
              action: "inputs.portable-text.invalid-value.orphaned-mark-defs.action",
              values: {
                key: blk._key,
                unusedMarkDefs: unusedMarkDefs.map((m) => m.toString())
              }
            }
          }, !0;
      }
      const orphanedMarks = allUsedMarks.filter(
        (mark) => !types$1.decorators.map((dec) => dec.value).includes(mark)
      ).filter(
        (mark) => textBlock.markDefs === void 0 || !textBlock.markDefs.find((def) => def._key === mark)
      );
      if (orphanedMarks.length > 0) {
        const spanChildren = textBlock.children.filter(
          (cld) => cld._type === types$1.span.name && Array.isArray(cld.marks) && cld.marks.some((mark) => orphanedMarks.includes(mark))
        );
        if (spanChildren) {
          const orphaned = orphanedMarks.join(", ");
          return resolution = {
            autoResolve: !0,
            patches: spanChildren.map((child) => patches.set(
              (child.marks || []).filter(
                (cMrk) => !orphanedMarks.includes(cMrk)
              ),
              [{ _key: blk._key }, "children", { _key: child._key }, "marks"]
            )),
            description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,
            action: "Remove invalid marks",
            item: blk,
            i18n: {
              description: "inputs.portable-text.invalid-value.orphaned-marks.description",
              action: "inputs.portable-text.invalid-value.orphaned-marks.action",
              values: {
                key: blk._key,
                orphanedMarks: orphanedMarks.map((m) => m.toString())
              }
            }
          }, !0;
        }
      }
      textBlock.children.some((child, cIndex) => {
        if (!isPlainObject__default.default(child))
          return resolution = {
            patches: [patches.unset([{ _key: blk._key }, "children", cIndex])],
            description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,
            action: "Remove the item",
            item: blk,
            i18n: {
              description: "inputs.portable-text.invalid-value.non-object-child.description",
              action: "inputs.portable-text.invalid-value.non-object-child.action",
              values: { key: blk._key, index: cIndex }
            }
          }, !0;
        if (!child._key || typeof child._key != "string") {
          const newChild = { ...child, _key: keyGenerator() };
          return resolution = {
            autoResolve: !0,
            patches: [
              patches.set(newChild, [{ _key: blk._key }, "children", cIndex])
            ],
            description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,
            action: "Set a new random _key on the object",
            item: blk,
            i18n: {
              description: "inputs.portable-text.invalid-value.missing-child-key.description",
              action: "inputs.portable-text.invalid-value.missing-child-key.action",
              values: { key: blk._key, index: cIndex }
            }
          }, !0;
        }
        return child._type ? validChildTypes.includes(child._type) ? child._type === types$1.span.name && typeof child.text != "string" ? (resolution = {
          patches: [
            patches.set({ ...child, text: "" }, [
              { _key: blk._key },
              "children",
              { _key: child._key }
            ])
          ],
          description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,
          action: "Write an empty text property to the object",
          item: blk,
          i18n: {
            description: "inputs.portable-text.invalid-value.invalid-span-text.description",
            action: "inputs.portable-text.invalid-value.invalid-span-text.action",
            values: { key: blk._key, childKey: child._key }
          }
        }, !0) : !1 : (resolution = {
          patches: [
            patches.unset([{ _key: blk._key }, "children", { _key: child._key }])
          ],
          description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,
          action: "Remove the object",
          item: blk,
          i18n: {
            description: "inputs.portable-text.invalid-value.disallowed-child-type.description",
            action: "inputs.portable-text.invalid-value.disallowed-child-type.action",
            values: {
              key: blk._key,
              childKey: child._key,
              childType: child._type
            }
          }
        }, !0) : (resolution = {
          patches: [
            patches.unset([{ _key: blk._key }, "children", { _key: child._key }])
          ],
          description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,
          action: "Remove the object",
          item: blk,
          i18n: {
            description: "inputs.portable-text.invalid-value.missing-child-type.description",
            action: "inputs.portable-text.invalid-value.missing-child-type.action",
            values: { key: blk._key, childKey: child._key }
          }
        }, !0);
      }) && (valid = !1);
    }
    return !1;
  }) && (valid = !1), { valid, resolution, value });
}
const debug$7 = debugWithName("plugin:withInsertData");
function createWithInsertData(editorActor, schemaTypes) {
  return function(editor) {
    const blockTypeName = schemaTypes.block.name, spanTypeName = schemaTypes.span.name, whitespaceOnPasteMode = schemaTypes.block.options.unstable_whitespaceOnPasteMode, toPlainText = (blocks) => blocks.map((block) => editor.isTextBlock(block) ? block.children.map((child) => child._type === spanTypeName ? child.text : `[${schemaTypes.inlineObjects.find((t) => t.name === child._type)?.title || "Object"}]`).join("") : `[${schemaTypes.blockObjects.find((t) => t.name === block._type)?.title || "Object"}]`).join(`

`);
    return editor.setFragmentData = (data, originEvent) => {
      const { selection } = editor;
      if (!selection)
        return;
      const [start, end] = slate.Range.edges(selection), startVoid = slate.Editor.void(editor, { at: start.path }), endVoid = slate.Editor.void(editor, { at: end.path });
      if (slate.Range.isCollapsed(selection) && !startVoid)
        return;
      const domRange = slateReact.ReactEditor.toDOMRange(editor, selection);
      let contents = domRange.cloneContents();
      if (endVoid) {
        const [voidNode] = endVoid, r = domRange.cloneRange(), domNode = slateReact.ReactEditor.toDOMNode(editor, voidNode);
        r.setEndAfter(domNode), contents = r.cloneContents();
      }
      Array.from(contents.querySelectorAll("[data-slate-zero-width]")).forEach(
        (zw) => {
          const isNewline = zw.getAttribute("data-slate-zero-width") === "n";
          zw.textContent = isNewline ? `
` : "";
        }
      ), Array.from(contents.querySelectorAll("*")).forEach((elm) => {
        elm.removeAttribute("contentEditable"), elm.removeAttribute("data-slate-inline"), elm.removeAttribute("data-slate-leaf"), elm.removeAttribute("data-slate-node"), elm.removeAttribute("data-slate-spacer"), elm.removeAttribute("data-slate-string"), elm.removeAttribute("data-slate-zero-width"), elm.removeAttribute("draggable");
        for (const key in elm.attributes)
          elm.hasAttribute(key) && elm.removeAttribute(key);
      });
      const div = contents.ownerDocument.createElement("div");
      div.appendChild(contents), div.setAttribute("hidden", "true"), contents.ownerDocument.body.appendChild(div);
      const asHTML = div.innerHTML;
      contents.ownerDocument.body.removeChild(div);
      const fragment = editor.getFragment(), portableText = fromSlateValue(fragment, blockTypeName), asJSON = JSON.stringify(portableText), asPlainText = toPlainText(portableText);
      data.clearData(), data.setData("text/plain", asPlainText), data.setData("text/html", asHTML), data.setData("application/json", asJSON), data.setData("application/x-portable-text", asJSON), debug$7("text", asPlainText), data.setData(
        "application/x-portable-text-event-origin",
        originEvent || "external"
      ), debug$7("Set fragment data", asJSON, asHTML);
    }, editor.insertPortableTextData = (data) => {
      if (!editor.selection)
        return !1;
      const pText = data.getData("application/x-portable-text"), origin = data.getData("application/x-portable-text-event-origin");
      if (debug$7(`Inserting portable text from ${origin} event`, pText), pText) {
        const parsed = JSON.parse(pText);
        if (Array.isArray(parsed) && parsed.length > 0) {
          const slateValue = _regenerateKeys(
            editor,
            toSlateValue(parsed, { schemaTypes }),
            editorActor.getSnapshot().context.keyGenerator,
            spanTypeName,
            schemaTypes
          ), validation = validateValue(
            parsed,
            schemaTypes,
            editorActor.getSnapshot().context.keyGenerator
          );
          if (!validation.valid && !validation.resolution?.autoResolve) {
            const errorDescription = `${validation.resolution?.description}`;
            return editorActor.send({
              type: "error",
              name: "pasteError",
              description: errorDescription,
              data: validation
            }), debug$7("Invalid insert result", validation), !1;
          }
          return _insertFragment(editor, slateValue, schemaTypes), !0;
        }
      }
      return !1;
    }, editor.insertTextOrHTMLData = (data) => {
      if (!editor.selection)
        return debug$7("No selection, not inserting"), !1;
      const html = data.getData("text/html"), text = data.getData("text/plain");
      if (html || text) {
        debug$7("Inserting data", data);
        let portableText, fragment, insertedType;
        if (html) {
          if (portableText = blockTools.htmlToBlocks(html, schemaTypes.portableText, {
            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode
          }).map(
            (block) => blockTools.normalizeBlock(block, { blockTypeName })
          ), fragment = toSlateValue(portableText, { schemaTypes }), insertedType = "HTML", portableText.length === 0)
            return !1;
        } else {
          const textToHtml = `<html><body>${escapeHtml(text).split(/\n{2,}/).map(
            (line) => line ? `<p>${line.replace(/(?:\r\n|\r|\n)/g, "<br/>")}</p>` : "<p></p>"
          ).join("")}</body></html>`;
          portableText = blockTools.htmlToBlocks(textToHtml, schemaTypes.portableText).map(
            (block) => blockTools.normalizeBlock(block, { blockTypeName })
          ), fragment = toSlateValue(portableText, {
            schemaTypes
          }), insertedType = "text";
        }
        const validation = validateValue(
          portableText,
          schemaTypes,
          editorActor.getSnapshot().context.keyGenerator
        );
        if (!validation.valid) {
          const errorDescription = `Could not validate the resulting portable text to insert.
${validation.resolution?.description}
Try to insert as plain text (shift-paste) instead.`;
          return editorActor.send({
            type: "error",
            name: "pasteError",
            description: errorDescription,
            data: validation
          }), debug$7("Invalid insert result", validation), !1;
        }
        return debug$7(
          `Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`
        ), _insertFragment(editor, fragment, schemaTypes), !0;
      }
      return !1;
    }, editor.insertData = (data) => {
      editor.insertPortableTextData(data) || editor.insertTextOrHTMLData(data);
    }, editor.insertFragmentData = (data) => {
      const fragment = data.getData("application/x-portable-text");
      if (fragment) {
        const parsed = JSON.parse(fragment);
        return editor.insertFragment(parsed), !0;
      }
      return !1;
    }, editor;
  };
}
const entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;",
  "`": "&#x60;",
  "=": "&#x3D;"
};
function escapeHtml(str) {
  return String(str).replace(/[&<>"'`=/]/g, (s) => entityMap[s]);
}
function _regenerateKeys(editor, fragment, keyGenerator, spanTypeName, editorTypes) {
  return fragment.map((node) => {
    const newNode = { ...node };
    if (editor.isTextBlock(newNode)) {
      const annotations = editorTypes.annotations.map((t) => t.name);
      if (annotations.length === 0) {
        const { markDefs, ...NewNodeNoDefs } = newNode;
        return { ...NewNodeNoDefs, _key: keyGenerator() };
      }
      if ((newNode.markDefs || []).some((def) => !annotations.includes(def._type))) {
        const allowedAnnotations = (newNode.markDefs || []).filter((def) => annotations.includes(def._type));
        return { ...newNode, markDefs: allowedAnnotations, _key: keyGenerator() };
      }
      newNode.markDefs = (newNode.markDefs || []).map((def) => {
        const oldKey = def._key, newKey = keyGenerator();
        return newNode.children = newNode.children.map(
          (child) => child._type === spanTypeName && editor.isTextSpan(child) ? {
            ...child,
            marks: child.marks && child.marks.includes(oldKey) ? [...child.marks].filter((mark) => mark !== oldKey).concat(newKey) : child.marks
          } : child
        ), { ...def, _key: newKey };
      });
    }
    const nodeWithNewKeys = { ...newNode, _key: keyGenerator() };
    return editor.isTextBlock(nodeWithNewKeys) && (nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({
      ...child,
      _key: keyGenerator()
    }))), nodeWithNewKeys;
  });
}
function _insertFragment(editor, fragment, schemaTypes) {
  editor.withoutNormalizing(() => {
    if (!editor.selection)
      return;
    const [focusBlock, focusPath] = slate.Editor.node(editor, editor.selection, {
      depth: 1
    });
    if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {
      const { markDefs } = focusBlock;
      debug$7(
        "Mixing markDefs of focusBlock and fragments[0] block",
        markDefs,
        fragment[0].markDefs
      ), isEqual__default.default(markDefs, fragment[0].markDefs) || slate.Transforms.setNodes(
        editor,
        {
          markDefs: uniq__default.default([
            ...fragment[0].markDefs || [],
            ...markDefs || []
          ])
        },
        { at: focusPath, mode: "lowest", voids: !1 }
      );
    }
    isEqualToEmptyEditor(
      editor.children,
      schemaTypes
    ) ? (slate.Transforms.splitNodes(editor, { at: [0, 0] }), editor.insertFragment(fragment), slate.Transforms.removeNodes(editor, { at: [0] })) : editor.insertFragment(fragment);
  }), editor.onChange();
}
const originalFnMap = /* @__PURE__ */ new WeakMap(), withPlugins = (editor, options) => {
  const e = editor, { portableTextEditor, patches$, readOnly, maxBlocks } = options, { editorActor, schemaTypes } = portableTextEditor;
  e.subscriptions = [], e.destroy ? e.destroy() : originalFnMap.set(e, {
    apply: e.apply,
    onChange: e.onChange,
    normalizeNode: e.normalizeNode
  });
  const operationToPatches = createOperationToPatches(schemaTypes), withObjectKeys = createWithObjectKeys(editorActor, schemaTypes), withSchemaTypes = createWithSchemaTypes({
    editorActor,
    schemaTypes
  }), withEditableAPI = createWithEditableAPI(
    editorActor,
    portableTextEditor,
    schemaTypes
  ), withPatches = createWithPatches({
    editorActor,
    patches$,
    patchFunctions: operationToPatches,
    readOnly,
    schemaTypes
  }), withMaxBlocks = createWithMaxBlocks(maxBlocks || -1), withPortableTextLists = createWithPortableTextLists(schemaTypes), withUndoRedo = createWithUndoRedo({
    readOnly,
    patches$,
    blockSchemaType: schemaTypes.block
  }), withPortableTextMarkModel = createWithPortableTextMarkModel(
    editorActor,
    schemaTypes
  ), withPortableTextBlockStyle = createWithPortableTextBlockStyle(
    editorActor,
    schemaTypes
  ), withPlaceholderBlock = createWithPlaceholderBlock(), withInsertBreak = createWithInsertBreak(editorActor, schemaTypes), withUtils = createWithUtils({
    editorActor,
    schemaTypes,
    portableTextEditor
  }), withPortableTextSelections = createWithPortableTextSelections(
    editorActor,
    schemaTypes
  );
  return e.destroy = () => {
    const originalFunctions = originalFnMap.get(e);
    if (!originalFunctions)
      throw new Error("Could not find pristine versions of editor functions");
    e.apply = originalFunctions.apply, e.history = { undos: [], redos: [] }, e.normalizeNode = originalFunctions.normalizeNode, e.onChange = originalFunctions.onChange;
  }, readOnly ? {
    editor: withSchemaTypes(
      withObjectKeys(
        withPortableTextMarkModel(
          withPortableTextBlockStyle(
            withUtils(
              withPlaceholderBlock(
                withPortableTextLists(
                  withPortableTextSelections(
                    withEditableAPI(withInsertBreak(e))
                  )
                )
              )
            )
          )
        )
      )
    ),
    subscribe: () => noop__default.default
  } : {
    editor: withSchemaTypes(
      withObjectKeys(
        withPortableTextMarkModel(
          withPortableTextBlockStyle(
            withPortableTextLists(
              withPlaceholderBlock(
                withUtils(
                  withMaxBlocks(
                    withUndoRedo(
                      withPatches(
                        withPortableTextSelections(
                          withEditableAPI(withInsertBreak(e))
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    ),
    subscribe: () => {
      const unsubscribes = [];
      return editor.subscriptions.forEach((subscribeFn) => {
        unsubscribes.push(subscribeFn());
      }), () => {
        unsubscribes.forEach((unsubscribeFn) => {
          unsubscribeFn();
        });
      };
    }
  };
}, debug$6 = debugWithName("component:PortableTextEditor:SlateContainer");
function SlateContainer(props) {
  const { patches$, portableTextEditor, readOnly, maxBlocks } = props, [[slateEditor, subscribe]] = react.useState(() => {
    debug$6("Creating new Slate editor instance");
    const { editor, subscribe: _sub } = withPlugins(slateReact.withReact(slate.createEditor()), {
      maxBlocks,
      patches$,
      portableTextEditor,
      readOnly
    });
    return KEY_TO_VALUE_ELEMENT.set(editor, {}), KEY_TO_SLATE_ELEMENT.set(editor, {}), [editor, _sub];
  });
  react.useEffect(() => {
    const unsubscribe = subscribe();
    return () => {
      unsubscribe();
    };
  }, [subscribe]), react.useEffect(() => {
    debug$6("Re-initializing plugin chain"), withPlugins(slateEditor, {
      maxBlocks,
      patches$,
      portableTextEditor,
      readOnly
    });
  }, [portableTextEditor, maxBlocks, readOnly, patches$, slateEditor]);
  const initialValue = react.useMemo(() => [slateEditor.pteCreateTextBlock({ decorators: [] })], [slateEditor]);
  return react.useEffect(() => () => {
    debug$6("Destroying Slate editor"), slateEditor.destroy();
  }, [slateEditor]), /* @__PURE__ */ jsxRuntime.jsx(slateReact.Slate, { editor: slateEditor, initialValue, children: props.children });
}
const PortableTextEditorReadOnlyContext = react.createContext(!1), usePortableTextEditorReadOnlyStatus = () => {
  const readOnly = react.useContext(PortableTextEditorReadOnlyContext);
  if (readOnly === void 0)
    throw new Error(
      "The `usePortableTextEditorReadOnly` hook must be used inside the <PortableTextEditor> component's context."
    );
  return readOnly;
}, debug$5 = debugWithName("hook:useSyncValue"), CURRENT_VALUE = /* @__PURE__ */ new WeakMap();
function useSyncValue(props) {
  const { editorActor, portableTextEditor, readOnly } = props, { schemaTypes } = portableTextEditor, previousValue = react.useRef(), slateEditor = slateReact.useSlate(), updateValueFunctionRef = react.useRef(), updateFromCurrentValue = react.useCallback(() => {
    const currentValue = CURRENT_VALUE.get(portableTextEditor);
    if (previousValue.current === currentValue) {
      debug$5("Value is the same object as previous, not need to sync");
      return;
    }
    updateValueFunctionRef.current && currentValue && (debug$5("Updating the value debounced"), updateValueFunctionRef.current(currentValue));
  }, [portableTextEditor]), updateValueDebounced = react.useMemo(
    () => debounce__default.default(updateFromCurrentValue, 1e3, { trailing: !0, leading: !1 }),
    [updateFromCurrentValue]
  );
  return react.useMemo(() => {
    const updateFunction = (value) => {
      CURRENT_VALUE.set(portableTextEditor, value);
      const isProcessingLocalChanges = isChangingLocally(slateEditor), isProcessingRemoteChanges = isChangingRemotely(slateEditor);
      if (!readOnly) {
        if (isProcessingLocalChanges) {
          debug$5("Has local changes, not syncing value right now"), updateValueDebounced();
          return;
        }
        if (isProcessingRemoteChanges) {
          debug$5("Has remote changes, not syncing value right now"), updateValueDebounced();
          return;
        }
      }
      let isChanged = !1, isValid = !0;
      const hadSelection = !!slateEditor.selection;
      if ((!value || value.length === 0) && (debug$5("Value is empty"), slate.Editor.withoutNormalizing(slateEditor, () => {
        withoutSaving(slateEditor, () => {
          withoutPatching(slateEditor, () => {
            hadSelection && slate.Transforms.deselect(slateEditor);
            const childrenLength = slateEditor.children.length;
            slateEditor.children.forEach((_, index) => {
              slate.Transforms.removeNodes(slateEditor, {
                at: [childrenLength - 1 - index]
              });
            }), slate.Transforms.insertNodes(
              slateEditor,
              slateEditor.pteCreateTextBlock({ decorators: [] }),
              { at: [0] }
            ), hadSelection && slate.Transforms.select(slateEditor, [0, 0]);
          });
        });
      }), isChanged = !0), value && value.length > 0) {
        const slateValueFromProps = toSlateValue(value, {
          schemaTypes
        });
        slate.Editor.withoutNormalizing(slateEditor, () => {
          withRemoteChanges(slateEditor, () => {
            withoutSaving(slateEditor, () => {
              withoutPatching(slateEditor, () => {
                const childrenLength = slateEditor.children.length;
                if (slateValueFromProps.length < childrenLength) {
                  for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--)
                    slate.Transforms.removeNodes(slateEditor, {
                      at: [i]
                    });
                  isChanged = !0;
                }
                slateValueFromProps.forEach(
                  (currentBlock, currentBlockIndex) => {
                    const oldBlock = slateEditor.children[currentBlockIndex];
                    if (oldBlock && !isEqual__default.default(currentBlock, oldBlock) && isValid) {
                      const validationValue = [value[currentBlockIndex]], validation = validateValue(
                        validationValue,
                        schemaTypes,
                        editorActor.getSnapshot().context.keyGenerator
                      );
                      !validation.valid && validation.resolution?.autoResolve && validation.resolution?.patches.length > 0 && !readOnly && previousValue.current && previousValue.current !== value && (console.warn(
                        `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`
                      ), validation.resolution.patches.forEach((patch) => {
                        editorActor.send({ type: "patch", patch });
                      })), validation.valid || validation.resolution?.autoResolve ? (oldBlock._key === currentBlock._key ? (debug$5.enabled && debug$5("Updating block", oldBlock, currentBlock), _updateBlock(
                        slateEditor,
                        currentBlock,
                        oldBlock,
                        currentBlockIndex
                      )) : (debug$5.enabled && debug$5("Replacing block", oldBlock, currentBlock), _replaceBlock(
                        slateEditor,
                        currentBlock,
                        currentBlockIndex
                      )), isChanged = !0) : (editorActor.send({
                        type: "invalid value",
                        resolution: validation.resolution,
                        value
                      }), isValid = !1);
                    }
                    if (!oldBlock && isValid) {
                      const validationValue = [value[currentBlockIndex]], validation = validateValue(
                        validationValue,
                        schemaTypes,
                        editorActor.getSnapshot().context.keyGenerator
                      );
                      debug$5.enabled && debug$5(
                        "Validating and inserting new block in the end of the value",
                        currentBlock
                      ), validation.valid || validation.resolution?.autoResolve ? slate.Transforms.insertNodes(slateEditor, currentBlock, {
                        at: [currentBlockIndex]
                      }) : (debug$5("Invalid", validation), editorActor.send({
                        type: "invalid value",
                        resolution: validation.resolution,
                        value
                      }), isValid = !1);
                    }
                  }
                );
              });
            });
          });
        });
      }
      if (!isValid) {
        debug$5("Invalid value, returning");
        return;
      }
      if (isChanged) {
        debug$5("Server value changed, syncing editor");
        try {
          slateEditor.onChange();
        } catch (err) {
          console.error(err), editorActor.send({
            type: "invalid value",
            resolution: null,
            value
          });
          return;
        }
        hadSelection && !slateEditor.selection && (slate.Transforms.select(slateEditor, {
          anchor: { path: [0, 0], offset: 0 },
          focus: { path: [0, 0], offset: 0 }
        }), slateEditor.onChange()), editorActor.send({ type: "value changed", value });
      } else
        debug$5("Server value and editor value is equal, no need to sync.");
      previousValue.current = value;
    };
    return updateValueFunctionRef.current = updateFunction, updateFunction;
  }, [
    editorActor,
    portableTextEditor,
    readOnly,
    schemaTypes,
    slateEditor,
    updateValueDebounced
  ]);
}
function _replaceBlock(slateEditor, currentBlock, currentBlockIndex) {
  const currentSelection = slateEditor.selection, selectionFocusOnBlock = currentSelection && currentSelection.focus.path[0] === currentBlockIndex;
  selectionFocusOnBlock && slate.Transforms.deselect(slateEditor), slate.Transforms.removeNodes(slateEditor, { at: [currentBlockIndex] }), slate.Transforms.insertNodes(slateEditor, currentBlock, { at: [currentBlockIndex] }), slateEditor.onChange(), selectionFocusOnBlock && slate.Transforms.select(slateEditor, currentSelection);
}
function _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex) {
  if (slate.Transforms.setNodes(slateEditor, currentBlock, {
    at: [currentBlockIndex]
  }), slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {
    const oldBlockChildrenLength = oldBlock.children.length;
    currentBlock.children.length < oldBlockChildrenLength && Array.from(
      Array(oldBlockChildrenLength - currentBlock.children.length)
    ).forEach((_, index) => {
      const childIndex = oldBlockChildrenLength - 1 - index;
      childIndex > 0 && (debug$5("Removing child"), slate.Transforms.removeNodes(slateEditor, {
        at: [currentBlockIndex, childIndex]
      }));
    }), currentBlock.children.forEach(
      (currentBlockChild, currentBlockChildIndex) => {
        const oldBlockChild = oldBlock.children[currentBlockChildIndex], isChildChanged = !isEqual__default.default(currentBlockChild, oldBlockChild), isTextChanged = !isEqual__default.default(
          currentBlockChild.text,
          oldBlockChild?.text
        ), path = [currentBlockIndex, currentBlockChildIndex];
        if (isChildChanged)
          if (currentBlockChild._key === oldBlockChild?._key) {
            debug$5("Updating changed child", currentBlockChild, oldBlockChild), slate.Transforms.setNodes(
              slateEditor,
              currentBlockChild,
              {
                at: path
              }
            );
            const isSpanNode = slate.Text.isText(currentBlockChild) && currentBlockChild._type === "span" && slate.Text.isText(oldBlockChild) && oldBlockChild._type === "span";
            isSpanNode && isTextChanged ? (slate.Transforms.delete(slateEditor, {
              at: {
                focus: { path, offset: 0 },
                anchor: { path, offset: oldBlockChild.text.length }
              }
            }), slate.Transforms.insertText(slateEditor, currentBlockChild.text, {
              at: path
            }), slateEditor.onChange()) : isSpanNode || (debug$5("Updating changed inline object child", currentBlockChild), slate.Transforms.setNodes(
              slateEditor,
              { _key: VOID_CHILD_KEY },
              {
                at: [...path, 0],
                voids: !0
              }
            ));
          } else oldBlockChild ? (debug$5("Replacing child", currentBlockChild), slate.Transforms.removeNodes(slateEditor, {
            at: [currentBlockIndex, currentBlockChildIndex]
          }), slate.Transforms.insertNodes(slateEditor, currentBlockChild, {
            at: [currentBlockIndex, currentBlockChildIndex]
          }), slateEditor.onChange()) : oldBlockChild || (debug$5("Inserting new child", currentBlockChild), slate.Transforms.insertNodes(slateEditor, currentBlockChild, {
            at: [currentBlockIndex, currentBlockChildIndex]
          }), slateEditor.onChange());
      }
    );
  }
}
const debug$4 = debugWithName("component:PortableTextEditor:Synchronizer"), debugVerbose$1 = debug$4.enabled && !1, FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === "test" ? 500 : 1e3;
function Synchronizer(props) {
  const portableTextEditor = usePortableTextEditor(), readOnly = usePortableTextEditorReadOnlyStatus(), { editorActor, getValue, onChange, value } = props, pendingPatches = react.useRef([]), syncValue = useSyncValue({
    editorActor,
    portableTextEditor,
    readOnly
  }), slateEditor = slateReact.useSlate();
  react.useEffect(() => {
    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, !1);
  }, [slateEditor]);
  const onFlushPendingPatches = react.useCallback(() => {
    if (pendingPatches.current.length > 0) {
      debug$4("Flushing pending patches"), debugVerbose$1 && debug$4(`Patches:
${JSON.stringify(pendingPatches.current, null, 2)}`);
      const snapshot = getValue();
      editorActor.send({
        type: "mutation",
        patches: pendingPatches.current,
        snapshot
      }), pendingPatches.current = [];
    }
    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, !1);
  }, [editorActor, slateEditor, getValue]), onFlushPendingPatchesThrottled = react.useMemo(() => throttle__default.default(
    () => {
      if (slate.Editor.isNormalizing(slateEditor)) {
        onFlushPendingPatches();
        return;
      }
      onFlushPendingPatchesThrottled();
    },
    FLUSH_PATCHES_THROTTLED_MS,
    {
      leading: !1,
      trailing: !0
    }
  ), [onFlushPendingPatches, slateEditor]);
  react.useEffect(() => () => {
    onFlushPendingPatches();
  }, [onFlushPendingPatches]), react.useEffect(() => {
    debug$4("Subscribing to editor changes");
    const sub = editorActor.on("*", (event) => {
      switch (event.type) {
        case "patch":
          IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, !0), pendingPatches.current.push(event.patch), onFlushPendingPatchesThrottled(), onChange(event);
          break;
        case "loading": {
          onChange({ type: "loading", isLoading: !0 });
          break;
        }
        case "done loading": {
          onChange({ type: "loading", isLoading: !1 });
          break;
        }
        case "offline": {
          onChange({ type: "connection", value: "offline" });
          break;
        }
        case "online": {
          onChange({ type: "connection", value: "online" });
          break;
        }
        case "value changed": {
          onChange({ type: "value", value: event.value });
          break;
        }
        case "invalid value": {
          onChange({
            type: "invalidValue",
            resolution: event.resolution,
            value: event.value
          });
          break;
        }
        case "error": {
          onChange({
            ...event,
            level: "warning"
          });
          break;
        }
        default:
          onChange(event);
      }
    });
    return () => {
      debug$4("Unsubscribing to changes"), sub.unsubscribe();
    };
  }, [editorActor, onFlushPendingPatchesThrottled, slateEditor]);
  const handleOnline = react.useCallback(() => {
    debug$4("Editor is online, syncing from props.value"), syncValue(value);
  }, [syncValue, value]);
  react.useEffect(() => {
    const subscription = editorActor.on("online", () => {
      portableTextEditor.props.patches$ && handleOnline();
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [editorActor]);
  const isInitialValueFromProps = react.useRef(!0);
  return react.useEffect(() => {
    debug$4("Value from props changed, syncing new value"), syncValue(value), isInitialValueFromProps.current && (editorActor.send({ type: "ready" }), isInitialValueFromProps.current = !1);
  }, [editorActor, syncValue, value]), null;
}
function inserText({
  event
}) {
  slate.Editor.insertText(event.editor, event.text);
}
function inserTextBlock({
  context,
  event
}) {
  slate.Editor.insertNode(event.editor, {
    _key: context.keyGenerator(),
    _type: context.schema.block.name,
    style: context.schema.styles[0].value ?? "normal",
    markDefs: [],
    children: [
      {
        _key: context.keyGenerator(),
        _type: "span",
        text: ""
      }
    ]
  });
}
const networkLogic = xstate.fromCallback(({ sendBack }) => {
  const onlineHandler = () => {
    sendBack({ type: "online" });
  }, offlineHandler = () => {
    sendBack({ type: "offline" });
  };
  return window.addEventListener("online", onlineHandler), window.addEventListener("offline", offlineHandler), () => {
    window.removeEventListener("online", onlineHandler), window.removeEventListener("offline", offlineHandler);
  };
}), editorMachine = xstate.setup({
  types: {
    context: {},
    events: {},
    emitted: {},
    input: {}
  },
  actions: {
    "apply:insert text": ({ context, event }) => {
      xstate.assertEvent(event, "insert text"), inserText({ context, event });
    },
    "apply:insert text block": ({ context, event }) => {
      xstate.assertEvent(event, "insert text block"), inserTextBlock({ context, event });
    },
    "assign schema": xstate.assign({
      schema: ({ event }) => (xstate.assertEvent(event, "update schema"), event.schema)
    }),
    "emit patch event": xstate.emit(({ event }) => (xstate.assertEvent(event, "patch"), event)),
    "emit mutation event": xstate.emit(({ event }) => (xstate.assertEvent(event, "mutation"), event)),
    "defer event": xstate.assign({
      pendingEvents: ({ context, event }) => (xstate.assertEvent(event, ["patch", "mutation"]), [...context.pendingEvents, event])
    }),
    "emit pending events": xstate.enqueueActions(({ context, enqueue }) => {
      for (const event of context.pendingEvents)
        enqueue(xstate.emit(event));
    }),
    "clear pending events": xstate.assign({
      pendingEvents: []
    }),
    "handle behavior event": xstate.enqueueActions(({ context, event, enqueue }) => {
      xstate.assertEvent(event, ["key down"]);
      const eventBehaviors = context.behaviors.filter(
        (behavior) => behavior.on === event.type
      );
      if (eventBehaviors.length === 0)
        return;
      const value = fromSlateValue(
        event.editor.children,
        context.schema.block.name,
        KEY_TO_VALUE_ELEMENT.get(event.editor)
      ), selection = toPortableTextRange(
        value,
        event.editor.selection,
        context.schema
      );
      if (!selection) {
        console.warn(
          `Unable to handle event ${event.type} due to missing selection`
        );
        return;
      }
      const behaviorContext = {
        schema: context.schema,
        value,
        selection
      };
      for (const eventBehavior of eventBehaviors) {
        const shouldRun = eventBehavior.guard?.({
          context: behaviorContext,
          event
        }) ?? !0;
        if (!shouldRun)
          continue;
        const actions = eventBehavior.actions.map(
          (action) => action({ context: behaviorContext, event }, shouldRun)
        );
        for (const action of actions)
          typeof action == "object" && enqueue.raise({
            ...action,
            editor: event.editor
          });
      }
    })
  },
  actors: {
    networkLogic
  }
}).createMachine({
  id: "editor",
  context: ({ input }) => ({
    behaviors: input.behaviors,
    keyGenerator: input.keyGenerator,
    pendingEvents: [],
    schema: input.schema
  }),
  invoke: {
    id: "networkLogic",
    src: "networkLogic"
  },
  on: {
    ready: { actions: xstate.emit(({ event }) => event) },
    unset: { actions: xstate.emit(({ event }) => event) },
    "value changed": { actions: xstate.emit(({ event }) => event) },
    "invalid value": { actions: xstate.emit(({ event }) => event) },
    error: { actions: xstate.emit(({ event }) => event) },
    selection: { actions: xstate.emit(({ event }) => event) },
    blur: { actions: xstate.emit(({ event }) => event) },
    focus: { actions: xstate.emit(({ event }) => event) },
    online: { actions: xstate.emit({ type: "online" }) },
    offline: { actions: xstate.emit({ type: "offline" }) },
    loading: { actions: xstate.emit({ type: "loading" }) },
    "done loading": { actions: xstate.emit({ type: "done loading" }) },
    "update schema": { actions: "assign schema" },
    "key down": {
      actions: ["handle behavior event"]
    },
    "insert text": {
      actions: ["apply:insert text"]
    },
    "insert text block": {
      actions: ["apply:insert text block"]
    }
  },
  initial: "pristine",
  states: {
    pristine: {
      initial: "idle",
      states: {
        idle: {
          on: {
            normalizing: {
              target: "normalizing"
            },
            patch: {
              actions: "defer event",
              target: "#editor.dirty"
            },
            mutation: {
              actions: "defer event",
              target: "#editor.dirty"
            }
          }
        },
        normalizing: {
          on: {
            "done normalizing": {
              target: "idle"
            },
            patch: {
              actions: "defer event"
            },
            mutation: {
              actions: "defer event"
            }
          }
        }
      }
    },
    dirty: {
      entry: ["emit pending events", "clear pending events"],
      on: {
        patch: {
          actions: "emit patch event"
        },
        mutation: {
          actions: "emit mutation event"
        }
      }
    }
  }
}), PortableTextEditorSelectionContext = react.createContext(null), usePortableTextEditorSelection = () => {
  const selection = react.useContext(PortableTextEditorSelectionContext);
  if (selection === void 0)
    throw new Error(
      "The `usePortableTextEditorSelection` hook must be used inside the <PortableTextEditor> component's context."
    );
  return selection;
}, debug$3 = debugWithName("component:PortableTextEditor:SelectionProvider"), debugVerbose = debug$3.enabled && !1;
function PortableTextEditorSelectionProvider(props) {
  const [selection, setSelection] = react.useState(null);
  return react.useEffect(() => {
    debug$3("Subscribing to selection changes");
    const subscription = props.editorActor.on("selection", (event) => {
      react.startTransition(() => {
        debugVerbose && debug$3("Setting selection"), setSelection(event.selection);
      });
    });
    return () => {
      debug$3("Unsubscribing to selection changes"), subscription.unsubscribe();
    };
  }, [props.editorActor]), /* @__PURE__ */ jsxRuntime.jsx(PortableTextEditorSelectionContext.Provider, { value: selection, children: props.children });
}
const defaultKeyGenerator = () => content.randomKey(12), debug$2 = debugWithName("component:PortableTextEditor");
class PortableTextEditor extends react.Component {
  /**
   * @internal
   * Don't use this API directly. It's subject to change.
   */
  editorActor;
  /**
   * An observable of all the editor changes.
   */
  change$ = new rxjs.Subject();
  /**
   * A lookup table for all the relevant schema types for this portable text type.
   */
  schemaTypes;
  /**
   * The editor API (currently implemented with Slate).
   */
  editable;
  constructor(props) {
    if (super(props), !props.schemaType)
      throw new Error('PortableTextEditor: missing "schemaType" property');
    props.incomingPatches$ && console.warn(
      "The prop 'incomingPatches$' is deprecated and renamed to 'patches$'"
    ), this.schemaTypes = getPortableTextMemberSchemaTypes(
      props.schemaType.hasOwnProperty("jsonType") ? props.schemaType : compileType(props.schemaType)
    ), this.editorActor = xstate.createActor(editorMachine, {
      input: {
        behaviors: coreBehaviors,
        keyGenerator: props.keyGenerator || defaultKeyGenerator,
        schema: this.schemaTypes
      }
    }), this.editorActor.start();
  }
  componentDidUpdate(prevProps) {
    this.props.schemaType !== prevProps.schemaType && (this.schemaTypes = getPortableTextMemberSchemaTypes(
      this.props.schemaType.hasOwnProperty("jsonType") ? this.props.schemaType : compileType(this.props.schemaType)
    ), this.editorActor.send({
      type: "update schema",
      schema: this.schemaTypes
    })), this.props.editorRef !== prevProps.editorRef && this.props.editorRef && (this.props.editorRef.current = this);
  }
  setEditable = (editable) => {
    this.editable = { ...this.editable, ...editable };
  };
  getValue = () => {
    if (this.editable)
      return this.editable.getValue();
  };
  render() {
    const { value, children, patches$, incomingPatches$ } = this.props, _patches$ = incomingPatches$ || patches$, maxBlocks = typeof this.props.maxBlocks > "u" ? void 0 : Number.parseInt(this.props.maxBlocks.toString(), 10) || void 0, readOnly = !!this.props.readOnly;
    return /* @__PURE__ */ jsxRuntime.jsx(
      SlateContainer,
      {
        maxBlocks,
        patches$: _patches$,
        portableTextEditor: this,
        readOnly,
        children: /* @__PURE__ */ jsxRuntime.jsx(PortableTextEditorContext.Provider, { value: this, children: /* @__PURE__ */ jsxRuntime.jsx(PortableTextEditorReadOnlyContext.Provider, { value: readOnly, children: /* @__PURE__ */ jsxRuntime.jsxs(PortableTextEditorSelectionProvider, { editorActor: this.editorActor, children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            Synchronizer,
            {
              editorActor: this.editorActor,
              getValue: this.getValue,
              onChange: (change) => {
                this.props.onChange(change), this.change$.next(change);
              },
              value
            }
          ),
          children
        ] }) }) })
      }
    );
  }
  // Static API methods
  static activeAnnotations = (editor) => editor && editor.editable ? editor.editable.activeAnnotations() : [];
  static isAnnotationActive = (editor, annotationType) => editor && editor.editable ? editor.editable.isAnnotationActive(annotationType) : !1;
  static addAnnotation = (editor, type, value) => editor.editable?.addAnnotation(type, value);
  static blur = (editor) => {
    debug$2("Host blurred"), editor.editable?.blur();
  };
  static delete = (editor, selection, options) => editor.editable?.delete(selection, options);
  static findDOMNode = (editor, element) => editor.editable?.findDOMNode(element);
  static findByPath = (editor, path) => editor.editable?.findByPath(path) || [];
  static focus = (editor) => {
    debug$2("Host requesting focus"), editor.editable?.focus();
  };
  static focusBlock = (editor) => editor.editable?.focusBlock();
  static focusChild = (editor) => editor.editable?.focusChild();
  static getSelection = (editor) => editor.editable ? editor.editable.getSelection() : null;
  static getValue = (editor) => editor.editable?.getValue();
  static hasBlockStyle = (editor, blockStyle) => editor.editable?.hasBlockStyle(blockStyle);
  static hasListStyle = (editor, listStyle) => editor.editable?.hasListStyle(listStyle);
  static isCollapsedSelection = (editor) => editor.editable?.isCollapsedSelection();
  static isExpandedSelection = (editor) => editor.editable?.isExpandedSelection();
  static isMarkActive = (editor, mark) => editor.editable?.isMarkActive(mark);
  static insertChild = (editor, type, value) => (debug$2("Host inserting child"), editor.editable?.insertChild(type, value));
  static insertBlock = (editor, type, value) => editor.editable?.insertBlock(type, value);
  static insertBreak = (editor) => editor.editable?.insertBreak();
  static isVoid = (editor, element) => editor.editable?.isVoid(element);
  static isObjectPath = (_editor, path) => {
    if (!path || !Array.isArray(path)) return !1;
    const isChildObjectEditPath = path.length > 3 && path[1] === "children";
    return path.length > 1 && path[1] !== "children" || isChildObjectEditPath;
  };
  static marks = (editor) => editor.editable?.marks();
  static select = (editor, selection) => {
    debug$2("Host setting selection", selection), editor.editable?.select(selection);
  };
  static removeAnnotation = (editor, type) => editor.editable?.removeAnnotation(type);
  static toggleBlockStyle = (editor, blockStyle) => (debug$2("Host is toggling block style"), editor.editable?.toggleBlockStyle(blockStyle));
  static toggleList = (editor, listStyle) => editor.editable?.toggleList(listStyle);
  static toggleMark = (editor, mark) => {
    debug$2("Host toggling mark", mark), editor.editable?.toggleMark(mark);
  };
  static getFragment = (editor) => (debug$2("Host getting fragment"), editor.editable?.getFragment());
  static undo = (editor) => {
    debug$2("Host undoing"), editor.editable?.undo();
  };
  static redo = (editor) => {
    debug$2("Host redoing"), editor.editable?.redo();
  };
  static isSelectionsOverlapping = (editor, selectionA, selectionB) => editor.editable?.isSelectionsOverlapping(selectionA, selectionB);
}
const debug$1 = debugWithName("components:Leaf"), EMPTY_MARKS = [], Leaf = (props) => {
  const {
    attributes,
    children,
    leaf,
    schemaTypes,
    renderChild,
    renderDecorator,
    renderAnnotation
  } = props, spanRef = react.useRef(null), portableTextEditor = usePortableTextEditor(), blockSelected = slateReact.useSelected(), [focused, setFocused] = react.useState(!1), [selected, setSelected] = react.useState(!1), block = children.props.parent, path = react.useMemo(
    () => block ? [{ _key: block?._key }, "children", { _key: leaf._key }] : [],
    [block, leaf._key]
  ), decoratorValues = react.useMemo(
    () => schemaTypes.decorators.map((dec) => dec.value),
    [schemaTypes.decorators]
  ), marks = react.useMemo(
    () => uniq__default.default(
      (leaf.marks || EMPTY_MARKS).filter(
        (mark) => decoratorValues.includes(mark)
      )
    ),
    [decoratorValues, leaf.marks]
  ), annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS, annotations = react.useMemo(
    () => annotationMarks.map(
      (mark) => !decoratorValues.includes(mark) && block?.markDefs?.find((def) => def._key === mark)
    ).filter(Boolean),
    [annotationMarks, block, decoratorValues]
  ), shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected;
  react.useEffect(() => {
    if (!shouldTrackSelectionAndFocus) {
      setFocused(!1);
      return;
    }
    const sel = PortableTextEditor.getSelection(portableTextEditor);
    sel && isEqual__default.default(sel.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && react.startTransition(() => {
      setFocused(!0);
    });
  }, [shouldTrackSelectionAndFocus, path, portableTextEditor]);
  const setSelectedFromRange = react.useCallback(() => {
    if (!shouldTrackSelectionAndFocus)
      return;
    debug$1("Setting selection and focus from range");
    const winSelection = window.getSelection();
    if (!winSelection) {
      setSelected(!1);
      return;
    }
    if (winSelection && winSelection.rangeCount > 0) {
      const range = winSelection.getRangeAt(0);
      spanRef.current && range.intersectsNode(spanRef.current) ? setSelected(!0) : setSelected(!1);
    } else
      setSelected(!1);
  }, [shouldTrackSelectionAndFocus]);
  react.useEffect(() => {
    if (!shouldTrackSelectionAndFocus)
      return;
    const onBlur = portableTextEditor.editorActor.on("blur", () => {
      setFocused(!1), setSelected(!1);
    }), onFocus = portableTextEditor.editorActor.on("focus", () => {
      const sel = PortableTextEditor.getSelection(portableTextEditor);
      sel && isEqual__default.default(sel.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && setFocused(!0), setSelectedFromRange();
    }), onSelection = portableTextEditor.editorActor.on(
      "selection",
      (event) => {
        event.selection && isEqual__default.default(event.selection.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) ? setFocused(!0) : setFocused(!1), setSelectedFromRange();
      }
    );
    return () => {
      onBlur.unsubscribe(), onFocus.unsubscribe(), onSelection.unsubscribe();
    };
  }, [
    path,
    portableTextEditor,
    setSelectedFromRange,
    shouldTrackSelectionAndFocus
  ]), react.useEffect(() => setSelectedFromRange(), [setSelectedFromRange]);
  const content2 = react.useMemo(() => {
    let returnedChildren = children;
    if (slate.Text.isText(leaf) && leaf._type === schemaTypes.span.name && (marks.forEach((mark) => {
      const schemaType = schemaTypes.decorators.find(
        (dec) => dec.value === mark
      );
      if (schemaType && renderDecorator) {
        const _props = Object.defineProperty(
          {
            children: returnedChildren,
            editorElementRef: spanRef,
            focused,
            path,
            selected,
            schemaType,
            value: mark
          },
          "type",
          {
            enumerable: !1,
            get() {
              return console.warn(
                "Property 'type' is deprecated, use 'schemaType' instead."
              ), schemaType;
            }
          }
        );
        returnedChildren = renderDecorator(
          _props
        );
      }
    }), block && annotations.length > 0 && annotations.forEach((annotation) => {
      const schemaType = schemaTypes.annotations.find(
        (t) => t.name === annotation._type
      );
      if (schemaType)
        if (renderAnnotation) {
          const _props = Object.defineProperty(
            {
              block,
              children: returnedChildren,
              editorElementRef: spanRef,
              focused,
              path,
              selected,
              schemaType,
              value: annotation
            },
            "type",
            {
              enumerable: !1,
              get() {
                return console.warn(
                  "Property 'type' is deprecated, use 'schemaType' instead."
                ), schemaType;
              }
            }
          );
          returnedChildren = /* @__PURE__ */ jsxRuntime.jsx("span", { ref: spanRef, children: renderAnnotation(_props) });
        } else
          returnedChildren = /* @__PURE__ */ jsxRuntime.jsx(DefaultAnnotation, { annotation, children: /* @__PURE__ */ jsxRuntime.jsx("span", { ref: spanRef, children: returnedChildren }) });
    }), block && renderChild)) {
      const child = block.children.find((_child) => _child._key === leaf._key);
      if (child) {
        const _props = Object.defineProperty(
          {
            annotations,
            children: /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: returnedChildren }),
            editorElementRef: spanRef,
            focused,
            path,
            schemaType: schemaTypes.span,
            selected,
            value: child
          },
          "type",
          {
            enumerable: !1,
            get() {
              return console.warn(
                "Property 'type' is deprecated, use 'schemaType' instead."
              ), schemaTypes.span;
            }
          }
        );
        returnedChildren = renderChild(_props);
      }
    }
    return returnedChildren;
  }, [
    annotations,
    block,
    children,
    focused,
    leaf,
    marks,
    path,
    renderAnnotation,
    renderChild,
    renderDecorator,
    schemaTypes.annotations,
    schemaTypes.decorators,
    schemaTypes.span,
    selected
  ]);
  return react.useMemo(
    () => /* @__PURE__ */ jsxRuntime.jsx("span", { ...attributes, ref: spanRef, children: content2 }, leaf._key),
    [leaf, attributes, content2]
  );
}, debug = debugWithName("component:Editable"), PLACEHOLDER_STYLE = {
  position: "absolute",
  userSelect: "none",
  pointerEvents: "none",
  left: 0,
  right: 0
}, PortableTextEditable = react.forwardRef(function(props, forwardedRef) {
  const {
    hotkeys,
    onBlur,
    onFocus,
    onBeforeInput,
    onPaste,
    onCopy,
    onClick,
    rangeDecorations,
    renderAnnotation,
    renderBlock,
    renderChild,
    renderDecorator,
    renderListItem,
    renderPlaceholder,
    renderStyle,
    selection: propsSelection,
    scrollSelectionIntoView,
    spellCheck,
    ...restProps
  } = props, portableTextEditor = usePortableTextEditor(), readOnly = usePortableTextEditorReadOnlyStatus(), ref = react.useRef(null), [editableElement, setEditableElement] = react.useState(
    null
  ), [hasInvalidValue, setHasInvalidValue] = react.useState(!1), [rangeDecorationState, setRangeDecorationsState] = react.useState([]);
  react.useImperativeHandle(
    forwardedRef,
    () => ref.current
  );
  const rangeDecorationsRef = react.useRef(rangeDecorations), { editorActor, schemaTypes } = portableTextEditor, slateEditor = slateReact.useSlate(), blockTypeName = schemaTypes.block.name, withInsertData = react.useMemo(
    () => createWithInsertData(editorActor, schemaTypes),
    [editorActor, schemaTypes]
  ), withHotKeys = react.useMemo(
    () => createWithHotkeys(schemaTypes, portableTextEditor, hotkeys),
    [hotkeys, portableTextEditor, schemaTypes]
  );
  react.useMemo(() => readOnly ? (debug("Editable is in read only mode"), withInsertData(slateEditor)) : (debug("Editable is in edit mode"), withInsertData(withHotKeys(slateEditor))), [readOnly, slateEditor, withHotKeys, withInsertData]);
  const renderElement = react.useCallback(
    (eProps) => /* @__PURE__ */ jsxRuntime.jsx(
      Element,
      {
        ...eProps,
        readOnly,
        renderBlock,
        renderChild,
        renderListItem,
        renderStyle,
        schemaTypes,
        spellCheck
      }
    ),
    [
      schemaTypes,
      spellCheck,
      readOnly,
      renderBlock,
      renderChild,
      renderListItem,
      renderStyle
    ]
  ), renderLeaf = react.useCallback(
    (lProps) => {
      if (lProps.leaf._type === "span") {
        let rendered = /* @__PURE__ */ jsxRuntime.jsx(
          Leaf,
          {
            ...lProps,
            schemaTypes,
            renderAnnotation,
            renderChild,
            renderDecorator,
            readOnly
          }
        );
        if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === "")
          return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
            /* @__PURE__ */ jsxRuntime.jsx("span", { style: PLACEHOLDER_STYLE, contentEditable: !1, children: renderPlaceholder() }),
            rendered
          ] });
        const decoration = lProps.leaf.rangeDecoration;
        return decoration && (rendered = decoration.component({ children: rendered })), rendered;
      }
      return lProps.children;
    },
    [
      readOnly,
      renderAnnotation,
      renderChild,
      renderDecorator,
      renderPlaceholder,
      schemaTypes
    ]
  ), restoreSelectionFromProps = react.useCallback(() => {
    if (propsSelection) {
      debug(`Selection from props ${JSON.stringify(propsSelection)}`);
      const normalizedSelection = normalizeSelection(
        propsSelection,
        fromSlateValue(slateEditor.children, blockTypeName)
      );
      if (normalizedSelection !== null) {
        debug(
          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`
        );
        const slateRange = toSlateRange(normalizedSelection, slateEditor);
        slateRange && (slate.Transforms.select(slateEditor, slateRange), slateEditor.operations.some((o) => o.type === "set_selection") || editorActor.send({
          type: "selection",
          selection: normalizedSelection
        }), slateEditor.onChange());
      }
    }
  }, [editorActor, propsSelection, slateEditor]), syncRangeDecorations = react.useCallback(
    (operation) => {
      if (rangeDecorations && rangeDecorations.length > 0) {
        const newSlateRanges = [];
        if (rangeDecorations.forEach((rangeDecorationItem) => {
          const slateRange = toSlateRange(
            rangeDecorationItem.selection,
            slateEditor
          );
          if (!slate.Range.isRange(slateRange)) {
            rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({
              newSelection: null,
              rangeDecoration: rangeDecorationItem,
              origin: "local"
            });
            return;
          }
          let newRange;
          if (operation && (newRange = moveRangeByOperation(slateRange, operation), newRange && newRange !== slateRange || newRange === null && slateRange)) {
            const value = PortableTextEditor.getValue(portableTextEditor), newRangeSelection = toPortableTextRange(
              value,
              newRange,
              schemaTypes
            );
            rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({
              newSelection: newRangeSelection,
              rangeDecoration: rangeDecorationItem,
              origin: "local"
            });
          }
          newRange !== null && newSlateRanges.push({
            ...newRange || slateRange,
            rangeDecoration: rangeDecorationItem
          });
        }), newSlateRanges.length > 0) {
          setRangeDecorationsState(newSlateRanges);
          return;
        }
      }
      rangeDecorationState.length > 0 && setRangeDecorationsState([]);
    },
    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor]
  );
  react.useEffect(() => {
    const onReady = editorActor.on("ready", () => {
      restoreSelectionFromProps();
    }), onInvalidValue = editorActor.on("invalid value", () => {
      setHasInvalidValue(!0);
    }), onValueChanged = editorActor.on("value changed", () => {
      setHasInvalidValue(!1);
    });
    return () => {
      onReady.unsubscribe(), onInvalidValue.unsubscribe(), onValueChanged.unsubscribe();
    };
  }, [editorActor, restoreSelectionFromProps]), react.useEffect(() => {
    propsSelection && !hasInvalidValue && restoreSelectionFromProps();
  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps]);
  const originalApply = react.useMemo(() => slateEditor.apply, [slateEditor]), [syncedRangeDecorations, setSyncedRangeDecorations] = react.useState(!1);
  react.useEffect(() => {
    syncedRangeDecorations || (setSyncedRangeDecorations(!0), syncRangeDecorations());
  }, [syncRangeDecorations, syncedRangeDecorations]), react.useEffect(() => {
    isEqual__default.default(rangeDecorations, rangeDecorationsRef.current) || syncRangeDecorations(), rangeDecorationsRef.current = rangeDecorations;
  }, [rangeDecorations, syncRangeDecorations]), react.useEffect(() => (slateEditor.apply = (op) => {
    originalApply(op), op.type !== "set_selection" && syncRangeDecorations(op);
  }, () => {
    slateEditor.apply = originalApply;
  }), [originalApply, slateEditor, syncRangeDecorations]);
  const handleCopy = react.useCallback(
    (event) => {
      onCopy && onCopy(event) !== void 0 && event.preventDefault();
    },
    [onCopy]
  ), handlePaste = react.useCallback(
    (event) => {
      if (event.preventDefault(), !slateEditor.selection)
        return;
      if (!onPaste) {
        debug("Pasting normally"), slateEditor.insertData(event.clipboardData);
        return;
      }
      const value = PortableTextEditor.getValue(portableTextEditor), path = toPortableTextRange(
        value,
        slateEditor.selection,
        schemaTypes
      )?.focus.path || [], onPasteResult = onPaste({ event, value, path, schemaTypes });
      onPasteResult === void 0 ? (debug("No result from custom paste handler, pasting normally"), slateEditor.insertData(event.clipboardData)) : (editorActor.send({ type: "loading" }), Promise.resolve(onPasteResult).then((result) => {
        debug("Custom paste function from client resolved", result), !result || !result.insert ? (debug("No result from custom paste handler, pasting normally"), slateEditor.insertData(event.clipboardData)) : result.insert ? slateEditor.insertFragment(
          toSlateValue(result.insert, {
            schemaTypes
          })
        ) : console.warn(
          "Your onPaste function returned something unexpected:",
          result
        );
      }).catch((error) => (console.error(error), error)).finally(() => {
        editorActor.send({ type: "done loading" });
      }));
    },
    [onPaste, portableTextEditor, schemaTypes, slateEditor]
  ), handleOnFocus = react.useCallback(
    (event) => {
      if (onFocus && onFocus(event), !event.isDefaultPrevented()) {
        const selection = PortableTextEditor.getSelection(portableTextEditor);
        selection === null && (slate.Transforms.select(slateEditor, slate.Editor.start(slateEditor, [])), slateEditor.onChange()), editorActor.send({ type: "focus", event });
        const newSelection = PortableTextEditor.getSelection(portableTextEditor);
        selection === newSelection && editorActor.send({
          type: "selection",
          selection
        });
      }
    },
    [editorActor, onFocus, portableTextEditor, slateEditor]
  ), handleClick = react.useCallback(
    (event) => {
      if (onClick && onClick(event), slateEditor.selection && event.target === event.currentTarget) {
        const [lastBlock, path] = slate.Node.last(slateEditor, []), focusPath = slateEditor.selection.focus.path.slice(0, 1), lastPath = path.slice(0, 1);
        if (slate.Path.equals(focusPath, lastPath)) {
          const node = slate.Node.descendant(slateEditor, path.slice(0, 1));
          lastBlock && slate.Editor.isVoid(slateEditor, node) && (slate.Transforms.insertNodes(
            slateEditor,
            slateEditor.pteCreateTextBlock({ decorators: [] })
          ), slateEditor.onChange());
        }
      }
    },
    [onClick, slateEditor]
  ), handleOnBlur = react.useCallback(
    (event) => {
      onBlur && onBlur(event), event.isPropagationStopped() || editorActor.send({ type: "blur", event });
    },
    [editorActor, onBlur]
  ), handleOnBeforeInput = react.useCallback(
    (event) => {
      onBeforeInput && onBeforeInput(event);
    },
    [onBeforeInput]
  ), validateSelection = react.useCallback(() => {
    if (!slateEditor.selection)
      return;
    const root = slateReact.ReactEditor.findDocumentOrShadowRoot(slateEditor), { activeElement } = root;
    if (ref.current !== activeElement)
      return;
    const domSelection = slateReact.ReactEditor.getWindow(slateEditor).getSelection();
    if (!domSelection || domSelection.rangeCount === 0)
      return;
    const existingDOMRange = domSelection.getRangeAt(0);
    try {
      const newDOMRange = slateReact.ReactEditor.toDOMRange(
        slateEditor,
        slateEditor.selection
      );
      (newDOMRange.startOffset !== existingDOMRange.startOffset || newDOMRange.endOffset !== existingDOMRange.endOffset) && (debug("DOM range out of sync, validating selection"), domSelection?.removeAllRanges(), domSelection.addRange(newDOMRange));
    } catch {
      debug("Could not resolve selection, selecting top document"), slate.Transforms.deselect(slateEditor), slateEditor.children.length > 0 && slate.Transforms.select(slateEditor, [0, 0]), slateEditor.onChange();
    }
  }, [ref, slateEditor]);
  react.useEffect(() => {
    if (editableElement) {
      const mutationObserver = new MutationObserver(validateSelection);
      return mutationObserver.observe(editableElement, {
        attributeOldValue: !1,
        attributes: !1,
        characterData: !1,
        childList: !0,
        subtree: !0
      }), () => {
        mutationObserver.disconnect();
      };
    }
  }, [validateSelection, editableElement]);
  const handleKeyDown = react.useCallback(
    (event) => {
      props.onKeyDown && props.onKeyDown(event), event.isDefaultPrevented() || (editorActor.send({
        type: "key down",
        nativeEvent: event.nativeEvent,
        editor: slateEditor
      }), slateEditor.pteWithHotKeys(event));
    },
    [props, slateEditor]
  ), scrollSelectionIntoViewToSlate = react.useMemo(() => {
    if (scrollSelectionIntoView !== void 0)
      return scrollSelectionIntoView === null ? noop__default.default : (_editor, domRange) => {
        scrollSelectionIntoView(portableTextEditor, domRange);
      };
  }, [portableTextEditor, scrollSelectionIntoView]), decorate = react.useCallback(
    ([, path]) => {
      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes))
        return [
          {
            anchor: {
              path: [0, 0],
              offset: 0
            },
            focus: {
              path: [0, 0],
              offset: 0
            },
            placeholder: !0
          }
        ];
      if (path.length === 0)
        return [];
      const result = rangeDecorationState.filter((item) => slate.Range.isCollapsed(item) ? path.length !== 2 ? !1 : slate.Path.equals(item.focus.path, path) && slate.Path.equals(item.anchor.path, path) : slate.Range.intersection(item, {
        anchor: { path, offset: 0 },
        focus: { path, offset: 0 }
      }) || slate.Range.includes(item, path));
      return result.length > 0 ? result : [];
    },
    [slateEditor, schemaTypes, rangeDecorationState]
  );
  return react.useEffect(() => {
    ref.current = slateReact.ReactEditor.toDOMNode(
      slateEditor,
      slateEditor
    ), setEditableElement(ref.current);
  }, [slateEditor, ref]), portableTextEditor ? hasInvalidValue ? null : /* @__PURE__ */ jsxRuntime.jsx(
    slateReact.Editable,
    {
      ...restProps,
      autoFocus: !1,
      className: restProps.className || "pt-editable",
      decorate,
      onBlur: handleOnBlur,
      onCopy: handleCopy,
      onClick: handleClick,
      onDOMBeforeInput: handleOnBeforeInput,
      onFocus: handleOnFocus,
      onKeyDown: handleKeyDown,
      onPaste: handlePaste,
      readOnly,
      renderPlaceholder: void 0,
      renderElement,
      renderLeaf,
      scrollSelectionIntoView: scrollSelectionIntoViewToSlate
    }
  ) : null;
});
exports.PortableTextEditable = PortableTextEditable;
exports.PortableTextEditor = PortableTextEditor;
exports.editorMachine = editorMachine;
exports.keyGenerator = defaultKeyGenerator;
exports.usePortableTextEditor = usePortableTextEditor;
exports.usePortableTextEditorSelection = usePortableTextEditorSelection;
//# sourceMappingURL=index.js.map
