import {
  require_react_dom
} from "./chunk-J4LECHB7.js";
import {
  require_jsx_runtime
} from "./chunk-H7D7XHLF.js";
import {
  require_react
} from "./chunk-ODS22EN7.js";
import {
  __commonJS,
  __esm,
  __export,
  __publicField,
  __toCommonJS,
  __toESM
} from "./chunk-ZB72733A.js";

// node_modules/shallowequal/index.js
var require_shallowequal = __commonJS({
  "node_modules/shallowequal/index.js"(exports, module) {
    module.exports = function shallowEqual(objA, objB, compare, compareContext) {
      var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
      if (ret !== void 0) {
        return !!ret;
      }
      if (objA === objB) {
        return true;
      }
      if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
      for (var idx = 0; idx < keysA.length; idx++) {
        var key2 = keysA[idx];
        if (!bHasOwnProperty(key2)) {
          return false;
        }
        var valueA = objA[key2];
        var valueB = objB[key2];
        ret = compare ? compare.call(compareContext, valueA, valueB, key2) : void 0;
        if (ret === false || ret === void 0 && valueA !== valueB) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/refractor/lang/javascript.js
var require_javascript = __commonJS({
  "node_modules/refractor/lang/javascript.js"(exports, module) {
    "use strict";
    module.exports = javascript;
    javascript.displayName = "javascript";
    javascript.aliases = ["js"];
    function javascript(Prism) {
      Prism.languages.javascript = Prism.languages.extend("clike", {
        "class-name": [
          Prism.languages.clike["class-name"],
          {
            pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
            lookbehind: true
          }
        ],
        keyword: [
          {
            pattern: /((?:^|\})\s*)catch\b/,
            lookbehind: true
          },
          {
            pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
            lookbehind: true
          }
        ],
        // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
        function: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
        number: {
          pattern: RegExp(
            /(^|[^\w$])/.source + "(?:" + // constant
            (/NaN|Infinity/.source + "|" + // binary integer
            /0[bB][01]+(?:_[01]+)*n?/.source + "|" + // octal integer
            /0[oO][0-7]+(?:_[0-7]+)*n?/.source + "|" + // hexadecimal integer
            /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + "|" + // decimal bigint
            /\d+(?:_\d+)*n/.source + "|" + // decimal number (integer or float) but no bigint
            /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ")" + /(?![\w$])/.source
          ),
          lookbehind: true
        },
        operator: /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
      });
      Prism.languages.javascript["class-name"][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
      Prism.languages.insertBefore("javascript", "keyword", {
        regex: {
          // eslint-disable-next-line regexp/no-dupe-characters-character-class
          pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,
          lookbehind: true,
          greedy: true,
          inside: {
            "regex-source": {
              pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
              lookbehind: true,
              alias: "language-regex",
              inside: Prism.languages.regex
            },
            "regex-delimiter": /^\/|\/$/,
            "regex-flags": /^[a-z]+$/
          }
        },
        // This must be declared before keyword because we use "function" inside the look-forward
        "function-variable": {
          pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
          alias: "function"
        },
        parameter: [
          {
            pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
            lookbehind: true,
            inside: Prism.languages.javascript
          },
          {
            pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
            lookbehind: true,
            inside: Prism.languages.javascript
          },
          {
            pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
            lookbehind: true,
            inside: Prism.languages.javascript
          },
          {
            pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
            lookbehind: true,
            inside: Prism.languages.javascript
          }
        ],
        constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/
      });
      Prism.languages.insertBefore("javascript", "string", {
        hashbang: {
          pattern: /^#!.*/,
          greedy: true,
          alias: "comment"
        },
        "template-string": {
          pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
          greedy: true,
          inside: {
            "template-punctuation": {
              pattern: /^`|`$/,
              alias: "string"
            },
            interpolation: {
              pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
              lookbehind: true,
              inside: {
                "interpolation-punctuation": {
                  pattern: /^\$\{|\}$/,
                  alias: "punctuation"
                },
                rest: Prism.languages.javascript
              }
            },
            string: /[\s\S]+/
          }
        },
        "string-property": {
          pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
          lookbehind: true,
          greedy: true,
          alias: "property"
        }
      });
      Prism.languages.insertBefore("javascript", "operator", {
        "literal-property": {
          pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
          lookbehind: true,
          alias: "property"
        }
      });
      if (Prism.languages.markup) {
        Prism.languages.markup.tag.addInlined("script", "javascript");
        Prism.languages.markup.tag.addAttribute(
          /on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,
          "javascript"
        );
      }
      Prism.languages.js = Prism.languages.javascript;
    }
  }
});

// node_modules/xtend/immutable.js
var require_immutable = __commonJS({
  "node_modules/xtend/immutable.js"(exports, module) {
    module.exports = extend;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function extend() {
      var target = {};
      for (var i2 = 0; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key2 in source) {
          if (hasOwnProperty.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    }
  }
});

// node_modules/property-information/lib/util/schema.js
var require_schema = __commonJS({
  "node_modules/property-information/lib/util/schema.js"(exports, module) {
    "use strict";
    module.exports = Schema;
    var proto = Schema.prototype;
    proto.space = null;
    proto.normal = {};
    proto.property = {};
    function Schema(property, normal, space) {
      this.property = property;
      this.normal = normal;
      if (space) {
        this.space = space;
      }
    }
  }
});

// node_modules/property-information/lib/util/merge.js
var require_merge = __commonJS({
  "node_modules/property-information/lib/util/merge.js"(exports, module) {
    "use strict";
    var xtend = require_immutable();
    var Schema = require_schema();
    module.exports = merge2;
    function merge2(definitions) {
      var length2 = definitions.length;
      var property = [];
      var normal = [];
      var index3 = -1;
      var info;
      var space;
      while (++index3 < length2) {
        info = definitions[index3];
        property.push(info.property);
        normal.push(info.normal);
        space = info.space;
      }
      return new Schema(
        xtend.apply(null, property),
        xtend.apply(null, normal),
        space
      );
    }
  }
});

// node_modules/property-information/normalize.js
var require_normalize = __commonJS({
  "node_modules/property-information/normalize.js"(exports, module) {
    "use strict";
    module.exports = normalize;
    function normalize(value) {
      return value.toLowerCase();
    }
  }
});

// node_modules/property-information/lib/util/info.js
var require_info = __commonJS({
  "node_modules/property-information/lib/util/info.js"(exports, module) {
    "use strict";
    module.exports = Info;
    var proto = Info.prototype;
    proto.space = null;
    proto.attribute = null;
    proto.property = null;
    proto.boolean = false;
    proto.booleanish = false;
    proto.overloadedBoolean = false;
    proto.number = false;
    proto.commaSeparated = false;
    proto.spaceSeparated = false;
    proto.commaOrSpaceSeparated = false;
    proto.mustUseProperty = false;
    proto.defined = false;
    function Info(property, attribute) {
      this.property = property;
      this.attribute = attribute;
    }
  }
});

// node_modules/property-information/lib/util/types.js
var require_types = __commonJS({
  "node_modules/property-information/lib/util/types.js"(exports) {
    "use strict";
    var powers = 0;
    exports.boolean = increment();
    exports.booleanish = increment();
    exports.overloadedBoolean = increment();
    exports.number = increment();
    exports.spaceSeparated = increment();
    exports.commaSeparated = increment();
    exports.commaOrSpaceSeparated = increment();
    function increment() {
      return Math.pow(2, ++powers);
    }
  }
});

// node_modules/property-information/lib/util/defined-info.js
var require_defined_info = __commonJS({
  "node_modules/property-information/lib/util/defined-info.js"(exports, module) {
    "use strict";
    var Info = require_info();
    var types2 = require_types();
    module.exports = DefinedInfo;
    DefinedInfo.prototype = new Info();
    DefinedInfo.prototype.defined = true;
    var checks = [
      "boolean",
      "booleanish",
      "overloadedBoolean",
      "number",
      "commaSeparated",
      "spaceSeparated",
      "commaOrSpaceSeparated"
    ];
    var checksLength = checks.length;
    function DefinedInfo(property, attribute, mask, space) {
      var index3 = -1;
      var check;
      mark(this, "space", space);
      Info.call(this, property, attribute);
      while (++index3 < checksLength) {
        check = checks[index3];
        mark(this, check, (mask & types2[check]) === types2[check]);
      }
    }
    function mark(values, key2, value) {
      if (value) {
        values[key2] = value;
      }
    }
  }
});

// node_modules/property-information/lib/util/create.js
var require_create = __commonJS({
  "node_modules/property-information/lib/util/create.js"(exports, module) {
    "use strict";
    var normalize = require_normalize();
    var Schema = require_schema();
    var DefinedInfo = require_defined_info();
    module.exports = create;
    function create(definition) {
      var space = definition.space;
      var mustUseProperty = definition.mustUseProperty || [];
      var attributes = definition.attributes || {};
      var props = definition.properties;
      var transform2 = definition.transform;
      var property = {};
      var normal = {};
      var prop;
      var info;
      for (prop in props) {
        info = new DefinedInfo(
          prop,
          transform2(attributes, prop),
          props[prop],
          space
        );
        if (mustUseProperty.indexOf(prop) !== -1) {
          info.mustUseProperty = true;
        }
        property[prop] = info;
        normal[normalize(prop)] = prop;
        normal[normalize(info.attribute)] = prop;
      }
      return new Schema(property, normal, space);
    }
  }
});

// node_modules/property-information/lib/xlink.js
var require_xlink = __commonJS({
  "node_modules/property-information/lib/xlink.js"(exports, module) {
    "use strict";
    var create = require_create();
    module.exports = create({
      space: "xlink",
      transform: xlinkTransform,
      properties: {
        xLinkActuate: null,
        xLinkArcRole: null,
        xLinkHref: null,
        xLinkRole: null,
        xLinkShow: null,
        xLinkTitle: null,
        xLinkType: null
      }
    });
    function xlinkTransform(_2, prop) {
      return "xlink:" + prop.slice(5).toLowerCase();
    }
  }
});

// node_modules/property-information/lib/xml.js
var require_xml = __commonJS({
  "node_modules/property-information/lib/xml.js"(exports, module) {
    "use strict";
    var create = require_create();
    module.exports = create({
      space: "xml",
      transform: xmlTransform,
      properties: {
        xmlLang: null,
        xmlBase: null,
        xmlSpace: null
      }
    });
    function xmlTransform(_2, prop) {
      return "xml:" + prop.slice(3).toLowerCase();
    }
  }
});

// node_modules/property-information/lib/util/case-sensitive-transform.js
var require_case_sensitive_transform = __commonJS({
  "node_modules/property-information/lib/util/case-sensitive-transform.js"(exports, module) {
    "use strict";
    module.exports = caseSensitiveTransform;
    function caseSensitiveTransform(attributes, attribute) {
      return attribute in attributes ? attributes[attribute] : attribute;
    }
  }
});

// node_modules/property-information/lib/util/case-insensitive-transform.js
var require_case_insensitive_transform = __commonJS({
  "node_modules/property-information/lib/util/case-insensitive-transform.js"(exports, module) {
    "use strict";
    var caseSensitiveTransform = require_case_sensitive_transform();
    module.exports = caseInsensitiveTransform;
    function caseInsensitiveTransform(attributes, property) {
      return caseSensitiveTransform(attributes, property.toLowerCase());
    }
  }
});

// node_modules/property-information/lib/xmlns.js
var require_xmlns = __commonJS({
  "node_modules/property-information/lib/xmlns.js"(exports, module) {
    "use strict";
    var create = require_create();
    var caseInsensitiveTransform = require_case_insensitive_transform();
    module.exports = create({
      space: "xmlns",
      attributes: {
        xmlnsxlink: "xmlns:xlink"
      },
      transform: caseInsensitiveTransform,
      properties: {
        xmlns: null,
        xmlnsXLink: null
      }
    });
  }
});

// node_modules/property-information/lib/aria.js
var require_aria = __commonJS({
  "node_modules/property-information/lib/aria.js"(exports, module) {
    "use strict";
    var types2 = require_types();
    var create = require_create();
    var booleanish = types2.booleanish;
    var number2 = types2.number;
    var spaceSeparated = types2.spaceSeparated;
    module.exports = create({
      transform: ariaTransform,
      properties: {
        ariaActiveDescendant: null,
        ariaAtomic: booleanish,
        ariaAutoComplete: null,
        ariaBusy: booleanish,
        ariaChecked: booleanish,
        ariaColCount: number2,
        ariaColIndex: number2,
        ariaColSpan: number2,
        ariaControls: spaceSeparated,
        ariaCurrent: null,
        ariaDescribedBy: spaceSeparated,
        ariaDetails: null,
        ariaDisabled: booleanish,
        ariaDropEffect: spaceSeparated,
        ariaErrorMessage: null,
        ariaExpanded: booleanish,
        ariaFlowTo: spaceSeparated,
        ariaGrabbed: booleanish,
        ariaHasPopup: null,
        ariaHidden: booleanish,
        ariaInvalid: null,
        ariaKeyShortcuts: null,
        ariaLabel: null,
        ariaLabelledBy: spaceSeparated,
        ariaLevel: number2,
        ariaLive: null,
        ariaModal: booleanish,
        ariaMultiLine: booleanish,
        ariaMultiSelectable: booleanish,
        ariaOrientation: null,
        ariaOwns: spaceSeparated,
        ariaPlaceholder: null,
        ariaPosInSet: number2,
        ariaPressed: booleanish,
        ariaReadOnly: booleanish,
        ariaRelevant: null,
        ariaRequired: booleanish,
        ariaRoleDescription: spaceSeparated,
        ariaRowCount: number2,
        ariaRowIndex: number2,
        ariaRowSpan: number2,
        ariaSelected: booleanish,
        ariaSetSize: number2,
        ariaSort: null,
        ariaValueMax: number2,
        ariaValueMin: number2,
        ariaValueNow: number2,
        ariaValueText: null,
        role: null
      }
    });
    function ariaTransform(_2, prop) {
      return prop === "role" ? prop : "aria-" + prop.slice(4).toLowerCase();
    }
  }
});

// node_modules/property-information/lib/html.js
var require_html = __commonJS({
  "node_modules/property-information/lib/html.js"(exports, module) {
    "use strict";
    var types2 = require_types();
    var create = require_create();
    var caseInsensitiveTransform = require_case_insensitive_transform();
    var boolean = types2.boolean;
    var overloadedBoolean = types2.overloadedBoolean;
    var booleanish = types2.booleanish;
    var number2 = types2.number;
    var spaceSeparated = types2.spaceSeparated;
    var commaSeparated = types2.commaSeparated;
    module.exports = create({
      space: "html",
      attributes: {
        acceptcharset: "accept-charset",
        classname: "class",
        htmlfor: "for",
        httpequiv: "http-equiv"
      },
      transform: caseInsensitiveTransform,
      mustUseProperty: ["checked", "multiple", "muted", "selected"],
      properties: {
        // Standard Properties.
        abbr: null,
        accept: commaSeparated,
        acceptCharset: spaceSeparated,
        accessKey: spaceSeparated,
        action: null,
        allow: null,
        allowFullScreen: boolean,
        allowPaymentRequest: boolean,
        allowUserMedia: boolean,
        alt: null,
        as: null,
        async: boolean,
        autoCapitalize: null,
        autoComplete: spaceSeparated,
        autoFocus: boolean,
        autoPlay: boolean,
        capture: boolean,
        charSet: null,
        checked: boolean,
        cite: null,
        className: spaceSeparated,
        cols: number2,
        colSpan: null,
        content: null,
        contentEditable: booleanish,
        controls: boolean,
        controlsList: spaceSeparated,
        coords: number2 | commaSeparated,
        crossOrigin: null,
        data: null,
        dateTime: null,
        decoding: null,
        default: boolean,
        defer: boolean,
        dir: null,
        dirName: null,
        disabled: boolean,
        download: overloadedBoolean,
        draggable: booleanish,
        encType: null,
        enterKeyHint: null,
        form: null,
        formAction: null,
        formEncType: null,
        formMethod: null,
        formNoValidate: boolean,
        formTarget: null,
        headers: spaceSeparated,
        height: number2,
        hidden: boolean,
        high: number2,
        href: null,
        hrefLang: null,
        htmlFor: spaceSeparated,
        httpEquiv: spaceSeparated,
        id: null,
        imageSizes: null,
        imageSrcSet: commaSeparated,
        inputMode: null,
        integrity: null,
        is: null,
        isMap: boolean,
        itemId: null,
        itemProp: spaceSeparated,
        itemRef: spaceSeparated,
        itemScope: boolean,
        itemType: spaceSeparated,
        kind: null,
        label: null,
        lang: null,
        language: null,
        list: null,
        loading: null,
        loop: boolean,
        low: number2,
        manifest: null,
        max: null,
        maxLength: number2,
        media: null,
        method: null,
        min: null,
        minLength: number2,
        multiple: boolean,
        muted: boolean,
        name: null,
        nonce: null,
        noModule: boolean,
        noValidate: boolean,
        onAbort: null,
        onAfterPrint: null,
        onAuxClick: null,
        onBeforePrint: null,
        onBeforeUnload: null,
        onBlur: null,
        onCancel: null,
        onCanPlay: null,
        onCanPlayThrough: null,
        onChange: null,
        onClick: null,
        onClose: null,
        onContextMenu: null,
        onCopy: null,
        onCueChange: null,
        onCut: null,
        onDblClick: null,
        onDrag: null,
        onDragEnd: null,
        onDragEnter: null,
        onDragExit: null,
        onDragLeave: null,
        onDragOver: null,
        onDragStart: null,
        onDrop: null,
        onDurationChange: null,
        onEmptied: null,
        onEnded: null,
        onError: null,
        onFocus: null,
        onFormData: null,
        onHashChange: null,
        onInput: null,
        onInvalid: null,
        onKeyDown: null,
        onKeyPress: null,
        onKeyUp: null,
        onLanguageChange: null,
        onLoad: null,
        onLoadedData: null,
        onLoadedMetadata: null,
        onLoadEnd: null,
        onLoadStart: null,
        onMessage: null,
        onMessageError: null,
        onMouseDown: null,
        onMouseEnter: null,
        onMouseLeave: null,
        onMouseMove: null,
        onMouseOut: null,
        onMouseOver: null,
        onMouseUp: null,
        onOffline: null,
        onOnline: null,
        onPageHide: null,
        onPageShow: null,
        onPaste: null,
        onPause: null,
        onPlay: null,
        onPlaying: null,
        onPopState: null,
        onProgress: null,
        onRateChange: null,
        onRejectionHandled: null,
        onReset: null,
        onResize: null,
        onScroll: null,
        onSecurityPolicyViolation: null,
        onSeeked: null,
        onSeeking: null,
        onSelect: null,
        onSlotChange: null,
        onStalled: null,
        onStorage: null,
        onSubmit: null,
        onSuspend: null,
        onTimeUpdate: null,
        onToggle: null,
        onUnhandledRejection: null,
        onUnload: null,
        onVolumeChange: null,
        onWaiting: null,
        onWheel: null,
        open: boolean,
        optimum: number2,
        pattern: null,
        ping: spaceSeparated,
        placeholder: null,
        playsInline: boolean,
        poster: null,
        preload: null,
        readOnly: boolean,
        referrerPolicy: null,
        rel: spaceSeparated,
        required: boolean,
        reversed: boolean,
        rows: number2,
        rowSpan: number2,
        sandbox: spaceSeparated,
        scope: null,
        scoped: boolean,
        seamless: boolean,
        selected: boolean,
        shape: null,
        size: number2,
        sizes: null,
        slot: null,
        span: number2,
        spellCheck: booleanish,
        src: null,
        srcDoc: null,
        srcLang: null,
        srcSet: commaSeparated,
        start: number2,
        step: null,
        style: null,
        tabIndex: number2,
        target: null,
        title: null,
        translate: null,
        type: null,
        typeMustMatch: boolean,
        useMap: null,
        value: booleanish,
        width: number2,
        wrap: null,
        // Legacy.
        // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
        align: null,
        // Several. Use CSS `text-align` instead,
        aLink: null,
        // `<body>`. Use CSS `a:active {color}` instead
        archive: spaceSeparated,
        // `<object>`. List of URIs to archives
        axis: null,
        // `<td>` and `<th>`. Use `scope` on `<th>`
        background: null,
        // `<body>`. Use CSS `background-image` instead
        bgColor: null,
        // `<body>` and table elements. Use CSS `background-color` instead
        border: number2,
        // `<table>`. Use CSS `border-width` instead,
        borderColor: null,
        // `<table>`. Use CSS `border-color` instead,
        bottomMargin: number2,
        // `<body>`
        cellPadding: null,
        // `<table>`
        cellSpacing: null,
        // `<table>`
        char: null,
        // Several table elements. When `align=char`, sets the character to align on
        charOff: null,
        // Several table elements. When `char`, offsets the alignment
        classId: null,
        // `<object>`
        clear: null,
        // `<br>`. Use CSS `clear` instead
        code: null,
        // `<object>`
        codeBase: null,
        // `<object>`
        codeType: null,
        // `<object>`
        color: null,
        // `<font>` and `<hr>`. Use CSS instead
        compact: boolean,
        // Lists. Use CSS to reduce space between items instead
        declare: boolean,
        // `<object>`
        event: null,
        // `<script>`
        face: null,
        // `<font>`. Use CSS instead
        frame: null,
        // `<table>`
        frameBorder: null,
        // `<iframe>`. Use CSS `border` instead
        hSpace: number2,
        // `<img>` and `<object>`
        leftMargin: number2,
        // `<body>`
        link: null,
        // `<body>`. Use CSS `a:link {color: *}` instead
        longDesc: null,
        // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
        lowSrc: null,
        // `<img>`. Use a `<picture>`
        marginHeight: number2,
        // `<body>`
        marginWidth: number2,
        // `<body>`
        noResize: boolean,
        // `<frame>`
        noHref: boolean,
        // `<area>`. Use no href instead of an explicit `nohref`
        noShade: boolean,
        // `<hr>`. Use background-color and height instead of borders
        noWrap: boolean,
        // `<td>` and `<th>`
        object: null,
        // `<applet>`
        profile: null,
        // `<head>`
        prompt: null,
        // `<isindex>`
        rev: null,
        // `<link>`
        rightMargin: number2,
        // `<body>`
        rules: null,
        // `<table>`
        scheme: null,
        // `<meta>`
        scrolling: booleanish,
        // `<frame>`. Use overflow in the child context
        standby: null,
        // `<object>`
        summary: null,
        // `<table>`
        text: null,
        // `<body>`. Use CSS `color` instead
        topMargin: number2,
        // `<body>`
        valueType: null,
        // `<param>`
        version: null,
        // `<html>`. Use a doctype.
        vAlign: null,
        // Several. Use CSS `vertical-align` instead
        vLink: null,
        // `<body>`. Use CSS `a:visited {color}` instead
        vSpace: number2,
        // `<img>` and `<object>`
        // Non-standard Properties.
        allowTransparency: null,
        autoCorrect: null,
        autoSave: null,
        disablePictureInPicture: boolean,
        disableRemotePlayback: boolean,
        prefix: null,
        property: null,
        results: number2,
        security: null,
        unselectable: null
      }
    });
  }
});

// node_modules/property-information/html.js
var require_html2 = __commonJS({
  "node_modules/property-information/html.js"(exports, module) {
    "use strict";
    var merge2 = require_merge();
    var xlink = require_xlink();
    var xml = require_xml();
    var xmlns = require_xmlns();
    var aria = require_aria();
    var html = require_html();
    module.exports = merge2([xml, xlink, xmlns, aria, html]);
  }
});

// node_modules/property-information/find.js
var require_find = __commonJS({
  "node_modules/property-information/find.js"(exports, module) {
    "use strict";
    var normalize = require_normalize();
    var DefinedInfo = require_defined_info();
    var Info = require_info();
    var data = "data";
    module.exports = find;
    var valid = /^data[-\w.:]+$/i;
    var dash = /-[a-z]/g;
    var cap = /[A-Z]/g;
    function find(schema, value) {
      var normal = normalize(value);
      var prop = value;
      var Type = Info;
      if (normal in schema.normal) {
        return schema.property[schema.normal[normal]];
      }
      if (normal.length > 4 && normal.slice(0, 4) === data && valid.test(value)) {
        if (value.charAt(4) === "-") {
          prop = datasetToProperty(value);
        } else {
          value = datasetToAttribute(value);
        }
        Type = DefinedInfo;
      }
      return new Type(prop, value);
    }
    function datasetToProperty(attribute) {
      var value = attribute.slice(5).replace(dash, camelcase);
      return data + value.charAt(0).toUpperCase() + value.slice(1);
    }
    function datasetToAttribute(property) {
      var value = property.slice(4);
      if (dash.test(value)) {
        return property;
      }
      value = value.replace(cap, kebab);
      if (value.charAt(0) !== "-") {
        value = "-" + value;
      }
      return data + value;
    }
    function kebab($0) {
      return "-" + $0.toLowerCase();
    }
    function camelcase($0) {
      return $0.charAt(1).toUpperCase();
    }
  }
});

// node_modules/hast-util-parse-selector/index.js
var require_hast_util_parse_selector = __commonJS({
  "node_modules/hast-util-parse-selector/index.js"(exports, module) {
    "use strict";
    module.exports = parse2;
    var search = /[#.]/g;
    function parse2(selector, defaultTagName) {
      var value = selector || "";
      var name = defaultTagName || "div";
      var props = {};
      var start = 0;
      var subvalue;
      var previous;
      var match2;
      while (start < value.length) {
        search.lastIndex = start;
        match2 = search.exec(value);
        subvalue = value.slice(start, match2 ? match2.index : value.length);
        if (subvalue) {
          if (!previous) {
            name = subvalue;
          } else if (previous === "#") {
            props.id = subvalue;
          } else if (props.className) {
            props.className.push(subvalue);
          } else {
            props.className = [subvalue];
          }
          start += subvalue.length;
        }
        if (match2) {
          previous = match2[0];
          start++;
        }
      }
      return { type: "element", tagName: name, properties: props, children: [] };
    }
  }
});

// node_modules/space-separated-tokens/index.js
var require_space_separated_tokens = __commonJS({
  "node_modules/space-separated-tokens/index.js"(exports) {
    "use strict";
    exports.parse = parse2;
    exports.stringify = stringify2;
    var empty = "";
    var space = " ";
    var whiteSpace = /[ \t\n\r\f]+/g;
    function parse2(value) {
      var input = String(value || empty).trim();
      return input === empty ? [] : input.split(whiteSpace);
    }
    function stringify2(values) {
      return values.join(space).trim();
    }
  }
});

// node_modules/comma-separated-tokens/index.js
var require_comma_separated_tokens = __commonJS({
  "node_modules/comma-separated-tokens/index.js"(exports) {
    "use strict";
    exports.parse = parse2;
    exports.stringify = stringify2;
    var comma = ",";
    var space = " ";
    var empty = "";
    function parse2(value) {
      var values = [];
      var input = String(value || empty);
      var index3 = input.indexOf(comma);
      var lastIndex = 0;
      var end = false;
      var val;
      while (!end) {
        if (index3 === -1) {
          index3 = input.length;
          end = true;
        }
        val = input.slice(lastIndex, index3).trim();
        if (val || !end) {
          values.push(val);
        }
        lastIndex = index3 + 1;
        index3 = input.indexOf(comma, lastIndex);
      }
      return values;
    }
    function stringify2(values, options) {
      var settings = options || {};
      var left = settings.padLeft === false ? empty : space;
      var right = settings.padRight ? space : empty;
      if (values[values.length - 1] === empty) {
        values = values.concat(empty);
      }
      return values.join(right + comma + left).trim();
    }
  }
});

// node_modules/hastscript/factory.js
var require_factory = __commonJS({
  "node_modules/hastscript/factory.js"(exports, module) {
    "use strict";
    var find = require_find();
    var normalize = require_normalize();
    var parseSelector = require_hast_util_parse_selector();
    var spaces = require_space_separated_tokens().parse;
    var commas = require_comma_separated_tokens().parse;
    module.exports = factory;
    var own = {}.hasOwnProperty;
    function factory(schema, defaultTagName, caseSensitive) {
      var adjust = caseSensitive ? createAdjustMap(caseSensitive) : null;
      return h;
      function h(selector, properties) {
        var node2 = parseSelector(selector, defaultTagName);
        var children = Array.prototype.slice.call(arguments, 2);
        var name = node2.tagName.toLowerCase();
        var property;
        node2.tagName = adjust && own.call(adjust, name) ? adjust[name] : name;
        if (properties && isChildren(properties, node2)) {
          children.unshift(properties);
          properties = null;
        }
        if (properties) {
          for (property in properties) {
            addProperty(node2.properties, property, properties[property]);
          }
        }
        addChild(node2.children, children);
        if (node2.tagName === "template") {
          node2.content = { type: "root", children: node2.children };
          node2.children = [];
        }
        return node2;
      }
      function addProperty(properties, key2, value) {
        var info;
        var property;
        var result;
        if (value === null || value === void 0 || value !== value) {
          return;
        }
        info = find(schema, key2);
        property = info.property;
        result = value;
        if (typeof result === "string") {
          if (info.spaceSeparated) {
            result = spaces(result);
          } else if (info.commaSeparated) {
            result = commas(result);
          } else if (info.commaOrSpaceSeparated) {
            result = spaces(commas(result).join(" "));
          }
        }
        if (property === "style" && typeof value !== "string") {
          result = style(result);
        }
        if (property === "className" && properties.className) {
          result = properties.className.concat(result);
        }
        properties[property] = parsePrimitives(info, property, result);
      }
    }
    function isChildren(value, node2) {
      return typeof value === "string" || "length" in value || isNode2(node2.tagName, value);
    }
    function isNode2(tagName, value) {
      var type = value.type;
      if (tagName === "input" || !type || typeof type !== "string") {
        return false;
      }
      if (typeof value.children === "object" && "length" in value.children) {
        return true;
      }
      type = type.toLowerCase();
      if (tagName === "button") {
        return type !== "menu" && type !== "submit" && type !== "reset" && type !== "button";
      }
      return "value" in value;
    }
    function addChild(nodes, value) {
      var index3;
      var length2;
      if (typeof value === "string" || typeof value === "number") {
        nodes.push({ type: "text", value: String(value) });
        return;
      }
      if (typeof value === "object" && "length" in value) {
        index3 = -1;
        length2 = value.length;
        while (++index3 < length2) {
          addChild(nodes, value[index3]);
        }
        return;
      }
      if (typeof value !== "object" || !("type" in value)) {
        throw new Error("Expected node, nodes, or string, got `" + value + "`");
      }
      nodes.push(value);
    }
    function parsePrimitives(info, name, value) {
      var index3;
      var length2;
      var result;
      if (typeof value !== "object" || !("length" in value)) {
        return parsePrimitive(info, name, value);
      }
      length2 = value.length;
      index3 = -1;
      result = [];
      while (++index3 < length2) {
        result[index3] = parsePrimitive(info, name, value[index3]);
      }
      return result;
    }
    function parsePrimitive(info, name, value) {
      var result = value;
      if (info.number || info.positiveNumber) {
        if (!isNaN(result) && result !== "") {
          result = Number(result);
        }
      } else if (info.boolean || info.overloadedBoolean) {
        if (typeof result === "string" && (result === "" || normalize(value) === normalize(name))) {
          result = true;
        }
      }
      return result;
    }
    function style(value) {
      var result = [];
      var key2;
      for (key2 in value) {
        result.push([key2, value[key2]].join(": "));
      }
      return result.join("; ");
    }
    function createAdjustMap(values) {
      var length2 = values.length;
      var index3 = -1;
      var result = {};
      var value;
      while (++index3 < length2) {
        value = values[index3];
        result[value.toLowerCase()] = value;
      }
      return result;
    }
  }
});

// node_modules/hastscript/html.js
var require_html3 = __commonJS({
  "node_modules/hastscript/html.js"(exports, module) {
    "use strict";
    var schema = require_html2();
    var factory = require_factory();
    var html = factory(schema, "div");
    html.displayName = "html";
    module.exports = html;
  }
});

// node_modules/hastscript/index.js
var require_hastscript = __commonJS({
  "node_modules/hastscript/index.js"(exports, module) {
    "use strict";
    module.exports = require_html3();
  }
});

// node_modules/character-entities-legacy/index.json
var require_character_entities_legacy = __commonJS({
  "node_modules/character-entities-legacy/index.json"(exports, module) {
    module.exports = {
      AElig: "Æ",
      AMP: "&",
      Aacute: "Á",
      Acirc: "Â",
      Agrave: "À",
      Aring: "Å",
      Atilde: "Ã",
      Auml: "Ä",
      COPY: "©",
      Ccedil: "Ç",
      ETH: "Ð",
      Eacute: "É",
      Ecirc: "Ê",
      Egrave: "È",
      Euml: "Ë",
      GT: ">",
      Iacute: "Í",
      Icirc: "Î",
      Igrave: "Ì",
      Iuml: "Ï",
      LT: "<",
      Ntilde: "Ñ",
      Oacute: "Ó",
      Ocirc: "Ô",
      Ograve: "Ò",
      Oslash: "Ø",
      Otilde: "Õ",
      Ouml: "Ö",
      QUOT: '"',
      REG: "®",
      THORN: "Þ",
      Uacute: "Ú",
      Ucirc: "Û",
      Ugrave: "Ù",
      Uuml: "Ü",
      Yacute: "Ý",
      aacute: "á",
      acirc: "â",
      acute: "´",
      aelig: "æ",
      agrave: "à",
      amp: "&",
      aring: "å",
      atilde: "ã",
      auml: "ä",
      brvbar: "¦",
      ccedil: "ç",
      cedil: "¸",
      cent: "¢",
      copy: "©",
      curren: "¤",
      deg: "°",
      divide: "÷",
      eacute: "é",
      ecirc: "ê",
      egrave: "è",
      eth: "ð",
      euml: "ë",
      frac12: "½",
      frac14: "¼",
      frac34: "¾",
      gt: ">",
      iacute: "í",
      icirc: "î",
      iexcl: "¡",
      igrave: "ì",
      iquest: "¿",
      iuml: "ï",
      laquo: "«",
      lt: "<",
      macr: "¯",
      micro: "µ",
      middot: "·",
      nbsp: " ",
      not: "¬",
      ntilde: "ñ",
      oacute: "ó",
      ocirc: "ô",
      ograve: "ò",
      ordf: "ª",
      ordm: "º",
      oslash: "ø",
      otilde: "õ",
      ouml: "ö",
      para: "¶",
      plusmn: "±",
      pound: "£",
      quot: '"',
      raquo: "»",
      reg: "®",
      sect: "§",
      shy: "­",
      sup1: "¹",
      sup2: "²",
      sup3: "³",
      szlig: "ß",
      thorn: "þ",
      times: "×",
      uacute: "ú",
      ucirc: "û",
      ugrave: "ù",
      uml: "¨",
      uuml: "ü",
      yacute: "ý",
      yen: "¥",
      yuml: "ÿ"
    };
  }
});

// node_modules/character-reference-invalid/index.json
var require_character_reference_invalid = __commonJS({
  "node_modules/character-reference-invalid/index.json"(exports, module) {
    module.exports = {
      "0": "�",
      "128": "€",
      "130": "‚",
      "131": "ƒ",
      "132": "„",
      "133": "…",
      "134": "†",
      "135": "‡",
      "136": "ˆ",
      "137": "‰",
      "138": "Š",
      "139": "‹",
      "140": "Œ",
      "142": "Ž",
      "145": "‘",
      "146": "’",
      "147": "“",
      "148": "”",
      "149": "•",
      "150": "–",
      "151": "—",
      "152": "˜",
      "153": "™",
      "154": "š",
      "155": "›",
      "156": "œ",
      "158": "ž",
      "159": "Ÿ"
    };
  }
});

// node_modules/is-decimal/index.js
var require_is_decimal = __commonJS({
  "node_modules/is-decimal/index.js"(exports, module) {
    "use strict";
    module.exports = decimal;
    function decimal(character2) {
      var code = typeof character2 === "string" ? character2.charCodeAt(0) : character2;
      return code >= 48 && code <= 57;
    }
  }
});

// node_modules/is-hexadecimal/index.js
var require_is_hexadecimal = __commonJS({
  "node_modules/is-hexadecimal/index.js"(exports, module) {
    "use strict";
    module.exports = hexadecimal;
    function hexadecimal(character2) {
      var code = typeof character2 === "string" ? character2.charCodeAt(0) : character2;
      return code >= 97 && code <= 102 || code >= 65 && code <= 70 || code >= 48 && code <= 57;
    }
  }
});

// node_modules/is-alphabetical/index.js
var require_is_alphabetical = __commonJS({
  "node_modules/is-alphabetical/index.js"(exports, module) {
    "use strict";
    module.exports = alphabetical;
    function alphabetical(character2) {
      var code = typeof character2 === "string" ? character2.charCodeAt(0) : character2;
      return code >= 97 && code <= 122 || code >= 65 && code <= 90;
    }
  }
});

// node_modules/is-alphanumerical/index.js
var require_is_alphanumerical = __commonJS({
  "node_modules/is-alphanumerical/index.js"(exports, module) {
    "use strict";
    var alphabetical = require_is_alphabetical();
    var decimal = require_is_decimal();
    module.exports = alphanumerical;
    function alphanumerical(character2) {
      return alphabetical(character2) || decimal(character2);
    }
  }
});

// node_modules/parse-entities/decode-entity.browser.js
var require_decode_entity_browser = __commonJS({
  "node_modules/parse-entities/decode-entity.browser.js"(exports, module) {
    "use strict";
    var el;
    var semicolon = 59;
    module.exports = decodeEntity;
    function decodeEntity(characters2) {
      var entity = "&" + characters2 + ";";
      var char2;
      el = el || document.createElement("i");
      el.innerHTML = entity;
      char2 = el.textContent;
      if (char2.charCodeAt(char2.length - 1) === semicolon && characters2 !== "semi") {
        return false;
      }
      return char2 === entity ? false : char2;
    }
  }
});

// node_modules/parse-entities/index.js
var require_parse_entities = __commonJS({
  "node_modules/parse-entities/index.js"(exports, module) {
    "use strict";
    var legacy = require_character_entities_legacy();
    var invalid = require_character_reference_invalid();
    var decimal = require_is_decimal();
    var hexadecimal = require_is_hexadecimal();
    var alphanumerical = require_is_alphanumerical();
    var decodeEntity = require_decode_entity_browser();
    module.exports = parseEntities;
    var own = {}.hasOwnProperty;
    var fromCharCode = String.fromCharCode;
    var noop2 = Function.prototype;
    var defaults = {
      warning: null,
      reference: null,
      text: null,
      warningContext: null,
      referenceContext: null,
      textContext: null,
      position: {},
      additional: null,
      attribute: false,
      nonTerminated: true
    };
    var tab = 9;
    var lineFeed = 10;
    var formFeed = 12;
    var space = 32;
    var ampersand = 38;
    var semicolon = 59;
    var lessThan = 60;
    var equalsTo = 61;
    var numberSign = 35;
    var uppercaseX = 88;
    var lowercaseX = 120;
    var replacementCharacter = 65533;
    var name = "named";
    var hexa = "hexadecimal";
    var deci = "decimal";
    var bases = {};
    bases[hexa] = 16;
    bases[deci] = 10;
    var tests = {};
    tests[name] = alphanumerical;
    tests[deci] = decimal;
    tests[hexa] = hexadecimal;
    var namedNotTerminated = 1;
    var numericNotTerminated = 2;
    var namedEmpty = 3;
    var numericEmpty = 4;
    var namedUnknown = 5;
    var numericDisallowed = 6;
    var numericProhibited = 7;
    var messages = {};
    messages[namedNotTerminated] = "Named character references must be terminated by a semicolon";
    messages[numericNotTerminated] = "Numeric character references must be terminated by a semicolon";
    messages[namedEmpty] = "Named character references cannot be empty";
    messages[numericEmpty] = "Numeric character references cannot be empty";
    messages[namedUnknown] = "Named character references must be known";
    messages[numericDisallowed] = "Numeric character references cannot be disallowed";
    messages[numericProhibited] = "Numeric character references cannot be outside the permissible Unicode range";
    function parseEntities(value, options) {
      var settings = {};
      var option;
      var key2;
      if (!options) {
        options = {};
      }
      for (key2 in defaults) {
        option = options[key2];
        settings[key2] = option === null || option === void 0 ? defaults[key2] : option;
      }
      if (settings.position.indent || settings.position.start) {
        settings.indent = settings.position.indent || [];
        settings.position = settings.position.start;
      }
      return parse2(value, settings);
    }
    function parse2(value, settings) {
      var additional = settings.additional;
      var nonTerminated = settings.nonTerminated;
      var handleText = settings.text;
      var handleReference = settings.reference;
      var handleWarning = settings.warning;
      var textContext = settings.textContext;
      var referenceContext = settings.referenceContext;
      var warningContext = settings.warningContext;
      var pos = settings.position;
      var indent = settings.indent || [];
      var length2 = value.length;
      var index3 = 0;
      var lines = -1;
      var column2 = pos.column || 1;
      var line2 = pos.line || 1;
      var queue = "";
      var result = [];
      var entityCharacters;
      var namedEntity;
      var terminated;
      var characters2;
      var character2;
      var reference;
      var following;
      var warning2;
      var reason;
      var output;
      var entity;
      var begin;
      var start;
      var type;
      var test2;
      var prev2;
      var next2;
      var diff;
      var end;
      if (typeof additional === "string") {
        additional = additional.charCodeAt(0);
      }
      prev2 = now2();
      warning2 = handleWarning ? parseError : noop2;
      index3--;
      length2++;
      while (++index3 < length2) {
        if (character2 === lineFeed) {
          column2 = indent[lines] || 1;
        }
        character2 = value.charCodeAt(index3);
        if (character2 === ampersand) {
          following = value.charCodeAt(index3 + 1);
          if (following === tab || following === lineFeed || following === formFeed || following === space || following === ampersand || following === lessThan || following !== following || additional && following === additional) {
            queue += fromCharCode(character2);
            column2++;
            continue;
          }
          start = index3 + 1;
          begin = start;
          end = start;
          if (following === numberSign) {
            end = ++begin;
            following = value.charCodeAt(end);
            if (following === uppercaseX || following === lowercaseX) {
              type = hexa;
              end = ++begin;
            } else {
              type = deci;
            }
          } else {
            type = name;
          }
          entityCharacters = "";
          entity = "";
          characters2 = "";
          test2 = tests[type];
          end--;
          while (++end < length2) {
            following = value.charCodeAt(end);
            if (!test2(following)) {
              break;
            }
            characters2 += fromCharCode(following);
            if (type === name && own.call(legacy, characters2)) {
              entityCharacters = characters2;
              entity = legacy[characters2];
            }
          }
          terminated = value.charCodeAt(end) === semicolon;
          if (terminated) {
            end++;
            namedEntity = type === name ? decodeEntity(characters2) : false;
            if (namedEntity) {
              entityCharacters = characters2;
              entity = namedEntity;
            }
          }
          diff = 1 + end - start;
          if (!terminated && !nonTerminated) {
          } else if (!characters2) {
            if (type !== name) {
              warning2(numericEmpty, diff);
            }
          } else if (type === name) {
            if (terminated && !entity) {
              warning2(namedUnknown, 1);
            } else {
              if (entityCharacters !== characters2) {
                end = begin + entityCharacters.length;
                diff = 1 + end - begin;
                terminated = false;
              }
              if (!terminated) {
                reason = entityCharacters ? namedNotTerminated : namedEmpty;
                if (settings.attribute) {
                  following = value.charCodeAt(end);
                  if (following === equalsTo) {
                    warning2(reason, diff);
                    entity = null;
                  } else if (alphanumerical(following)) {
                    entity = null;
                  } else {
                    warning2(reason, diff);
                  }
                } else {
                  warning2(reason, diff);
                }
              }
            }
            reference = entity;
          } else {
            if (!terminated) {
              warning2(numericNotTerminated, diff);
            }
            reference = parseInt(characters2, bases[type]);
            if (prohibited(reference)) {
              warning2(numericProhibited, diff);
              reference = fromCharCode(replacementCharacter);
            } else if (reference in invalid) {
              warning2(numericDisallowed, diff);
              reference = invalid[reference];
            } else {
              output = "";
              if (disallowed(reference)) {
                warning2(numericDisallowed, diff);
              }
              if (reference > 65535) {
                reference -= 65536;
                output += fromCharCode(reference >>> (10 & 1023) | 55296);
                reference = 56320 | reference & 1023;
              }
              reference = output + fromCharCode(reference);
            }
          }
          if (reference) {
            flush();
            prev2 = now2();
            index3 = end - 1;
            column2 += end - start + 1;
            result.push(reference);
            next2 = now2();
            next2.offset++;
            if (handleReference) {
              handleReference.call(
                referenceContext,
                reference,
                { start: prev2, end: next2 },
                value.slice(start - 1, end)
              );
            }
            prev2 = next2;
          } else {
            characters2 = value.slice(start - 1, end);
            queue += characters2;
            column2 += characters2.length;
            index3 = end - 1;
          }
        } else {
          if (character2 === 10) {
            line2++;
            lines++;
            column2 = 0;
          }
          if (character2 === character2) {
            queue += fromCharCode(character2);
            column2++;
          } else {
            flush();
          }
        }
      }
      return result.join("");
      function now2() {
        return {
          line: line2,
          column: column2,
          offset: index3 + (pos.offset || 0)
        };
      }
      function parseError(code, offset4) {
        var position2 = now2();
        position2.column += offset4;
        position2.offset += offset4;
        handleWarning.call(warningContext, messages[code], position2, code);
      }
      function flush() {
        if (queue) {
          result.push(queue);
          if (handleText) {
            handleText.call(textContext, queue, { start: prev2, end: now2() });
          }
          queue = "";
        }
      }
    }
    function prohibited(code) {
      return code >= 55296 && code <= 57343 || code > 1114111;
    }
    function disallowed(code) {
      return code >= 1 && code <= 8 || code === 11 || code >= 13 && code <= 31 || code >= 127 && code <= 159 || code >= 64976 && code <= 65007 || (code & 65535) === 65535 || (code & 65535) === 65534;
    }
  }
});

// node_modules/prismjs/components/prism-core.js
var require_prism_core = __commonJS({
  "node_modules/prismjs/components/prism-core.js"(exports, module) {
    var _self = typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self : {};
    var Prism = function(_self2) {
      var lang = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;
      var uniqueId = 0;
      var plainTextGrammar = {};
      var _2 = {
        /**
         * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
         * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
         * additional languages or plugins yourself.
         *
         * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
         *
         * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
         * empty Prism object into the global scope before loading the Prism script like this:
         *
         * ```js
         * window.Prism = window.Prism || {};
         * Prism.manual = true;
         * // add a new <script> to load Prism's script
         * ```
         *
         * @default false
         * @type {boolean}
         * @memberof Prism
         * @public
         */
        manual: _self2.Prism && _self2.Prism.manual,
        /**
         * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses
         * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your
         * own worker, you don't want it to do this.
         *
         * By setting this value to `true`, Prism will not add its own listeners to the worker.
         *
         * You obviously have to change this value before Prism executes. To do this, you can add an
         * empty Prism object into the global scope before loading the Prism script like this:
         *
         * ```js
         * window.Prism = window.Prism || {};
         * Prism.disableWorkerMessageHandler = true;
         * // Load Prism's script
         * ```
         *
         * @default false
         * @type {boolean}
         * @memberof Prism
         * @public
         */
        disableWorkerMessageHandler: _self2.Prism && _self2.Prism.disableWorkerMessageHandler,
        /**
         * A namespace for utility methods.
         *
         * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
         * change or disappear at any time.
         *
         * @namespace
         * @memberof Prism
         */
        util: {
          encode: function encode(tokens) {
            if (tokens instanceof Token) {
              return new Token(tokens.type, encode(tokens.content), tokens.alias);
            } else if (Array.isArray(tokens)) {
              return tokens.map(encode);
            } else {
              return tokens.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
            }
          },
          /**
           * Returns the name of the type of the given value.
           *
           * @param {any} o
           * @returns {string}
           * @example
           * type(null)      === 'Null'
           * type(undefined) === 'Undefined'
           * type(123)       === 'Number'
           * type('foo')     === 'String'
           * type(true)      === 'Boolean'
           * type([1, 2])    === 'Array'
           * type({})        === 'Object'
           * type(String)    === 'Function'
           * type(/abc+/)    === 'RegExp'
           */
          type: function(o2) {
            return Object.prototype.toString.call(o2).slice(8, -1);
          },
          /**
           * Returns a unique number for the given object. Later calls will still return the same number.
           *
           * @param {Object} obj
           * @returns {number}
           */
          objId: function(obj) {
            if (!obj["__id"]) {
              Object.defineProperty(obj, "__id", { value: ++uniqueId });
            }
            return obj["__id"];
          },
          /**
           * Creates a deep clone of the given object.
           *
           * The main intended use of this function is to clone language definitions.
           *
           * @param {T} o
           * @param {Record<number, any>} [visited]
           * @returns {T}
           * @template T
           */
          clone: function deepClone(o2, visited) {
            visited = visited || {};
            var clone;
            var id3;
            switch (_2.util.type(o2)) {
              case "Object":
                id3 = _2.util.objId(o2);
                if (visited[id3]) {
                  return visited[id3];
                }
                clone = /** @type {Record<string, any>} */
                {};
                visited[id3] = clone;
                for (var key2 in o2) {
                  if (o2.hasOwnProperty(key2)) {
                    clone[key2] = deepClone(o2[key2], visited);
                  }
                }
                return (
                  /** @type {any} */
                  clone
                );
              case "Array":
                id3 = _2.util.objId(o2);
                if (visited[id3]) {
                  return visited[id3];
                }
                clone = [];
                visited[id3] = clone;
                /** @type {Array} */
                /** @type {any} */
                o2.forEach(function(v2, i2) {
                  clone[i2] = deepClone(v2, visited);
                });
                return (
                  /** @type {any} */
                  clone
                );
              default:
                return o2;
            }
          },
          /**
           * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
           *
           * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
           *
           * @param {Element} element
           * @returns {string}
           */
          getLanguage: function(element) {
            while (element) {
              var m3 = lang.exec(element.className);
              if (m3) {
                return m3[1].toLowerCase();
              }
              element = element.parentElement;
            }
            return "none";
          },
          /**
           * Sets the Prism `language-xxxx` class of the given element.
           *
           * @param {Element} element
           * @param {string} language
           * @returns {void}
           */
          setLanguage: function(element, language) {
            element.className = element.className.replace(RegExp(lang, "gi"), "");
            element.classList.add("language-" + language);
          },
          /**
           * Returns the script element that is currently executing.
           *
           * This does __not__ work for line script element.
           *
           * @returns {HTMLScriptElement | null}
           */
          currentScript: function() {
            if (typeof document === "undefined") {
              return null;
            }
            if ("currentScript" in document && 1 < 2) {
              return (
                /** @type {any} */
                document.currentScript
              );
            }
            try {
              throw new Error();
            } catch (err) {
              var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];
              if (src) {
                var scripts = document.getElementsByTagName("script");
                for (var i2 in scripts) {
                  if (scripts[i2].src == src) {
                    return scripts[i2];
                  }
                }
              }
              return null;
            }
          },
          /**
           * Returns whether a given class is active for `element`.
           *
           * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
           * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
           * given class is just the given class with a `no-` prefix.
           *
           * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
           * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
           * ancestors have the given class or the negated version of it, then the default activation will be returned.
           *
           * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
           * version of it, the class is considered active.
           *
           * @param {Element} element
           * @param {string} className
           * @param {boolean} [defaultActivation=false]
           * @returns {boolean}
           */
          isActive: function(element, className, defaultActivation) {
            var no = "no-" + className;
            while (element) {
              var classList = element.classList;
              if (classList.contains(className)) {
                return true;
              }
              if (classList.contains(no)) {
                return false;
              }
              element = element.parentElement;
            }
            return !!defaultActivation;
          }
        },
        /**
         * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
         *
         * @namespace
         * @memberof Prism
         * @public
         */
        languages: {
          /**
           * The grammar for plain, unformatted text.
           */
          plain: plainTextGrammar,
          plaintext: plainTextGrammar,
          text: plainTextGrammar,
          txt: plainTextGrammar,
          /**
           * Creates a deep copy of the language with the given id and appends the given tokens.
           *
           * If a token in `redef` also appears in the copied language, then the existing token in the copied language
           * will be overwritten at its original position.
           *
           * ## Best practices
           *
           * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
           * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
           * understand the language definition because, normally, the order of tokens matters in Prism grammars.
           *
           * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
           * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
           *
           * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
           * @param {Grammar} redef The new tokens to append.
           * @returns {Grammar} The new language created.
           * @public
           * @example
           * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
           *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
           *     // at its original position
           *     'comment': { ... },
           *     // CSS doesn't have a 'color' token, so this token will be appended
           *     'color': /\b(?:red|green|blue)\b/
           * });
           */
          extend: function(id3, redef) {
            var lang2 = _2.util.clone(_2.languages[id3]);
            for (var key2 in redef) {
              lang2[key2] = redef[key2];
            }
            return lang2;
          },
          /**
           * Inserts tokens _before_ another token in a language definition or any other grammar.
           *
           * ## Usage
           *
           * This helper method makes it easy to modify existing languages. For example, the CSS language definition
           * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
           * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
           * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
           * this:
           *
           * ```js
           * Prism.languages.markup.style = {
           *     // token
           * };
           * ```
           *
           * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
           * before existing tokens. For the CSS example above, you would use it like this:
           *
           * ```js
           * Prism.languages.insertBefore('markup', 'cdata', {
           *     'style': {
           *         // token
           *     }
           * });
           * ```
           *
           * ## Special cases
           *
           * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
           * will be ignored.
           *
           * This behavior can be used to insert tokens after `before`:
           *
           * ```js
           * Prism.languages.insertBefore('markup', 'comment', {
           *     'comment': Prism.languages.markup.comment,
           *     // tokens after 'comment'
           * });
           * ```
           *
           * ## Limitations
           *
           * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
           * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
           * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
           * deleting properties which is necessary to insert at arbitrary positions.
           *
           * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
           * Instead, it will create a new object and replace all references to the target object with the new one. This
           * can be done without temporarily deleting properties, so the iteration order is well-defined.
           *
           * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
           * you hold the target object in a variable, then the value of the variable will not change.
           *
           * ```js
           * var oldMarkup = Prism.languages.markup;
           * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
           *
           * assert(oldMarkup !== Prism.languages.markup);
           * assert(newMarkup === Prism.languages.markup);
           * ```
           *
           * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
           * object to be modified.
           * @param {string} before The key to insert before.
           * @param {Grammar} insert An object containing the key-value pairs to be inserted.
           * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
           * object to be modified.
           *
           * Defaults to `Prism.languages`.
           * @returns {Grammar} The new grammar object.
           * @public
           */
          insertBefore: function(inside, before, insert, root) {
            root = root || /** @type {any} */
            _2.languages;
            var grammar = root[inside];
            var ret = {};
            for (var token2 in grammar) {
              if (grammar.hasOwnProperty(token2)) {
                if (token2 == before) {
                  for (var newToken in insert) {
                    if (insert.hasOwnProperty(newToken)) {
                      ret[newToken] = insert[newToken];
                    }
                  }
                }
                if (!insert.hasOwnProperty(token2)) {
                  ret[token2] = grammar[token2];
                }
              }
            }
            var old = root[inside];
            root[inside] = ret;
            _2.languages.DFS(_2.languages, function(key2, value) {
              if (value === old && key2 != inside) {
                this[key2] = ret;
              }
            });
            return ret;
          },
          // Traverse a language definition with Depth First Search
          DFS: function DFS(o2, callback, type, visited) {
            visited = visited || {};
            var objId = _2.util.objId;
            for (var i2 in o2) {
              if (o2.hasOwnProperty(i2)) {
                callback.call(o2, i2, o2[i2], type || i2);
                var property = o2[i2];
                var propertyType = _2.util.type(property);
                if (propertyType === "Object" && !visited[objId(property)]) {
                  visited[objId(property)] = true;
                  DFS(property, callback, null, visited);
                } else if (propertyType === "Array" && !visited[objId(property)]) {
                  visited[objId(property)] = true;
                  DFS(property, callback, i2, visited);
                }
              }
            }
          }
        },
        plugins: {},
        /**
         * This is the most high-level function in Prism’s API.
         * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
         * each one of them.
         *
         * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
         *
         * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
         * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
         * @memberof Prism
         * @public
         */
        highlightAll: function(async, callback) {
          _2.highlightAllUnder(document, async, callback);
        },
        /**
         * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
         * {@link Prism.highlightElement} on each one of them.
         *
         * The following hooks will be run:
         * 1. `before-highlightall`
         * 2. `before-all-elements-highlight`
         * 3. All hooks of {@link Prism.highlightElement} for each element.
         *
         * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
         * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
         * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
         * @memberof Prism
         * @public
         */
        highlightAllUnder: function(container, async, callback) {
          var env = {
            callback,
            container,
            selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
          };
          _2.hooks.run("before-highlightall", env);
          env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));
          _2.hooks.run("before-all-elements-highlight", env);
          for (var i2 = 0, element; element = env.elements[i2++]; ) {
            _2.highlightElement(element, async === true, env.callback);
          }
        },
        /**
         * Highlights the code inside a single element.
         *
         * The following hooks will be run:
         * 1. `before-sanity-check`
         * 2. `before-highlight`
         * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
         * 4. `before-insert`
         * 5. `after-highlight`
         * 6. `complete`
         *
         * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
         * the element's language.
         *
         * @param {Element} element The element containing the code.
         * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
         * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
         * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
         * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
         *
         * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
         * asynchronous highlighting to work. You can build your own bundle on the
         * [Download page](https://prismjs.com/download.html).
         * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
         * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
         * @memberof Prism
         * @public
         */
        highlightElement: function(element, async, callback) {
          var language = _2.util.getLanguage(element);
          var grammar = _2.languages[language];
          _2.util.setLanguage(element, language);
          var parent = element.parentElement;
          if (parent && parent.nodeName.toLowerCase() === "pre") {
            _2.util.setLanguage(parent, language);
          }
          var code = element.textContent;
          var env = {
            element,
            language,
            grammar,
            code
          };
          function insertHighlightedCode(highlightedCode) {
            env.highlightedCode = highlightedCode;
            _2.hooks.run("before-insert", env);
            env.element.innerHTML = env.highlightedCode;
            _2.hooks.run("after-highlight", env);
            _2.hooks.run("complete", env);
            callback && callback.call(env.element);
          }
          _2.hooks.run("before-sanity-check", env);
          parent = env.element.parentElement;
          if (parent && parent.nodeName.toLowerCase() === "pre" && !parent.hasAttribute("tabindex")) {
            parent.setAttribute("tabindex", "0");
          }
          if (!env.code) {
            _2.hooks.run("complete", env);
            callback && callback.call(env.element);
            return;
          }
          _2.hooks.run("before-highlight", env);
          if (!env.grammar) {
            insertHighlightedCode(_2.util.encode(env.code));
            return;
          }
          if (async && _self2.Worker) {
            var worker = new Worker(_2.filename);
            worker.onmessage = function(evt) {
              insertHighlightedCode(evt.data);
            };
            worker.postMessage(JSON.stringify({
              language: env.language,
              code: env.code,
              immediateClose: true
            }));
          } else {
            insertHighlightedCode(_2.highlight(env.code, env.grammar, env.language));
          }
        },
        /**
         * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
         * and the language definitions to use, and returns a string with the HTML produced.
         *
         * The following hooks will be run:
         * 1. `before-tokenize`
         * 2. `after-tokenize`
         * 3. `wrap`: On each {@link Token}.
         *
         * @param {string} text A string with the code to be highlighted.
         * @param {Grammar} grammar An object containing the tokens to use.
         *
         * Usually a language definition like `Prism.languages.markup`.
         * @param {string} language The name of the language definition passed to `grammar`.
         * @returns {string} The highlighted HTML.
         * @memberof Prism
         * @public
         * @example
         * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
         */
        highlight: function(text, grammar, language) {
          var env = {
            code: text,
            grammar,
            language
          };
          _2.hooks.run("before-tokenize", env);
          if (!env.grammar) {
            throw new Error('The language "' + env.language + '" has no grammar.');
          }
          env.tokens = _2.tokenize(env.code, env.grammar);
          _2.hooks.run("after-tokenize", env);
          return Token.stringify(_2.util.encode(env.tokens), env.language);
        },
        /**
         * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
         * and the language definitions to use, and returns an array with the tokenized code.
         *
         * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
         *
         * This method could be useful in other contexts as well, as a very crude parser.
         *
         * @param {string} text A string with the code to be highlighted.
         * @param {Grammar} grammar An object containing the tokens to use.
         *
         * Usually a language definition like `Prism.languages.markup`.
         * @returns {TokenStream} An array of strings and tokens, a token stream.
         * @memberof Prism
         * @public
         * @example
         * let code = `var foo = 0;`;
         * let tokens = Prism.tokenize(code, Prism.languages.javascript);
         * tokens.forEach(token => {
         *     if (token instanceof Prism.Token && token.type === 'number') {
         *         console.log(`Found numeric literal: ${token.content}`);
         *     }
         * });
         */
        tokenize: function(text, grammar) {
          var rest = grammar.rest;
          if (rest) {
            for (var token2 in rest) {
              grammar[token2] = rest[token2];
            }
            delete grammar.rest;
          }
          var tokenList = new LinkedList();
          addAfter(tokenList, tokenList.head, text);
          matchGrammar(text, tokenList, grammar, tokenList.head, 0);
          return toArray(tokenList);
        },
        /**
         * @namespace
         * @memberof Prism
         * @public
         */
        hooks: {
          all: {},
          /**
           * Adds the given callback to the list of callbacks for the given hook.
           *
           * The callback will be invoked when the hook it is registered for is run.
           * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
           *
           * One callback function can be registered to multiple hooks and the same hook multiple times.
           *
           * @param {string} name The name of the hook.
           * @param {HookCallback} callback The callback function which is given environment variables.
           * @public
           */
          add: function(name, callback) {
            var hooks = _2.hooks.all;
            hooks[name] = hooks[name] || [];
            hooks[name].push(callback);
          },
          /**
           * Runs a hook invoking all registered callbacks with the given environment variables.
           *
           * Callbacks will be invoked synchronously and in the order in which they were registered.
           *
           * @param {string} name The name of the hook.
           * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
           * @public
           */
          run: function(name, env) {
            var callbacks2 = _2.hooks.all[name];
            if (!callbacks2 || !callbacks2.length) {
              return;
            }
            for (var i2 = 0, callback; callback = callbacks2[i2++]; ) {
              callback(env);
            }
          }
        },
        Token
      };
      _self2.Prism = _2;
      function Token(type, content, alias, matchedStr) {
        this.type = type;
        this.content = content;
        this.alias = alias;
        this.length = (matchedStr || "").length | 0;
      }
      Token.stringify = function stringify2(o2, language) {
        if (typeof o2 == "string") {
          return o2;
        }
        if (Array.isArray(o2)) {
          var s2 = "";
          o2.forEach(function(e) {
            s2 += stringify2(e, language);
          });
          return s2;
        }
        var env = {
          type: o2.type,
          content: stringify2(o2.content, language),
          tag: "span",
          classes: ["token", o2.type],
          attributes: {},
          language
        };
        var aliases = o2.alias;
        if (aliases) {
          if (Array.isArray(aliases)) {
            Array.prototype.push.apply(env.classes, aliases);
          } else {
            env.classes.push(aliases);
          }
        }
        _2.hooks.run("wrap", env);
        var attributes = "";
        for (var name in env.attributes) {
          attributes += " " + name + '="' + (env.attributes[name] || "").replace(/"/g, "&quot;") + '"';
        }
        return "<" + env.tag + ' class="' + env.classes.join(" ") + '"' + attributes + ">" + env.content + "</" + env.tag + ">";
      };
      function matchPattern(pattern, pos, text, lookbehind) {
        pattern.lastIndex = pos;
        var match2 = pattern.exec(text);
        if (match2 && lookbehind && match2[1]) {
          var lookbehindLength = match2[1].length;
          match2.index += lookbehindLength;
          match2[0] = match2[0].slice(lookbehindLength);
        }
        return match2;
      }
      function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
        for (var token2 in grammar) {
          if (!grammar.hasOwnProperty(token2) || !grammar[token2]) {
            continue;
          }
          var patterns = grammar[token2];
          patterns = Array.isArray(patterns) ? patterns : [patterns];
          for (var j2 = 0; j2 < patterns.length; ++j2) {
            if (rematch && rematch.cause == token2 + "," + j2) {
              return;
            }
            var patternObj = patterns[j2];
            var inside = patternObj.inside;
            var lookbehind = !!patternObj.lookbehind;
            var greedy = !!patternObj.greedy;
            var alias = patternObj.alias;
            if (greedy && !patternObj.pattern.global) {
              var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
              patternObj.pattern = RegExp(patternObj.pattern.source, flags + "g");
            }
            var pattern = patternObj.pattern || patternObj;
            for (var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {
              if (rematch && pos >= rematch.reach) {
                break;
              }
              var str = currentNode.value;
              if (tokenList.length > text.length) {
                return;
              }
              if (str instanceof Token) {
                continue;
              }
              var removeCount = 1;
              var match2;
              if (greedy) {
                match2 = matchPattern(pattern, pos, text, lookbehind);
                if (!match2 || match2.index >= text.length) {
                  break;
                }
                var from2 = match2.index;
                var to = match2.index + match2[0].length;
                var p2 = pos;
                p2 += currentNode.value.length;
                while (from2 >= p2) {
                  currentNode = currentNode.next;
                  p2 += currentNode.value.length;
                }
                p2 -= currentNode.value.length;
                pos = p2;
                if (currentNode.value instanceof Token) {
                  continue;
                }
                for (var k2 = currentNode; k2 !== tokenList.tail && (p2 < to || typeof k2.value === "string"); k2 = k2.next) {
                  removeCount++;
                  p2 += k2.value.length;
                }
                removeCount--;
                str = text.slice(pos, p2);
                match2.index -= pos;
              } else {
                match2 = matchPattern(pattern, 0, str, lookbehind);
                if (!match2) {
                  continue;
                }
              }
              var from2 = match2.index;
              var matchStr = match2[0];
              var before = str.slice(0, from2);
              var after = str.slice(from2 + matchStr.length);
              var reach = pos + str.length;
              if (rematch && reach > rematch.reach) {
                rematch.reach = reach;
              }
              var removeFrom = currentNode.prev;
              if (before) {
                removeFrom = addAfter(tokenList, removeFrom, before);
                pos += before.length;
              }
              removeRange(tokenList, removeFrom, removeCount);
              var wrapped = new Token(token2, inside ? _2.tokenize(matchStr, inside) : matchStr, alias, matchStr);
              currentNode = addAfter(tokenList, removeFrom, wrapped);
              if (after) {
                addAfter(tokenList, currentNode, after);
              }
              if (removeCount > 1) {
                var nestedRematch = {
                  cause: token2 + "," + j2,
                  reach
                };
                matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);
                if (rematch && nestedRematch.reach > rematch.reach) {
                  rematch.reach = nestedRematch.reach;
                }
              }
            }
          }
        }
      }
      function LinkedList() {
        var head = { value: null, prev: null, next: null };
        var tail = { value: null, prev: head, next: null };
        head.next = tail;
        this.head = head;
        this.tail = tail;
        this.length = 0;
      }
      function addAfter(list, node2, value) {
        var next2 = node2.next;
        var newNode = { value, prev: node2, next: next2 };
        node2.next = newNode;
        next2.prev = newNode;
        list.length++;
        return newNode;
      }
      function removeRange(list, node2, count) {
        var next2 = node2.next;
        for (var i2 = 0; i2 < count && next2 !== list.tail; i2++) {
          next2 = next2.next;
        }
        node2.next = next2;
        next2.prev = node2;
        list.length -= i2;
      }
      function toArray(list) {
        var array = [];
        var node2 = list.head.next;
        while (node2 !== list.tail) {
          array.push(node2.value);
          node2 = node2.next;
        }
        return array;
      }
      if (!_self2.document) {
        if (!_self2.addEventListener) {
          return _2;
        }
        if (!_2.disableWorkerMessageHandler) {
          _self2.addEventListener("message", function(evt) {
            var message = JSON.parse(evt.data);
            var lang2 = message.language;
            var code = message.code;
            var immediateClose = message.immediateClose;
            _self2.postMessage(_2.highlight(code, _2.languages[lang2], lang2));
            if (immediateClose) {
              _self2.close();
            }
          }, false);
        }
        return _2;
      }
      var script = _2.util.currentScript();
      if (script) {
        _2.filename = script.src;
        if (script.hasAttribute("data-manual")) {
          _2.manual = true;
        }
      }
      function highlightAutomaticallyCallback() {
        if (!_2.manual) {
          _2.highlightAll();
        }
      }
      if (!_2.manual) {
        var readyState = document.readyState;
        if (readyState === "loading" || readyState === "interactive" && script && script.defer) {
          document.addEventListener("DOMContentLoaded", highlightAutomaticallyCallback);
        } else {
          if (window.requestAnimationFrame) {
            window.requestAnimationFrame(highlightAutomaticallyCallback);
          } else {
            window.setTimeout(highlightAutomaticallyCallback, 16);
          }
        }
      }
      return _2;
    }(_self);
    if (typeof module !== "undefined" && module.exports) {
      module.exports = Prism;
    }
    if (typeof global !== "undefined") {
      global.Prism = Prism;
    }
  }
});

// node_modules/refractor/lang/markup.js
var require_markup = __commonJS({
  "node_modules/refractor/lang/markup.js"(exports, module) {
    "use strict";
    module.exports = markup;
    markup.displayName = "markup";
    markup.aliases = ["html", "mathml", "svg", "xml", "ssml", "atom", "rss"];
    function markup(Prism) {
      Prism.languages.markup = {
        comment: {
          pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
          greedy: true
        },
        prolog: {
          pattern: /<\?[\s\S]+?\?>/,
          greedy: true
        },
        doctype: {
          // https://www.w3.org/TR/xml/#NT-doctypedecl
          pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
          greedy: true,
          inside: {
            "internal-subset": {
              pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
              lookbehind: true,
              greedy: true,
              inside: null
              // see below
            },
            string: {
              pattern: /"[^"]*"|'[^']*'/,
              greedy: true
            },
            punctuation: /^<!|>$|[[\]]/,
            "doctype-tag": /^DOCTYPE/i,
            name: /[^\s<>'"]+/
          }
        },
        cdata: {
          pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
          greedy: true
        },
        tag: {
          pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
          greedy: true,
          inside: {
            tag: {
              pattern: /^<\/?[^\s>\/]+/,
              inside: {
                punctuation: /^<\/?/,
                namespace: /^[^\s>\/:]+:/
              }
            },
            "special-attr": [],
            "attr-value": {
              pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
              inside: {
                punctuation: [
                  {
                    pattern: /^=/,
                    alias: "attr-equals"
                  },
                  /"|'/
                ]
              }
            },
            punctuation: /\/?>/,
            "attr-name": {
              pattern: /[^\s>\/]+/,
              inside: {
                namespace: /^[^\s>\/:]+:/
              }
            }
          }
        },
        entity: [
          {
            pattern: /&[\da-z]{1,8};/i,
            alias: "named-entity"
          },
          /&#x?[\da-f]{1,8};/i
        ]
      };
      Prism.languages.markup["tag"].inside["attr-value"].inside["entity"] = Prism.languages.markup["entity"];
      Prism.languages.markup["doctype"].inside["internal-subset"].inside = Prism.languages.markup;
      Prism.hooks.add("wrap", function(env) {
        if (env.type === "entity") {
          env.attributes["title"] = env.content.value.replace(/&amp;/, "&");
        }
      });
      Object.defineProperty(Prism.languages.markup.tag, "addInlined", {
        /**
         * Adds an inlined language to markup.
         *
         * An example of an inlined language is CSS with `<style>` tags.
         *
         * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
         * case insensitive.
         * @param {string} lang The language key.
         * @example
         * addInlined('style', 'css');
         */
        value: function addInlined(tagName, lang) {
          var includedCdataInside = {};
          includedCdataInside["language-" + lang] = {
            pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
            lookbehind: true,
            inside: Prism.languages[lang]
          };
          includedCdataInside["cdata"] = /^<!\[CDATA\[|\]\]>$/i;
          var inside = {
            "included-cdata": {
              pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
              inside: includedCdataInside
            }
          };
          inside["language-" + lang] = {
            pattern: /[\s\S]+/,
            inside: Prism.languages[lang]
          };
          var def = {};
          def[tagName] = {
            pattern: RegExp(
              /(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(
                /__/g,
                function() {
                  return tagName;
                }
              ),
              "i"
            ),
            lookbehind: true,
            greedy: true,
            inside
          };
          Prism.languages.insertBefore("markup", "cdata", def);
        }
      });
      Object.defineProperty(Prism.languages.markup.tag, "addAttribute", {
        /**
         * Adds an pattern to highlight languages embedded in HTML attributes.
         *
         * An example of an inlined language is CSS with `style` attributes.
         *
         * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
         * case insensitive.
         * @param {string} lang The language key.
         * @example
         * addAttribute('style', 'css');
         */
        value: function(attrName, lang) {
          Prism.languages.markup.tag.inside["special-attr"].push({
            pattern: RegExp(
              /(^|["'\s])/.source + "(?:" + attrName + ")" + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,
              "i"
            ),
            lookbehind: true,
            inside: {
              "attr-name": /^[^\s=]+/,
              "attr-value": {
                pattern: /=[\s\S]+/,
                inside: {
                  value: {
                    pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
                    lookbehind: true,
                    alias: [lang, "language-" + lang],
                    inside: Prism.languages[lang]
                  },
                  punctuation: [
                    {
                      pattern: /^=/,
                      alias: "attr-equals"
                    },
                    /"|'/
                  ]
                }
              }
            }
          });
        }
      });
      Prism.languages.html = Prism.languages.markup;
      Prism.languages.mathml = Prism.languages.markup;
      Prism.languages.svg = Prism.languages.markup;
      Prism.languages.xml = Prism.languages.extend("markup", {});
      Prism.languages.ssml = Prism.languages.xml;
      Prism.languages.atom = Prism.languages.xml;
      Prism.languages.rss = Prism.languages.xml;
    }
  }
});

// node_modules/refractor/lang/css.js
var require_css = __commonJS({
  "node_modules/refractor/lang/css.js"(exports, module) {
    "use strict";
    module.exports = css;
    css.displayName = "css";
    css.aliases = [];
    function css(Prism) {
      ;
      (function(Prism2) {
        var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
        Prism2.languages.css = {
          comment: /\/\*[\s\S]*?\*\//,
          atrule: {
            pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,
            inside: {
              rule: /^@[\w-]+/,
              "selector-function-argument": {
                pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
                lookbehind: true,
                alias: "selector"
              },
              keyword: {
                pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
                lookbehind: true
              }
              // See rest below
            }
          },
          url: {
            // https://drafts.csswg.org/css-values-3/#urls
            pattern: RegExp(
              "\\burl\\((?:" + string.source + "|" + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ")\\)",
              "i"
            ),
            greedy: true,
            inside: {
              function: /^url/i,
              punctuation: /^\(|\)$/,
              string: {
                pattern: RegExp("^" + string.source + "$"),
                alias: "url"
              }
            }
          },
          selector: {
            pattern: RegExp(
              `(^|[{}\\s])[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|` + string.source + ")*(?=\\s*\\{)"
            ),
            lookbehind: true
          },
          string: {
            pattern: string,
            greedy: true
          },
          property: {
            pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
            lookbehind: true
          },
          important: /!important\b/i,
          function: {
            pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
            lookbehind: true
          },
          punctuation: /[(){};:,]/
        };
        Prism2.languages.css["atrule"].inside.rest = Prism2.languages.css;
        var markup = Prism2.languages.markup;
        if (markup) {
          markup.tag.addInlined("style", "css");
          markup.tag.addAttribute("style", "css");
        }
      })(Prism);
    }
  }
});

// node_modules/refractor/lang/clike.js
var require_clike = __commonJS({
  "node_modules/refractor/lang/clike.js"(exports, module) {
    "use strict";
    module.exports = clike;
    clike.displayName = "clike";
    clike.aliases = [];
    function clike(Prism) {
      Prism.languages.clike = {
        comment: [
          {
            pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
            lookbehind: true,
            greedy: true
          },
          {
            pattern: /(^|[^\\:])\/\/.*/,
            lookbehind: true,
            greedy: true
          }
        ],
        string: {
          pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
          greedy: true
        },
        "class-name": {
          pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
          lookbehind: true,
          inside: {
            punctuation: /[.\\]/
          }
        },
        keyword: /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
        boolean: /\b(?:false|true)\b/,
        function: /\b\w+(?=\()/,
        number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
        operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
        punctuation: /[{}[\];(),.:]/
      };
    }
  }
});

// node_modules/refractor/core.js
var require_core = __commonJS({
  "node_modules/refractor/core.js"(exports, module) {
    "use strict";
    var ctx = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof window === "object" ? window : typeof global === "object" ? global : {};
    var restore = capture();
    ctx.Prism = { manual: true, disableWorkerMessageHandler: true };
    var h = require_hastscript();
    var decode = require_parse_entities();
    var Prism = require_prism_core();
    var markup = require_markup();
    var css = require_css();
    var clike = require_clike();
    var js = require_javascript();
    restore();
    var own = {}.hasOwnProperty;
    function Refractor2() {
    }
    Refractor2.prototype = Prism;
    var refract = new Refractor2();
    module.exports = refract;
    refract.highlight = highlight;
    refract.register = register;
    refract.alias = alias;
    refract.registered = registered;
    refract.listLanguages = listLanguages;
    register(markup);
    register(css);
    register(clike);
    register(js);
    refract.util.encode = encode;
    refract.Token.stringify = stringify2;
    function register(grammar) {
      if (typeof grammar !== "function" || !grammar.displayName) {
        throw new Error("Expected `function` for `grammar`, got `" + grammar + "`");
      }
      if (refract.languages[grammar.displayName] === void 0) {
        grammar(refract);
      }
    }
    function alias(name, alias2) {
      var languages = refract.languages;
      var map = name;
      var key2;
      var list;
      var length2;
      var index3;
      if (alias2) {
        map = {};
        map[name] = alias2;
      }
      for (key2 in map) {
        list = map[key2];
        list = typeof list === "string" ? [list] : list;
        length2 = list.length;
        index3 = -1;
        while (++index3 < length2) {
          languages[list[index3]] = languages[key2];
        }
      }
    }
    function highlight(value, name) {
      var sup = Prism.highlight;
      var grammar;
      if (typeof value !== "string") {
        throw new Error("Expected `string` for `value`, got `" + value + "`");
      }
      if (refract.util.type(name) === "Object") {
        grammar = name;
        name = null;
      } else {
        if (typeof name !== "string") {
          throw new Error("Expected `string` for `name`, got `" + name + "`");
        }
        if (own.call(refract.languages, name)) {
          grammar = refract.languages[name];
        } else {
          throw new Error("Unknown language: `" + name + "` is not registered");
        }
      }
      return sup.call(this, value, grammar, name);
    }
    function registered(language) {
      if (typeof language !== "string") {
        throw new Error("Expected `string` for `language`, got `" + language + "`");
      }
      return own.call(refract.languages, language);
    }
    function listLanguages() {
      var languages = refract.languages;
      var list = [];
      var language;
      for (language in languages) {
        if (own.call(languages, language) && typeof languages[language] === "object") {
          list.push(language);
        }
      }
      return list;
    }
    function stringify2(value, language, parent) {
      var env;
      if (typeof value === "string") {
        return { type: "text", value };
      }
      if (refract.util.type(value) === "Array") {
        return stringifyAll(value, language);
      }
      env = {
        type: value.type,
        content: refract.Token.stringify(value.content, language, parent),
        tag: "span",
        classes: ["token", value.type],
        attributes: {},
        language,
        parent
      };
      if (value.alias) {
        env.classes = env.classes.concat(value.alias);
      }
      refract.hooks.run("wrap", env);
      return h(
        env.tag + "." + env.classes.join("."),
        attributes(env.attributes),
        env.content
      );
    }
    function stringifyAll(values, language) {
      var result = [];
      var length2 = values.length;
      var index3 = -1;
      var value;
      while (++index3 < length2) {
        value = values[index3];
        if (value !== "" && value !== null && value !== void 0) {
          result.push(value);
        }
      }
      index3 = -1;
      length2 = result.length;
      while (++index3 < length2) {
        value = result[index3];
        result[index3] = refract.Token.stringify(value, language, result);
      }
      return result;
    }
    function encode(tokens) {
      return tokens;
    }
    function attributes(attrs) {
      var key2;
      for (key2 in attrs) {
        attrs[key2] = decode(attrs[key2]);
      }
      return attrs;
    }
    function capture() {
      var defined = "Prism" in ctx;
      var current = defined ? ctx.Prism : void 0;
      return restore2;
      function restore2() {
        if (defined) {
          ctx.Prism = current;
        } else {
          delete ctx.Prism;
        }
        defined = void 0;
        current = void 0;
      }
    }
  }
});

// node_modules/react-refractor/lib/mapChildren.js
var require_mapChildren = __commonJS({
  "node_modules/react-refractor/lib/mapChildren.js"(exports) {
    "use strict";
    var React13 = require_react();
    function mapChild(child, i2, depth) {
      if (child.tagName) {
        var className = child.properties && Array.isArray(child.properties.className) ? child.properties.className.join(" ") : child.properties.className;
        return React13.createElement(child.tagName, Object.assign({
          key: "fract-".concat(depth, "-").concat(i2)
        }, child.properties, {
          className
        }), child.children && child.children.map(mapWithDepth(depth + 1)));
      }
      return child.value;
    }
    function mapWithDepth(depth) {
      return function mapChildrenWithDepth(child, i2) {
        return mapChild(child, i2, depth);
      };
    }
    exports.depth = mapWithDepth;
  }
});

// node_modules/unist-util-is/convert.js
var require_convert = __commonJS({
  "node_modules/unist-util-is/convert.js"(exports, module) {
    "use strict";
    module.exports = convert;
    function convert(test2) {
      if (test2 == null) {
        return ok;
      }
      if (typeof test2 === "string") {
        return typeFactory(test2);
      }
      if (typeof test2 === "object") {
        return "length" in test2 ? anyFactory(test2) : allFactory(test2);
      }
      if (typeof test2 === "function") {
        return test2;
      }
      throw new Error("Expected function, string, or object as test");
    }
    function allFactory(test2) {
      return all;
      function all(node2) {
        var key2;
        for (key2 in test2) {
          if (node2[key2] !== test2[key2])
            return false;
        }
        return true;
      }
    }
    function anyFactory(tests) {
      var checks = [];
      var index3 = -1;
      while (++index3 < tests.length) {
        checks[index3] = convert(tests[index3]);
      }
      return any;
      function any() {
        var index4 = -1;
        while (++index4 < checks.length) {
          if (checks[index4].apply(this, arguments)) {
            return true;
          }
        }
        return false;
      }
    }
    function typeFactory(test2) {
      return type;
      function type(node2) {
        return Boolean(node2 && node2.type === test2);
      }
    }
    function ok() {
      return true;
    }
  }
});

// node_modules/unist-util-filter/index.js
var require_unist_util_filter = __commonJS({
  "node_modules/unist-util-filter/index.js"(exports, module) {
    "use strict";
    var convert = require_convert();
    module.exports = filter3;
    var own = {}.hasOwnProperty;
    function filter3(tree, options, test2) {
      var is = convert(test2 || options);
      var cascade = options.cascade == null ? true : options.cascade;
      return preorder(tree, null, null);
      function preorder(node2, index3, parent) {
        var children;
        var childIndex;
        var result;
        var next2;
        var key2;
        if (!is(node2, index3, parent))
          return null;
        if (node2.children) {
          children = [];
          childIndex = -1;
          while (++childIndex < node2.children.length) {
            result = preorder(node2.children[childIndex], childIndex, node2);
            if (result) {
              children.push(result);
            }
          }
          if (cascade && node2.children.length && !children.length)
            return null;
        }
        next2 = {};
        for (key2 in node2) {
          if (own.call(node2, key2)) {
            next2[key2] = key2 === "children" ? children : node2[key2];
          }
        }
        return next2;
      }
    }
  }
});

// node_modules/unist-util-visit-parents/color.browser.js
var require_color_browser = __commonJS({
  "node_modules/unist-util-visit-parents/color.browser.js"(exports, module) {
    module.exports = identity;
    function identity(d) {
      return d;
    }
  }
});

// node_modules/unist-util-visit-parents/index.js
var require_unist_util_visit_parents = __commonJS({
  "node_modules/unist-util-visit-parents/index.js"(exports, module) {
    "use strict";
    module.exports = visitParents;
    var convert = require_convert();
    var color3 = require_color_browser();
    var CONTINUE = true;
    var SKIP = "skip";
    var EXIT = false;
    visitParents.CONTINUE = CONTINUE;
    visitParents.SKIP = SKIP;
    visitParents.EXIT = EXIT;
    function visitParents(tree, test2, visitor, reverse) {
      var step;
      var is;
      if (typeof test2 === "function" && typeof visitor !== "function") {
        reverse = visitor;
        visitor = test2;
        test2 = null;
      }
      is = convert(test2);
      step = reverse ? -1 : 1;
      factory(tree, null, [])();
      function factory(node2, index3, parents) {
        var value = typeof node2 === "object" && node2 !== null ? node2 : {};
        var name;
        if (typeof value.type === "string") {
          name = typeof value.tagName === "string" ? value.tagName : typeof value.name === "string" ? value.name : void 0;
          visit.displayName = "node (" + color3(value.type + (name ? "<" + name + ">" : "")) + ")";
        }
        return visit;
        function visit() {
          var grandparents = parents.concat(node2);
          var result = [];
          var subresult;
          var offset4;
          if (!test2 || is(node2, index3, parents[parents.length - 1] || null)) {
            result = toResult(visitor(node2, parents));
            if (result[0] === EXIT) {
              return result;
            }
          }
          if (node2.children && result[0] !== SKIP) {
            offset4 = (reverse ? node2.children.length : -1) + step;
            while (offset4 > -1 && offset4 < node2.children.length) {
              subresult = factory(node2.children[offset4], offset4, grandparents)();
              if (subresult[0] === EXIT) {
                return subresult;
              }
              offset4 = typeof subresult[1] === "number" ? subresult[1] : offset4 + step;
            }
          }
          return result;
        }
      }
    }
    function toResult(value) {
      if (value !== null && typeof value === "object" && "length" in value) {
        return value;
      }
      if (typeof value === "number") {
        return [CONTINUE, value];
      }
      return [value];
    }
  }
});

// node_modules/react-refractor/lib/map.js
var require_map = __commonJS({
  "node_modules/react-refractor/lib/map.js"(exports, module) {
    "use strict";
    module.exports = typeof WeakMap === "function" ? HappyMap : SadMap;
    function HappyMap() {
      this.map = /* @__PURE__ */ new WeakMap();
    }
    HappyMap.prototype.has = function(key2) {
      return this.map.has(key2);
    };
    HappyMap.prototype.set = function(key2, value) {
      this.map.set(key2, value);
      return this;
    };
    HappyMap.prototype.get = function(key2) {
      return this.map.get(key2);
    };
    HappyMap.prototype.clear = function() {
    };
    function SadMap() {
      this.keys = [];
      this.values = [];
    }
    SadMap.prototype.has = function(key2) {
      return this.keys.indexOf(key2) !== -1;
    };
    SadMap.prototype.set = function(key2, value) {
      var index3 = this.keys.indexOf(key2);
      if (index3 === -1) {
        this.keys.push(key2);
        this.values.push(value);
      } else {
        this.values[index3] = value;
      }
      return this;
    };
    SadMap.prototype.get = function(key2) {
      var index3 = this.keys.indexOf(key2);
      return index3 === -1 ? void 0 : this.values[index3];
    };
    SadMap.prototype.clear = function() {
      this.keys = [];
      this.values = [];
    };
  }
});

// node_modules/react-refractor/lib/addMarkers.js
var require_addMarkers = __commonJS({
  "node_modules/react-refractor/lib/addMarkers.js"(exports, module) {
    "use strict";
    var filter3 = require_unist_util_filter();
    var visit = require_unist_util_visit_parents();
    var NodeMap = require_map();
    function lineNumberify(ast) {
      var context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        lineNumber: 1
      };
      return ast.reduce(function(result, node2) {
        var lineStart = context.lineNumber;
        if (node2.type === "text") {
          if (node2.value.indexOf("\n") === -1) {
            node2.lineStart = lineStart;
            node2.lineEnd = lineStart;
            result.nodes.push(node2);
            return result;
          }
          var lines = node2.value.split("\n");
          for (var i2 = 0; i2 < lines.length; i2++) {
            var lineNum = i2 === 0 ? context.lineNumber : ++context.lineNumber;
            result.nodes.push({
              type: "text",
              value: i2 === lines.length - 1 ? lines[i2] : "".concat(lines[i2], "\n"),
              lineStart: lineNum,
              lineEnd: lineNum
            });
          }
          result.lineNumber = context.lineNumber;
          return result;
        }
        if (node2.children) {
          var processed = lineNumberify(node2.children, context);
          var firstChild = processed.nodes[0];
          var lastChild = processed.nodes[processed.nodes.length - 1];
          node2.lineStart = firstChild ? firstChild.lineStart : lineStart;
          node2.lineEnd = lastChild ? lastChild.lineEnd : lineStart;
          node2.children = processed.nodes;
          result.lineNumber = processed.lineNumber;
          result.nodes.push(node2);
          return result;
        }
        result.nodes.push(node2);
        return result;
      }, {
        nodes: [],
        lineNumber: context.lineNumber
      });
    }
    function unwrapLine(markerLine, nodes) {
      var tree = {
        type: "root",
        children: nodes
      };
      var headMap = new NodeMap();
      var lineMap = new NodeMap();
      var tailMap = new NodeMap();
      var cloned = [];
      function addCopy(map, node2, ancestors) {
        cloned.push(node2);
        ancestors.forEach(function(ancestor2) {
          if (!map.has(ancestor2)) {
            map.set(ancestor2, Object.assign({}, ancestor2, {
              children: []
            }));
            if (ancestor2 !== tree) {
              cloned.push(ancestor2);
            }
          }
        });
        var i2 = ancestors.length;
        while (i2--) {
          var ancestor = map.get(ancestors[i2]);
          var child = ancestors[i2 + 1];
          var leaf = map.get(child) || node2;
          if (ancestor.children.indexOf(leaf) === -1) {
            ancestor.children.push(leaf);
          }
        }
      }
      visit(tree, function(node2, ancestors) {
        if (node2.children) {
          return;
        }
        if (node2.lineStart < markerLine) {
          addCopy(headMap, node2, ancestors);
          return;
        }
        if (node2.lineStart === markerLine) {
          addCopy(lineMap, node2, ancestors);
          return;
        }
        if (node2.lineEnd > markerLine && cloned.some(function(clone) {
          return ancestors.indexOf(clone) !== -1;
        })) {
          addCopy(tailMap, node2, ancestors);
        }
      });
      var filtered = filter3(tree, function(node2) {
        return cloned.indexOf(node2) === -1;
      });
      var getChildren = function getChildren2(map) {
        var rootNode = map.get(tree);
        if (!rootNode) {
          return [];
        }
        visit(rootNode, function(leaf, ancestors) {
          if (leaf.children) {
            leaf.lineStart = 0;
            leaf.lineEnd = 0;
            return;
          }
          ancestors.forEach(function(ancestor) {
            ancestor.lineStart = Math.max(ancestor.lineStart, leaf.lineStart);
            ancestor.lineEnd = Math.max(ancestor.lineEnd, leaf.lineEnd);
          });
        });
        return rootNode.children;
      };
      var merged = [].concat(getChildren(headMap), getChildren(lineMap), getChildren(tailMap), filtered ? filtered.children : []);
      headMap.clear();
      lineMap.clear();
      tailMap.clear();
      return merged;
    }
    function wrapBatch(children, marker, options) {
      var className = marker.className || "refractor-marker";
      return {
        type: "element",
        tagName: marker.component || "div",
        properties: marker.component ? Object.assign({}, options, {
          className
        }) : {
          className
        },
        children,
        lineStart: marker.line,
        lineEnd: children[children.length - 1].lineEnd,
        isMarker: true
      };
    }
    function wrapLines(treeNodes, markers, options) {
      if (markers.length === 0 || treeNodes.length === 0) {
        return treeNodes;
      }
      var ast = markers.reduce(function(acc, marker2) {
        return unwrapLine(marker2.line, acc);
      }, treeNodes);
      var wrapped = [];
      var astIndex = 0;
      for (var m3 = 0; m3 < markers.length; m3++) {
        var marker = markers[m3];
        for (var node2 = ast[astIndex]; node2 && node2.lineEnd < marker.line; node2 = ast[++astIndex]) {
          wrapped.push(node2);
        }
        var batch = [];
        for (var _node = ast[astIndex]; _node && _node.lineEnd === marker.line; _node = ast[++astIndex]) {
          batch.push(_node);
        }
        if (batch.length > 0) {
          wrapped.push(wrapBatch(batch, marker, options));
        }
      }
      while (astIndex < ast.length) {
        wrapped.push(ast[astIndex++]);
      }
      return wrapped;
    }
    function addMarkers(ast, options) {
      var markers = options.markers.map(function(marker) {
        return marker.line ? marker : {
          line: marker
        };
      }).sort(function(nodeA, nodeB) {
        return nodeA.line - nodeB.line;
      });
      var numbered = lineNumberify(ast).nodes;
      return wrapLines(numbered, markers, options);
    }
    module.exports = addMarkers;
  }
});

// node_modules/react-refractor/lib/Refractor.js
var require_Refractor = __commonJS({
  "node_modules/react-refractor/lib/Refractor.js"(exports, module) {
    "use strict";
    var React13 = require_react();
    var fract = require_core();
    var mapChildren = require_mapChildren();
    var addMarkers = require_addMarkers();
    var h = React13.createElement;
    function Refractor2(props) {
      if (true) {
        if (!fract.registered(props.language)) {
          console.warn('No language definitions for "'.concat(props.language, '" seems to be registered, did you forget to call `Refractor.registerLanguage()`?'));
        }
      }
      var langClassName = "language-".concat(props.language);
      var codeProps = {
        className: langClassName
      };
      var preProps = {
        className: [props.className || "refractor", langClassName].filter(Boolean).join(" ")
      };
      if (props.inline) {
        codeProps.style = {
          display: "inline"
        };
        codeProps.className = props.className || "refractor";
      }
      var ast = fract.highlight(props.value, props.language);
      if (props.markers && props.markers.length > 0) {
        ast = addMarkers(ast, {
          markers: props.markers
        });
      }
      var value = ast.length === 0 ? props.value : ast.map(mapChildren.depth(0));
      var code = h("code", codeProps, value);
      return props.inline ? code : h("pre", preProps, code);
    }
    Refractor2.registerLanguage = function(lang) {
      return fract.register(lang);
    };
    Refractor2.hasLanguage = function(lang) {
      return fract.registered(lang);
    };
    module.exports = Refractor2;
  }
});

// node_modules/@emotion/memoize/dist/memoize.browser.esm.js
function memoize2(fn) {
  var cache4 = {};
  return function(arg) {
    if (cache4[arg] === void 0)
      cache4[arg] = fn(arg);
    return cache4[arg];
  };
}
var memoize_browser_esm_default;
var init_memoize_browser_esm = __esm({
  "node_modules/@emotion/memoize/dist/memoize.browser.esm.js"() {
    memoize_browser_esm_default = memoize2;
  }
});

// node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js
var is_prop_valid_browser_esm_exports = {};
__export(is_prop_valid_browser_esm_exports, {
  default: () => is_prop_valid_browser_esm_default
});
var reactPropsRegex2, index, is_prop_valid_browser_esm_default;
var init_is_prop_valid_browser_esm = __esm({
  "node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js"() {
    init_memoize_browser_esm();
    reactPropsRegex2 = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    index = memoize_browser_esm_default(
      function(prop) {
        return reactPropsRegex2.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
      }
      /* Z+1 */
    );
    is_prop_valid_browser_esm_default = index;
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType2(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment4 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement3(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment4;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal2;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement3;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/@sanity/ui/dist/_chunks-es/getTheme_v2.mjs
var defaultThemeConfig = {
  _version: 2,
  avatar: {
    sizes: [
      { distance: -4, size: 19 },
      { distance: -4, size: 25 },
      { distance: -8, size: 33 },
      { distance: -12, size: 49 }
    ],
    focusRing: { offset: 1, width: 1 }
  },
  button: {
    textWeight: "medium",
    border: { width: 1 },
    focusRing: { offset: -1, width: 1 }
  },
  card: {
    border: { width: 1 },
    focusRing: { offset: -1, width: 1 },
    shadow: { outline: 0.5 }
  },
  container: [320, 640, 960, 1280, 1600, 1920],
  media: [360, 600, 900, 1200, 1800, 2400],
  layer: {
    dialog: { zOffset: 600 },
    popover: { zOffset: 400 },
    tooltip: { zOffset: 200 }
  },
  radius: [0, 1, 3, 6, 9, 12, 21],
  shadow: [
    null,
    { umbra: [0, 0, 0, 0], penumbra: [0, 0, 0, 0], ambient: [0, 0, 0, 0] },
    { umbra: [0, 3, 5, -2], penumbra: [0, 6, 10, 0], ambient: [0, 1, 18, 1] },
    { umbra: [0, 7, 8, -4], penumbra: [0, 12, 17, 2], ambient: [0, 5, 22, 4] },
    { umbra: [0, 9, 11, -5], penumbra: [0, 18, 28, 2], ambient: [0, 7, 34, 6] },
    { umbra: [0, 11, 15, -7], penumbra: [0, 24, 38, 3], ambient: [0, 9, 46, 8] }
  ],
  space: [0, 4, 8, 12, 20, 32, 52, 84, 136, 220],
  input: {
    border: {
      width: 1
    },
    checkbox: {
      size: 17,
      focusRing: { offset: -1, width: 1 }
    },
    radio: {
      size: 17,
      markSize: 9,
      focusRing: { offset: -1, width: 1 }
    },
    switch: {
      width: 25,
      height: 17,
      padding: 5,
      transitionDurationMs: 150,
      transitionTimingFunction: "ease-out",
      focusRing: { offset: 1, width: 1 }
    },
    select: {
      focusRing: { offset: -1, width: 1 }
    },
    text: {
      focusRing: { offset: -1, width: 1 }
    }
  },
  style: {
    button: {
      root: {
        transition: "background-color 100ms,border-color 100ms,color 100ms"
      }
    }
    // card: {
    //   root: {
    //     transition: 'background-color 100ms,border-color 100ms,color 100ms',
    //   },
    // },
  }
};
var cache$1 = /* @__PURE__ */ new WeakMap();
function themeColor_v0_v2(color_v0) {
  var _a, _b, _c;
  const cached_v2 = cache$1.get(color_v0);
  if (cached_v2)
    return cached_v2;
  const base = stateThemeColor_v0_v2(color_v0, color_v0.card.enabled), color_v2 = {
    _blend: color_v0._blend || (color_v0.dark ? "screen" : "multiply"),
    _dark: color_v0.dark,
    accent: base.accent,
    avatar: base.avatar,
    backdrop: color_v0.base.shadow.ambient,
    badge: base.badge,
    bg: color_v0.base.bg,
    border: color_v0.base.border,
    button: {
      default: stateTonesThemeColor_v0_v2(color_v0, color_v0.button.default),
      ghost: stateTonesThemeColor_v0_v2(color_v0, color_v0.button.ghost),
      bleed: stateTonesThemeColor_v0_v2(color_v0, color_v0.button.bleed)
    },
    code: base.code,
    fg: color_v0.base.fg,
    focusRing: color_v0.base.focusRing,
    icon: base.muted.fg,
    input: {
      default: inputStatesThemeColor_v0_v2(color_v0.input.default),
      invalid: inputStatesThemeColor_v0_v2(color_v0.input.invalid)
    },
    kbd: base.kbd,
    link: base.link,
    muted: {
      ...base.muted,
      bg: ((_a = color_v0.selectable) == null ? void 0 : _a.default.enabled.bg2) || color_v0.base.bg
    },
    selectable: stateTonesThemeColor_v0_v2(color_v0, color_v0.selectable || color_v0.muted),
    shadow: color_v0.base.shadow,
    skeleton: {
      from: ((_b = color_v0.skeleton) == null ? void 0 : _b.from) || color_v0.base.border,
      to: ((_c = color_v0.skeleton) == null ? void 0 : _c.to) || color_v0.base.border
    },
    syntax: color_v0.syntax
  };
  return cache$1.set(color_v0, color_v2), color_v2;
}
function stateTonesThemeColor_v0_v2(v0, t) {
  return {
    default: {
      enabled: stateThemeColor_v0_v2(v0, t.default.enabled),
      hovered: stateThemeColor_v0_v2(v0, t.default.hovered),
      pressed: stateThemeColor_v0_v2(v0, t.default.pressed),
      selected: stateThemeColor_v0_v2(v0, t.default.selected),
      disabled: stateThemeColor_v0_v2(v0, t.default.disabled)
    },
    primary: {
      enabled: stateThemeColor_v0_v2(v0, t.primary.enabled),
      hovered: stateThemeColor_v0_v2(v0, t.primary.hovered),
      pressed: stateThemeColor_v0_v2(v0, t.primary.pressed),
      selected: stateThemeColor_v0_v2(v0, t.primary.selected),
      disabled: stateThemeColor_v0_v2(v0, t.primary.disabled)
    },
    positive: {
      enabled: stateThemeColor_v0_v2(v0, t.positive.enabled),
      hovered: stateThemeColor_v0_v2(v0, t.positive.hovered),
      pressed: stateThemeColor_v0_v2(v0, t.positive.pressed),
      selected: stateThemeColor_v0_v2(v0, t.positive.selected),
      disabled: stateThemeColor_v0_v2(v0, t.positive.disabled)
    },
    caution: {
      enabled: stateThemeColor_v0_v2(v0, t.caution.enabled),
      hovered: stateThemeColor_v0_v2(v0, t.caution.hovered),
      pressed: stateThemeColor_v0_v2(v0, t.caution.pressed),
      selected: stateThemeColor_v0_v2(v0, t.caution.selected),
      disabled: stateThemeColor_v0_v2(v0, t.caution.disabled)
    },
    critical: {
      enabled: stateThemeColor_v0_v2(v0, t.critical.enabled),
      hovered: stateThemeColor_v0_v2(v0, t.critical.hovered),
      pressed: stateThemeColor_v0_v2(v0, t.critical.pressed),
      selected: stateThemeColor_v0_v2(v0, t.critical.selected),
      disabled: stateThemeColor_v0_v2(v0, t.critical.disabled)
    }
  };
}
function stateThemeColor_v0_v2(v0, state) {
  var _a, _b;
  return {
    ...state,
    avatar: {
      gray: {
        bg: v0.spot.gray,
        fg: v0.base.bg
      },
      blue: {
        bg: v0.spot.blue,
        fg: v0.base.bg
      },
      purple: {
        bg: v0.spot.purple,
        fg: v0.base.bg
      },
      magenta: {
        bg: v0.spot.magenta,
        fg: v0.base.bg
      },
      red: {
        bg: v0.spot.red,
        fg: v0.base.bg
      },
      orange: {
        bg: v0.spot.orange,
        fg: v0.base.bg
      },
      yellow: {
        bg: v0.spot.yellow,
        fg: v0.base.bg
      },
      green: {
        bg: v0.spot.green,
        fg: v0.base.bg
      },
      cyan: {
        bg: v0.spot.cyan,
        fg: v0.base.bg
      }
    },
    badge: {
      default: {
        bg: v0.muted.default.enabled.bg,
        fg: v0.muted.default.enabled.fg,
        dot: v0.muted.default.enabled.muted.fg,
        icon: v0.muted.default.enabled.muted.fg
      },
      primary: {
        bg: v0.muted.primary.enabled.bg,
        fg: v0.muted.primary.enabled.fg,
        dot: v0.muted.primary.enabled.muted.fg,
        icon: v0.muted.primary.enabled.muted.fg
      },
      positive: {
        bg: v0.muted.positive.enabled.bg,
        fg: v0.muted.positive.enabled.fg,
        dot: v0.muted.positive.enabled.muted.fg,
        icon: v0.muted.positive.enabled.muted.fg
      },
      caution: {
        bg: v0.muted.caution.enabled.bg,
        fg: v0.muted.caution.enabled.fg,
        dot: v0.muted.caution.enabled.muted.fg,
        icon: v0.muted.caution.enabled.muted.fg
      },
      critical: {
        bg: v0.muted.critical.enabled.bg,
        fg: v0.muted.critical.enabled.fg,
        dot: v0.muted.critical.enabled.muted.fg,
        icon: v0.muted.critical.enabled.muted.fg
      }
    },
    kbd: {
      bg: v0.muted.default.enabled.bg,
      fg: v0.muted.default.enabled.fg,
      border: v0.muted.default.enabled.border
    },
    muted: {
      ...v0.muted.default.enabled.muted,
      bg: state.bg2 || state.bg
    },
    skeleton: {
      from: ((_a = state.skeleton) == null ? void 0 : _a.from) || state.border,
      to: ((_b = state.skeleton) == null ? void 0 : _b.to) || state.border
    }
  };
}
function inputStatesThemeColor_v0_v2(states) {
  return {
    enabled: inputStateThemeColor_v0_v2(states.enabled),
    disabled: inputStateThemeColor_v0_v2(states.disabled),
    readOnly: inputStateThemeColor_v0_v2(states.readOnly),
    hovered: inputStateThemeColor_v0_v2(states.hovered)
  };
}
function inputStateThemeColor_v0_v2(state) {
  return {
    bg: state.bg,
    border: state.border,
    fg: state.fg,
    muted: {
      bg: state.bg2
    },
    placeholder: state.placeholder
  };
}
var cache = /* @__PURE__ */ new WeakMap();
function getTheme_v2(theme) {
  var _a;
  if ((_a = theme.sanity.v2) == null ? void 0 : _a._resolved)
    return theme.sanity.v2;
  const cached_v2 = cache.get(theme);
  if (cached_v2)
    return cached_v2;
  const v2 = {
    _version: 2,
    _resolved: true,
    avatar: {
      ...defaultThemeConfig.avatar,
      ...theme.sanity.avatar
    },
    button: {
      ...defaultThemeConfig.button,
      ...theme.sanity.button
    },
    card: defaultThemeConfig.card,
    color: themeColor_v0_v2(theme.sanity.color),
    container: theme.sanity.container,
    font: theme.sanity.fonts,
    input: {
      ...defaultThemeConfig.input,
      ...theme.sanity.input,
      checkbox: {
        ...defaultThemeConfig.input.checkbox,
        ...theme.sanity.input.checkbox
      },
      radio: {
        ...defaultThemeConfig.input.radio,
        ...theme.sanity.input.radio
      },
      switch: {
        ...defaultThemeConfig.input.switch,
        ...theme.sanity.input.switch
      }
    },
    layer: theme.sanity.layer ?? defaultThemeConfig.layer,
    media: theme.sanity.media,
    radius: theme.sanity.radius,
    shadow: theme.sanity.shadows,
    space: theme.sanity.space,
    style: theme.sanity.styles
  };
  return cache.set(theme, v2), v2;
}

// node_modules/@sanity/color/dist/index.js
var COLOR_HUES = [
  "gray",
  "blue",
  "purple",
  "magenta",
  "red",
  "orange",
  "yellow",
  "green",
  "cyan"
];
var COLOR_TINTS = [
  "50",
  "100",
  "200",
  "300",
  "400",
  "500",
  "600",
  "700",
  "800",
  "900",
  "950"
];
var black = {
  title: "Black",
  hex: "#0d0e12"
};
var white = {
  title: "White",
  hex: "#ffffff"
};
var gray = {
  50: {
    title: "Gray 50",
    hex: "#f6f6f8"
  },
  100: {
    title: "Gray 100",
    hex: "#eeeef1"
  },
  200: {
    title: "Gray 200",
    hex: "#e3e4e8"
  },
  300: {
    title: "Gray 300",
    hex: "#bbbdc9"
  },
  400: {
    title: "Gray 400",
    hex: "#9499ad"
  },
  500: {
    title: "Gray 500",
    hex: "#727892"
  },
  600: {
    title: "Gray 600",
    hex: "#515870"
  },
  700: {
    title: "Gray 700",
    hex: "#383d51"
  },
  800: {
    title: "Gray 800",
    hex: "#252837"
  },
  900: {
    title: "Gray 900",
    hex: "#1b1d27"
  },
  950: {
    title: "Gray 950",
    hex: "#13141b"
  }
};
var blue = {
  50: {
    title: "Blue 50",
    hex: "#f5f8ff"
  },
  100: {
    title: "Blue 100",
    hex: "#e5edff"
  },
  200: {
    title: "Blue 200",
    hex: "#dbe5ff"
  },
  300: {
    title: "Blue 300",
    hex: "#a8bfff"
  },
  400: {
    title: "Blue 400",
    hex: "#7595ff"
  },
  500: {
    title: "Blue 500",
    hex: "#556bfc"
  },
  600: {
    title: "Blue 600",
    hex: "#4043e7"
  },
  700: {
    title: "Blue 700",
    hex: "#2927aa"
  },
  800: {
    title: "Blue 800",
    hex: "#192457"
  },
  900: {
    title: "Blue 900",
    hex: "#161a41"
  },
  950: {
    title: "Blue 950",
    hex: "#101228"
  }
};
var purple = {
  50: {
    title: "Purple 50",
    hex: "#f8f5ff"
  },
  100: {
    title: "Purple 100",
    hex: "#f1ebff"
  },
  200: {
    title: "Purple 200",
    hex: "#ece1fe"
  },
  300: {
    title: "Purple 300",
    hex: "#ccb1fc"
  },
  400: {
    title: "Purple 400",
    hex: "#b087f7"
  },
  500: {
    title: "Purple 500",
    hex: "#8f57ef"
  },
  600: {
    title: "Purple 600",
    hex: "#721fe5"
  },
  700: {
    title: "Purple 700",
    hex: "#4c1a9e"
  },
  800: {
    title: "Purple 800",
    hex: "#2f1862"
  },
  900: {
    title: "Purple 900",
    hex: "#23173f"
  },
  950: {
    title: "Purple 950",
    hex: "#181128"
  }
};
var magenta = {
  50: {
    title: "Magenta 50",
    hex: "#fef6f9"
  },
  100: {
    title: "Magenta 100",
    hex: "#fde8ef"
  },
  200: {
    title: "Magenta 200",
    hex: "#fcdee9"
  },
  300: {
    title: "Magenta 300",
    hex: "#f7abc5"
  },
  400: {
    title: "Magenta 400",
    hex: "#f0709b"
  },
  500: {
    title: "Magenta 500",
    hex: "#e72767"
  },
  600: {
    title: "Magenta 600",
    hex: "#b11651"
  },
  700: {
    title: "Magenta 700",
    hex: "#7c1342"
  },
  800: {
    title: "Magenta 800",
    hex: "#4b1130"
  },
  900: {
    title: "Magenta 900",
    hex: "#341325"
  },
  950: {
    title: "Magenta 950",
    hex: "#1f0f14"
  }
};
var red = {
  50: {
    title: "Red 50",
    hex: "#fff6f5"
  },
  100: {
    title: "Red 100",
    hex: "#ffe7e5"
  },
  200: {
    title: "Red 200",
    hex: "#ffdedc"
  },
  300: {
    title: "Red 300",
    hex: "#fdada5"
  },
  400: {
    title: "Red 400",
    hex: "#f77769"
  },
  500: {
    title: "Red 500",
    hex: "#ef4434"
  },
  600: {
    title: "Red 600",
    hex: "#cc2819"
  },
  700: {
    title: "Red 700",
    hex: "#8b2018"
  },
  800: {
    title: "Red 800",
    hex: "#4d1714"
  },
  900: {
    title: "Red 900",
    hex: "#321615"
  },
  950: {
    title: "Red 950",
    hex: "#1e1011"
  }
};
var orange = {
  50: {
    title: "Orange 50",
    hex: "#fff7f0"
  },
  100: {
    title: "Orange 100",
    hex: "#ffeadb"
  },
  200: {
    title: "Orange 200",
    hex: "#ffddc7"
  },
  300: {
    title: "Orange 300",
    hex: "#ffb685"
  },
  400: {
    title: "Orange 400",
    hex: "#ff8e42"
  },
  500: {
    title: "Orange 500",
    hex: "#fa6400"
  },
  600: {
    title: "Orange 600",
    hex: "#b14802"
  },
  700: {
    title: "Orange 700",
    hex: "#7c3404"
  },
  800: {
    title: "Orange 800",
    hex: "#461e07"
  },
  900: {
    title: "Orange 900",
    hex: "#32160b"
  },
  950: {
    title: "Orange 950",
    hex: "#21120d"
  }
};
var yellow = {
  50: {
    title: "Yellow 50",
    hex: "#fefae1"
  },
  100: {
    title: "Yellow 100",
    hex: "#fcf3bb"
  },
  200: {
    title: "Yellow 200",
    hex: "#f9e994"
  },
  300: {
    title: "Yellow 300",
    hex: "#f7d455"
  },
  400: {
    title: "Yellow 400",
    hex: "#f9bc15"
  },
  500: {
    title: "Yellow 500",
    hex: "#d28a04"
  },
  600: {
    title: "Yellow 600",
    hex: "#965908"
  },
  700: {
    title: "Yellow 700",
    hex: "#653a0b"
  },
  800: {
    title: "Yellow 800",
    hex: "#3b220c"
  },
  900: {
    title: "Yellow 900",
    hex: "#271a11"
  },
  950: {
    title: "Yellow 950",
    hex: "#181410"
  }
};
var green = {
  50: {
    title: "Green 50",
    hex: "#e7fef5"
  },
  100: {
    title: "Green 100",
    hex: "#c5fce8"
  },
  200: {
    title: "Green 200",
    hex: "#a9f9dc"
  },
  300: {
    title: "Green 300",
    hex: "#59f3ba"
  },
  400: {
    title: "Green 400",
    hex: "#0ff0a1"
  },
  500: {
    title: "Green 500",
    hex: "#04b97a"
  },
  600: {
    title: "Green 600",
    hex: "#01794f"
  },
  700: {
    title: "Green 700",
    hex: "#015133"
  },
  800: {
    title: "Green 800",
    hex: "#023120"
  },
  900: {
    title: "Green 900",
    hex: "#06231a"
  },
  950: {
    title: "Green 950",
    hex: "#071715"
  }
};
var cyan = {
  50: {
    title: "Cyan 50",
    hex: "#e7fefe"
  },
  100: {
    title: "Cyan 100",
    hex: "#c5fcfc"
  },
  200: {
    title: "Cyan 200",
    hex: "#96f8f8"
  },
  300: {
    title: "Cyan 300",
    hex: "#62efef"
  },
  400: {
    title: "Cyan 400",
    hex: "#18e2e2"
  },
  500: {
    title: "Cyan 500",
    hex: "#04b8be"
  },
  600: {
    title: "Cyan 600",
    hex: "#037782"
  },
  700: {
    title: "Cyan 700",
    hex: "#024950"
  },
  800: {
    title: "Cyan 800",
    hex: "#042f34"
  },
  900: {
    title: "Cyan 900",
    hex: "#072227"
  },
  950: {
    title: "Cyan 950",
    hex: "#0d181c"
  }
};
var hues = { gray, blue, purple, magenta, red, orange, yellow, green, cyan };
var color = { black, white, ...hues };

// node_modules/@sanity/ui/dist/theme.mjs
function createSelectableTones(opts, base, dark, solid, muted) {
  return {
    default: _createSelectableStates(opts, base, dark, solid, muted, "default"),
    primary: _createSelectableStates(opts, base, dark, solid, muted, "primary"),
    positive: _createSelectableStates(opts, base, dark, solid, muted, "positive"),
    caution: _createSelectableStates(opts, base, dark, solid, muted, "caution"),
    critical: _createSelectableStates(opts, base, dark, solid, muted, "critical")
  };
}
function _createSelectableStates(opts, base, dark, solid, muted, tone) {
  return {
    enabled: opts.selectable({
      base,
      dark,
      solid,
      muted,
      state: "enabled",
      tone
    }),
    hovered: opts.selectable({
      base,
      dark,
      solid,
      muted,
      state: "hovered",
      tone
    }),
    pressed: opts.selectable({
      base,
      dark,
      solid,
      muted,
      state: "pressed",
      tone
    }),
    selected: opts.selectable({
      base,
      dark,
      solid,
      muted,
      state: "selected",
      tone
    }),
    disabled: opts.selectable({
      base,
      dark,
      solid,
      muted,
      state: "disabled",
      tone
    })
  };
}
function createSolidTones(opts, base, dark, name) {
  return {
    default: {
      enabled: opts.solid({ base, dark, tone: "default", name, state: "enabled" }),
      disabled: opts.solid({ base, dark, tone: "default", name, state: "disabled" }),
      hovered: opts.solid({ base, dark, tone: "default", name, state: "hovered" }),
      pressed: opts.solid({ base, dark, tone: "default", name, state: "pressed" }),
      selected: opts.solid({ base, dark, tone: "default", name, state: "selected" })
    },
    transparent: {
      enabled: opts.solid({ base, dark, tone: "transparent", name, state: "enabled" }),
      disabled: opts.solid({ base, dark, tone: "transparent", name, state: "disabled" }),
      hovered: opts.solid({ base, dark, tone: "transparent", name, state: "hovered" }),
      pressed: opts.solid({ base, dark, tone: "transparent", name, state: "pressed" }),
      selected: opts.solid({ base, dark, tone: "transparent", name, state: "selected" })
    },
    primary: {
      enabled: opts.solid({ base, dark, tone: "primary", name, state: "enabled" }),
      disabled: opts.solid({ base, dark, tone: "primary", name, state: "disabled" }),
      hovered: opts.solid({ base, dark, tone: "primary", name, state: "hovered" }),
      pressed: opts.solid({ base, dark, tone: "primary", name, state: "pressed" }),
      selected: opts.solid({ base, dark, tone: "primary", name, state: "selected" })
    },
    positive: {
      enabled: opts.solid({ base, dark, tone: "positive", name, state: "enabled" }),
      disabled: opts.solid({ base, dark, tone: "positive", name, state: "disabled" }),
      hovered: opts.solid({ base, dark, tone: "positive", name, state: "hovered" }),
      pressed: opts.solid({ base, dark, tone: "positive", name, state: "pressed" }),
      selected: opts.solid({ base, dark, tone: "positive", name, state: "selected" })
    },
    caution: {
      enabled: opts.solid({ base, dark, tone: "caution", name, state: "enabled" }),
      disabled: opts.solid({ base, dark, tone: "caution", name, state: "disabled" }),
      hovered: opts.solid({ base, dark, tone: "caution", name, state: "hovered" }),
      pressed: opts.solid({ base, dark, tone: "caution", name, state: "pressed" }),
      selected: opts.solid({ base, dark, tone: "caution", name, state: "selected" })
    },
    critical: {
      enabled: opts.solid({ base, dark, tone: "critical", name, state: "enabled" }),
      disabled: opts.solid({ base, dark, tone: "critical", name, state: "disabled" }),
      hovered: opts.solid({ base, dark, tone: "critical", name, state: "hovered" }),
      pressed: opts.solid({ base, dark, tone: "critical", name, state: "pressed" }),
      selected: opts.solid({ base, dark, tone: "critical", name, state: "selected" })
    }
  };
}
function createButtonTones(opts, base, dark, solid, muted, mode) {
  return {
    default: opts.button({
      base,
      dark,
      solid: solid.default,
      muted: muted.default,
      mode
    }),
    primary: opts.button({
      base,
      dark,
      solid: solid.primary,
      muted: muted.primary,
      mode
    }),
    positive: opts.button({
      base,
      dark,
      solid: solid.positive,
      muted: muted.positive,
      mode
    }),
    caution: opts.button({
      base,
      dark,
      solid: solid.caution,
      muted: muted.caution,
      mode
    }),
    critical: opts.button({
      base,
      dark,
      solid: solid.critical,
      muted: muted.critical,
      mode
    })
  };
}
function createButtonModes(opts, base, dark, solid, muted) {
  return {
    default: createButtonTones(opts, base, dark, solid, muted, "default"),
    ghost: createButtonTones(opts, base, dark, solid, muted, "ghost"),
    bleed: createButtonTones(opts, base, dark, solid, muted, "bleed")
  };
}
function createCardStates(opts, base, dark, name, solid, muted) {
  return {
    enabled: opts.card({
      base,
      dark,
      name,
      state: "enabled",
      solid,
      muted
    }),
    disabled: opts.card({
      base,
      dark,
      name,
      state: "disabled",
      solid,
      muted
    }),
    hovered: opts.card({
      base,
      dark,
      name,
      state: "hovered",
      solid,
      muted
    }),
    pressed: opts.card({
      base,
      dark,
      name,
      state: "pressed",
      solid,
      muted
    }),
    selected: opts.card({
      base,
      dark,
      name,
      state: "selected",
      solid,
      muted
    })
  };
}
var black2 = "hsl(0, 0%, 0%)";
var white2 = "hsl(0, 0%, 100%)";
var colors = {
  default: {
    lightest: "hsl(0, 0%, 95%)",
    lighter: "hsl(0, 0%, 70%)",
    light: "hsl(0, 0%, 65%)",
    base: "hsl(0, 0%, 50%)",
    dark: "hsl(0, 0%, 35%)",
    darker: "hsl(0, 0%, 20%)",
    darkest: "hsl(0, 0%, 5%)"
  },
  transparent: {
    lightest: "hsl(240, 100%, 95%)",
    lighter: "hsl(240, 100%, 70%)",
    light: "hsl(240, 100%, 65%)",
    base: "hsl(240, 100%, 50%)",
    dark: "hsl(240, 100%, 35%)",
    darker: "hsl(240, 100%, 20%)",
    darkest: "hsl(240, 100%, 5%)"
  },
  primary: {
    lightest: "hsl(240, 100%, 95%)",
    lighter: "hsl(240, 100%, 70%)",
    light: "hsl(240, 100%, 65%)",
    base: "hsl(240, 100%, 50%)",
    dark: "hsl(240, 100%, 35%)",
    darker: "hsl(240, 100%, 20%)",
    darkest: "hsl(240, 100%, 5%)"
  },
  positive: {
    lightest: "hsl(120, 100%, 95%)",
    lighter: "hsl(120, 100%, 70%)",
    light: "hsl(120, 100%, 65%)",
    base: "hsl(120, 100%, 50%)",
    dark: "hsl(120, 100%, 35%)",
    darker: "hsl(120, 100%, 20%)",
    darkest: "hsl(120, 100%, 5%)"
  },
  caution: {
    lightest: "hsl(60, 100%, 95%)",
    lighter: "hsl(60, 100%, 70%)",
    light: "hsl(60, 100%, 65%)",
    base: "hsl(60, 100%, 50%)",
    dark: "hsl(60, 100%, 35%)",
    darker: "hsl(60, 100%, 20%)",
    darkest: "hsl(60, 100%, 5%)"
  },
  critical: {
    lightest: "hsl(0, 100%, 95%)",
    lighter: "hsl(0, 100%, 70%)",
    light: "hsl(0, 100%, 65%)",
    base: "hsl(0, 100%, 50%)",
    dark: "hsl(0, 100%, 35%)",
    darker: "hsl(0, 100%, 20%)",
    darkest: "hsl(0, 100%, 5%)"
  }
};
var spots = {
  gray: "hsl(0, 0%, 50%)",
  red: "hsl(0, 100%, 50%)",
  orange: "hsl(30, 100%, 50%)",
  yellow: "hsl(60, 100%, 50%)",
  green: "hsl(120, 100%, 50%)",
  cyan: "hsl(180, 100%, 50%)",
  blue: "hsl(240, 100%, 50%)",
  purple: "hsl(270, 100%, 50%)",
  magenta: "hsl(300, 100%, 50%)"
};
var tones = {
  transparent: {
    bg: [colors.transparent.darkest, colors.transparent.lightest],
    fg: [colors.transparent.lightest, colors.transparent.darkest],
    border: [colors.transparent.darker, colors.transparent.lighter],
    focusRing: [colors.transparent.base, colors.transparent.base]
  },
  primary: {
    bg: [colors.primary.darkest, colors.primary.lightest],
    fg: [colors.primary.lightest, colors.primary.darkest],
    border: [colors.primary.darker, colors.primary.lighter],
    focusRing: [colors.primary.base, colors.primary.base]
  },
  positive: {
    bg: [colors.positive.darkest, colors.positive.lightest],
    fg: [colors.positive.lightest, colors.positive.darkest],
    border: [colors.positive.darker, colors.positive.lighter],
    focusRing: [colors.positive.base, colors.positive.base]
  },
  caution: {
    bg: [colors.caution.darkest, colors.caution.lightest],
    fg: [colors.caution.lightest, colors.caution.darkest],
    border: [colors.caution.darker, colors.caution.lighter],
    focusRing: [colors.caution.base, colors.caution.base]
  },
  critical: {
    bg: [colors.critical.darkest, colors.critical.lightest],
    fg: [colors.critical.lightest, colors.critical.darkest],
    border: [colors.critical.darker, colors.critical.lighter],
    focusRing: [colors.critical.base, colors.critical.base]
  }
};
var defaultOpts = {
  base: ({ dark, name }) => name === "default" ? {
    bg: dark ? black2 : white2,
    fg: dark ? white2 : black2,
    border: dark ? colors.default.darkest : colors.default.lightest,
    focusRing: colors.primary.base,
    shadow: {
      outline: black2,
      umbra: black2,
      penumbra: black2,
      ambient: black2
    },
    skeleton: {
      from: dark ? white2 : black2,
      to: dark ? white2 : black2
    }
  } : {
    bg: tones[name].bg[dark ? 0 : 1],
    fg: tones[name].fg[dark ? 0 : 1],
    border: tones[name].border[dark ? 0 : 1],
    focusRing: tones[name].focusRing[dark ? 0 : 1],
    shadow: {
      outline: black2,
      umbra: black2,
      penumbra: black2,
      ambient: black2
    },
    skeleton: {
      from: dark ? white2 : black2,
      to: dark ? white2 : black2
    }
  },
  solid: ({ base, dark, state, tone }) => {
    const color22 = colors[tone];
    return state === "hovered" ? {
      bg: dark ? color22.light : color22.dark,
      bg2: dark ? color22.light : color22.dark,
      border: dark ? color22.lighter : color22.darker,
      fg: dark ? color22.darkest : color22.lightest,
      icon: dark ? color22.darkest : color22.lightest,
      muted: {
        fg: black2
      },
      accent: {
        fg: black2
      },
      link: {
        fg: black2
      },
      code: {
        bg: black2,
        fg: black2
      },
      skeleton: base.skeleton
    } : {
      bg: color22.base,
      bg2: color22.base,
      border: dark ? color22.light : color22.dark,
      fg: dark ? color22.darkest : color22.lightest,
      icon: dark ? color22.darkest : color22.lightest,
      muted: {
        fg: black2
      },
      accent: {
        fg: black2
      },
      link: {
        fg: black2
      },
      code: {
        bg: black2,
        fg: black2
      },
      skeleton: base.skeleton
    };
  },
  muted: ({ base, dark, state, tone }) => {
    const color22 = colors[tone];
    return state === "hovered" ? {
      bg: dark ? color22.darker : color22.lighter,
      bg2: dark ? color22.darker : color22.lighter,
      border: dark ? color22.lighter : color22.darker,
      fg: dark ? color22.lightest : color22.darkest,
      icon: dark ? color22.lightest : color22.darkest,
      muted: {
        fg: black2
      },
      accent: {
        fg: black2
      },
      link: {
        fg: black2
      },
      code: {
        bg: black2,
        fg: black2
      },
      skeleton: base.skeleton
    } : {
      bg: dark ? color22.darkest : color22.lightest,
      bg2: dark ? color22.darkest : color22.lightest,
      border: dark ? color22.darker : color22.lighter,
      fg: dark ? color22.lighter : color22.darker,
      icon: dark ? color22.lighter : color22.darker,
      muted: {
        fg: black2
      },
      accent: {
        fg: black2
      },
      link: {
        fg: black2
      },
      code: {
        bg: black2,
        fg: black2
      },
      skeleton: base.skeleton
    };
  },
  button: ({ base, mode, muted, solid }) => mode === "bleed" ? {
    ...muted,
    enabled: {
      bg: "transparent",
      bg2: "transparent",
      fg: muted.enabled.fg,
      icon: muted.enabled.fg,
      border: "transparent",
      muted: {
        fg: black2
      },
      accent: {
        fg: black2
      },
      link: {
        fg: black2
      },
      code: {
        bg: black2,
        fg: black2
      },
      skeleton: base.skeleton
    },
    hovered: {
      bg: muted.enabled.bg,
      bg2: muted.enabled.bg,
      fg: muted.hovered.fg,
      icon: muted.hovered.fg,
      border: "transparent",
      muted: {
        fg: black2
      },
      accent: {
        fg: black2
      },
      link: {
        fg: black2
      },
      code: {
        bg: black2,
        fg: black2
      },
      skeleton: base.skeleton
    }
  } : mode === "ghost" ? {
    ...solid,
    enabled: muted.enabled
  } : solid,
  card: ({ base }) => ({
    bg: black2,
    bg2: black2,
    fg: black2,
    icon: black2,
    border: black2,
    muted: {
      fg: black2
    },
    accent: {
      fg: black2
    },
    link: {
      fg: black2
    },
    code: {
      bg: black2,
      fg: black2
    },
    skeleton: base.skeleton
  }),
  input: () => ({
    bg: black2,
    bg2: black2,
    fg: black2,
    border: black2,
    placeholder: black2
  }),
  selectable: ({ muted, state, tone }) => muted[tone][state],
  spot: ({ key: key2 }) => spots[key2],
  syntax: () => ({
    atrule: black2,
    attrName: black2,
    attrValue: black2,
    attribute: black2,
    boolean: black2,
    builtin: black2,
    cdata: black2,
    char: black2,
    class: black2,
    className: black2,
    comment: black2,
    constant: black2,
    deleted: black2,
    doctype: black2,
    entity: black2,
    function: black2,
    hexcode: black2,
    id: black2,
    important: black2,
    inserted: black2,
    keyword: black2,
    number: black2,
    operator: black2,
    prolog: black2,
    property: black2,
    pseudoClass: black2,
    pseudoElement: black2,
    punctuation: black2,
    regex: black2,
    selector: black2,
    string: black2,
    symbol: black2,
    tag: black2,
    unit: black2,
    url: black2,
    variable: black2
  })
};
function createInputModes(opts, base, dark, solid, muted) {
  return {
    default: {
      enabled: opts.input({
        base,
        dark,
        mode: "default",
        state: "enabled",
        solid: solid.default,
        muted: muted.default
      }),
      disabled: opts.input({
        base,
        dark,
        mode: "default",
        state: "disabled",
        solid: solid.default,
        muted: muted.default
      }),
      hovered: opts.input({
        base,
        dark,
        mode: "default",
        state: "hovered",
        solid: solid.default,
        muted: muted.default
      }),
      readOnly: opts.input({
        base,
        dark,
        mode: "default",
        state: "readOnly",
        solid: solid.default,
        muted: muted.default
      })
    },
    invalid: {
      enabled: opts.input({
        base,
        dark,
        mode: "invalid",
        state: "enabled",
        solid: solid.default,
        muted: muted.default
      }),
      disabled: opts.input({
        base,
        dark,
        mode: "invalid",
        state: "disabled",
        solid: solid.default,
        muted: muted.default
      }),
      hovered: opts.input({
        base,
        dark,
        mode: "invalid",
        state: "hovered",
        solid: solid.default,
        muted: muted.default
      }),
      readOnly: opts.input({
        base,
        dark,
        mode: "invalid",
        state: "readOnly",
        solid: solid.default,
        muted: muted.default
      })
    }
  };
}
function createMutedTones(opts, base, dark, name) {
  return {
    default: {
      enabled: opts.muted({ base, dark, tone: "default", name, state: "enabled" }),
      disabled: opts.muted({ base, dark, tone: "default", name, state: "disabled" }),
      hovered: opts.muted({ base, dark, tone: "default", name, state: "hovered" }),
      pressed: opts.muted({ base, dark, tone: "default", name, state: "pressed" }),
      selected: opts.muted({ base, dark, tone: "default", name, state: "selected" })
    },
    transparent: {
      enabled: opts.muted({ base, dark, tone: "transparent", name, state: "enabled" }),
      disabled: opts.muted({ base, dark, tone: "transparent", name, state: "disabled" }),
      hovered: opts.muted({ base, dark, tone: "transparent", name, state: "hovered" }),
      pressed: opts.muted({ base, dark, tone: "transparent", name, state: "pressed" }),
      selected: opts.muted({ base, dark, tone: "transparent", name, state: "selected" })
    },
    primary: {
      enabled: opts.muted({ base, dark, tone: "primary", name, state: "enabled" }),
      disabled: opts.muted({ base, dark, tone: "primary", name, state: "disabled" }),
      hovered: opts.muted({ base, dark, tone: "primary", name, state: "hovered" }),
      pressed: opts.muted({ base, dark, tone: "primary", name, state: "pressed" }),
      selected: opts.muted({ base, dark, tone: "primary", name, state: "selected" })
    },
    positive: {
      enabled: opts.muted({ base, dark, tone: "positive", name, state: "enabled" }),
      disabled: opts.muted({ base, dark, tone: "positive", name, state: "disabled" }),
      hovered: opts.muted({ base, dark, tone: "positive", name, state: "hovered" }),
      pressed: opts.muted({ base, dark, tone: "positive", name, state: "pressed" }),
      selected: opts.muted({ base, dark, tone: "positive", name, state: "selected" })
    },
    caution: {
      enabled: opts.muted({ base, dark, tone: "caution", name, state: "enabled" }),
      disabled: opts.muted({ base, dark, tone: "caution", name, state: "disabled" }),
      hovered: opts.muted({ base, dark, tone: "caution", name, state: "hovered" }),
      pressed: opts.muted({ base, dark, tone: "caution", name, state: "pressed" }),
      selected: opts.muted({ base, dark, tone: "caution", name, state: "selected" })
    },
    critical: {
      enabled: opts.muted({ base, dark, tone: "critical", name, state: "enabled" }),
      disabled: opts.muted({ base, dark, tone: "critical", name, state: "disabled" }),
      hovered: opts.muted({ base, dark, tone: "critical", name, state: "hovered" }),
      pressed: opts.muted({ base, dark, tone: "critical", name, state: "pressed" }),
      selected: opts.muted({ base, dark, tone: "critical", name, state: "selected" })
    }
  };
}
function createSpot(opts, base, dark) {
  return {
    gray: opts.spot({ base, dark, key: "gray" }),
    blue: opts.spot({ base, dark, key: "blue" }),
    purple: opts.spot({ base, dark, key: "purple" }),
    magenta: opts.spot({ base, dark, key: "magenta" }),
    red: opts.spot({ base, dark, key: "red" }),
    orange: opts.spot({ base, dark, key: "orange" }),
    yellow: opts.spot({ base, dark, key: "yellow" }),
    green: opts.spot({ base, dark, key: "green" }),
    cyan: opts.spot({ base, dark, key: "cyan" })
  };
}
function createColorTheme(partialOpts = {}) {
  const builders = { ...defaultOpts, ...partialOpts };
  return {
    light: _createColorScheme(builders, false),
    dark: _createColorScheme(builders, true)
  };
}
function _createColorScheme(opts, dark) {
  return {
    default: _createColor(opts, dark, "default"),
    transparent: _createColor(opts, dark, "transparent"),
    primary: _createColor(opts, dark, "primary"),
    positive: _createColor(opts, dark, "positive"),
    caution: _createColor(opts, dark, "caution"),
    critical: _createColor(opts, dark, "critical")
  };
}
function _createColor(opts, dark, name) {
  const base = opts.base({ dark, name }), solid = createSolidTones(opts, base, dark, name), muted = createMutedTones(opts, base, dark, name);
  return {
    base,
    button: createButtonModes(opts, base, dark, solid, muted),
    card: createCardStates(opts, base, dark, name, solid, muted),
    dark,
    input: createInputModes(opts, base, dark, solid, muted),
    selectable: createSelectableTones(opts, base, dark, solid, muted),
    spot: createSpot(opts, base, dark),
    syntax: opts.syntax({ base, dark }),
    solid,
    muted
  };
}
var defaultThemeFonts = {
  code: {
    family: "ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace",
    weights: {
      regular: 400,
      medium: 500,
      semibold: 600,
      bold: 700
    },
    sizes: [
      {
        ascenderHeight: 4,
        descenderHeight: 4,
        fontSize: 10,
        iconSize: 17,
        lineHeight: 15,
        letterSpacing: 0
      },
      {
        ascenderHeight: 5,
        descenderHeight: 5,
        fontSize: 13,
        iconSize: 21,
        lineHeight: 19,
        letterSpacing: 0
      },
      {
        ascenderHeight: 6,
        descenderHeight: 6,
        fontSize: 16,
        iconSize: 25,
        lineHeight: 23,
        letterSpacing: 0
      },
      {
        ascenderHeight: 7,
        descenderHeight: 7,
        fontSize: 19,
        iconSize: 29,
        lineHeight: 27,
        letterSpacing: 0
      },
      {
        ascenderHeight: 8,
        descenderHeight: 8,
        fontSize: 22,
        iconSize: 33,
        lineHeight: 31,
        letterSpacing: 0
      }
    ]
  },
  heading: {
    family: 'Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", "Liberation Sans", Helvetica, Arial, system-ui, sans-serif',
    weights: {
      regular: 700,
      medium: 800,
      semibold: 900,
      bold: 900
    },
    sizes: [
      {
        ascenderHeight: 5,
        descenderHeight: 5,
        fontSize: 13,
        iconSize: 17,
        lineHeight: 19,
        letterSpacing: 0
      },
      {
        ascenderHeight: 6,
        descenderHeight: 6,
        fontSize: 16,
        iconSize: 25,
        lineHeight: 23,
        letterSpacing: 0
      },
      {
        ascenderHeight: 7,
        descenderHeight: 7,
        fontSize: 21,
        iconSize: 33,
        lineHeight: 29,
        letterSpacing: 0
      },
      {
        ascenderHeight: 8,
        descenderHeight: 8,
        fontSize: 27,
        iconSize: 41,
        lineHeight: 35,
        letterSpacing: 0
      },
      {
        ascenderHeight: 9.5,
        descenderHeight: 8.5,
        fontSize: 33,
        iconSize: 49,
        lineHeight: 41,
        letterSpacing: 0
      },
      {
        ascenderHeight: 10.5,
        descenderHeight: 9.5,
        fontSize: 38,
        iconSize: 53,
        lineHeight: 47,
        letterSpacing: 0
      }
    ]
  },
  label: {
    family: 'Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", "Liberation Sans", system-ui, sans-serif',
    weights: {
      regular: 600,
      medium: 700,
      semibold: 800,
      bold: 900
    },
    sizes: [
      {
        ascenderHeight: 2,
        descenderHeight: 2,
        fontSize: 8.1,
        iconSize: 13,
        lineHeight: 10,
        letterSpacing: 0.5
      },
      {
        ascenderHeight: 2,
        descenderHeight: 2,
        fontSize: 9.5,
        iconSize: 15,
        lineHeight: 11,
        letterSpacing: 0.5
      },
      {
        ascenderHeight: 2,
        descenderHeight: 2,
        fontSize: 10.8,
        iconSize: 17,
        lineHeight: 12,
        letterSpacing: 0.5
      },
      {
        ascenderHeight: 2,
        descenderHeight: 2,
        fontSize: 12.25,
        iconSize: 19,
        lineHeight: 13,
        letterSpacing: 0.5
      },
      {
        ascenderHeight: 2,
        descenderHeight: 2,
        fontSize: 13.6,
        iconSize: 21,
        lineHeight: 14,
        letterSpacing: 0.5
      },
      {
        ascenderHeight: 2,
        descenderHeight: 2,
        fontSize: 15,
        iconSize: 23,
        lineHeight: 15,
        letterSpacing: 0.5
      }
    ]
  },
  text: {
    family: 'Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", "Liberation Sans", Helvetica, Arial, system-ui, sans-serif',
    weights: {
      regular: 400,
      medium: 500,
      semibold: 600,
      bold: 700
    },
    sizes: [
      {
        ascenderHeight: 4,
        descenderHeight: 4,
        fontSize: 10,
        iconSize: 17,
        lineHeight: 15,
        letterSpacing: 0
      },
      {
        ascenderHeight: 5,
        descenderHeight: 5,
        fontSize: 13,
        iconSize: 21,
        lineHeight: 19,
        letterSpacing: 0
      },
      {
        ascenderHeight: 6,
        descenderHeight: 6,
        fontSize: 15,
        iconSize: 25,
        lineHeight: 23,
        letterSpacing: 0
      },
      {
        ascenderHeight: 7,
        descenderHeight: 7,
        fontSize: 18,
        iconSize: 29,
        lineHeight: 27,
        letterSpacing: 0
      },
      {
        ascenderHeight: 8,
        descenderHeight: 8,
        fontSize: 21,
        iconSize: 33,
        lineHeight: 31,
        letterSpacing: 0
      }
    ]
  }
};
function is_v2(themeProp) {
  return themeProp._version === 2;
}
var cache$2 = /* @__PURE__ */ new WeakMap();
function v0_v2(v0) {
  if (v0.v2)
    return v0.v2;
  const cached_v2 = cache$2.get(v0);
  if (cached_v2)
    return cached_v2;
  const {
    avatar,
    button,
    color: color22,
    container,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    focusRing: _unused_focusRing,
    fonts: font,
    input,
    layer,
    media,
    radius,
    shadows: shadow,
    space,
    styles: style
  } = v0, v2 = {
    _version: 2,
    avatar: {
      ...defaultThemeConfig.avatar,
      ...avatar
    },
    button: {
      ...defaultThemeConfig.button,
      ...button
    },
    card: defaultThemeConfig.card,
    color: {
      light: {
        transparent: themeColor_v0_v2(color22.light.transparent),
        default: themeColor_v0_v2(color22.light.default),
        primary: themeColor_v0_v2(color22.light.primary),
        positive: themeColor_v0_v2(color22.light.positive),
        caution: themeColor_v0_v2(color22.light.caution),
        critical: themeColor_v0_v2(color22.light.critical)
      },
      dark: {
        transparent: themeColor_v0_v2(color22.dark.transparent),
        default: themeColor_v0_v2(color22.dark.default),
        primary: themeColor_v0_v2(color22.dark.primary),
        positive: themeColor_v0_v2(color22.dark.positive),
        caution: themeColor_v0_v2(color22.dark.caution),
        critical: themeColor_v0_v2(color22.dark.critical)
      }
    },
    container,
    font,
    input: {
      ...defaultThemeConfig.input,
      ...input,
      checkbox: {
        ...defaultThemeConfig.input.checkbox,
        ...input.checkbox
      },
      radio: {
        ...defaultThemeConfig.input.radio,
        ...input.radio
      },
      switch: {
        ...defaultThemeConfig.input.switch,
        ...input.switch
      }
    },
    layer: layer ?? defaultThemeConfig.layer,
    media,
    radius,
    shadow,
    space,
    style
  };
  return cache$2.set(v0, v2), v2;
}
var cache$12 = /* @__PURE__ */ new WeakMap();
function v2_v0(v2) {
  const cachedTheme = cache$12.get(v2);
  if (cachedTheme)
    return cachedTheme;
  const {
    avatar,
    button,
    color: color22,
    container,
    font: fonts,
    input,
    media,
    radius,
    shadow: shadows,
    space,
    style: styles
  } = v2;
  return {
    _version: 0,
    avatar,
    button,
    container,
    color: {
      light: {
        transparent: themeColor_v2_v0(color22.light.transparent),
        default: themeColor_v2_v0(color22.light.default),
        primary: themeColor_v2_v0(color22.light.primary),
        positive: themeColor_v2_v0(color22.light.positive),
        caution: themeColor_v2_v0(color22.light.caution),
        critical: themeColor_v2_v0(color22.light.critical)
      },
      dark: {
        transparent: themeColor_v2_v0(color22.dark.transparent),
        default: themeColor_v2_v0(color22.dark.default),
        primary: themeColor_v2_v0(color22.dark.primary),
        positive: themeColor_v2_v0(color22.dark.positive),
        caution: themeColor_v2_v0(color22.dark.caution),
        critical: themeColor_v2_v0(color22.dark.critical)
      }
    },
    focusRing: input.text.focusRing,
    fonts,
    input,
    media,
    radius,
    shadows,
    space,
    styles,
    v2
  };
}
function themeColor_v2_v0(color_v2) {
  return {
    base: {
      bg: color_v2.bg,
      fg: color_v2.fg,
      border: color_v2.border,
      focusRing: color_v2.focusRing,
      shadow: color_v2.shadow
    },
    button: color_v2.button,
    card: color_v2.selectable.default,
    dark: color_v2._dark,
    input: {
      default: inputStatesThemeColor_v2_v0(color_v2.input.default),
      invalid: inputStatesThemeColor_v2_v0(color_v2.input.invalid)
    },
    muted: {
      ...color_v2.button.ghost,
      transparent: color_v2.button.ghost.default
    },
    solid: {
      ...color_v2.button.default,
      transparent: color_v2.button.default.default
    },
    selectable: color_v2.selectable,
    spot: {
      gray: color_v2.avatar.gray.bg,
      blue: color_v2.avatar.blue.bg,
      purple: color_v2.avatar.purple.bg,
      magenta: color_v2.avatar.magenta.bg,
      red: color_v2.avatar.red.bg,
      orange: color_v2.avatar.orange.bg,
      yellow: color_v2.avatar.yellow.bg,
      green: color_v2.avatar.green.bg,
      cyan: color_v2.avatar.cyan.bg
    },
    syntax: color_v2.syntax
  };
}
function inputStatesThemeColor_v2_v0(t) {
  return {
    enabled: inputStateThemeColor_v2_v0(t.enabled),
    disabled: inputStateThemeColor_v2_v0(t.disabled),
    readOnly: inputStateThemeColor_v2_v0(t.readOnly),
    hovered: inputStateThemeColor_v2_v0(t.hovered)
  };
}
function inputStateThemeColor_v2_v0(t) {
  return {
    bg: t.bg,
    bg2: t.muted.bg,
    border: t.border,
    fg: t.fg,
    placeholder: t.placeholder
  };
}
var THEME_COLOR_BLEND_MODES = ["multiply", "screen"];
var THEME_COLOR_CARD_TONES = [
  "transparent",
  "default",
  "primary",
  "positive",
  "caution",
  "critical"
];
var THEME_COLOR_STATE_TONES = [
  "default",
  "primary",
  "positive",
  "caution",
  "critical"
];
var THEME_COLOR_STATES = ["enabled", "hovered", "pressed", "selected", "disabled"];
var THEME_COLOR_BUTTON_MODES = ["default", "ghost", "bleed"];
var THEME_COLOR_INPUT_MODES = ["default", "invalid"];
var THEME_COLOR_INPUT_STATES = ["enabled", "hovered", "readOnly", "disabled"];
var THEME_COLOR_AVATAR_COLORS = COLOR_HUES;
function isColorBlendModeValue(str) {
  return THEME_COLOR_BLEND_MODES.includes(str);
}
function isColorHueKey(str) {
  return COLOR_HUES.includes(str);
}
function isColorTintKey(str) {
  return COLOR_TINTS.includes(str);
}
var COLOR_CONFIG_STATE_KEYS = [
  "_hue",
  "bg",
  "fg",
  "border",
  "focusRing",
  "muted/fg",
  "accent/fg",
  "link/fg",
  "code/bg",
  "code/fg",
  "skeleton/from",
  "skeleton/to",
  "status/dot",
  "status/icon"
];
var COLOR_CONFIG_CARD_KEYS = [
  ...COLOR_CONFIG_STATE_KEYS,
  "_hue",
  "bg",
  "fg",
  "border",
  "focusRing",
  "shadow/outline",
  "shadow/umbra",
  "shadow/penumbra",
  "shadow/ambient"
];
var COLOR_CONFIG_AVATAR_COLORS = ["*", ...THEME_COLOR_AVATAR_COLORS];
var COLOR_CONFIG_CARD_TONES = ["*", ...THEME_COLOR_CARD_TONES];
var COLOR_CONFIG_STATE_TONES = ["*", ...THEME_COLOR_STATE_TONES];
var COLOR_CONFIG_STATES = ["*", ...THEME_COLOR_STATES];
var COLOR_CONFIG_INPUT_MODES = ["*", ...THEME_COLOR_INPUT_MODES];
var COLOR_CONFIG_INPUT_STATES = ["*", ...THEME_COLOR_INPUT_STATES];
function isColorMixPercentValue(str) {
  return /^\d+%$/.test(str);
}
function parseTokenValue(str) {
  const segments = str.split("/");
  let nextSegment = segments.shift() || "";
  const [segment0, segment0mix] = nextSegment.split(" ");
  if (isColorTintKey(segment0)) {
    const tint = segment0, segment1 = segments.shift() || "";
    if (isColorMixPercentValue(segment0mix)) {
      const mix22 = Number(segment0mix.slice(0, -1)) / 100;
      return {
        type: "color",
        tint,
        mix: mix22
      };
    }
    if (isColorOpacityValue(segment1)) {
      const opacity = Number(segment1);
      return {
        type: "color",
        tint,
        opacity
      };
    }
    return {
      type: "color",
      tint
    };
  }
  if (isColorValue(segment0)) {
    const key2 = segment0, segment1 = segments.shift() || "";
    if (isColorMixPercentValue(segment0mix)) {
      const mix22 = Number(segment0mix.slice(0, -1)) / 100;
      return {
        type: "color",
        key: key2,
        mix: mix22
      };
    }
    if (isColorOpacityValue(segment1)) {
      const opacity = Number(segment1);
      return {
        type: "color",
        key: key2,
        opacity
      };
    }
    return {
      type: "color",
      key: key2
    };
  }
  if (isColorHueKey(segment0)) {
    const hue = segment0;
    nextSegment = segments.shift() || "";
    const [segment1, segment1mix] = nextSegment.split(" ");
    if (isColorTintKey(segment1)) {
      const tint = segment1, segment2 = segments.shift() || "";
      if (isColorMixPercentValue(segment1mix)) {
        const mix22 = Number(segment1mix.slice(0, -1)) / 100;
        return {
          type: "color",
          hue,
          tint,
          mix: mix22
        };
      }
      if (isColorOpacityValue(segment2)) {
        const opacity = Number(segment2);
        return {
          type: "color",
          hue,
          tint,
          opacity
        };
      }
      return {
        type: "color",
        hue,
        tint
      };
    }
    return {
      type: "hue",
      value: hue
    };
  }
  if (isColorBlendModeValue(segment0))
    return {
      type: "blendMode",
      value: segment0
    };
}
function isColorValue(str) {
  return str === "black" || str === "white";
}
function isColorOpacityValue(str) {
  return str === "0" || /^0\.[0-9]+$/.test(str) || str === "1";
}
function compileColorTokenValue(node2) {
  let key2 = "";
  return node2.key === "black" || node2.key === "white" ? key2 = node2.key : key2 = `${node2.hue}/${node2.tint}`, node2.mix !== void 0 ? `${key2} ${node2.mix * 100}%` : (node2.opacity !== void 0 && (key2 += `/${node2.opacity}`), key2);
}
var DEFAULT_COLOR_TOKEN_VALUE = ["500", "500"];
function resolveColorTokenValue(context, value = DEFAULT_COLOR_TOKEN_VALUE) {
  const { hue, scheme } = context, node2 = parseTokenValue(value[scheme === "light" ? 0 : 1]);
  if (!node2 || node2.type !== "color")
    throw new Error(`Invalid color token: ${value[0]}`);
  return compileColorTokenValue({ ...node2, hue: node2.hue || hue });
}
var defaultColorTokens = {
  base: {
    "*": {
      _blend: ["multiply", "screen"],
      accent: {
        fg: ["purple/600", "purple/400"]
      },
      avatar: {
        "*": {
          _blend: ["screen", "multiply"],
          bg: ["500", "400"],
          fg: ["white", "black"]
        }
      },
      backdrop: ["gray/200/0.5", "black/0.5"],
      badge: {
        "*": {
          bg: ["100", "900"],
          fg: ["600", "400"],
          icon: ["500", "500"],
          dot: ["500", "500"]
        },
        positive: {
          bg: ["200 50%", "900"],
          fg: ["600", "500"]
        },
        caution: {
          bg: ["200 50%", "900"],
          fg: ["600", "500"]
        }
      },
      bg: ["50", "950"],
      border: ["200", "800"],
      code: {
        bg: ["50", "950"],
        fg: ["600", "400"]
      },
      fg: ["800", "200"],
      focusRing: ["blue/500", "blue/500"],
      icon: ["600", "400"],
      kbd: {
        bg: ["white", "black"],
        fg: ["600", "400"],
        border: ["200", "800"]
      },
      link: {
        fg: ["blue/600", "blue/300"]
      },
      muted: {
        bg: ["50", "950"],
        fg: ["700 75%", "300 75%"]
      },
      shadow: {
        outline: ["500/0.3", "500/0.4"],
        umbra: ["gray/500/0.1", "black/0.2"],
        penumbra: ["gray/500/0.07", "black/0.14"],
        ambient: ["gray/500/0.06", "black/0.12"]
      },
      skeleton: {
        from: ["100", "900"],
        to: ["100 50%", "900 50%"]
      }
    },
    transparent: {
      bg: ["50", "black"]
    },
    default: {
      bg: ["white", "950"],
      fg: ["800", "200"],
      muted: {
        fg: ["600", "400"]
      }
    },
    primary: { _hue: "blue" },
    positive: {
      _hue: "green",
      shadow: { outline: ["500/0.4", "500/0.4"] }
    },
    caution: {
      _hue: "yellow",
      shadow: { outline: ["600/0.3", "500/0.4"] }
    },
    critical: { _hue: "red" }
  },
  button: {
    default: {
      "*": {
        "*": {
          _blend: ["screen", "multiply"],
          accent: {
            fg: ["purple/300", "purple/700"]
          },
          avatar: {
            "*": {
              _blend: ["screen", "multiply"],
              bg: ["500", "400"],
              fg: ["white", "black"]
            }
          },
          badge: {
            "*": {
              bg: ["900", "100"],
              fg: ["400", "600"],
              dot: ["500", "500"],
              icon: ["500", "500"]
            }
          },
          bg: ["500", "400"],
          border: ["500/0", "400/0"],
          code: {
            bg: ["500 20%", "400 20%"],
            fg: ["200", "600"]
          },
          fg: ["white", "black"],
          icon: ["100 70%", "900 70%"],
          kbd: {
            bg: ["black", "white"],
            fg: ["200", "600"],
            border: ["800", "200"]
          },
          link: {
            fg: ["blue/200", "blue/600"]
          },
          muted: {
            bg: ["950", "50"],
            fg: ["100 70%", "900 70%"]
          },
          skeleton: {
            from: ["900", "100"],
            to: ["900 50%", "100 50%"]
          }
        },
        hovered: {
          bg: ["700", "300"],
          border: ["700/0", "300/0"]
        },
        pressed: {
          bg: ["700", "300"]
        },
        selected: {
          bg: ["700", "300"]
        },
        disabled: {
          _hue: "gray",
          accent: {
            fg: ["100 70%", "900 70%"]
          },
          avatar: {
            "*": {
              _blend: ["screen", "multiply"],
              bg: ["gray/500", "gray/400"],
              fg: ["white", "black"]
            }
          },
          badge: {
            "*": {
              bg: ["gray/700", "gray/300"],
              fg: ["white", "black"],
              dot: ["white", "black"],
              icon: ["white", "black"]
            }
          },
          bg: ["300", "600"],
          code: {
            bg: ["950", "50"],
            fg: ["300", "600"]
          },
          fg: ["300", "600"],
          muted: {
            bg: ["950", "50"],
            fg: ["300", "600"]
          },
          kbd: {
            bg: ["black", "white"],
            fg: ["white", "black"],
            border: ["700", "300"]
          },
          link: {
            fg: ["100 70%", "900 70%"]
          }
        }
      },
      default: {
        "*": {
          avatar: {
            "*": {
              _blend: ["screen", "multiply"],
              bg: ["500", "400"],
              fg: ["white", "black"]
            }
          },
          bg: ["800", "200"],
          muted: {
            bg: ["950", "50"],
            fg: ["400", "600"]
          }
        },
        hovered: {
          bg: ["900", "100"]
        },
        pressed: {
          bg: ["black", "white"]
        },
        selected: {
          bg: ["black", "white"]
        }
      }
    },
    ghost: {
      "*": {
        "*": {
          _blend: ["multiply", "screen"],
          accent: {
            fg: ["purple/700 60%", "purple/300 70%"]
          },
          avatar: {
            "*": {
              _blend: ["screen", "multiply"],
              bg: ["500", "400"],
              fg: ["white", "black"]
            }
          },
          badge: {
            "*": {
              bg: ["100", "900"],
              fg: ["600", "400"],
              dot: ["500", "500"],
              icon: ["500", "500"]
            }
          },
          bg: ["50", "950"],
          border: ["100", "900"],
          code: {
            bg: ["500 10%", "400 10%"],
            fg: ["700 60%", "400 60%"]
          },
          fg: ["600", "400"],
          icon: ["700 60%", "300 60%"],
          kbd: {
            bg: ["white", "black"],
            fg: ["600", "400"],
            border: ["200", "800"]
          },
          link: {
            fg: ["blue/700 60%", "blue/300 60%"]
          },
          muted: {
            bg: ["100", "950"],
            fg: ["700 60%", "300 60%"]
          },
          skeleton: {
            from: ["100", "900"],
            to: ["100 50%", "900 50%"]
          }
        },
        hovered: {
          bg: ["100", "900"],
          fg: ["700", "300"]
        },
        pressed: {
          bg: ["100", "900"],
          fg: ["800", "200"]
        },
        selected: {
          bg: ["100", "900"],
          fg: ["800", "200"]
        },
        disabled: {
          _hue: "gray",
          accent: {
            fg: ["200", "800"]
          },
          avatar: {
            "*": {
              _blend: ["screen", "multiply"],
              bg: ["gray/100", "gray/900"],
              fg: ["white", "black"]
            }
          },
          badge: {
            "*": {
              _hue: "gray",
              bg: ["50", "950"],
              fg: ["gray/200", "gray/800"],
              dot: ["gray/200", "gray/800"],
              icon: ["gray/200", "gray/800"]
            }
          },
          border: ["100", "900"],
          code: {
            bg: ["50", "950"],
            fg: ["200", "800"]
          },
          fg: ["400", "600"],
          icon: ["300", "700"],
          muted: {
            fg: ["300", "700"]
          },
          kbd: {
            bg: ["white", "black"],
            fg: ["200", "800"],
            border: ["100", "900"]
          },
          link: {
            fg: ["200", "800"]
          }
        }
      },
      positive: {
        "*": {
          border: ["600 20%", "800"]
        }
      },
      caution: {
        "*": {
          border: ["600 20%", "800"]
        }
      }
    },
    bleed: {
      "*": {
        "*": {
          _blend: ["multiply", "screen"],
          accent: {
            fg: ["purple/700 70%", "purple/300 70%"]
          },
          avatar: {
            "*": {
              _blend: ["screen", "multiply"],
              bg: ["500", "400"],
              fg: ["white", "black"]
            }
          },
          badge: {
            "*": {
              bg: ["100", "900"],
              fg: ["600", "400"],
              dot: ["500", "500"],
              icon: ["500", "500"]
            }
          },
          bg: ["white", "black"],
          border: ["white/0", "black/0"],
          code: {
            bg: ["50", "950"],
            fg: ["700 75%", "300 75%"]
          },
          fg: ["700", "300"],
          icon: ["700 75%", "300 75%"],
          kbd: {
            bg: ["white", "black"],
            fg: ["700", "300"],
            border: ["200", "800"]
          },
          link: {
            fg: ["blue/700 70%", "blue/300 70%"]
          },
          muted: {
            bg: ["100", "950"],
            fg: ["700 75%", "300 75%"]
          },
          skeleton: {
            from: ["100", "900"],
            to: ["100 50%", "900 50%"]
          }
        },
        hovered: {
          bg: ["50", "950"],
          icon: ["700 70%", "400 70%"]
        },
        pressed: {
          bg: ["100", "900"],
          fg: ["800", "200"],
          icon: ["800 70%", "200 70%"]
        },
        selected: {
          bg: ["100", "900"],
          fg: ["800", "200"],
          icon: ["800 60%", "200 60%"]
        },
        disabled: {
          _hue: "gray",
          accent: {
            fg: ["200", "800"]
          },
          avatar: {
            "*": {
              _blend: ["screen", "multiply"],
              bg: ["gray/100", "gray/900"],
              fg: ["white", "black"]
            }
          },
          badge: {
            "*": {
              _hue: "gray",
              bg: ["50", "950"],
              fg: ["gray/200", "gray/800"],
              dot: ["gray/200", "gray/800"],
              icon: ["gray/200", "gray/800"]
            }
          },
          code: {
            bg: ["50", "950"],
            fg: ["200", "800"]
          },
          fg: ["400", "600"],
          icon: ["300", "700"],
          muted: {
            fg: ["400", "600"]
          },
          kbd: {
            bg: ["white", "black"],
            fg: ["200", "800"],
            border: ["100", "900"]
          },
          link: {
            fg: ["200", "800"]
          }
        }
      }
    }
  },
  input: {
    "*": {
      "*": {
        _blend: ["multiply", "screen"],
        bg: ["white", "black"],
        border: ["200", "800"],
        fg: ["black", "200"],
        muted: {
          bg: ["50", "950"]
        },
        placeholder: ["400", "600"]
      },
      hovered: {
        border: ["300", "700"]
      },
      readOnly: {
        bg: ["50", "950"],
        border: ["200", "800"],
        fg: ["800", "200"]
      },
      disabled: {
        fg: ["400", "600"],
        border: ["100", "900"],
        placeholder: ["200", "800 50%"]
      }
    },
    invalid: {
      "*": {
        _hue: "red",
        bg: ["100", "950"]
      }
    }
  },
  selectable: {
    "*": {
      "*": {
        _blend: ["multiply", "screen"],
        accent: {
          fg: ["purple/700 70%", "purple/300 70%"]
        },
        avatar: {
          "*": {
            _blend: ["screen", "multiply"],
            bg: ["500", "400"],
            fg: ["white", "black"]
          }
        },
        badge: {
          "*": {
            bg: ["100", "900"],
            fg: ["600", "400"],
            dot: ["500", "500"],
            icon: ["500", "500"]
          }
        },
        bg: ["white", "black"],
        border: ["200", "800"],
        code: {
          bg: ["50", "950"],
          fg: ["600", "400"]
        },
        fg: ["700", "300"],
        icon: ["700 75%", "300 75%"],
        kbd: {
          bg: ["white", "black"],
          fg: ["600", "400"],
          border: ["200", "800"]
        },
        link: {
          fg: ["blue/700 70%", "blue/300 70%"]
        },
        muted: {
          bg: ["50", "950"],
          fg: ["700 75%", "300 75%"]
        },
        skeleton: {
          from: ["100", "900"],
          to: ["100 50%", "900 50%"]
        }
      },
      hovered: {
        bg: ["50", "950"]
      },
      pressed: {
        bg: ["100", "900"]
      },
      selected: {
        _blend: ["screen", "multiply"],
        accent: {
          fg: ["purple/300", "purple/700"]
        },
        avatar: {
          "*": {
            _blend: ["multiply", "screen"],
            bg: ["white", "black"],
            fg: ["black", "white"]
          }
        },
        badge: {
          "*": {
            bg: ["900", "100"],
            fg: ["400", "600"],
            dot: ["500", "500"],
            icon: ["500", "500"]
          }
        },
        bg: ["500", "400"],
        border: ["500 20%", "400 20%"],
        code: {
          bg: ["500 20%", "400 20%"],
          fg: ["200", "600"]
        },
        fg: ["white", "black"],
        icon: ["100 70%", "900 70%"],
        kbd: {
          bg: ["black", "white"],
          fg: ["200", "600"],
          border: ["800", "200"]
        },
        link: {
          fg: ["blue/200", "blue/600"]
        },
        muted: {
          bg: ["500 10%", "400 10%"],
          fg: ["100 70%", "900 70%"]
        },
        skeleton: {
          from: ["900", "100"],
          to: ["900 50%", "100 50%"]
        }
      },
      disabled: {
        _hue: "gray",
        accent: {
          fg: ["200", "800"]
        },
        avatar: {
          "*": {
            _blend: ["screen", "multiply"],
            bg: ["gray/100", "gray/900"],
            fg: ["white", "black"]
          }
        },
        badge: {
          "*": {
            _hue: "gray",
            bg: ["50", "950"],
            fg: ["gray/200", "gray/800"],
            dot: ["gray/200", "gray/800"],
            icon: ["gray/200", "gray/800"]
          }
        },
        border: ["100", "900"],
        code: {
          bg: ["50", "950"],
          fg: ["200", "800"]
        },
        fg: ["200", "800"],
        icon: ["200", "800"],
        kbd: {
          bg: ["white", "black"],
          fg: ["200", "800"],
          border: ["100", "900"]
        },
        link: {
          fg: ["200", "800"]
        },
        muted: {
          bg: ["50 50%", "950 50%"],
          fg: ["200", "800"]
        }
      }
    },
    default: {
      selected: {
        _hue: "blue"
      }
    },
    critical: {
      disabled: {
        bg: ["50 50%", "950 50%"]
      }
    }
  },
  syntax: {
    atrule: ["purple/600", "purple/400"],
    attrName: ["green/600", "green/400"],
    attrValue: ["yellow/600", "yellow/400"],
    attribute: ["yellow/600", "yellow/400"],
    boolean: ["purple/600", "purple/400"],
    builtin: ["purple/600", "purple/400"],
    cdata: ["yellow/600", "yellow/400"],
    char: ["yellow/600", "yellow/400"],
    class: ["orange/600", "orange/400"],
    className: ["cyan/600", "cyan/400"],
    comment: ["gray/400", "gray/600"],
    constant: ["purple/600", "purple/400"],
    deleted: ["red/600", "red/400"],
    entity: ["red/600", "red/400"],
    function: ["green/600", "green/400"],
    hexcode: ["blue/600", "blue/400"],
    id: ["purple/600", "purple/400"],
    important: ["purple/600", "purple/400"],
    inserted: ["yellow/600", "yellow/400"],
    keyword: ["magenta/600", "magenta/400"],
    number: ["purple/600", "purple/400"],
    operator: ["magenta/600", "magenta/400"],
    property: ["blue/600", "blue/400"],
    pseudoClass: ["yellow/600", "yellow/400"],
    pseudoElement: ["yellow/600", "yellow/400"],
    punctuation: ["gray/600", "gray/400"],
    regex: ["blue/600", "blue/400"],
    selector: ["red/600", "red/400"],
    string: ["yellow/600", "yellow/400"],
    symbol: ["purple/600", "purple/400"],
    tag: ["red/600", "red/400"],
    unit: ["orange/600", "orange/400"],
    url: ["red/600", "red/400"],
    variable: ["red/600", "red/400"]
  }
};
function isRecord(value) {
  return !!(value && typeof value == "object" && !Array.isArray(value));
}
function merge(...records) {
  const _records = records.filter(Boolean);
  return _records.length === 0 ? {} : _records.reduce(_merge, {});
}
function _merge(acc, source) {
  for (const key2 of Object.keys(source)) {
    const prevValue = acc[key2], nextValue = source[key2];
    isRecord(prevValue) && isRecord(nextValue) ? acc[key2] = merge(prevValue, nextValue) : acc[key2] = nextValue;
  }
  return acc;
}
function resolveColorTokens(inputTokens) {
  const tokens = merge(defaultColorTokens, inputTokens);
  return {
    base: resolveBaseColorTokens(tokens),
    button: resolveButtonColorTokens(tokens),
    input: resolveInputColorTokens(tokens),
    selectable: resolveSelectableColorTokens(tokens),
    syntax: tokens.syntax
  };
}
function resolveBaseColorTokens(sparseTokens) {
  const tokens = {};
  for (const tone of THEME_COLOR_CARD_TONES)
    tokens[tone] = resolveBaseColorTones(sparseTokens, tone);
  return tokens;
}
function resolveBaseColorTones(inputTokens, tone) {
  var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, _L, _M, _N, _O, _P;
  const spec = merge((_a = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _a["*"], (_b = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _b[tone]), hue = spec._hue || ((_d = (_c = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _c[tone]) == null ? void 0 : _d._hue) || "gray";
  return {
    ...spec,
    _hue: hue,
    avatar: {
      gray: merge({ _hue: "gray" }, (_e2 = spec.avatar) == null ? void 0 : _e2["*"], (_f = spec.avatar) == null ? void 0 : _f.gray),
      blue: merge({ _hue: "blue" }, (_g = spec.avatar) == null ? void 0 : _g["*"], (_h = spec.avatar) == null ? void 0 : _h.blue),
      purple: merge({ _hue: "purple" }, (_i = spec.avatar) == null ? void 0 : _i["*"], (_j = spec.avatar) == null ? void 0 : _j.purple),
      magenta: merge({ _hue: "magenta" }, (_k = spec.avatar) == null ? void 0 : _k["*"], (_l = spec.avatar) == null ? void 0 : _l.magenta),
      red: merge({ _hue: "red" }, (_m = spec.avatar) == null ? void 0 : _m["*"], (_n = spec.avatar) == null ? void 0 : _n.red),
      orange: merge({ _hue: "orange" }, (_o = spec.avatar) == null ? void 0 : _o["*"], (_p = spec.avatar) == null ? void 0 : _p.orange),
      yellow: merge({ _hue: "yellow" }, (_q = spec.avatar) == null ? void 0 : _q["*"], (_r = spec.avatar) == null ? void 0 : _r.yellow),
      green: merge({ _hue: "green" }, (_s = spec.avatar) == null ? void 0 : _s["*"], (_t = spec.avatar) == null ? void 0 : _t.green),
      cyan: merge({ _hue: "cyan" }, (_u = spec.avatar) == null ? void 0 : _u["*"], (_v = spec.avatar) == null ? void 0 : _v.cyan)
    },
    badge: {
      default: {
        _hue: ((_x = (_w = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _w.default) == null ? void 0 : _x._hue) || hue,
        ...(_y = spec.badge) == null ? void 0 : _y["*"],
        ...(_z = spec.badge) == null ? void 0 : _z.default
      },
      primary: {
        _hue: ((_B = (_A = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _A.primary) == null ? void 0 : _B._hue) || hue,
        ...(_C = spec.badge) == null ? void 0 : _C["*"],
        ...(_D = spec.badge) == null ? void 0 : _D.primary
      },
      positive: {
        _hue: ((_F = (_E = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _E.positive) == null ? void 0 : _F._hue) || hue,
        ...(_G = spec.badge) == null ? void 0 : _G["*"],
        ...(_H = spec.badge) == null ? void 0 : _H.positive
      },
      caution: {
        _hue: ((_J = (_I = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _I.caution) == null ? void 0 : _J._hue) || hue,
        ...(_K = spec.badge) == null ? void 0 : _K["*"],
        ...(_L = spec.badge) == null ? void 0 : _L.caution
      },
      critical: {
        _hue: ((_N = (_M = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _M.critical) == null ? void 0 : _N._hue) || hue,
        ...(_O = spec.badge) == null ? void 0 : _O["*"],
        ...(_P = spec.badge) == null ? void 0 : _P.critical
      }
    }
  };
}
function resolveButtonColorTokens(inputTokens) {
  const tokens = {};
  for (const mode of THEME_COLOR_BUTTON_MODES)
    tokens[mode] = resolveButtonToneColorTokens(inputTokens, mode);
  return tokens;
}
function resolveButtonToneColorTokens(inputTokens, mode) {
  const tokens = {};
  for (const tone of THEME_COLOR_STATE_TONES)
    tokens[tone] = resolveButtonModeColorTokens(inputTokens, mode, tone);
  return tokens;
}
function resolveButtonModeColorTokens(inputTokens, mode, tone) {
  const tokens = {};
  for (const state of THEME_COLOR_STATES)
    tokens[state] = resolveButtonStateColorTokens(inputTokens, tone, mode, state);
  return tokens;
}
function resolveButtonStateColorTokens(inputTokens, tone, mode, state) {
  var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, _L, _M, _N, _O, _P, _Q, _R, _S, _T, _U, _V, _W, _X, _Y, _Z;
  const spec = merge(
    (_c = (_b = (_a = inputTokens == null ? void 0 : inputTokens.button) == null ? void 0 : _a[mode]) == null ? void 0 : _b["*"]) == null ? void 0 : _c["*"],
    (_f = (_e2 = (_d = inputTokens == null ? void 0 : inputTokens.button) == null ? void 0 : _d[mode]) == null ? void 0 : _e2[tone]) == null ? void 0 : _f["*"],
    (_i = (_h = (_g = inputTokens == null ? void 0 : inputTokens.button) == null ? void 0 : _g[mode]) == null ? void 0 : _h["*"]) == null ? void 0 : _i[state],
    (_l = (_k = (_j = inputTokens == null ? void 0 : inputTokens.button) == null ? void 0 : _j[mode]) == null ? void 0 : _k[tone]) == null ? void 0 : _l[state]
  ), hue = spec._hue || ((_n = (_m = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _m[tone]) == null ? void 0 : _n._hue);
  return {
    ...spec,
    _hue: hue,
    avatar: {
      gray: merge({ _hue: "gray" }, (_o = spec.avatar) == null ? void 0 : _o["*"], (_p = spec.avatar) == null ? void 0 : _p.gray),
      blue: merge({ _hue: "blue" }, (_q = spec.avatar) == null ? void 0 : _q["*"], (_r = spec.avatar) == null ? void 0 : _r.blue),
      purple: merge({ _hue: "purple" }, (_s = spec.avatar) == null ? void 0 : _s["*"], (_t = spec.avatar) == null ? void 0 : _t.purple),
      magenta: merge({ _hue: "magenta" }, (_u = spec.avatar) == null ? void 0 : _u["*"], (_v = spec.avatar) == null ? void 0 : _v.magenta),
      red: merge({ _hue: "red" }, (_w = spec.avatar) == null ? void 0 : _w["*"], (_x = spec.avatar) == null ? void 0 : _x.red),
      orange: merge({ _hue: "orange" }, (_y = spec.avatar) == null ? void 0 : _y["*"], (_z = spec.avatar) == null ? void 0 : _z.orange),
      yellow: merge({ _hue: "yellow" }, (_A = spec.avatar) == null ? void 0 : _A["*"], (_B = spec.avatar) == null ? void 0 : _B.yellow),
      green: merge({ _hue: "green" }, (_C = spec.avatar) == null ? void 0 : _C["*"], (_D = spec.avatar) == null ? void 0 : _D.green),
      cyan: merge({ _hue: "cyan" }, (_E = spec.avatar) == null ? void 0 : _E["*"], (_F = spec.avatar) == null ? void 0 : _F.cyan)
    },
    badge: {
      default: {
        _hue: (_H = (_G = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _G.default) == null ? void 0 : _H._hue,
        ...(_I = spec.badge) == null ? void 0 : _I["*"],
        ...(_J = spec.badge) == null ? void 0 : _J.default
      },
      primary: {
        _hue: (_L = (_K = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _K.primary) == null ? void 0 : _L._hue,
        ...(_M = spec.badge) == null ? void 0 : _M["*"],
        ...(_N = spec.badge) == null ? void 0 : _N.primary
      },
      positive: {
        _hue: (_P = (_O = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _O.positive) == null ? void 0 : _P._hue,
        ...(_Q = spec.badge) == null ? void 0 : _Q["*"],
        ...(_R = spec.badge) == null ? void 0 : _R.positive
      },
      caution: {
        _hue: (_T = (_S = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _S.caution) == null ? void 0 : _T._hue,
        ...(_U = spec.badge) == null ? void 0 : _U["*"],
        ...(_V = spec.badge) == null ? void 0 : _V.caution
      },
      critical: {
        _hue: (_X = (_W = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _W.critical) == null ? void 0 : _X._hue,
        ...(_Y = spec.badge) == null ? void 0 : _Y["*"],
        ...(_Z = spec.badge) == null ? void 0 : _Z.critical
      }
    }
  };
}
function resolveInputColorTokens(inputTokens) {
  const tokens = {};
  for (const mode of THEME_COLOR_INPUT_MODES)
    tokens[mode] = resolveInputModeColorTokens(inputTokens, mode);
  return tokens;
}
function resolveInputModeColorTokens(inputTokens, mode) {
  const states = {};
  for (const state of THEME_COLOR_INPUT_STATES)
    states[state] = resolveInputStateColorTokens(inputTokens, mode, state);
  return states;
}
function resolveInputStateColorTokens(inputTokens, mode, state) {
  var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j;
  const spec = merge(
    (_b = (_a = inputTokens == null ? void 0 : inputTokens.input) == null ? void 0 : _a["*"]) == null ? void 0 : _b["*"],
    (_d = (_c = inputTokens == null ? void 0 : inputTokens.input) == null ? void 0 : _c[mode]) == null ? void 0 : _d["*"],
    (_f = (_e2 = inputTokens == null ? void 0 : inputTokens.input) == null ? void 0 : _e2["*"]) == null ? void 0 : _f[state],
    (_h = (_g = inputTokens == null ? void 0 : inputTokens.input) == null ? void 0 : _g[mode]) == null ? void 0 : _h[state]
  ), hue = spec._hue || ((_j = (_i = inputTokens == null ? void 0 : inputTokens.input) == null ? void 0 : _i[mode]) == null ? void 0 : _j._hue);
  return { ...spec, _hue: hue };
}
function resolveSelectableColorTokens(inputTokens) {
  const tokens = {};
  for (const tone of THEME_COLOR_STATE_TONES)
    tokens[tone] = resolveSelectableToneColorTokens(inputTokens, tone);
  return tokens;
}
function resolveSelectableToneColorTokens(inputTokens, tone) {
  var _a, _b, _c, _d;
  const states = {
    _hue: ((_b = (_a = inputTokens == null ? void 0 : inputTokens.selectable) == null ? void 0 : _a[tone]) == null ? void 0 : _b._hue) || ((_d = (_c = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _c[tone]) == null ? void 0 : _d._hue)
  };
  for (const state of THEME_COLOR_STATES)
    states[state] = resolveSelectableStateColorTokens(inputTokens, tone, state);
  return states;
}
function resolveSelectableStateColorTokens(inputTokens, tone, state) {
  var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, _L, _M, _N, _O, _P, _Q, _R, _S, _T, _U, _V;
  const spec = merge(
    (_b = (_a = inputTokens == null ? void 0 : inputTokens.selectable) == null ? void 0 : _a["*"]) == null ? void 0 : _b["*"],
    (_d = (_c = inputTokens == null ? void 0 : inputTokens.selectable) == null ? void 0 : _c[tone]) == null ? void 0 : _d["*"],
    (_f = (_e2 = inputTokens == null ? void 0 : inputTokens.selectable) == null ? void 0 : _e2["*"]) == null ? void 0 : _f[state],
    (_h = (_g = inputTokens == null ? void 0 : inputTokens.selectable) == null ? void 0 : _g[tone]) == null ? void 0 : _h[state]
  ), hue = spec._hue || ((_j = (_i = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _i[tone]) == null ? void 0 : _j._hue);
  return {
    ...spec,
    _hue: hue,
    avatar: {
      gray: merge({ _hue: "gray" }, (_k = spec.avatar) == null ? void 0 : _k["*"], (_l = spec.avatar) == null ? void 0 : _l.gray),
      blue: merge({ _hue: "blue" }, (_m = spec.avatar) == null ? void 0 : _m["*"], (_n = spec.avatar) == null ? void 0 : _n.blue),
      purple: merge({ _hue: "purple" }, (_o = spec.avatar) == null ? void 0 : _o["*"], (_p = spec.avatar) == null ? void 0 : _p.purple),
      magenta: merge({ _hue: "magenta" }, (_q = spec.avatar) == null ? void 0 : _q["*"], (_r = spec.avatar) == null ? void 0 : _r.magenta),
      red: merge({ _hue: "red" }, (_s = spec.avatar) == null ? void 0 : _s["*"], (_t = spec.avatar) == null ? void 0 : _t.red),
      orange: merge({ _hue: "orange" }, (_u = spec.avatar) == null ? void 0 : _u["*"], (_v = spec.avatar) == null ? void 0 : _v.orange),
      yellow: merge({ _hue: "yellow" }, (_w = spec.avatar) == null ? void 0 : _w["*"], (_x = spec.avatar) == null ? void 0 : _x.yellow),
      green: merge({ _hue: "green" }, (_y = spec.avatar) == null ? void 0 : _y["*"], (_z = spec.avatar) == null ? void 0 : _z.green),
      cyan: merge({ _hue: "cyan" }, (_A = spec.avatar) == null ? void 0 : _A["*"], (_B = spec.avatar) == null ? void 0 : _B.cyan)
    },
    badge: {
      default: {
        _hue: (_D = (_C = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _C.default) == null ? void 0 : _D._hue,
        ...(_E = spec.badge) == null ? void 0 : _E["*"],
        ...(_F = spec.badge) == null ? void 0 : _F.default
      },
      primary: {
        _hue: (_H = (_G = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _G.primary) == null ? void 0 : _H._hue,
        ...(_I = spec.badge) == null ? void 0 : _I["*"],
        ...(_J = spec.badge) == null ? void 0 : _J.primary
      },
      positive: {
        _hue: (_L = (_K = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _K.positive) == null ? void 0 : _L._hue,
        ...(_M = spec.badge) == null ? void 0 : _M["*"],
        ...(_N = spec.badge) == null ? void 0 : _N.positive
      },
      caution: {
        _hue: (_P = (_O = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _O.caution) == null ? void 0 : _P._hue,
        ...(_Q = spec.badge) == null ? void 0 : _Q["*"],
        ...(_R = spec.badge) == null ? void 0 : _R.caution
      },
      critical: {
        _hue: (_T = (_S = inputTokens == null ? void 0 : inputTokens.base) == null ? void 0 : _S.critical) == null ? void 0 : _T._hue,
        ...(_U = spec.badge) == null ? void 0 : _U["*"],
        ...(_V = spec.badge) == null ? void 0 : _V.critical
      }
    }
  };
}
function buildColorTheme(config) {
  const resolvedConfig = {
    ...config,
    color: resolveColorTokens(config == null ? void 0 : config.color)
  };
  return {
    light: buildColorScheme({ scheme: "light" }, resolvedConfig),
    dark: buildColorScheme({ scheme: "dark" }, resolvedConfig)
  };
}
function buildColorScheme(options, config) {
  const { scheme } = options;
  return {
    transparent: buildCardColorTheme({ scheme, tone: "transparent" }, config),
    default: buildCardColorTheme({ scheme, tone: "default" }, config),
    primary: buildCardColorTheme({ scheme, tone: "primary" }, config),
    positive: buildCardColorTheme({ scheme, tone: "positive" }, config),
    caution: buildCardColorTheme({ scheme, tone: "caution" }, config),
    critical: buildCardColorTheme({ scheme, tone: "critical" }, config)
  };
}
function buildCardColorTheme(options, config) {
  var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m;
  const { scheme, tone } = options, tokens = (_b = (_a = config == null ? void 0 : config.color) == null ? void 0 : _a.base) == null ? void 0 : _b[tone], context = { hue: (tokens == null ? void 0 : tokens._hue) || "gray", scheme };
  return {
    _blend: ((tokens == null ? void 0 : tokens._blend) || ["multiply", "screen"])[scheme === "light" ? 0 : 1],
    _dark: scheme === "dark",
    accent: {
      fg: resolveColorTokenValue(context, (_c = tokens == null ? void 0 : tokens.accent) == null ? void 0 : _c.fg)
    },
    avatar: buildAvatarColorTheme({ scheme }, tokens),
    backdrop: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.backdrop),
    badge: buildBadgeColorTheme(tokens == null ? void 0 : tokens.badge, { scheme }, config),
    bg: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.bg),
    border: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.border),
    button: buildButtonColorTheme({ scheme }, config),
    code: {
      bg: resolveColorTokenValue(context, (_d = tokens == null ? void 0 : tokens.code) == null ? void 0 : _d.bg),
      fg: resolveColorTokenValue(context, (_e2 = tokens == null ? void 0 : tokens.code) == null ? void 0 : _e2.fg)
    },
    fg: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.fg),
    focusRing: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.focusRing),
    icon: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.icon),
    input: buildInputColorTheme({ scheme, tone }, config),
    kbd: {
      bg: resolveColorTokenValue(context, (_f = tokens == null ? void 0 : tokens.kbd) == null ? void 0 : _f.bg),
      fg: resolveColorTokenValue(context, (_g = tokens == null ? void 0 : tokens.kbd) == null ? void 0 : _g.fg),
      border: resolveColorTokenValue(context, (_h = tokens == null ? void 0 : tokens.kbd) == null ? void 0 : _h.border)
    },
    link: {
      fg: resolveColorTokenValue(context, (_i = tokens == null ? void 0 : tokens.link) == null ? void 0 : _i.fg)
    },
    muted: {
      bg: resolveColorTokenValue(context, (_j = tokens == null ? void 0 : tokens.muted) == null ? void 0 : _j.bg),
      fg: resolveColorTokenValue(context, (_k = tokens == null ? void 0 : tokens.muted) == null ? void 0 : _k.fg)
    },
    selectable: buildSelectableColorTheme({ scheme }, config),
    shadow: buildShadowColorTheme({ scheme, tone }, config),
    skeleton: {
      from: resolveColorTokenValue(context, (_l = tokens == null ? void 0 : tokens.skeleton) == null ? void 0 : _l.from),
      to: resolveColorTokenValue(context, (_m = tokens == null ? void 0 : tokens.skeleton) == null ? void 0 : _m.to)
    },
    syntax: buildSyntaxColorTheme({ scheme }, config)
  };
}
function buildShadowColorTheme(options, config) {
  var _a, _b, _c, _d, _e2, _f;
  const { scheme, tone } = options, tokens = (_b = (_a = config == null ? void 0 : config.color) == null ? void 0 : _a.base) == null ? void 0 : _b[tone], context = { hue: (tokens == null ? void 0 : tokens._hue) || "gray", scheme };
  return {
    outline: resolveColorTokenValue(context, (_c = tokens == null ? void 0 : tokens.shadow) == null ? void 0 : _c.outline),
    umbra: resolveColorTokenValue(context, (_d = tokens == null ? void 0 : tokens.shadow) == null ? void 0 : _d.umbra),
    penumbra: resolveColorTokenValue(context, (_e2 = tokens == null ? void 0 : tokens.shadow) == null ? void 0 : _e2.penumbra),
    ambient: resolveColorTokenValue(context, (_f = tokens == null ? void 0 : tokens.shadow) == null ? void 0 : _f.ambient)
  };
}
function buildAvatarColorTheme(options, stateTokens) {
  const { scheme } = options;
  return {
    gray: _buildAvatarColorTheme({ color: "gray", scheme }, stateTokens),
    blue: _buildAvatarColorTheme({ color: "blue", scheme }, stateTokens),
    purple: _buildAvatarColorTheme({ color: "purple", scheme }, stateTokens),
    magenta: _buildAvatarColorTheme({ color: "magenta", scheme }, stateTokens),
    red: _buildAvatarColorTheme({ color: "red", scheme }, stateTokens),
    orange: _buildAvatarColorTheme({ color: "orange", scheme }, stateTokens),
    yellow: _buildAvatarColorTheme({ color: "yellow", scheme }, stateTokens),
    green: _buildAvatarColorTheme({ color: "green", scheme }, stateTokens),
    cyan: _buildAvatarColorTheme({ color: "cyan", scheme }, stateTokens)
  };
}
function _buildAvatarColorTheme(options, stateTokens) {
  var _a;
  const { color: color22, scheme } = options, tokens = (_a = stateTokens == null ? void 0 : stateTokens.avatar) == null ? void 0 : _a[color22], context = { hue: (tokens == null ? void 0 : tokens._hue) || "gray", scheme };
  return {
    _blend: ((tokens == null ? void 0 : tokens._blend) || ["screen", "multiply"])[scheme === "light" ? 0 : 1],
    bg: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.bg),
    fg: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.fg)
  };
}
function buildBadgeColorTheme(tokens, options, config) {
  const { scheme } = options;
  return {
    default: _buildBadgeColorTheme(tokens, { scheme, tone: "default" }, config),
    primary: _buildBadgeColorTheme(tokens, { scheme, tone: "primary" }, config),
    positive: _buildBadgeColorTheme(tokens, { scheme, tone: "positive" }, config),
    caution: _buildBadgeColorTheme(tokens, { scheme, tone: "caution" }, config),
    critical: _buildBadgeColorTheme(tokens, { scheme, tone: "critical" }, config)
  };
}
function _buildBadgeColorTheme(parentTokens, options, config) {
  var _a, _b, _c;
  const { scheme, tone } = options, tokens = parentTokens == null ? void 0 : parentTokens[tone], context = { hue: (tokens == null ? void 0 : tokens._hue) || ((_c = (_b = (_a = config == null ? void 0 : config.color) == null ? void 0 : _a.base) == null ? void 0 : _b[tone]) == null ? void 0 : _c._hue) || "gray", scheme };
  return {
    bg: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.bg),
    fg: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.fg),
    dot: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.dot),
    icon: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.icon)
  };
}
function buildButtonColorTheme(options, config) {
  const { scheme } = options, modes = {};
  for (const mode of THEME_COLOR_BUTTON_MODES)
    modes[mode] = buildButtonTonesColorTheme({ scheme, mode }, config);
  return modes;
}
function buildButtonTonesColorTheme(options, config) {
  const { mode, scheme } = options, tones2 = {};
  for (const tone of THEME_COLOR_STATE_TONES)
    tones2[tone] = buildButtonStatesColorTheme({ mode, scheme, tone }, config);
  return tones2;
}
function buildButtonStatesColorTheme(options, config) {
  const { mode, scheme, tone } = options, states = {};
  for (const state of THEME_COLOR_STATES)
    states[state] = buildButtonStateColorTheme({ mode, tone, scheme, state }, config);
  return states;
}
function buildButtonStateColorTheme(options, config) {
  var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o;
  const { mode, tone, scheme, state } = options, tokens = (_d = (_c = (_b = (_a = config == null ? void 0 : config.color) == null ? void 0 : _a.button) == null ? void 0 : _b[mode]) == null ? void 0 : _c[tone]) == null ? void 0 : _d[state], hue = (tokens == null ? void 0 : tokens._hue) || "gray", blendMode = (tokens == null ? void 0 : tokens._blend) || ["screen", "multiply"], context = { hue, scheme };
  return {
    _blend: blendMode[scheme === "light" ? 0 : 1],
    accent: {
      fg: resolveColorTokenValue(context, (_e2 = tokens == null ? void 0 : tokens.accent) == null ? void 0 : _e2.fg)
    },
    avatar: buildAvatarColorTheme({ scheme }, tokens),
    badge: buildBadgeColorTheme(tokens == null ? void 0 : tokens.badge, { scheme }, config),
    bg: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.bg),
    border: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.border),
    code: {
      bg: resolveColorTokenValue(context, (_f = tokens == null ? void 0 : tokens.code) == null ? void 0 : _f.bg),
      fg: resolveColorTokenValue(context, (_g = tokens == null ? void 0 : tokens.code) == null ? void 0 : _g.fg)
    },
    fg: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.fg),
    icon: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.icon),
    muted: {
      bg: resolveColorTokenValue(context, (_h = tokens == null ? void 0 : tokens.muted) == null ? void 0 : _h.bg),
      fg: resolveColorTokenValue(context, (_i = tokens == null ? void 0 : tokens.muted) == null ? void 0 : _i.fg)
    },
    kbd: {
      bg: resolveColorTokenValue(context, (_j = tokens == null ? void 0 : tokens.kbd) == null ? void 0 : _j.bg),
      fg: resolveColorTokenValue(context, (_k = tokens == null ? void 0 : tokens.kbd) == null ? void 0 : _k.fg),
      border: resolveColorTokenValue(context, (_l = tokens == null ? void 0 : tokens.kbd) == null ? void 0 : _l.border)
    },
    link: {
      fg: resolveColorTokenValue(context, (_m = tokens == null ? void 0 : tokens.link) == null ? void 0 : _m.fg)
    },
    skeleton: {
      from: resolveColorTokenValue(context, (_n = tokens == null ? void 0 : tokens.skeleton) == null ? void 0 : _n.from),
      to: resolveColorTokenValue(context, (_o = tokens == null ? void 0 : tokens.skeleton) == null ? void 0 : _o.to)
    }
  };
}
function buildInputColorTheme(options, config) {
  const { scheme, tone } = options;
  return {
    default: buildInputStatesColorTheme({ mode: "default", scheme, tone }, config),
    invalid: buildInputStatesColorTheme({ mode: "invalid", scheme, tone }, config)
  };
}
function buildInputStatesColorTheme(options, config) {
  const { mode, scheme, tone } = options;
  return {
    enabled: buildInputStateColorTheme({ mode, scheme, state: "enabled", tone }, config),
    hovered: buildInputStateColorTheme({ mode, scheme, state: "hovered", tone }, config),
    readOnly: buildInputStateColorTheme({ mode, scheme, state: "readOnly", tone }, config),
    disabled: buildInputStateColorTheme({ mode, scheme, state: "disabled", tone }, config)
  };
}
function buildInputStateColorTheme(options, config) {
  var _a, _b, _c, _d, _e2, _f, _g;
  const { mode, tone, scheme, state } = options, tokens = (_c = (_b = (_a = config == null ? void 0 : config.color) == null ? void 0 : _a.input) == null ? void 0 : _b[mode]) == null ? void 0 : _c[state], hue = (tokens == null ? void 0 : tokens._hue) || ((_f = (_e2 = (_d = config == null ? void 0 : config.color) == null ? void 0 : _d.base) == null ? void 0 : _e2[tone]) == null ? void 0 : _f._hue) || "gray", blendMode = (tokens == null ? void 0 : tokens._blend) || ["screen", "multiply"], context = { hue, scheme };
  return {
    _blend: blendMode[scheme === "light" ? 0 : 1],
    bg: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.bg),
    border: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.border),
    fg: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.fg),
    muted: {
      bg: resolveColorTokenValue(context, (_g = tokens == null ? void 0 : tokens.muted) == null ? void 0 : _g.bg)
    },
    placeholder: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.placeholder)
  };
}
function buildSelectableColorTheme(options, config) {
  const { scheme } = options, tones2 = {};
  for (const tone of THEME_COLOR_STATE_TONES)
    tones2[tone] = buildSelectableStatesColorTheme({ scheme, tone }, config);
  return tones2;
}
function buildSelectableStatesColorTheme(options, config) {
  const { scheme, tone } = options, states = {};
  for (const state of THEME_COLOR_STATES)
    states[state] = buildSelectableStateColorTheme({ tone, scheme, state }, config);
  return states;
}
function buildSelectableStateColorTheme(options, config) {
  var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n;
  const { scheme, state, tone } = options, tokens = (_c = (_b = (_a = config == null ? void 0 : config.color) == null ? void 0 : _a.selectable) == null ? void 0 : _b[tone]) == null ? void 0 : _c[state], hue = (tokens == null ? void 0 : tokens._hue) || "gray", blendMode = (tokens == null ? void 0 : tokens._blend) || ["screen", "multiply"], context = { hue, scheme };
  return {
    _blend: blendMode[scheme === "light" ? 0 : 1],
    accent: {
      fg: resolveColorTokenValue(context, (_d = tokens == null ? void 0 : tokens.accent) == null ? void 0 : _d.fg)
    },
    avatar: buildAvatarColorTheme({ scheme }, tokens),
    badge: buildBadgeColorTheme(tokens == null ? void 0 : tokens.badge, { scheme }, config),
    bg: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.bg),
    border: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.border),
    code: {
      bg: resolveColorTokenValue(context, (_e2 = tokens == null ? void 0 : tokens.code) == null ? void 0 : _e2.bg),
      fg: resolveColorTokenValue(context, (_f = tokens == null ? void 0 : tokens.code) == null ? void 0 : _f.fg)
    },
    fg: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.fg),
    icon: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.icon),
    muted: {
      bg: resolveColorTokenValue(context, (_g = tokens == null ? void 0 : tokens.muted) == null ? void 0 : _g.bg),
      fg: resolveColorTokenValue(context, (_h = tokens == null ? void 0 : tokens.muted) == null ? void 0 : _h.fg)
    },
    kbd: {
      bg: resolveColorTokenValue(context, (_i = tokens == null ? void 0 : tokens.kbd) == null ? void 0 : _i.bg),
      fg: resolveColorTokenValue(context, (_j = tokens == null ? void 0 : tokens.kbd) == null ? void 0 : _j.fg),
      border: resolveColorTokenValue(context, (_k = tokens == null ? void 0 : tokens.kbd) == null ? void 0 : _k.border)
    },
    link: {
      fg: resolveColorTokenValue(context, (_l = tokens == null ? void 0 : tokens.link) == null ? void 0 : _l.fg)
    },
    skeleton: {
      from: resolveColorTokenValue(context, (_m = tokens == null ? void 0 : tokens.skeleton) == null ? void 0 : _m.from),
      to: resolveColorTokenValue(context, (_n = tokens == null ? void 0 : tokens.skeleton) == null ? void 0 : _n.to)
    }
  };
}
function buildSyntaxColorTheme(options, config) {
  var _a;
  const { scheme } = options, tokens = (_a = config == null ? void 0 : config.color) == null ? void 0 : _a.syntax, context = { hue: "gray", scheme };
  return {
    atrule: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.atrule),
    attrName: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.attrName),
    attrValue: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.attrValue),
    attribute: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.attribute),
    boolean: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.boolean),
    builtin: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.builtin),
    cdata: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.cdata),
    char: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.char),
    class: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.class),
    className: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.className),
    comment: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.comment),
    constant: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.constant),
    deleted: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.deleted),
    doctype: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.doctype),
    entity: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.entity),
    function: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.function),
    hexcode: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.hexcode),
    id: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.id),
    important: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.important),
    inserted: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.inserted),
    keyword: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.keyword),
    number: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.number),
    operator: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.operator),
    prolog: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.prolog),
    property: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.property),
    pseudoClass: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.pseudoClass),
    pseudoElement: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.pseudoElement),
    punctuation: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.punctuation),
    regex: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.regex),
    selector: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.selector),
    string: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.string),
    symbol: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.symbol),
    tag: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.tag),
    unit: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.unit),
    url: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.url),
    variable: resolveColorTokenValue(context, tokens == null ? void 0 : tokens.variable)
  };
}
var defaultColorPalette = color;
function mixChannel(b2, s2, weight) {
  const delta = (s2 - b2) * weight;
  return b2 + delta;
}
function mix(b2, s2, weight) {
  return {
    r: mixChannel(b2.r, s2.r, weight),
    g: mixChannel(b2.g, s2.g, weight),
    b: mixChannel(b2.b, s2.b, weight)
  };
}
function multiplyChannel(b2, s2) {
  return b2 * s2;
}
function multiply(b2, s2) {
  return {
    r: multiplyChannel(b2.r / 255, s2.r / 255) * 255,
    g: multiplyChannel(b2.g / 255, s2.g / 255) * 255,
    b: multiplyChannel(b2.b / 255, s2.b / 255) * 255
  };
}
function screenChannel(b2, s2) {
  return b2 + s2 - b2 * s2;
}
function screen(b2, s2) {
  return {
    r: screenChannel(b2.r / 255, s2.r / 255) * 255,
    g: screenChannel(b2.g / 255, s2.g / 255) * 255,
    b: screenChannel(b2.b / 255, s2.b / 255) * 255
  };
}
function lerp(x2, y2, a2) {
  return x2 * (1 - a2) + y2 * a2;
}
function invlerp(x2, y2, a2) {
  return clamp((a2 - x2) / (y2 - x2));
}
function clamp(a2, min2 = 0, max2 = 1) {
  return Math.min(max2, Math.max(min2, a2));
}
function range(x1, y1, x2, y2, a2) {
  return lerp(x2, y2, invlerp(x1, y1, a2));
}
function round(value) {
  return Math.round(value);
}
function hexToRgb(hex2) {
  if (hex2.length === 4) {
    const hexR = hex2.slice(1, 2), hexG = hex2.slice(2, 3), hexB = hex2.slice(3, 4);
    return {
      r: parseInt(hexR + hexR, 16),
      g: parseInt(hexG + hexG, 16),
      b: parseInt(hexB + hexB, 16)
    };
  }
  return {
    r: parseInt(hex2.slice(1, 3), 16),
    g: parseInt(hex2.slice(3, 5), 16),
    b: parseInt(hex2.slice(5, 7), 16)
  };
}
function rgbaToRGBA(rgba22) {
  const values = rgba22.replace(/rgba\(|\)/g, "").split(",");
  return {
    r: parseInt(values[0]),
    g: parseInt(values[1]),
    b: parseInt(values[2]),
    a: parseFloat(values[3])
  };
}
function rgbToHex(color22) {
  const r2 = round(clamp(Math.round(color22.r), 0, 255)), g2 = round(clamp(Math.round(color22.g), 0, 255)), b2 = round(clamp(Math.round(color22.b), 0, 255));
  return "a" in color22 ? `rgba(${r2},${g2},${b2},${color22.a})` : "#" + ((1 << 24) + (r2 << 16) + (g2 << 8) + b2).toString(16).slice(1);
}
function hslToRgb(hsl) {
  const s2 = hsl.s / 100, l2 = hsl.l / 100, c2 = (1 - Math.abs(2 * l2 - 1)) * s2, x2 = c2 * (1 - Math.abs(hsl.h / 60 % 2 - 1)), m3 = l2 - c2 / 2;
  let r2 = 0, g2 = 0, b2 = 0;
  return 0 <= hsl.h && hsl.h < 60 ? (r2 = c2, g2 = x2, b2 = 0) : 60 <= hsl.h && hsl.h < 120 ? (r2 = x2, g2 = c2, b2 = 0) : 120 <= hsl.h && hsl.h < 180 ? (r2 = 0, g2 = c2, b2 = x2) : 180 <= hsl.h && hsl.h < 240 ? (r2 = 0, g2 = x2, b2 = c2) : 240 <= hsl.h && hsl.h < 300 ? (r2 = x2, g2 = 0, b2 = c2) : 300 <= hsl.h && hsl.h < 360 && (r2 = c2, g2 = 0, b2 = x2), {
    r: Math.round((r2 + m3) * 255),
    g: Math.round((g2 + m3) * 255),
    b: Math.round((b2 + m3) * 255)
  };
}
var HEX_CHARS = "0123456789ABCDEFabcdef";
var HSL_RE = /hsl\(\s*(\d+)\s*,\s*((\d+(?:\.\d+)?)%)\s*,\s*((\d+(?:\.\d+)?)%)\s*\)/i;
function isHexChars(str) {
  for (const c2 of str)
    if (HEX_CHARS.indexOf(c2) === -1)
      return false;
  return true;
}
function isHex(str) {
  return str[0] !== "#" || !(str.length === 4 || str.length === 7) ? false : isHexChars(str.slice(1));
}
function parseHsl(str) {
  const res = HSL_RE.exec(str);
  if (!res)
    throw new Error(`parseHsl: string is not a HSL color: "${str}"`);
  return { h: parseInt(res[1]), s: parseFloat(res[3]), l: parseFloat(res[5]) };
}
function parseColor(color22) {
  if (!color22)
    return { r: 0, g: 0, b: 0 };
  if (typeof color22 != "string")
    throw new Error("parseColor: expected a string");
  if (isHex(color22))
    return hexToRgb(color22);
  if (color22.startsWith("hsl("))
    return hslToRgb(parseHsl(color22));
  if (color22.startsWith("rgba("))
    return rgbaToRGBA(color22);
  throw new Error(`parseColor: unexpected color format: "${color22}"`);
}
function rgba(color22, a2) {
  const rgb = parseColor(color22);
  return `rgba(${rgb.r},${rgb.g},${rgb.b},${a2})`;
}
var RGB_RANGE = [0, 255];
function mixThemeColor(value, options) {
  const { blendMode } = options, color22 = parseColor(value), black22 = parseColor(options.black), white22 = parseColor(options.white), bg = options.bg ? parseColor(options.bg) : blendMode === "multiply" ? white22 : black22, paletteRange = {
    r: [black22.r, white22.r],
    g: [black22.g, white22.g],
    b: [black22.b, white22.b]
  }, convertedBgColor = {
    r: clamp(range(...paletteRange.r, ...RGB_RANGE, bg.r), ...RGB_RANGE),
    g: clamp(range(...paletteRange.g, ...RGB_RANGE, bg.g), ...RGB_RANGE),
    b: clamp(range(...paletteRange.b, ...RGB_RANGE, bg.b), ...RGB_RANGE)
  }, convertedColor = {
    r: clamp(range(...paletteRange.r, ...RGB_RANGE, color22.r), ...RGB_RANGE),
    g: clamp(range(...paletteRange.g, ...RGB_RANGE, color22.g), ...RGB_RANGE),
    b: clamp(range(...paletteRange.b, ...RGB_RANGE, color22.b), ...RGB_RANGE)
  }, resultColor = blendMode === "multiply" ? multiply(convertedBgColor, convertedColor) : screen(convertedBgColor, convertedColor), v2 = {
    r: clamp(range(...RGB_RANGE, ...paletteRange.r, resultColor.r), ...paletteRange.r),
    g: clamp(range(...RGB_RANGE, ...paletteRange.g, resultColor.g), ...paletteRange.g),
    b: clamp(range(...RGB_RANGE, ...paletteRange.b, resultColor.b), ...paletteRange.b)
  };
  return rgbToHex(v2);
}
function renderColorValue(str, options) {
  const { bg, blendMode, colorPalette } = options;
  if (bg === "white")
    throw new Error("Cannot blend with white background");
  const node2 = parseTokenValue(str);
  if (!node2 || node2.type !== "color")
    throw new Error(`Invalid color token value: ${str}`);
  let hex2 = "";
  if (node2.key === "black" && (hex2 = renderColorHex(colorPalette.black)), node2.key === "white" && (hex2 = renderColorHex(colorPalette.white)), node2.hue && node2.tint && (hex2 = renderColorHex(colorPalette[node2.hue][node2.tint])), !hex2)
    throw new Error(`Invalid color token value: ${str}`);
  const hexBeforeMix = hex2, mixOptions = {
    blendMode,
    bg,
    black: renderColorHex(colorPalette.black),
    // opacity: node.opacity,
    white: renderColorHex(colorPalette.white)
  };
  try {
    if (hex2 = mixThemeColor(hex2, mixOptions), bg && node2.mix !== void 0) {
      const from2 = hexToRgb(bg), to = hexToRgb(hex2);
      hex2 = rgbToHex(mix(from2, to, node2.mix));
    }
  } catch (err) {
    throw console.warn("could not blend", hex2, mixOptions), err;
  }
  return hex2 === "#aN" && (console.warn(`invalid color token value: ${str}`), hex2 = hexBeforeMix), node2.opacity !== void 0 && (hex2 = rgba(hex2, node2.opacity)), hex2;
}
function renderColorHex(color22) {
  return typeof color22 == "string" ? color22 : color22.hex;
}
function renderThemeColorSchemes(value, config) {
  const colorPalette = (config == null ? void 0 : config.palette) ?? defaultColorPalette;
  return {
    light: renderThemeColorScheme(colorPalette, value.light),
    dark: renderThemeColorScheme(colorPalette, value.dark)
  };
}
function renderThemeColorScheme(colorPalette, value) {
  const toneEntries = Object.entries(value), [, transparentTone] = toneEntries.find(([k2]) => k2 === "transparent"), [, defaultTone] = toneEntries.find(([k2]) => k2 === "default"), renderedTransparentTone = renderThemeColor(transparentTone, { colorPalette }), renderedDefaultTone = renderThemeColor(defaultTone, { colorPalette }), bg = renderedDefaultTone.bg;
  if (bg === "white")
    throw new Error("Cannot blend with white background");
  return Object.fromEntries([
    ["transparent", renderedTransparentTone],
    ["default", renderedDefaultTone],
    ...toneEntries.filter(([k2]) => k2 !== "default" && k2 !== "transparent").map(([k2, v2]) => [k2, renderThemeColor(v2, { bg, colorPalette })])
  ]);
}
function renderThemeColor(value, options) {
  const { colorPalette, bg } = options, blendMode = value._blend || "multiply", baseBg = renderColorValue(value.bg, { colorPalette, bg, blendMode }), colorOptions = { colorPalette, bg: baseBg, blendMode }, button = renderThemeColorButton(value.button, {
    baseBg,
    blendMode,
    colorPalette
  }), selectable = renderThemeColorSelectable(value.selectable, {
    colorPalette,
    baseBg,
    blendMode
  }), shadow = {
    outline: renderColorValue(value.shadow.outline, colorOptions),
    umbra: renderColorValue(value.shadow.umbra, {
      ...colorOptions,
      bg: void 0,
      colorPalette: { ...colorPalette, black: "#000000" }
    }),
    penumbra: renderColorValue(value.shadow.penumbra, {
      ...colorOptions,
      bg: void 0,
      colorPalette: { ...colorPalette, black: "#000000" }
    }),
    ambient: renderColorValue(value.shadow.ambient, {
      ...colorOptions,
      bg: void 0,
      colorPalette: { ...colorPalette, black: "#000000" }
    })
  };
  return {
    _blend: blendMode,
    _dark: value._dark,
    accent: {
      fg: renderColorValue(value.accent.fg, colorOptions)
    },
    avatar: renderThemeColorAvatar(value.avatar, { baseBg, colorPalette, blendMode }),
    backdrop: renderColorValue(value.backdrop, colorOptions),
    badge: renderThemeColorBadge(value.badge, { baseBg, colorPalette, blendMode }),
    bg: baseBg,
    border: renderColorValue(value.border, colorOptions),
    button,
    code: {
      bg: renderColorValue(value.code.bg, colorOptions),
      fg: renderColorValue(value.code.fg, colorOptions)
    },
    fg: renderColorValue(value.fg, colorOptions),
    focusRing: renderColorValue(value.focusRing, colorOptions),
    icon: renderColorValue(value.icon, colorOptions),
    input: renderThemeColorInput(value.input, { baseBg, colorPalette, blendMode }),
    kbd: renderThemeColorKBD(value.kbd, { baseBg, colorPalette, blendMode }),
    link: {
      fg: renderColorValue(value.link.fg, colorOptions)
    },
    muted: {
      bg: renderColorValue(value.muted.bg, colorOptions),
      fg: renderColorValue(value.muted.fg, colorOptions)
    },
    shadow,
    skeleton: {
      from: renderColorValue(value.skeleton.from, colorOptions),
      to: renderColorValue(value.skeleton.to, colorOptions)
    },
    syntax: renderSyntaxColorTheme(value.syntax, { baseBg, colorPalette, blendMode }),
    selectable
  };
}
function renderThemeColorKBD(value, options) {
  const { baseBg, blendMode, colorPalette } = options, rootOptions = {
    bg: baseBg,
    blendMode,
    colorPalette
  }, bg = renderColorValue(value.bg, rootOptions), colorOptions = {
    bg,
    blendMode,
    colorPalette
  };
  return {
    bg,
    fg: renderColorValue(value.fg, colorOptions),
    border: renderColorValue(value.border, colorOptions)
  };
}
function renderThemeColorAvatar(value, options) {
  return {
    gray: renderThemeColorAvatarColor(value.gray, options),
    blue: renderThemeColorAvatarColor(value.blue, options),
    purple: renderThemeColorAvatarColor(value.purple, options),
    magenta: renderThemeColorAvatarColor(value.magenta, options),
    red: renderThemeColorAvatarColor(value.red, options),
    orange: renderThemeColorAvatarColor(value.orange, options),
    yellow: renderThemeColorAvatarColor(value.yellow, options),
    green: renderThemeColorAvatarColor(value.green, options),
    cyan: renderThemeColorAvatarColor(value.cyan, options)
  };
}
function renderThemeColorAvatarColor(value, options) {
  const { baseBg, blendMode: rootBlendMode, colorPalette } = options, blendMode = value._blend || "multiply", rootOptions = {
    bg: baseBg,
    blendMode: rootBlendMode,
    colorPalette
  }, bg = renderColorValue(value.bg, rootOptions), colorOptions = {
    bg,
    blendMode,
    colorPalette
  };
  return {
    _blend: blendMode,
    bg,
    fg: renderColorValue(value.fg, colorOptions)
  };
}
function renderThemeColorBadge(value, options) {
  return {
    default: renderThemeColorBadgeColor(value.default, options),
    primary: renderThemeColorBadgeColor(value.primary, options),
    positive: renderThemeColorBadgeColor(value.positive, options),
    caution: renderThemeColorBadgeColor(value.caution, options),
    critical: renderThemeColorBadgeColor(value.critical, options)
  };
}
function renderThemeColorBadgeColor(value, options) {
  const { baseBg, blendMode: rootBlendMode, colorPalette } = options, blendMode = rootBlendMode, rootOptions = {
    bg: baseBg,
    blendMode: rootBlendMode,
    colorPalette
  }, bg = renderColorValue(value.bg, rootOptions), colorOptions = {
    bg,
    blendMode,
    colorPalette
  };
  return {
    bg,
    dot: renderColorValue(value.dot, colorOptions),
    fg: renderColorValue(value.fg, colorOptions),
    icon: renderColorValue(value.icon, colorOptions)
  };
}
function renderThemeColorButton(value, options) {
  return {
    default: renderThemeColorButtonTones(value.default, options),
    ghost: renderThemeColorButtonTones(value.ghost, options),
    bleed: renderThemeColorButtonTones(value.bleed, options)
  };
}
function renderThemeColorButtonTones(value, options) {
  return {
    default: renderThemeColorButtonStates(value.default, options),
    primary: renderThemeColorButtonStates(value.primary, options),
    positive: renderThemeColorButtonStates(value.positive, options),
    caution: renderThemeColorButtonStates(value.caution, options),
    critical: renderThemeColorButtonStates(value.critical, options)
  };
}
function renderThemeColorButtonStates(value, options) {
  return {
    enabled: renderThemeColorState(value.enabled, options),
    hovered: renderThemeColorState(value.hovered, options),
    pressed: renderThemeColorState(value.pressed, options),
    selected: renderThemeColorState(value.selected, options),
    disabled: renderThemeColorState(value.disabled, options)
  };
}
function renderThemeColorState(value, options) {
  var _a, _b;
  const { baseBg, blendMode: rootBlendMode, colorPalette } = options, blendMode = value._blend || "multiply", rootOptions = {
    bg: baseBg,
    blendMode: rootBlendMode,
    colorPalette
  }, bg = renderColorValue(value.bg, rootOptions), colorOptions = {
    bg,
    blendMode,
    colorPalette
  };
  return {
    _blend: blendMode,
    accent: {
      fg: renderColorValue(value.accent.fg, colorOptions)
    },
    avatar: renderThemeColorAvatar(value.avatar, { baseBg: bg, colorPalette, blendMode }),
    badge: renderThemeColorBadge(value.badge, { baseBg: bg, colorPalette, blendMode }),
    bg,
    border: renderColorValue(value.border, colorOptions),
    code: {
      bg: renderColorValue(value.code.bg, colorOptions),
      fg: renderColorValue(value.code.fg, colorOptions)
    },
    fg: renderColorValue(value.fg, colorOptions),
    icon: renderColorValue(value.icon, colorOptions),
    link: {
      fg: renderColorValue(value.link.fg, colorOptions)
    },
    muted: {
      bg: renderColorValue(value.muted.bg, colorOptions),
      fg: renderColorValue(value.muted.fg, colorOptions)
    },
    kbd: {
      bg: renderColorValue(value.kbd.bg, colorOptions),
      fg: renderColorValue(value.kbd.fg, colorOptions),
      border: renderColorValue(value.kbd.border, colorOptions)
    },
    skeleton: {
      from: renderColorValue((_a = value.skeleton) == null ? void 0 : _a.from, colorOptions),
      to: renderColorValue((_b = value.skeleton) == null ? void 0 : _b.to, colorOptions)
    }
  };
}
function renderThemeColorInput(value, options) {
  return {
    default: renderInputStatesColorTheme(value.default, options),
    invalid: renderInputStatesColorTheme(value.invalid, options)
  };
}
function renderInputStatesColorTheme(value, options) {
  return {
    enabled: renderInputStateColorTheme(value.enabled, options),
    hovered: renderInputStateColorTheme(value.hovered, options),
    readOnly: renderInputStateColorTheme(value.readOnly, options),
    disabled: renderInputStateColorTheme(value.disabled, options)
  };
}
function renderInputStateColorTheme(value, options) {
  const { baseBg, blendMode: rootBlendMode, colorPalette } = options, blendMode = value._blend || "multiply", rootOptions = { colorPalette, bg: baseBg, blendMode: rootBlendMode }, bg = renderColorValue(value.bg, rootOptions), colorOptions = { colorPalette, bg, blendMode };
  return {
    _blend: blendMode,
    bg,
    border: renderColorValue(value.border, colorOptions),
    fg: renderColorValue(value.fg, colorOptions),
    muted: {
      bg: renderColorValue(value.muted.bg, colorOptions)
    },
    placeholder: renderColorValue(value.placeholder, colorOptions)
  };
}
function renderThemeColorSelectable(value, options) {
  return {
    default: renderThemeColorSelectableStates(value.default, options),
    primary: renderThemeColorSelectableStates(value.primary, options),
    positive: renderThemeColorSelectableStates(value.positive, options),
    caution: renderThemeColorSelectableStates(value.caution, options),
    critical: renderThemeColorSelectableStates(value.critical, options)
  };
}
function renderThemeColorSelectableStates(value, options) {
  return {
    enabled: renderThemeColorState(value.enabled, options),
    hovered: renderThemeColorState(value.hovered, options),
    pressed: renderThemeColorState(value.pressed, options),
    selected: renderThemeColorState(value.selected, options),
    disabled: renderThemeColorState(value.disabled, options)
  };
}
function renderSyntaxColorTheme(value, options) {
  const { colorPalette, baseBg, blendMode } = options, colorOptions = { colorPalette, bg: baseBg, blendMode };
  return {
    atrule: renderColorValue(value.atrule, colorOptions),
    attrName: renderColorValue(value.attrName, colorOptions),
    attrValue: renderColorValue(value.attrValue, colorOptions),
    attribute: renderColorValue(value.attribute, colorOptions),
    boolean: renderColorValue(value.boolean, colorOptions),
    builtin: renderColorValue(value.builtin, colorOptions),
    cdata: renderColorValue(value.cdata, colorOptions),
    char: renderColorValue(value.char, colorOptions),
    class: renderColorValue(value.class, colorOptions),
    className: renderColorValue(value.className, colorOptions),
    comment: renderColorValue(value.comment, colorOptions),
    constant: renderColorValue(value.constant, colorOptions),
    deleted: renderColorValue(value.deleted, colorOptions),
    doctype: renderColorValue(value.doctype, colorOptions),
    entity: renderColorValue(value.entity, colorOptions),
    function: renderColorValue(value.function, colorOptions),
    hexcode: renderColorValue(value.hexcode, colorOptions),
    id: renderColorValue(value.id, colorOptions),
    important: renderColorValue(value.important, colorOptions),
    inserted: renderColorValue(value.inserted, colorOptions),
    keyword: renderColorValue(value.keyword, colorOptions),
    number: renderColorValue(value.number, colorOptions),
    operator: renderColorValue(value.operator, colorOptions),
    prolog: renderColorValue(value.prolog, colorOptions),
    property: renderColorValue(value.property, colorOptions),
    pseudoClass: renderColorValue(value.pseudoClass, colorOptions),
    pseudoElement: renderColorValue(value.pseudoElement, colorOptions),
    punctuation: renderColorValue(value.punctuation, colorOptions),
    regex: renderColorValue(value.regex, colorOptions),
    selector: renderColorValue(value.selector, colorOptions),
    string: renderColorValue(value.string, colorOptions),
    symbol: renderColorValue(value.symbol, colorOptions),
    tag: renderColorValue(value.tag, colorOptions),
    unit: renderColorValue(value.unit, colorOptions),
    url: renderColorValue(value.url, colorOptions),
    variable: renderColorValue(value.variable, colorOptions)
  };
}
function buildTheme(config) {
  const colorTheme = buildColorTheme(config), v2 = {
    _version: 2,
    avatar: (config == null ? void 0 : config.avatar) ?? defaultThemeConfig.avatar,
    button: (config == null ? void 0 : config.button) ?? defaultThemeConfig.button,
    card: (config == null ? void 0 : config.card) ?? defaultThemeConfig.card,
    // How colors are generated:
    // 1. Merge custom tokens with default tokens
    // 2. Generate tree of color keys (gray/500, black, white, etc.)
    // 3. Apply mixing and render to hex values
    // render(build(mergeWithDefaults()))
    color: renderThemeColorSchemes(colorTheme, config),
    container: (config == null ? void 0 : config.container) ?? defaultThemeConfig.container,
    font: (config == null ? void 0 : config.font) ?? defaultThemeFonts,
    input: (config == null ? void 0 : config.input) ?? defaultThemeConfig.input,
    layer: (config == null ? void 0 : config.layer) ?? defaultThemeConfig.layer,
    media: (config == null ? void 0 : config.media) ?? defaultThemeConfig.media,
    radius: (config == null ? void 0 : config.radius) ?? defaultThemeConfig.radius,
    shadow: (config == null ? void 0 : config.shadow) ?? defaultThemeConfig.shadow,
    space: (config == null ? void 0 : config.space) ?? defaultThemeConfig.space,
    style: (config == null ? void 0 : config.style) ?? defaultThemeConfig.style
  };
  return v2_v0(v2);
}
var cache2 = /* @__PURE__ */ new Map();
function getScopedTheme(themeProp, scheme, tone) {
  const cachedTheme = _getCachedTheme(themeProp, scheme, tone);
  if (cachedTheme)
    return cachedTheme;
  const v0 = is_v2(themeProp) ? v2_v0(themeProp) : themeProp, v2 = is_v2(themeProp) ? themeProp : v0_v2(themeProp), colorScheme_v0 = v0.color[scheme] || v0.color.light, color_v0 = colorScheme_v0[tone] || colorScheme_v0.default, layer_v0 = v0.layer || defaultThemeConfig.layer, colorScheme_v2 = v2.color[scheme] || v2.color.light, color_v2 = colorScheme_v2[tone] || colorScheme_v2.default, layer_v2 = v2.layer || defaultThemeConfig.layer, theme = {
    sanity: {
      ...v0,
      color: color_v0,
      layer: layer_v0,
      v2: {
        ...v2,
        _resolved: true,
        color: color_v2,
        layer: layer_v2
      }
    }
  };
  return _setCachedTheme(themeProp, scheme, tone, theme), theme;
}
function _getCachedTheme(rootTheme, scheme, tone) {
  const schemeCache = cache2.get(scheme);
  if (!schemeCache)
    return;
  const toneCache = schemeCache.get(tone);
  if (toneCache)
    return toneCache.get(rootTheme);
}
function _setCachedTheme(rootTheme, scheme, tone, theme) {
  cache2.has(scheme) || cache2.set(scheme, /* @__PURE__ */ new Map());
  const schemeCache = cache2.get(scheme);
  schemeCache.has(tone) || schemeCache.set(tone, /* @__PURE__ */ new WeakMap()), schemeCache.get(tone).set(rootTheme, theme);
}

// node_modules/styled-components/node_modules/tslib/tslib.es6.mjs
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s2, i2 = 1, n = arguments.length; i2 < n; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t[p2] = s2[p2];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __spreadArray(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l2 = from2.length, ar; i2 < l2; i2++) {
      if (ar || !(i2 in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i2);
        ar[i2] = from2[i2];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
}

// node_modules/styled-components/node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
function memoize(fn) {
  var cache4 = /* @__PURE__ */ Object.create(null);
  return function(arg) {
    if (cache4[arg] === void 0)
      cache4[arg] = fn(arg);
    return cache4[arg];
  };
}

// node_modules/styled-components/node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
var isPropValid = memoize(
  function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
  }
  /* Z+1 */
);

// node_modules/styled-components/dist/styled-components.browser.esm.js
var import_react = __toESM(require_react());
var import_shallowequal = __toESM(require_shallowequal());

// node_modules/stylis/src/Enum.js
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";
var LAYER = "@layer";

// node_modules/stylis/src/Utility.js
var abs = Math.abs;
var from = String.fromCharCode;
var assign = Object.assign;
function hash(value, length2) {
  return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}
function trim(value) {
  return value.trim();
}
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search, position2) {
  return value.indexOf(search, position2);
}
function charat(value, index3) {
  return value.charCodeAt(index3) | 0;
}
function substr(value, begin, end) {
  return value.slice(begin, end);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine(array, callback) {
  return array.map(callback).join("");
}
function filter(array, pattern) {
  return array.filter(function(value) {
    return !match(value, pattern);
  });
}

// node_modules/stylis/src/Tokenizer.js
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node(value, root, parent, type, props, children, length2, siblings) {
  return { value, root, parent, type, props, children, line, column, length: length2, return: "", siblings };
}
function copy(root, props) {
  return assign(node("", null, null, "", null, null, 0, root.siblings), root, { length: -root.length }, props);
}
function lift(root) {
  while (root.root)
    root = copy(root.root, { children: [root] });
  append(root, root.siblings);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end) {
  return substr(characters, begin, end);
}
function token(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type) {
  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index3, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index3, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      case type:
        return position;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type, index3) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index3, position - 1) + "*" + from(type === 47 ? type : next());
}
function identifier(index3) {
  while (!token(peek()))
    next();
  return slice(index3, position);
}

// node_modules/stylis/src/Parser.js
function compile(value) {
  return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index3 = 0;
  var offset4 = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters2 = type;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      case 40:
        if (previous != 108 && charat(characters2, length2 - 1) == 58) {
          if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f", abs(index3 ? points[index3 - 1] : 0)) != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace(previous);
        break;
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root, parent, declarations), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      case 123 * variable:
        points[index3++] = strlen(characters2) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset4:
            if (ampersand == -1)
              characters2 = replace(characters2, /\f/g, "");
            if (property > 0 && strlen(characters2) - length2)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1, declarations) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2, declarations), declarations);
            break;
          case 59:
            characters2 += ";";
          default:
            append(reference = ruleset(characters2, root, parent, index3, offset4, rules, points, type, props = [], children = [], length2, rulesets), rulesets);
            if (character2 === 123)
              if (offset4 === 0)
                parse(characters2, root, reference, reference, props, rulesets, length2, points, children);
              else
                switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2, children), children), rules, children, length2, points, rule ? props : children);
                    break;
                  default:
                    parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index3 = offset4 = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
        break;
      case 58:
        length2 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from(character2), character2 * variable) {
          case 38:
            ampersand = offset4 > 0 ? 1 : (characters2 += "\f", -1);
            break;
          case 44:
            points[index3++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset4 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root, parent, index3, offset4, rules, points, type, props, children, length2, siblings) {
  var post = offset4 - 1;
  var rule = offset4 === 0 ? rules : [""];
  var size4 = sizeof(rule);
  for (var i2 = 0, j2 = 0, k2 = 0; i2 < index3; ++i2)
    for (var x2 = 0, y2 = substr(value, post + 1, post = abs(j2 = points[i2])), z2 = value; x2 < size4; ++x2)
      if (z2 = trim(j2 > 0 ? rule[x2] + " " + y2 : replace(y2, /&\f/g, rule[x2])))
        props[k2++] = z2;
  return node(value, root, parent, offset4 === 0 ? RULESET : type, props, children, length2, siblings);
}
function comment(value, root, parent, siblings) {
  return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0, siblings);
}
function declaration(value, root, parent, length2, siblings) {
  return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2, siblings);
}

// node_modules/stylis/src/Prefixer.js
function prefix(value, length2, children) {
  switch (hash(value, length2)) {
    case 5103:
      return WEBKIT + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    case 4789:
      return MOZ + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    case 5936:
      switch (charat(value, length2 + 11)) {
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
    case 6828:
    case 4268:
    case 2903:
      return WEBKIT + value + MS + value + value;
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/g, "") + (!match(value, /flex-|baseline/) ? MS + "grid-row-" + replace(value, /flex-|-self/g, "") : "") + value;
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/g, "") + value;
    case 5548:
      return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    case 4200:
      if (!match(value, /flex-|baseline/))
        return MS + "grid-column-align" + substr(value, length2) + value;
      break;
    case 2592:
    case 3360:
      return MS + replace(value, "template-", "") + value;
    case 4384:
    case 3616:
      if (children && children.some(function(element, index3) {
        return length2 = index3, match(element.props, /grid-\w+-end/);
      })) {
        return ~indexof(value + (children = children[length2].value), "span", 0) ? value : MS + replace(value, "-start", "") + value + MS + "grid-row-span:" + (~indexof(children, "span", 0) ? match(children, /\d+/) : +match(children, /\d+/) - +match(value, /\d+/)) + ";";
      }
      return MS + replace(value, "-start", "") + value;
    case 4896:
    case 4128:
      return children && children.some(function(element) {
        return match(element.props, /grid-\w+-start/);
      }) ? value : MS + replace(replace(value, "-end", "-span"), "span ", "") + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length2 > 6)
        switch (charat(value, length2 + 1)) {
          case 109:
            if (charat(value, length2 + 4) !== 45)
              break;
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof(value, "stretch", 0) ? prefix(replace(value, "stretch", "fill-available"), length2, children) + value : value;
        }
      break;
    case 5152:
    case 5920:
      return replace(value, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function(_2, a2, b2, c2, d, e, f2) {
        return MS + a2 + ":" + b2 + f2 + (c2 ? MS + a2 + "-span:" + (d ? e : +e - +b2) + f2 : "") + value;
      });
    case 4949:
      if (charat(value, length2 + 6) === 121)
        return replace(value, ":", ":" + WEBKIT) + value;
      break;
    case 6444:
      switch (charat(value, charat(value, 14) === 45 ? 18 : 11)) {
        case 120:
          return replace(value, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        case 100:
          return replace(value, ":", ":" + MS) + value;
      }
      break;
    case 5719:
    case 2647:
    case 2135:
    case 3927:
    case 2391:
      return replace(value, "scroll-", "scroll-snap-") + value;
  }
  return value;
}

// node_modules/stylis/src/Serializer.js
function serialize(children, callback) {
  var output = "";
  for (var i2 = 0; i2 < children.length; i2++)
    output += callback(children[i2], i2, children, callback) || "";
  return output;
}
function stringify(element, index3, children, callback) {
  switch (element.type) {
    case LAYER:
      if (element.children.length)
        break;
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize(element.children, callback) + "}";
    case RULESET:
      if (!strlen(element.value = element.props.join(",")))
        return "";
  }
  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
}

// node_modules/stylis/src/Middleware.js
function middleware(collection) {
  var length2 = sizeof(collection);
  return function(element, index3, children, callback) {
    var output = "";
    for (var i2 = 0; i2 < length2; i2++)
      output += collection[i2](element, index3, children, callback) || "";
    return output;
  };
}
function rulesheet(callback) {
  return function(element) {
    if (!element.root) {
      if (element = element.return)
        callback(element);
    }
  };
}
function prefixer(element, index3, children, callback) {
  if (element.length > -1) {
    if (!element.return)
      switch (element.type) {
        case DECLARATION:
          element.return = prefix(element.value, element.length, children);
          return;
        case KEYFRAMES:
          return serialize([copy(element, { value: replace(element.value, "@", "@" + WEBKIT) })], callback);
        case RULESET:
          if (element.length)
            return combine(children = element.props, function(value) {
              switch (match(value, callback = /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  lift(copy(element, { props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")] }));
                  lift(copy(element, { props: [value] }));
                  assign(element, { props: filter(children, callback) });
                  break;
                case "::placeholder":
                  lift(copy(element, { props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")] }));
                  lift(copy(element, { props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")] }));
                  lift(copy(element, { props: [replace(value, /:(plac\w+)/, MS + "input-$1")] }));
                  lift(copy(element, { props: [value] }));
                  assign(element, { props: filter(children, callback) });
                  break;
              }
              return "";
            });
      }
  }
}

// node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

// node_modules/styled-components/dist/styled-components.browser.esm.js
var f = "undefined" != typeof process && void 0 !== process.env && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || "data-styled";
var m = "active";
var y = "data-styled-version";
var v = "6.1.13";
var g = "/*!sc*/\n";
var S = "undefined" != typeof window && "HTMLElement" in window;
var w = Boolean("boolean" == typeof SC_DISABLE_SPEEDY ? SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== process.env && void 0 !== process.env.REACT_APP_SC_DISABLE_SPEEDY && "" !== process.env.REACT_APP_SC_DISABLE_SPEEDY ? "false" !== process.env.REACT_APP_SC_DISABLE_SPEEDY && process.env.REACT_APP_SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== process.env && void 0 !== process.env.SC_DISABLE_SPEEDY && "" !== process.env.SC_DISABLE_SPEEDY ? "false" !== process.env.SC_DISABLE_SPEEDY && process.env.SC_DISABLE_SPEEDY : true);
var b = {};
var E = /invalid hook call/i;
var N = /* @__PURE__ */ new Set();
var P = function(t, n) {
  if (true) {
    var o2 = n ? ' with the id of "'.concat(n, '"') : "", s2 = "The component ".concat(t).concat(o2, " has been created dynamically.\n") + "You may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.", i2 = console.error;
    try {
      var a2 = true;
      console.error = function(t2) {
        for (var n2 = [], o3 = 1; o3 < arguments.length; o3++)
          n2[o3 - 1] = arguments[o3];
        E.test(t2) ? (a2 = false, N.delete(s2)) : i2.apply(void 0, __spreadArray([t2], n2, false));
      }, (0, import_react.useRef)(), a2 && !N.has(s2) && (console.warn(s2), N.add(s2));
    } catch (e) {
      E.test(e.message) && N.delete(s2);
    } finally {
      console.error = i2;
    }
  }
};
var _ = Object.freeze([]);
var C = Object.freeze({});
function I(e, t, n) {
  return void 0 === n && (n = C), e.theme !== n.theme && e.theme || t || n.theme;
}
var A = /* @__PURE__ */ new Set(["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "u", "ul", "use", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"]);
var O = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g;
var D = /(^-|-$)/g;
function R(e) {
  return e.replace(O, "-").replace(D, "");
}
var T = /(a)(d)/gi;
var k = 52;
var j = function(e) {
  return String.fromCharCode(e + (e > 25 ? 39 : 97));
};
function x(e) {
  var t, n = "";
  for (t = Math.abs(e); t > k; t = t / k | 0)
    n = j(t % k) + n;
  return (j(t % k) + n).replace(T, "$1-$2");
}
var V;
var F = 5381;
var M = function(e, t) {
  for (var n = t.length; n; )
    e = 33 * e ^ t.charCodeAt(--n);
  return e;
};
var z = function(e) {
  return M(F, e);
};
function $(e) {
  return x(z(e) >>> 0);
}
function B(e) {
  return "string" == typeof e && e || e.displayName || e.name || "Component";
}
function L(e) {
  return "string" == typeof e && e.charAt(0) === e.charAt(0).toLowerCase();
}
var G = "function" == typeof Symbol && Symbol.for;
var Y = G ? Symbol.for("react.memo") : 60115;
var W = G ? Symbol.for("react.forward_ref") : 60112;
var q = { childContextTypes: true, contextType: true, contextTypes: true, defaultProps: true, displayName: true, getDefaultProps: true, getDerivedStateFromError: true, getDerivedStateFromProps: true, mixins: true, propTypes: true, type: true };
var H = { name: true, length: true, prototype: true, caller: true, callee: true, arguments: true, arity: true };
var U = { $$typeof: true, compare: true, defaultProps: true, displayName: true, propTypes: true, type: true };
var J = ((V = {})[W] = { $$typeof: true, render: true, defaultProps: true, displayName: true, propTypes: true }, V[Y] = U, V);
function X(e) {
  return ("type" in (t = e) && t.type.$$typeof) === Y ? U : "$$typeof" in e ? J[e.$$typeof] : q;
  var t;
}
var Z = Object.defineProperty;
var K = Object.getOwnPropertyNames;
var Q = Object.getOwnPropertySymbols;
var ee = Object.getOwnPropertyDescriptor;
var te = Object.getPrototypeOf;
var ne = Object.prototype;
function oe(e, t, n) {
  if ("string" != typeof t) {
    if (ne) {
      var o2 = te(t);
      o2 && o2 !== ne && oe(e, o2, n);
    }
    var r2 = K(t);
    Q && (r2 = r2.concat(Q(t)));
    for (var s2 = X(e), i2 = X(t), a2 = 0; a2 < r2.length; ++a2) {
      var c2 = r2[a2];
      if (!(c2 in H || n && n[c2] || i2 && c2 in i2 || s2 && c2 in s2)) {
        var l2 = ee(t, c2);
        try {
          Z(e, c2, l2);
        } catch (e2) {
        }
      }
    }
  }
  return e;
}
function re(e) {
  return "function" == typeof e;
}
function se(e) {
  return "object" == typeof e && "styledComponentId" in e;
}
function ie(e, t) {
  return e && t ? "".concat(e, " ").concat(t) : e || t || "";
}
function ae(e, t) {
  if (0 === e.length)
    return "";
  for (var n = e[0], o2 = 1; o2 < e.length; o2++)
    n += t ? t + e[o2] : e[o2];
  return n;
}
function ce(e) {
  return null !== e && "object" == typeof e && e.constructor.name === Object.name && !("props" in e && e.$$typeof);
}
function le(e, t, n) {
  if (void 0 === n && (n = false), !n && !ce(e) && !Array.isArray(e))
    return t;
  if (Array.isArray(t))
    for (var o2 = 0; o2 < t.length; o2++)
      e[o2] = le(e[o2], t[o2]);
  else if (ce(t))
    for (var o2 in t)
      e[o2] = le(e[o2], t[o2]);
  return e;
}
function ue(e, t) {
  Object.defineProperty(e, "toString", { value: t });
}
var pe = true ? { 1: "Cannot create styled-component for component: %s.\n\n", 2: "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n", 3: "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n", 4: "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n", 5: "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n", 6: "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n", 7: 'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n', 8: 'ThemeProvider: Please make your "theme" prop an object.\n\n', 9: "Missing document `<head>`\n\n", 10: "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n", 11: "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n", 12: "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n", 13: "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n", 14: 'ThemeProvider: "theme" prop is required.\n\n', 15: "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n", 16: "Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n", 17: "CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n", 18: "ThemeProvider: Please make sure your useTheme hook is within a `<ThemeProvider>`" } : {};
function de() {
  for (var e = [], t = 0; t < arguments.length; t++)
    e[t] = arguments[t];
  for (var n = e[0], o2 = [], r2 = 1, s2 = e.length; r2 < s2; r2 += 1)
    o2.push(e[r2]);
  return o2.forEach(function(e2) {
    n = n.replace(/%[a-z]/, e2);
  }), n;
}
function he(t) {
  for (var n = [], o2 = 1; o2 < arguments.length; o2++)
    n[o2 - 1] = arguments[o2];
  return false ? new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#".concat(t, " for more information.").concat(n.length > 0 ? " Args: ".concat(n.join(", ")) : "")) : new Error(de.apply(void 0, __spreadArray([pe[t]], n, false)).trim());
}
var fe = function() {
  function e(e2) {
    this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e2;
  }
  return e.prototype.indexOfGroup = function(e2) {
    for (var t = 0, n = 0; n < e2; n++)
      t += this.groupSizes[n];
    return t;
  }, e.prototype.insertRules = function(e2, t) {
    if (e2 >= this.groupSizes.length) {
      for (var n = this.groupSizes, o2 = n.length, r2 = o2; e2 >= r2; )
        if ((r2 <<= 1) < 0)
          throw he(16, "".concat(e2));
      this.groupSizes = new Uint32Array(r2), this.groupSizes.set(n), this.length = r2;
      for (var s2 = o2; s2 < r2; s2++)
        this.groupSizes[s2] = 0;
    }
    for (var i2 = this.indexOfGroup(e2 + 1), a2 = (s2 = 0, t.length); s2 < a2; s2++)
      this.tag.insertRule(i2, t[s2]) && (this.groupSizes[e2]++, i2++);
  }, e.prototype.clearGroup = function(e2) {
    if (e2 < this.length) {
      var t = this.groupSizes[e2], n = this.indexOfGroup(e2), o2 = n + t;
      this.groupSizes[e2] = 0;
      for (var r2 = n; r2 < o2; r2++)
        this.tag.deleteRule(n);
    }
  }, e.prototype.getGroup = function(e2) {
    var t = "";
    if (e2 >= this.length || 0 === this.groupSizes[e2])
      return t;
    for (var n = this.groupSizes[e2], o2 = this.indexOfGroup(e2), r2 = o2 + n, s2 = o2; s2 < r2; s2++)
      t += "".concat(this.tag.getRule(s2)).concat(g);
    return t;
  }, e;
}();
var me = 1 << 30;
var ye = /* @__PURE__ */ new Map();
var ve = /* @__PURE__ */ new Map();
var ge = 1;
var Se = function(e) {
  if (ye.has(e))
    return ye.get(e);
  for (; ve.has(ge); )
    ge++;
  var t = ge++;
  if ((0 | t) < 0 || t > me)
    throw he(16, "".concat(t));
  return ye.set(e, t), ve.set(t, e), t;
};
var we = function(e, t) {
  ge = t + 1, ye.set(e, t), ve.set(t, e);
};
var be = "style[".concat(f, "][").concat(y, '="').concat(v, '"]');
var Ee = new RegExp("^".concat(f, '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'));
var Ne = function(e, t, n) {
  for (var o2, r2 = n.split(","), s2 = 0, i2 = r2.length; s2 < i2; s2++)
    (o2 = r2[s2]) && e.registerName(t, o2);
};
var Pe = function(e, t) {
  for (var n, o2 = (null !== (n = t.textContent) && void 0 !== n ? n : "").split(g), r2 = [], s2 = 0, i2 = o2.length; s2 < i2; s2++) {
    var a2 = o2[s2].trim();
    if (a2) {
      var c2 = a2.match(Ee);
      if (c2) {
        var l2 = 0 | parseInt(c2[1], 10), u2 = c2[2];
        0 !== l2 && (we(u2, l2), Ne(e, u2, c2[3]), e.getTag().insertRules(l2, r2)), r2.length = 0;
      } else
        r2.push(a2);
    }
  }
};
var _e = function(e) {
  for (var t = document.querySelectorAll(be), n = 0, o2 = t.length; n < o2; n++) {
    var r2 = t[n];
    r2 && r2.getAttribute(f) !== m && (Pe(e, r2), r2.parentNode && r2.parentNode.removeChild(r2));
  }
};
function Ce() {
  return "undefined" != typeof __webpack_nonce__ ? __webpack_nonce__ : null;
}
var Ie = function(e) {
  var t = document.head, n = e || t, o2 = document.createElement("style"), r2 = function(e2) {
    var t2 = Array.from(e2.querySelectorAll("style[".concat(f, "]")));
    return t2[t2.length - 1];
  }(n), s2 = void 0 !== r2 ? r2.nextSibling : null;
  o2.setAttribute(f, m), o2.setAttribute(y, v);
  var i2 = Ce();
  return i2 && o2.setAttribute("nonce", i2), n.insertBefore(o2, s2), o2;
};
var Ae = function() {
  function e(e2) {
    this.element = Ie(e2), this.element.appendChild(document.createTextNode("")), this.sheet = function(e3) {
      if (e3.sheet)
        return e3.sheet;
      for (var t = document.styleSheets, n = 0, o2 = t.length; n < o2; n++) {
        var r2 = t[n];
        if (r2.ownerNode === e3)
          return r2;
      }
      throw he(17);
    }(this.element), this.length = 0;
  }
  return e.prototype.insertRule = function(e2, t) {
    try {
      return this.sheet.insertRule(t, e2), this.length++, true;
    } catch (e3) {
      return false;
    }
  }, e.prototype.deleteRule = function(e2) {
    this.sheet.deleteRule(e2), this.length--;
  }, e.prototype.getRule = function(e2) {
    var t = this.sheet.cssRules[e2];
    return t && t.cssText ? t.cssText : "";
  }, e;
}();
var Oe = function() {
  function e(e2) {
    this.element = Ie(e2), this.nodes = this.element.childNodes, this.length = 0;
  }
  return e.prototype.insertRule = function(e2, t) {
    if (e2 <= this.length && e2 >= 0) {
      var n = document.createTextNode(t);
      return this.element.insertBefore(n, this.nodes[e2] || null), this.length++, true;
    }
    return false;
  }, e.prototype.deleteRule = function(e2) {
    this.element.removeChild(this.nodes[e2]), this.length--;
  }, e.prototype.getRule = function(e2) {
    return e2 < this.length ? this.nodes[e2].textContent : "";
  }, e;
}();
var De = function() {
  function e(e2) {
    this.rules = [], this.length = 0;
  }
  return e.prototype.insertRule = function(e2, t) {
    return e2 <= this.length && (this.rules.splice(e2, 0, t), this.length++, true);
  }, e.prototype.deleteRule = function(e2) {
    this.rules.splice(e2, 1), this.length--;
  }, e.prototype.getRule = function(e2) {
    return e2 < this.length ? this.rules[e2] : "";
  }, e;
}();
var Re = S;
var Te = { isServer: !S, useCSSOMInjection: !w };
var ke = function() {
  function e(e2, n, o2) {
    void 0 === e2 && (e2 = C), void 0 === n && (n = {});
    var r2 = this;
    this.options = __assign(__assign({}, Te), e2), this.gs = n, this.names = new Map(o2), this.server = !!e2.isServer, !this.server && S && Re && (Re = false, _e(this)), ue(this, function() {
      return function(e3) {
        for (var t = e3.getTag(), n2 = t.length, o3 = "", r3 = function(n3) {
          var r4 = function(e4) {
            return ve.get(e4);
          }(n3);
          if (void 0 === r4)
            return "continue";
          var s3 = e3.names.get(r4), i2 = t.getGroup(n3);
          if (void 0 === s3 || !s3.size || 0 === i2.length)
            return "continue";
          var a2 = "".concat(f, ".g").concat(n3, '[id="').concat(r4, '"]'), c2 = "";
          void 0 !== s3 && s3.forEach(function(e4) {
            e4.length > 0 && (c2 += "".concat(e4, ","));
          }), o3 += "".concat(i2).concat(a2, '{content:"').concat(c2, '"}').concat(g);
        }, s2 = 0; s2 < n2; s2++)
          r3(s2);
        return o3;
      }(r2);
    });
  }
  return e.registerId = function(e2) {
    return Se(e2);
  }, e.prototype.rehydrate = function() {
    !this.server && S && _e(this);
  }, e.prototype.reconstructWithOptions = function(n, o2) {
    return void 0 === o2 && (o2 = true), new e(__assign(__assign({}, this.options), n), this.gs, o2 && this.names || void 0);
  }, e.prototype.allocateGSInstance = function(e2) {
    return this.gs[e2] = (this.gs[e2] || 0) + 1;
  }, e.prototype.getTag = function() {
    return this.tag || (this.tag = (e2 = function(e3) {
      var t = e3.useCSSOMInjection, n = e3.target;
      return e3.isServer ? new De(n) : t ? new Ae(n) : new Oe(n);
    }(this.options), new fe(e2)));
    var e2;
  }, e.prototype.hasNameForId = function(e2, t) {
    return this.names.has(e2) && this.names.get(e2).has(t);
  }, e.prototype.registerName = function(e2, t) {
    if (Se(e2), this.names.has(e2))
      this.names.get(e2).add(t);
    else {
      var n = /* @__PURE__ */ new Set();
      n.add(t), this.names.set(e2, n);
    }
  }, e.prototype.insertRules = function(e2, t, n) {
    this.registerName(e2, t), this.getTag().insertRules(Se(e2), n);
  }, e.prototype.clearNames = function(e2) {
    this.names.has(e2) && this.names.get(e2).clear();
  }, e.prototype.clearRules = function(e2) {
    this.getTag().clearGroup(Se(e2)), this.clearNames(e2);
  }, e.prototype.clearTag = function() {
    this.tag = void 0;
  }, e;
}();
var je = /&/g;
var xe = /^\s*\/\/.*$/gm;
function Ve(e, t) {
  return e.map(function(e2) {
    return "rule" === e2.type && (e2.value = "".concat(t, " ").concat(e2.value), e2.value = e2.value.replaceAll(",", ",".concat(t, " ")), e2.props = e2.props.map(function(e3) {
      return "".concat(t, " ").concat(e3);
    })), Array.isArray(e2.children) && "@keyframes" !== e2.type && (e2.children = Ve(e2.children, t)), e2;
  });
}
function Fe(e) {
  var t, n, o2, r2 = void 0 === e ? C : e, s2 = r2.options, i2 = void 0 === s2 ? C : s2, a2 = r2.plugins, c2 = void 0 === a2 ? _ : a2, l2 = function(e2, o3, r3) {
    return r3.startsWith(n) && r3.endsWith(n) && r3.replaceAll(n, "").length > 0 ? ".".concat(t) : e2;
  }, u2 = c2.slice();
  u2.push(function(e2) {
    e2.type === RULESET && e2.value.includes("&") && (e2.props[0] = e2.props[0].replace(je, n).replace(o2, l2));
  }), i2.prefix && u2.push(prefixer), u2.push(stringify);
  var p2 = function(e2, r3, s3, a3) {
    void 0 === r3 && (r3 = ""), void 0 === s3 && (s3 = ""), void 0 === a3 && (a3 = "&"), t = a3, n = r3, o2 = new RegExp("\\".concat(n, "\\b"), "g");
    var c3 = e2.replace(xe, ""), l3 = compile(s3 || r3 ? "".concat(s3, " ").concat(r3, " { ").concat(c3, " }") : c3);
    i2.namespace && (l3 = Ve(l3, i2.namespace));
    var p3 = [];
    return serialize(l3, middleware(u2.concat(rulesheet(function(e3) {
      return p3.push(e3);
    })))), p3;
  };
  return p2.hash = c2.length ? c2.reduce(function(e2, t2) {
    return t2.name || he(15), M(e2, t2.name);
  }, F).toString() : "", p2;
}
var Me = new ke();
var ze = Fe();
var $e = import_react.default.createContext({ shouldForwardProp: void 0, styleSheet: Me, stylis: ze });
var Be = $e.Consumer;
var Le = import_react.default.createContext(void 0);
function Ge() {
  return (0, import_react.useContext)($e);
}
function Ye(e) {
  var t = (0, import_react.useState)(e.stylisPlugins), n = t[0], r2 = t[1], c2 = Ge().styleSheet, l2 = (0, import_react.useMemo)(function() {
    var t2 = c2;
    return e.sheet ? t2 = e.sheet : e.target && (t2 = t2.reconstructWithOptions({ target: e.target }, false)), e.disableCSSOMInjection && (t2 = t2.reconstructWithOptions({ useCSSOMInjection: false })), t2;
  }, [e.disableCSSOMInjection, e.sheet, e.target, c2]), u2 = (0, import_react.useMemo)(function() {
    return Fe({ options: { namespace: e.namespace, prefix: e.enableVendorPrefixes }, plugins: n });
  }, [e.enableVendorPrefixes, e.namespace, n]);
  (0, import_react.useEffect)(function() {
    (0, import_shallowequal.default)(n, e.stylisPlugins) || r2(e.stylisPlugins);
  }, [e.stylisPlugins]);
  var d = (0, import_react.useMemo)(function() {
    return { shouldForwardProp: e.shouldForwardProp, styleSheet: l2, stylis: u2 };
  }, [e.shouldForwardProp, l2, u2]);
  return import_react.default.createElement($e.Provider, { value: d }, import_react.default.createElement(Le.Provider, { value: u2 }, e.children));
}
var We = function() {
  function e(e2, t) {
    var n = this;
    this.inject = function(e3, t2) {
      void 0 === t2 && (t2 = ze);
      var o2 = n.name + t2.hash;
      e3.hasNameForId(n.id, o2) || e3.insertRules(n.id, o2, t2(n.rules, o2, "@keyframes"));
    }, this.name = e2, this.id = "sc-keyframes-".concat(e2), this.rules = t, ue(this, function() {
      throw he(12, String(n.name));
    });
  }
  return e.prototype.getName = function(e2) {
    return void 0 === e2 && (e2 = ze), this.name + e2.hash;
  }, e;
}();
var qe = function(e) {
  return e >= "A" && e <= "Z";
};
function He(e) {
  for (var t = "", n = 0; n < e.length; n++) {
    var o2 = e[n];
    if (1 === n && "-" === o2 && "-" === e[0])
      return e;
    qe(o2) ? t += "-" + o2.toLowerCase() : t += o2;
  }
  return t.startsWith("ms-") ? "-" + t : t;
}
var Ue = function(e) {
  return null == e || false === e || "" === e;
};
var Je = function(t) {
  var n, o2, r2 = [];
  for (var s2 in t) {
    var i2 = t[s2];
    t.hasOwnProperty(s2) && !Ue(i2) && (Array.isArray(i2) && i2.isCss || re(i2) ? r2.push("".concat(He(s2), ":"), i2, ";") : ce(i2) ? r2.push.apply(r2, __spreadArray(__spreadArray(["".concat(s2, " {")], Je(i2), false), ["}"], false)) : r2.push("".concat(He(s2), ": ").concat((n = s2, null == (o2 = i2) || "boolean" == typeof o2 || "" === o2 ? "" : "number" != typeof o2 || 0 === o2 || n in unitlessKeys || n.startsWith("--") ? String(o2).trim() : "".concat(o2, "px")), ";")));
  }
  return r2;
};
function Xe(e, t, n, o2) {
  if (Ue(e))
    return [];
  if (se(e))
    return [".".concat(e.styledComponentId)];
  if (re(e)) {
    if (!re(s2 = e) || s2.prototype && s2.prototype.isReactComponent || !t)
      return [e];
    var r2 = e(t);
    return "object" != typeof r2 || Array.isArray(r2) || r2 instanceof We || ce(r2) || null === r2 || console.error("".concat(B(e), " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.")), Xe(r2, t, n, o2);
  }
  var s2;
  return e instanceof We ? n ? (e.inject(n, o2), [e.getName(o2)]) : [e] : ce(e) ? Je(e) : Array.isArray(e) ? Array.prototype.concat.apply(_, e.map(function(e2) {
    return Xe(e2, t, n, o2);
  })) : [e.toString()];
}
function Ze(e) {
  for (var t = 0; t < e.length; t += 1) {
    var n = e[t];
    if (re(n) && !se(n))
      return false;
  }
  return true;
}
var Ke = z(v);
var Qe = function() {
  function e(e2, t, n) {
    this.rules = e2, this.staticRulesId = "", this.isStatic = false, this.componentId = t, this.baseHash = M(Ke, t), this.baseStyle = n, ke.registerId(t);
  }
  return e.prototype.generateAndInjectStyles = function(e2, t, n) {
    var o2 = this.baseStyle ? this.baseStyle.generateAndInjectStyles(e2, t, n) : "";
    if (this.isStatic && !n.hash)
      if (this.staticRulesId && t.hasNameForId(this.componentId, this.staticRulesId))
        o2 = ie(o2, this.staticRulesId);
      else {
        var r2 = ae(Xe(this.rules, e2, t, n)), s2 = x(M(this.baseHash, r2) >>> 0);
        if (!t.hasNameForId(this.componentId, s2)) {
          var i2 = n(r2, ".".concat(s2), void 0, this.componentId);
          t.insertRules(this.componentId, s2, i2);
        }
        o2 = ie(o2, s2), this.staticRulesId = s2;
      }
    else {
      for (var a2 = M(this.baseHash, n.hash), c2 = "", l2 = 0; l2 < this.rules.length; l2++) {
        var u2 = this.rules[l2];
        if ("string" == typeof u2)
          c2 += u2, a2 = M(a2, u2);
        else if (u2) {
          var p2 = ae(Xe(u2, e2, t, n));
          a2 = M(a2, p2 + l2), c2 += p2;
        }
      }
      if (c2) {
        var d = x(a2 >>> 0);
        t.hasNameForId(this.componentId, d) || t.insertRules(this.componentId, d, n(c2, ".".concat(d), void 0, this.componentId)), o2 = ie(o2, d);
      }
    }
    return o2;
  }, e;
}();
var et = import_react.default.createContext(void 0);
var tt = et.Consumer;
function nt() {
  var e = (0, import_react.useContext)(et);
  if (!e)
    throw he(18);
  return e;
}
function ot(e) {
  var n = import_react.default.useContext(et), r2 = (0, import_react.useMemo)(function() {
    return function(e2, n2) {
      if (!e2)
        throw he(14);
      if (re(e2)) {
        var o2 = e2(n2);
        if (null === o2 || Array.isArray(o2) || "object" != typeof o2)
          throw he(7);
        return o2;
      }
      if (Array.isArray(e2) || "object" != typeof e2)
        throw he(8);
      return n2 ? __assign(__assign({}, n2), e2) : e2;
    }(e.theme, n);
  }, [e.theme, n]);
  return e.children ? import_react.default.createElement(et.Provider, { value: r2 }, e.children) : null;
}
var rt = {};
var st = /* @__PURE__ */ new Set();
function it(e, r2, s2) {
  var i2 = se(e), a2 = e, c2 = !L(e), p2 = r2.attrs, d = void 0 === p2 ? _ : p2, h = r2.componentId, f2 = void 0 === h ? function(e2, t) {
    var n = "string" != typeof e2 ? "sc" : R(e2);
    rt[n] = (rt[n] || 0) + 1;
    var o2 = "".concat(n, "-").concat($(v + n + rt[n]));
    return t ? "".concat(t, "-").concat(o2) : o2;
  }(r2.displayName, r2.parentComponentId) : h, m3 = r2.displayName, y2 = void 0 === m3 ? function(e2) {
    return L(e2) ? "styled.".concat(e2) : "Styled(".concat(B(e2), ")");
  }(e) : m3, g2 = r2.displayName && r2.componentId ? "".concat(R(r2.displayName), "-").concat(r2.componentId) : r2.componentId || f2, S2 = i2 && a2.attrs ? a2.attrs.concat(d).filter(Boolean) : d, w2 = r2.shouldForwardProp;
  if (i2 && a2.shouldForwardProp) {
    var b2 = a2.shouldForwardProp;
    if (r2.shouldForwardProp) {
      var E2 = r2.shouldForwardProp;
      w2 = function(e2, t) {
        return b2(e2, t) && E2(e2, t);
      };
    } else
      w2 = b2;
  }
  var N2 = new Qe(s2, g2, i2 ? a2.componentStyle : void 0);
  function O2(e2, r3) {
    return function(e3, r4, s3) {
      var i3 = e3.attrs, a3 = e3.componentStyle, c3 = e3.defaultProps, p3 = e3.foldedComponentIds, d2 = e3.styledComponentId, h2 = e3.target, f3 = import_react.default.useContext(et), m4 = Ge(), y3 = e3.shouldForwardProp || m4.shouldForwardProp;
      (0, import_react.useDebugValue)(d2);
      var v2 = I(r4, f3, c3) || C, g3 = function(e4, n, o2) {
        for (var r5, s4 = __assign(__assign({}, n), { className: void 0, theme: o2 }), i4 = 0; i4 < e4.length; i4 += 1) {
          var a4 = re(r5 = e4[i4]) ? r5(s4) : r5;
          for (var c4 in a4)
            s4[c4] = "className" === c4 ? ie(s4[c4], a4[c4]) : "style" === c4 ? __assign(__assign({}, s4[c4]), a4[c4]) : a4[c4];
        }
        return n.className && (s4.className = ie(s4.className, n.className)), s4;
      }(i3, r4, v2), S3 = g3.as || h2, w3 = {};
      for (var b3 in g3)
        void 0 === g3[b3] || "$" === b3[0] || "as" === b3 || "theme" === b3 && g3.theme === v2 || ("forwardedAs" === b3 ? w3.as = g3.forwardedAs : y3 && !y3(b3, S3) || (w3[b3] = g3[b3], y3 || false || isPropValid(b3) || st.has(b3) || !A.has(S3) || (st.add(b3), console.warn('styled-components: it looks like an unknown prop "'.concat(b3, '" is being sent through to the DOM, which will likely trigger a React console error. If you would like automatic filtering of unknown props, you can opt-into that behavior via `<StyleSheetManager shouldForwardProp={...}>` (connect an API like `@emotion/is-prop-valid`) or consider using transient props (`$` prefix for automatic filtering.)')))));
      var E3 = function(e4, t) {
        var n = Ge(), o2 = e4.generateAndInjectStyles(t, n.styleSheet, n.stylis);
        return (0, import_react.useDebugValue)(o2), o2;
      }(a3, g3);
      e3.warnTooManyClasses && e3.warnTooManyClasses(E3);
      var N3 = ie(p3, d2);
      return E3 && (N3 += " " + E3), g3.className && (N3 += " " + g3.className), w3[L(S3) && !A.has(S3) ? "class" : "className"] = N3, w3.ref = s3, (0, import_react.createElement)(S3, w3);
    }(D2, e2, r3);
  }
  O2.displayName = y2;
  var D2 = import_react.default.forwardRef(O2);
  return D2.attrs = S2, D2.componentStyle = N2, D2.displayName = y2, D2.shouldForwardProp = w2, D2.foldedComponentIds = i2 ? ie(a2.foldedComponentIds, a2.styledComponentId) : "", D2.styledComponentId = g2, D2.target = i2 ? a2.target : e, Object.defineProperty(D2, "defaultProps", { get: function() {
    return this._foldedDefaultProps;
  }, set: function(e2) {
    this._foldedDefaultProps = i2 ? function(e3) {
      for (var t = [], n = 1; n < arguments.length; n++)
        t[n - 1] = arguments[n];
      for (var o2 = 0, r3 = t; o2 < r3.length; o2++)
        le(e3, r3[o2], true);
      return e3;
    }({}, a2.defaultProps, e2) : e2;
  } }), P(y2, g2), D2.warnTooManyClasses = function(e2, t) {
    var n = {}, o2 = false;
    return function(r3) {
      if (!o2 && (n[r3] = true, Object.keys(n).length >= 200)) {
        var s3 = t ? ' with the id of "'.concat(t, '"') : "";
        console.warn("Over ".concat(200, " classes were generated for component ").concat(e2).concat(s3, ".\n") + "Consider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"), o2 = true, n = {};
      }
    };
  }(y2, g2), ue(D2, function() {
    return ".".concat(D2.styledComponentId);
  }), c2 && oe(D2, e, { attrs: true, componentStyle: true, displayName: true, foldedComponentIds: true, shouldForwardProp: true, styledComponentId: true, target: true }), D2;
}
function at(e, t) {
  for (var n = [e[0]], o2 = 0, r2 = t.length; o2 < r2; o2 += 1)
    n.push(t[o2], e[o2 + 1]);
  return n;
}
var ct = function(e) {
  return Object.assign(e, { isCss: true });
};
function lt(t) {
  for (var n = [], o2 = 1; o2 < arguments.length; o2++)
    n[o2 - 1] = arguments[o2];
  if (re(t) || ce(t))
    return ct(Xe(at(_, __spreadArray([t], n, true))));
  var r2 = t;
  return 0 === n.length && 1 === r2.length && "string" == typeof r2[0] ? Xe(r2) : ct(Xe(at(r2, n)));
}
function ut(n, o2, r2) {
  if (void 0 === r2 && (r2 = C), !o2)
    throw he(1, o2);
  var s2 = function(t) {
    for (var s3 = [], i2 = 1; i2 < arguments.length; i2++)
      s3[i2 - 1] = arguments[i2];
    return n(o2, r2, lt.apply(void 0, __spreadArray([t], s3, false)));
  };
  return s2.attrs = function(e) {
    return ut(n, o2, __assign(__assign({}, r2), { attrs: Array.prototype.concat(r2.attrs, e).filter(Boolean) }));
  }, s2.withConfig = function(e) {
    return ut(n, o2, __assign(__assign({}, r2), e));
  }, s2;
}
var pt = function(e) {
  return ut(it, e);
};
var dt = pt;
A.forEach(function(e) {
  dt[e] = pt(e);
});
var ht = function() {
  function e(e2, t) {
    this.rules = e2, this.componentId = t, this.isStatic = Ze(e2), ke.registerId(this.componentId + 1);
  }
  return e.prototype.createStyles = function(e2, t, n, o2) {
    var r2 = o2(ae(Xe(this.rules, t, n, o2)), ""), s2 = this.componentId + e2;
    n.insertRules(s2, s2, r2);
  }, e.prototype.removeStyles = function(e2, t) {
    t.clearRules(this.componentId + e2);
  }, e.prototype.renderStyles = function(e2, t, n, o2) {
    e2 > 2 && ke.registerId(this.componentId + e2), this.removeStyles(e2, n), this.createStyles(e2, t, n, o2);
  }, e;
}();
function ft(n) {
  for (var r2 = [], s2 = 1; s2 < arguments.length; s2++)
    r2[s2 - 1] = arguments[s2];
  var i2 = lt.apply(void 0, __spreadArray([n], r2, false)), a2 = "sc-global-".concat($(JSON.stringify(i2))), c2 = new ht(i2, a2);
  P(a2);
  var l2 = function(e) {
    var t = Ge(), n2 = import_react.default.useContext(et), r3 = import_react.default.useRef(t.styleSheet.allocateGSInstance(a2)).current;
    return import_react.default.Children.count(e.children) && console.warn("The global style component ".concat(a2, " was given child JSX. createGlobalStyle does not render children.")), i2.some(function(e2) {
      return "string" == typeof e2 && -1 !== e2.indexOf("@import");
    }) && console.warn("Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app."), t.styleSheet.server && u2(r3, e, t.styleSheet, n2, t.stylis), import_react.default.useLayoutEffect(function() {
      if (!t.styleSheet.server)
        return u2(r3, e, t.styleSheet, n2, t.stylis), function() {
          return c2.removeStyles(r3, t.styleSheet);
        };
    }, [r3, e, t.styleSheet, n2, t.stylis]), null;
  };
  function u2(e, n2, o2, r3, s3) {
    if (c2.isStatic)
      c2.renderStyles(e, b, o2, s3);
    else {
      var i3 = __assign(__assign({}, n2), { theme: I(n2, r3, l2.defaultProps) });
      c2.renderStyles(e, i3, o2, s3);
    }
  }
  return import_react.default.memo(l2);
}
function mt(t) {
  for (var n = [], o2 = 1; o2 < arguments.length; o2++)
    n[o2 - 1] = arguments[o2];
  "undefined" != typeof navigator && "ReactNative" === navigator.product && console.warn("`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.");
  var r2 = ae(lt.apply(void 0, __spreadArray([t], n, false))), s2 = $(r2);
  return new We(s2, r2);
}
var vt = function() {
  function e() {
    var e2 = this;
    this._emitSheetCSS = function() {
      var t = e2.instance.toString();
      if (!t)
        return "";
      var n = Ce(), o2 = ae([n && 'nonce="'.concat(n, '"'), "".concat(f, '="true"'), "".concat(y, '="').concat(v, '"')].filter(Boolean), " ");
      return "<style ".concat(o2, ">").concat(t, "</style>");
    }, this.getStyleTags = function() {
      if (e2.sealed)
        throw he(2);
      return e2._emitSheetCSS();
    }, this.getStyleElement = function() {
      var n;
      if (e2.sealed)
        throw he(2);
      var r2 = e2.instance.toString();
      if (!r2)
        return [];
      var s2 = ((n = {})[f] = "", n[y] = v, n.dangerouslySetInnerHTML = { __html: r2 }, n), i2 = Ce();
      return i2 && (s2.nonce = i2), [import_react.default.createElement("style", __assign({}, s2, { key: "sc-0-0" }))];
    }, this.seal = function() {
      e2.sealed = true;
    }, this.instance = new ke({ isServer: true }), this.sealed = false;
  }
  return e.prototype.collectStyles = function(e2) {
    if (this.sealed)
      throw he(2);
    return import_react.default.createElement(Ye, { sheet: this.instance }, e2);
  }, e.prototype.interleaveWithNodeStream = function(e2) {
    throw he(3);
  }, e;
}();
"undefined" != typeof navigator && "ReactNative" === navigator.product && console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native");
var St = "__sc-".concat(f, "__");
"undefined" != typeof window && (window[St] || (window[St] = 0), 1 === window[St] && console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."), window[St] += 1);

// node_modules/@sanity/icons/dist/index.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react2 = __toESM(require_react());
var AccessDeniedIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "access-denied",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18.1568 6.84315C21.281 9.96734 21.281 15.0327 18.1568 18.1569C15.0326 21.281 9.96733 21.281 6.84313 18.1569C3.71894 15.0327 3.71894 9.96734 6.84313 6.84315C9.96733 3.71895 15.0326 3.71895 18.1568 6.84315ZM18.1568 6.84315L6.844 18.156",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
AccessDeniedIcon.displayName = "ForwardRef(AccessDeniedIcon)";
var ActivityIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "activity",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M21 15H19L15.5 7L11 18L8 12L6 15H4",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ActivityIcon.displayName = "ForwardRef(ActivityIcon)";
var AddCircleIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "add-circle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 12.4H17M12.5 8V17M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
AddCircleIcon.displayName = "ForwardRef(AddCircleIcon)";
var AddCommentIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "add-comment",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M13 6.5H7.5C6.39543 6.5 5.5 7.39543 5.5 8.5V14.5C5.5 15.6046 6.39543 16.5 7.5 16.5H9.5V20.5L13.5 16.5H16.5C17.6046 16.5 18.5 15.6046 18.5 14.5V12M15 6.5H22M18.5 10V3",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
AddCommentIcon.displayName = "ForwardRef(AddCommentIcon)";
var AddDocumentIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "add-document",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 4.5H18.5V12M11.5 4.5L6.5 9.5M11.5 4.5V9.5H6.5M6.5 9.5V19.5H11M20 17.5H16.5M16.5 17.5H13M16.5 17.5V14M16.5 17.5V21",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
AddDocumentIcon.displayName = "ForwardRef(AddDocumentIcon)";
var AddIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "add",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 5V20M5 12.5H20",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
AddIcon.displayName = "ForwardRef(AddIcon)";
var AddUserIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "add-user",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M4.17857 15.2368C3.10714 15.7632 1.5 16.8158 1.5 20.5H16.5C16.5 16.8158 15.2589 15.943 13.8214 15.2368C12.75 14.7105 10.6071 14.7105 10.6071 13.1316C10.6071 11.5526 11.6786 10.7632 11.6786 8.65789C11.6786 6.55263 10.6071 5.5 9 5.5C7.39285 5.5 6.32142 6.55263 6.32142 8.65789C6.32142 10.7632 7.39286 11.5526 7.39286 13.1316C7.39286 14.7105 5.25 14.7105 4.17857 15.2368Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M19.5 7V14M16 10.5H23",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
AddUserIcon.displayName = "ForwardRef(AddUserIcon)";
var ApiIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "api",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M5.93047 13.2107L6.66782 10.3728H6.73089L7.45854 13.2107H5.93047ZM8.17164 16H9.66089L7.56041 9H5.93047L3.82999 16H5.20767L5.65396 14.2876H7.73505L8.17164 16Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10.5389 9V16H11.9166V13.7782H13.0323C14.541 13.7782 15.5015 12.8517 15.5015 11.3964C15.5015 9.92654 14.5701 9 13.1003 9H10.5389ZM11.9166 10.1303H12.751C13.6533 10.1303 14.1044 10.5475 14.1044 11.3867C14.1044 12.2308 13.6533 12.6431 12.751 12.6431H11.9166V10.1303Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M21.1675 16V14.8164H19.717V10.1836H21.1675V9H16.8889V10.1836H18.3393V14.8164H16.8889V16H21.1675Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
ApiIcon.displayName = "ForwardRef(ApiIcon)";
var ArchiveIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "archive",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 10V17M20.5 7.5V20.5H4.5V7.5L7.5 4.5H17.5L20.5 7.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M4.5 7.5H20.5M16 14L12.5 17.5L9 14",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
ArchiveIcon.displayName = "ForwardRef(ArchiveIcon)";
var ArrowDownIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "arrow-down",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M12.5 19.5V5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M18 14L12.5 19.5L7 14",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
ArrowDownIcon.displayName = "ForwardRef(ArrowDownIcon)";
var ArrowLeftIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "arrow-left",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M5.5 12.5H20", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11 18L5.5 12.5L11 7",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
ArrowLeftIcon.displayName = "ForwardRef(ArrowLeftIcon)";
var ArrowRightIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "arrow-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M19.5 12.5H5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 7L19.5 12.5L14 18",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
ArrowRightIcon.displayName = "ForwardRef(ArrowRightIcon)";
var ArrowTopRightIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "arrow-top-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M16.5 8.5L7 18", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)("path", { d: "M9 8.5H16.5V16", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
      ]
    }
  );
});
ArrowTopRightIcon.displayName = "ForwardRef(ArrowTopRightIcon)";
var ArrowUpIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "arrow-up",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7 11L12.5 5.5L18 11",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M12.5 5.5V20", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
      ]
    }
  );
});
ArrowUpIcon.displayName = "ForwardRef(ArrowUpIcon)";
var AsteriskIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "asterisk",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 4V21M16.75 5.13879L8.25 19.8612M19.8612 8.25L5.13878 16.75M4.00002 12.5H21M5.13881 8.25L19.8612 16.75M8.25002 5.13879L16.75 19.8612",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
AsteriskIcon.displayName = "ForwardRef(AsteriskIcon)";
var BarChartIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bar-chart",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 5V19.5H20M8.5 18V13M11.5 18V9M14.5 18V11M17.5 18V7",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
BarChartIcon.displayName = "ForwardRef(BarChartIcon)";
var BasketIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "basket",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8.5 10.5H5L6.5 19.5H18.5L20 10.5H16.5M8.5 10.5L10.2721 5.18377C10.4082 4.77543 10.7903 4.5 11.2208 4.5H13.7792C14.2097 4.5 14.5918 4.77543 14.7279 5.18377L16.5 10.5M8.5 10.5H16.5M8.5 10.5L9.5 19.5M16.5 10.5L15.5 19.5M12.5 10.5V19.5M19.5 13.5H5.5M19 16.5H6",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
BasketIcon.displayName = "ForwardRef(BasketIcon)";
var BellIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bell",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 17.5V18.5C10.5 20 11.5 20.5 12.5 20.5C13.5 20.5 14.5 20 14.5 18.5V17.5M5.5 17.5C6.5 16 6.5 15 6.5 12C6.5 8 8.5 5.5 12.5 5.5C16.5 5.5 18.5 8 18.5 12C18.5 15 18.5 16 19.5 17.5H5.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
BellIcon.displayName = "ForwardRef(BellIcon)";
var BillIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bill",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M6.50001 5.5C8.50003 5.5 8.50003 8 8.50003 8V9.5M6.50001 5.5C4.5 5.5 4.5 8 4.5 8L4.50001 9.5H8.50003M6.50001 5.5C6.50001 5.5 15.8333 5.5 17.6667 5.5C19.5 5.5 19.5 8.5 19.5 8.5V20L17.6667 19L15.8333 20L14 19L12.1667 20L10.3334 19L8.50003 20V9.5M11 12.5H15M11 9.5H16M11 15.5H16",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
BillIcon.displayName = "ForwardRef(BillIcon)";
var BinaryDocumentIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "binary-document",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9.5 12.5V17.5M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5ZM12.5 12.5V17.5H15.5V12.5H12.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinecap: "square",
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
BinaryDocumentIcon.displayName = "ForwardRef(BinaryDocumentIcon)";
var BlockContentIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "block-content",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M21 7.60002L11 7.60003V6.40003L21 6.40002V7.60002Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M21 11.2667L12.4833 11.2667V10.0667L21 10.0667V11.2667Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M21 14.9334H13.9254V13.7334L21 13.7334V14.9334Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M21 18.6002H4V17.4002H21V18.6002Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9.86438 15.6H11.2L8.27623 7.60003H6.92377L4 15.6H5.29072L6.0371 13.4767H9.12362L9.86438 15.6ZM7.53546 9.05255H7.63086L8.80374 12.4344H6.35698L7.53546 9.05255Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
BlockContentIcon.displayName = "ForwardRef(BlockContentIcon)";
var BlockElementIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "block-element",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5 19.5H20M5 5.5H20M6.5 8.5H18.5V16.5H6.5V8.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
BlockElementIcon.displayName = "ForwardRef(BlockElementIcon)";
var BlockquoteIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "blockquote",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10 17.5H19M6 7.5H19M10 12.5H17M6.5 12V18",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
BlockquoteIcon.displayName = "ForwardRef(BlockquoteIcon)";
var BoldIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bold",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M13.2087 18C15.5322 18 16.9731 16.793 16.9731 14.8844C16.9731 13.4812 15.9245 12.3949 14.4836 12.2892V12.1534C15.6001 11.9875 16.4526 10.9841 16.4526 9.82991C16.4526 8.14761 15.1927 7.11409 13.0804 7.11409H8.32019V18H13.2087ZM10.5985 8.85674H12.4995C13.5859 8.85674 14.212 9.37727 14.212 10.2448C14.212 11.1199 13.5406 11.6254 12.3109 11.6254H10.5985V8.85674ZM10.5985 16.2574V13.1643H12.575C13.9178 13.1643 14.6496 13.6924 14.6496 14.6882C14.6496 15.7066 13.9404 16.2574 12.6278 16.2574H10.5985Z",
          fill: "currentColor"
        }
      )
    }
  );
});
BoldIcon.displayName = "ForwardRef(BoldIcon)";
var BoltIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bolt",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18 11.5L9 21L11 13.5H7L16 4L14 11.5H18Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
BoltIcon.displayName = "ForwardRef(BoltIcon)";
var BookIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "book",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M20.5 17.5V5.5L12.5 6.5M20.5 17.5L12.5 18.5M20.5 17.5V18.5M4.5 17.5V5.5L12.5 6.5M4.5 17.5L12.5 18.5M4.5 17.5V18.5M12.5 18.5L4.5 19.5V18.5M12.5 18.5L20.5 19.5V18.5M12.5 18.5V6.5M12.5 18.5H4.5M12.5 18.5H20.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
BookIcon.displayName = "ForwardRef(BookIcon)";
var BottleIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bottle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7.5 17.5L17.5 17.5M17.5 13C17.5 12.087 17.5 11.3518 17.5 11C17.5 8.5 14.5 9 14.5 7.37494L14.5 5.5M17.5 13C17.5 15.1229 17.5 18.7543 17.5 20.5022C17.5 21.0545 17.0523 21.5 16.5 21.5L8.5 21.5C7.94772 21.5 7.5 21.0547 7.5 20.5024C7.5 18.8157 7.5 15.3546 7.5 13M17.5 13L7.5 13M7.5 13C7.5 12.2538 7.5 11.5648 7.5 11C7.5 8.5 10.5 9 10.5 7.37494L10.5 5.5M10.5 5.5L10.5 3.99999C10.5 3.72385 10.7239 3.49999 11 3.49999L14 3.49999C14.2761 3.49999 14.5 3.72385 14.5 3.99999L14.5 5.5M10.5 5.5L14.5 5.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
BottleIcon.displayName = "ForwardRef(BottleIcon)";
var BulbFilledIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "bulb-filled",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M16.4272 14.3368C15.8273 15.1773 15.5 16.1794 15.5 17.212V18.5C15.5 19.0523 15.0523 19.5 14.5 19.5H14V20.5C14 21.0523 13.5523 21.5 13 21.5H12C11.4477 21.5 11 21.0523 11 20.5V19.5H10.5C9.94772 19.5 9.5 19.0523 9.5 18.5V17.212C9.5 16.1794 9.17266 15.1773 8.57284 14.3368C7.60216 12.9767 7 11.94 7 10C7 7 9.5 4.5 12.5 4.5C15.5 4.5 18 7 18 10C18 11.94 17.3978 12.9767 16.4272 14.3368Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16.4272 14.3368L15.9388 13.9883L15.9388 13.9883L16.4272 14.3368ZM14 19.5V18.9H13.4V19.5H14ZM11 19.5H11.6V18.9H11V19.5ZM8.57284 14.3368L9.06122 13.9883L9.06122 13.9883L8.57284 14.3368ZM16.1 17.212C16.1 16.3069 16.3868 15.4261 16.9155 14.6853L15.9388 13.9883C15.2678 14.9284 14.9 16.0519 14.9 17.212H16.1ZM16.1 18.5V17.212H14.9V18.5H16.1ZM14.5 20.1C15.3837 20.1 16.1 19.3837 16.1 18.5H14.9C14.9 18.7209 14.7209 18.9 14.5 18.9V20.1ZM14 20.1H14.5V18.9H14V20.1ZM13.4 19.5V20.5H14.6V19.5H13.4ZM13.4 20.5C13.4 20.7209 13.2209 20.9 13 20.9V22.1C13.8837 22.1 14.6 21.3837 14.6 20.5H13.4ZM13 20.9H12V22.1H13V20.9ZM12 20.9C11.7791 20.9 11.6 20.7209 11.6 20.5H10.4C10.4 21.3837 11.1163 22.1 12 22.1V20.9ZM11.6 20.5V19.5H10.4V20.5H11.6ZM10.5 20.1H11V18.9H10.5V20.1ZM8.9 18.5C8.9 19.3837 9.61634 20.1 10.5 20.1V18.9C10.2791 18.9 10.1 18.7209 10.1 18.5H8.9ZM8.9 17.212V18.5H10.1V17.212H8.9ZM8.08446 14.6853C8.61315 15.4261 8.9 16.3069 8.9 17.212H10.1C10.1 16.0519 9.73217 14.9284 9.06122 13.9883L8.08446 14.6853ZM6.4 10C6.4 11.0377 6.56208 11.8595 6.86624 12.611C7.16624 13.3521 7.59495 13.9995 8.08446 14.6853L9.06122 13.9883C8.58004 13.314 8.22233 12.7629 7.97858 12.1607C7.739 11.5688 7.6 10.9023 7.6 10H6.4ZM12.5 3.9C9.16863 3.9 6.4 6.66863 6.4 10H7.6C7.6 7.33137 9.83137 5.1 12.5 5.1V3.9ZM18.6 10C18.6 6.66863 15.8314 3.9 12.5 3.9V5.1C15.1686 5.1 17.4 7.33137 17.4 10H18.6ZM16.9155 14.6853C17.4051 13.9995 17.8338 13.3521 18.1338 12.611C18.4379 11.8595 18.6 11.0377 18.6 10H17.4C17.4 10.9023 17.261 11.5688 17.0214 12.1607C16.7777 12.7629 16.42 13.314 15.9388 13.9883L16.9155 14.6853Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
BulbFilledIcon.displayName = "ForwardRef(BulbFilledIcon)";
var BulbOutlineIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bulb-outline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 16.5H15.5M11 20V20.5C11 21.0523 11.4477 21.5 12 21.5H13C13.5523 21.5 14 21.0523 14 20.5V20M18 10C18 11.94 17.3978 12.9767 16.4272 14.3368C15.8273 15.1773 15.5 16.1794 15.5 17.212V18.5C15.5 19.0523 15.0523 19.5 14.5 19.5H10.5C9.94772 19.5 9.5 19.0523 9.5 18.5V17.212C9.5 16.1794 9.17266 15.1773 8.57284 14.3368C7.60216 12.9767 7 11.94 7 10C7 7 9.5 4.5 12.5 4.5C15.5 4.5 18 7 18 10Z",
          stroke: "currentColor",
          strokeWidth: 1.2
        }
      )
    }
  );
});
BulbOutlineIcon.displayName = "ForwardRef(BulbOutlineIcon)";
var CalendarIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "calendar",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M4.5 10.5V19.5H20.5V10.5M4.5 10.5V5.5H20.5V10.5M4.5 10.5H12.5H20.5M20.5 13.5H16.5M16.5 13.5H12.5M16.5 13.5V10.5M16.5 13.5V16.5M12.5 13.5H8.5M12.5 13.5V16.5M12.5 13.5V10.5M8.5 13.5H4.5M8.5 13.5V10.5M8.5 13.5V16.5M20.5 16.5H16.5M16.5 16.5H12.5M16.5 16.5V19.5M12.5 16.5H8.5M12.5 16.5V19.5M8.5 16.5H4.5M8.5 16.5V19.5M17.5 8V3M7.5 8V3",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
CalendarIcon.displayName = "ForwardRef(CalendarIcon)";
var CaseIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "case",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9 8.5122V6C9 5.44772 9.44772 5 10 5H15C15.5523 5 16 5.44772 16 6V8.5122M4.5 12V18.5C4.5 19.0523 4.94772 19.5 5.5 19.5H19.5C20.0523 19.5 20.5 19.0523 20.5 18.5V12M4.5 12V9.5122C4.5 8.95991 4.94772 8.5122 5.5 8.5122H19.5C20.0523 8.5122 20.5 8.95991 20.5 9.5122V12M4.5 12L11.7978 14.7367C12.2505 14.9064 12.7495 14.9064 13.2022 14.7367L20.5 12",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
CaseIcon.displayName = "ForwardRef(CaseIcon)";
var ChartUpwardIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "chart-upward",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 5V19.5H20M7.5 16L11.5 11.5L15.5 14L19.5 8.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ChartUpwardIcon.displayName = "ForwardRef(ChartUpwardIcon)";
var CheckmarkCircleIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "checkmark-circle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 12.1316L11.7414 14.5L16 10M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
CheckmarkCircleIcon.displayName = "ForwardRef(CheckmarkCircleIcon)";
var CheckmarkIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "checkmark",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 11.5L10.5 16.5L19.5 7.60001",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
CheckmarkIcon.displayName = "ForwardRef(CheckmarkIcon)";
var ChevronDownIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "chevron-down",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17 10.5L12.5 15L8 10.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ChevronDownIcon.displayName = "ForwardRef(ChevronDownIcon)";
var ChevronLeftIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "chevron-left",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M14.5 17L10 12.5L14.5 8",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ChevronLeftIcon.displayName = "ForwardRef(ChevronLeftIcon)";
var ChevronRightIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "chevron-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 8L15 12.5L10.5 17",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ChevronRightIcon.displayName = "ForwardRef(ChevronRightIcon)";
var ChevronUpIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "chevron-up",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 14.5L12.5 10L17 14.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ChevronUpIcon.displayName = "ForwardRef(ChevronUpIcon)";
var CircleIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "circle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "circle",
        {
          cx: 12.5,
          cy: 12.5,
          r: 8,
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
CircleIcon.displayName = "ForwardRef(CircleIcon)";
var ClipboardIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "clipboard",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 5.5H6.5V19.5H18.5V5.5H17M12.5 3C11.5 3 11.5 4.5 11 4.5C10 4.5 9.5 5 9.5 6.5H15.6C15.6 5 15 4.5 14 4.5C13.5 4.5 13.5 3 12.5 3Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ClipboardIcon.displayName = "ForwardRef(ClipboardIcon)";
var ClipboardImageIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "clipboard-image",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 5.5H6.5V19.5H10.5M17 5.5H18.5V11.5M10.5 18.5L12.73 15.8983C13.1327 15.4285 13.8613 15.4335 14.2575 15.909L15.299 17.1588C15.6754 17.6105 16.3585 17.6415 16.7743 17.2257L16.9903 17.0097C17.2947 16.7053 17.7597 16.6298 18.1447 16.8223L20.5 18M10.5 11.5H20.5V21.5H10.5V11.5ZM12.5 3C11.5 3 11.5 4.5 11 4.5C10 4.5 9.5 5 9.5 6.5H15.6C15.6 5 15 4.5 14 4.5C13.5 4.5 13.5 3 12.5 3Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ClipboardImageIcon.displayName = "ForwardRef(ClipboardImageIcon)";
var ClockIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "clock",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 8V12.5L15.5 15.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ClockIcon.displayName = "ForwardRef(ClockIcon)";
var CloseCircleIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "close-circle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 15.5L12.5 12.5M12.5 12.5L15.5 9.5M12.5 12.5L9.5 9.5M12.5 12.5L15.5 15.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
CloseCircleIcon.displayName = "ForwardRef(CloseCircleIcon)";
var CloseIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "close",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18 7L7 18M7 7L18 18",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
CloseIcon.displayName = "ForwardRef(CloseIcon)";
var CodeBlockIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "code-block",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11 15L8.5 12.5L11 10M14 10L16.5 12.5L14 15M5.5 6.5H19.5V18.5H5.5V6.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
CodeBlockIcon.displayName = "ForwardRef(CodeBlockIcon)";
var CodeIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "code",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11 16L7.5 12.5L11 9M14 9L17.5 12.5L14 16",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
CodeIcon.displayName = "ForwardRef(CodeIcon)";
var CogIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "cog",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14.2624 5.40607L13.8714 4.42848C13.6471 3.86771 13.104 3.5 12.5 3.5C11.896 3.5 11.3529 3.86771 11.1286 4.42848L10.7376 5.40607C10.5857 5.78585 10.2869 6.08826 9.90901 6.2448C9.53111 6.40133 9.10603 6.39874 8.73006 6.23761L7.76229 5.82285C7.20716 5.58494 6.56311 5.70897 6.13604 6.13604C5.70897 6.56311 5.58494 7.20716 5.82285 7.76229L6.23761 8.73006C6.39874 9.10602 6.40133 9.53111 6.2448 9.90901C6.08826 10.2869 5.78585 10.5857 5.40607 10.7376L4.42848 11.1286C3.86771 11.3529 3.5 11.896 3.5 12.5C3.5 13.104 3.86771 13.6471 4.42848 13.8714L5.40607 14.2624C5.78585 14.4143 6.08826 14.7131 6.2448 15.091C6.40133 15.4689 6.39874 15.894 6.23761 16.2699L5.82285 17.2377C5.58494 17.7928 5.70897 18.4369 6.13604 18.864C6.56311 19.291 7.20716 19.4151 7.76229 19.1772L8.73006 18.7624C9.10603 18.6013 9.53111 18.5987 9.90901 18.7552C10.2869 18.9117 10.5857 19.2141 10.7376 19.5939L11.1286 20.5715C11.3529 21.1323 11.896 21.5 12.5 21.5C13.104 21.5 13.6471 21.1323 13.8714 20.5715L14.2624 19.5939C14.4143 19.2141 14.7131 18.9117 15.091 18.7552C15.4689 18.5987 15.894 18.6013 16.2699 18.7624L17.2377 19.1771C17.7928 19.4151 18.4369 19.291 18.864 18.864C19.291 18.4369 19.4151 17.7928 19.1771 17.2377L18.7624 16.2699C18.6013 15.894 18.5987 15.4689 18.7552 15.091C18.9117 14.7131 19.2141 14.4143 19.5939 14.2624L20.5715 13.8714C21.1323 13.6471 21.5 13.104 21.5 12.5C21.5 11.896 21.1323 11.3529 20.5715 11.1286L19.5939 10.7376C19.2141 10.5857 18.9117 10.2869 18.7552 9.90901C18.5987 9.53111 18.6013 9.10602 18.7624 8.73006L19.1772 7.76229C19.4151 7.20716 19.291 6.56311 18.864 6.13604C18.4369 5.70897 17.7928 5.58494 17.2377 5.82285L16.2699 6.23761C15.894 6.39874 15.4689 6.40133 15.091 6.2448C14.7131 6.08826 14.4143 5.78585 14.2624 5.40607Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16.5 12.5C16.5 14.7091 14.7091 16.5 12.5 16.5C10.2909 16.5 8.5 14.7091 8.5 12.5C8.5 10.2909 10.2909 8.5 12.5 8.5C14.7091 8.5 16.5 10.2909 16.5 12.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
CogIcon.displayName = "ForwardRef(CogIcon)";
var CollapseIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "collapse",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6 14.5L10.5 14.5V19M19 10.5H14.5L14.5 6",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10.5 14.5L6 19M14.5 10.5L19 6",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
CollapseIcon.displayName = "ForwardRef(CollapseIcon)";
var ColorWheelIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "color-wheel",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.43853 5.10896L11.1606 9.26642M13.8394 15.7336L15.5615 19.891M15.7336 11.1606L19.891 9.43853M9.26642 13.8394L5.10896 15.5615M5.3139 9.52342L9.23359 11.147M15.7664 13.853L19.6861 15.4766M13.853 9.23359L15.4766 5.3139M9.52342 19.6861L11.147 15.7664M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5ZM16 12.5C16 14.433 14.433 16 12.5 16C10.567 16 9 14.433 9 12.5C9 10.567 10.567 9 12.5 9C14.433 9 16 10.567 16 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ColorWheelIcon.displayName = "ForwardRef(ColorWheelIcon)";
var CommentIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "comment",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7.5 16.5H9.5V20.5L13.5 16.5H17.5C18.6046 16.5 19.5 15.6046 19.5 14.5V8.5C19.5 7.39543 18.6046 6.5 17.5 6.5H7.5C6.39543 6.5 5.5 7.39543 5.5 8.5V14.5C5.5 15.6046 6.39543 16.5 7.5 16.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
CommentIcon.displayName = "ForwardRef(CommentIcon)";
var ComponentIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "component",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8.5 8.5L12.5 12.5M12.5 12.5L16.5 16.5M12.5 12.5L16.5 8.5M12.5 12.5L8.5 16.5M12.5 4L21 12.5L12.5 21L4 12.5L12.5 4Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ComponentIcon.displayName = "ForwardRef(ComponentIcon)";
var ComposeIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "compose",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17 6L19 8M14 5.5H5.5V19.5H19.5V11M9 16L9.5 13.5L19 4L21 6L11.5 15.5L9 16Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ComposeIcon.displayName = "ForwardRef(ComposeIcon)";
var ConfettiIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "confetti",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16.5 6.25C16.9142 6.25 17.25 5.91421 17.25 5.5C17.25 5.08579 16.9142 4.75 16.5 4.75C16.0858 4.75 15.75 5.08579 15.75 5.5C15.75 5.91421 16.0858 6.25 16.5 6.25Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M19.5 16.25C19.9142 16.25 20.25 15.9142 20.25 15.5C20.25 15.0858 19.9142 14.75 19.5 14.75C19.0858 14.75 18.75 15.0858 18.75 15.5C18.75 15.9142 19.0858 16.25 19.5 16.25Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M13 4C11 6 14.5 5.5 12.5 7.5M21 12C19 14 19.5 10.5 17.5 12.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16.066 16.4904C15.3965 17.1598 13.1126 15.9613 10.9647 13.8135C8.81684 11.6656 7.61835 9.38165 8.28782 8.71218M16.066 16.4904C16.7355 15.8209 15.537 13.537 13.3891 11.3891C11.2412 9.2412 8.95729 8.04271 8.28782 8.71218M16.066 16.4904C15.8661 16.6902 15.6277 16.8474 15.3657 16.952L6.99288 20.296C6.26931 20.5849 5.44878 20.4193 4.9038 19.8744C4.35883 19.3294 4.19324 18.5089 4.48221 17.7853L7.82614 9.41242C7.93077 9.15042 8.08793 8.91208 8.28782 8.71218M20 5C20 14 11.5 5.32688 11.5 14.3269",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
ConfettiIcon.displayName = "ForwardRef(ConfettiIcon)";
var ControlsIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "controls",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M6.5 5V7.5M6.5 7.5C5.39543 7.5 4.5 8.39543 4.5 9.5C4.5 10.6046 5.39543 11.5 6.5 11.5M6.5 7.5C7.60457 7.5 8.5 8.39543 8.5 9.5C8.5 10.6046 7.60457 11.5 6.5 11.5M6.5 11.5V20M12.5 5V13.5M12.5 13.5C11.3954 13.5 10.5 14.3954 10.5 15.5C10.5 16.6046 11.3954 17.5 12.5 17.5M12.5 13.5C13.6046 13.5 14.5 14.3954 14.5 15.5C14.5 16.6046 13.6046 17.5 12.5 17.5M12.5 17.5V20M18.5 5V7.5M18.5 7.5C17.3954 7.5 16.5 8.39543 16.5 9.5C16.5 10.6046 17.3954 11.5 18.5 11.5M18.5 7.5C19.6046 7.5 20.5 8.39543 20.5 9.5C20.5 10.6046 19.6046 11.5 18.5 11.5M18.5 11.5V20",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ControlsIcon.displayName = "ForwardRef(ControlsIcon)";
var CopyIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "copy",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8.5 8.5H5.5V20.5H16.5V16.5M19.5 4.5H8.5V16.5H19.5V4.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
CopyIcon.displayName = "ForwardRef(CopyIcon)";
var CreditCardIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "credit-card",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M20.5 9.5H4.5V11.5H20.5V9.5Z",
            fill: "currentColor",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7 15.5H14M5.5 18.5H19.5C20.0523 18.5 20.5 18.0523 20.5 17.5V7.5C20.5 6.94772 20.0523 6.5 19.5 6.5H5.5C4.94772 6.5 4.5 6.94772 4.5 7.5V17.5C4.5 18.0523 4.94772 18.5 5.5 18.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
CreditCardIcon.displayName = "ForwardRef(CreditCardIcon)";
var CropIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "crop",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 5V15.5H20M5 9.5H15.5V20",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
CropIcon.displayName = "ForwardRef(CropIcon)";
var CubeIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "cube",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M4.5 8L12.5 3L20.5 8V17L12.5 22L4.5 17V8Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 22V13M12.5 13L4.5 8M12.5 13L20.5 8",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
CubeIcon.displayName = "ForwardRef(CubeIcon)";
var DashboardIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "dashboard",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M14.5 19.5V12.5M10.5 12.5V5.5M5.5 12.5H19.5M5.5 19.5H19.5V5.5H5.5V19.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
DashboardIcon.displayName = "ForwardRef(DashboardIcon)";
var DatabaseIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "database",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18.5 7V17.5C18.5 19.0594 16.0504 20.5 12.5 20.5C8.9496 20.5 6.5 19.0594 6.5 17.5V7M18.5 7C18.5 8.45543 15.8137 9.5 12.5 9.5C9.18629 9.5 6.5 8.45543 6.5 7C6.5 5.54457 9.18629 4.5 12.5 4.5C15.8137 4.5 18.5 5.54457 18.5 7Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
DatabaseIcon.displayName = "ForwardRef(DatabaseIcon)";
var DesktopIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "desktop",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M4.5 13.5V15.5C4.5 16.0523 4.94772 16.5 5.5 16.5H12.5M4.5 13.5V6.5C4.5 5.94772 4.94772 5.5 5.5 5.5H19.5C20.0523 5.5 20.5 5.94772 20.5 6.5V13.5M4.5 13.5H20.5M20.5 13.5V15.5C20.5 16.0523 20.0523 16.5 19.5 16.5H12.5M12.5 16.5V19.5M12.5 19.5H8M12.5 19.5H17",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
DesktopIcon.displayName = "ForwardRef(DesktopIcon)";
var DiamondIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "diamond",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M21 10.5L12.5 21M21 10.5L18 5.5H11M21 10.5H16M12.5 21L4 10.5M12.5 21L9 10.5M12.5 21L16 10.5M4 10.5L7 5.5H11M4 10.5H9M9 10.5H12.5H16M9 10.5L11 5.5M16 10.5L14.5 5.5H11",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
DiamondIcon.displayName = "ForwardRef(DiamondIcon)";
var DocumentIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 4.5H18.5V20.5H6.5L6.5 9.5M11.5 4.5L6.5 9.5M11.5 4.5V9.5H6.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
DocumentIcon.displayName = "ForwardRef(DocumentIcon)";
var DocumentPdfIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-pdf",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.7127 13.8012L12.7193 13.77C12.8488 13.2366 13.0117 12.5716 12.8845 11.969C12.7997 11.4937 12.4493 11.3084 12.1503 11.295C11.7977 11.2794 11.483 11.4803 11.4049 11.7726C11.2576 12.3082 11.3893 13.0402 11.6303 13.973C11.3268 14.6961 10.8425 15.7472 10.4877 16.3721C9.8271 16.7135 8.94113 17.2402 8.80946 17.9053C8.78268 18.028 8.81392 18.1842 8.88757 18.3248C8.97014 18.481 9.10181 18.6015 9.25579 18.6596C9.32274 18.6841 9.40308 18.7042 9.49681 18.7042C9.88959 18.7042 10.5256 18.3873 11.3736 16.9322C11.5031 16.8898 11.637 16.8452 11.7664 16.8006C12.3734 16.5953 13.0028 16.381 13.5718 16.2851C14.2012 16.622 14.9175 16.8385 15.404 16.8385C15.8861 16.8385 16.0758 16.5529 16.1472 16.381C16.2722 16.0797 16.2119 15.7004 16.0088 15.4973C15.7143 15.2072 14.9979 15.1313 13.882 15.2696C13.3331 14.9349 12.9738 14.4796 12.7127 13.8012ZM10.2645 17.1911C9.95431 17.6419 9.71998 17.8673 9.59278 17.9655C9.7423 17.691 10.0346 17.4009 10.2645 17.1911ZM12.2195 11.9355C12.3355 12.1341 12.3199 12.7345 12.2306 13.038C12.1213 12.5939 12.1056 11.9645 12.1704 11.8909L12.2195 11.9355ZM12.1837 14.6247C12.4225 15.0376 12.7238 15.3924 13.0563 15.6557C12.5743 15.7651 12.1346 15.9458 11.7419 16.1065C11.6481 16.1445 11.5566 16.1824 11.4674 16.2181C11.7642 15.6803 12.0119 15.071 12.1837 14.6247ZM15.6562 16.0864L15.6428 16.1065C15.6428 16.1065 15.4375 16.2315 14.6497 15.9213C15.5558 15.8789 15.6562 16.0864 15.6562 16.0864Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
DocumentPdfIcon.displayName = "ForwardRef(DocumentPdfIcon)";
var DocumentRemoveIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-remove",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6.5 14V20.5H18.5V14M6.5 11V9.5L11.5 4.5H18.5V11M3 12.5H22",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
DocumentRemoveIcon.displayName = "ForwardRef(DocumentRemoveIcon)";
var DocumentSheetIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-sheet",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10.4 19V16.4M10.4 16.4L10.4 13.4M10.4 16.4H8M10.4 16.4H14.4M10.4 13.4V11M10.4 13.4H8M10.4 13.4H14.4M14.4 19V16.4M14.4 16.4V13.4M14.4 16.4H17M14.4 13.4V11M14.4 13.4H17M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
DocumentSheetIcon.displayName = "ForwardRef(DocumentSheetIcon)";
var DocumentTextIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-text",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16 13H9M14 16H9M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
DocumentTextIcon.displayName = "ForwardRef(DocumentTextIcon)";
var DocumentVideoIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-video",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 16.5V13.5L14 15L11.5 16.5Z",
            fill: "currentColor",
            stroke: "currentColor",
            strokeWidth: 1.2
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
DocumentVideoIcon.displayName = "ForwardRef(DocumentVideoIcon)";
var DocumentWordIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-word",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.4699 13.4588H12.5263L13.6328 17H14.5435L16 12H14.9952L14.0656 15.7214H14.0129L12.929 12H12.0672L10.9984 15.7214H10.9419L10.0124 12H9L10.4565 17H11.371L12.4699 13.4588Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
DocumentWordIcon.displayName = "ForwardRef(DocumentWordIcon)";
var DocumentZipIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-zip",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15 4.5L13.5 5L15.5 6L13.5 7L15.5 8L13.5 9L15.5 10L13.5 11L14.5 11.5V13M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5ZM13.5 13H15.5L16 17H13L13.5 13Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
DocumentZipIcon.displayName = "ForwardRef(DocumentZipIcon)";
var DocumentsIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "documents",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M10.5 4.5V9.5H5.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16.5 7.5H19.5V21.5H8.5V18.5M10.5 4.5H16.5V18.5H5.5V9.5L10.5 4.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
DocumentsIcon.displayName = "ForwardRef(DocumentsIcon)";
var DotIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "dot",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "circle",
        {
          cx: 12.5,
          cy: 12.5,
          r: 2.5,
          fill: "currentColor",
          stroke: "currentColor",
          strokeWidth: 1.2
        }
      )
    }
  );
});
DotIcon.displayName = "ForwardRef(DotIcon)";
var DoubleChevronDownIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "double-chevron-down",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17 8L12.5 12.5L8 8M17 13L12.5 17.5L8 13",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
DoubleChevronDownIcon.displayName = "ForwardRef(DoubleChevronDownIcon)";
var DoubleChevronLeftIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "double-chevron-left",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12 17L7.5 12.5L12 8M17 17L12.5 12.5L17 8",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
DoubleChevronLeftIcon.displayName = "ForwardRef(DoubleChevronLeftIcon)";
var DoubleChevronRightIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "double-chevron-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M13 8L17.5 12.5L13 17M8 8L12.5 12.5L8 17",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
DoubleChevronRightIcon.displayName = "ForwardRef(DoubleChevronRightIcon)";
var DoubleChevronUpIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "double-chevron-up",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 12L12.5 7.5L17 12M8 17L12.5 12.5L17 17",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
DoubleChevronUpIcon.displayName = "ForwardRef(DoubleChevronUpIcon)";
var DownloadIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "download",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M19.5 17V19.5H5.5V17M12.5 16L12.5 5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M17.5 11L12.5 16L7.5 11",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
DownloadIcon.displayName = "ForwardRef(DownloadIcon)";
var DragHandleIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "drag-handle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9.5 8C10.3284 8 11 7.32843 11 6.5C11 5.67157 10.3284 5 9.5 5C8.67157 5 8 5.67157 8 6.5C8 7.32843 8.67157 8 9.5 8Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9.5 14C10.3284 14 11 13.3284 11 12.5C11 11.6716 10.3284 11 9.5 11C8.67157 11 8 11.6716 8 12.5C8 13.3284 8.67157 14 9.5 14Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11 18.5C11 19.3284 10.3284 20 9.5 20C8.67157 20 8 19.3284 8 18.5C8 17.6716 8.67157 17 9.5 17C10.3284 17 11 17.6716 11 18.5Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15.5 8C16.3284 8 17 7.32843 17 6.5C17 5.67157 16.3284 5 15.5 5C14.6716 5 14 5.67157 14 6.5C14 7.32843 14.6716 8 15.5 8Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M17 12.5C17 13.3284 16.3284 14 15.5 14C14.6716 14 14 13.3284 14 12.5C14 11.6716 14.6716 11 15.5 11C16.3284 11 17 11.6716 17 12.5Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15.5 20C16.3284 20 17 19.3284 17 18.5C17 17.6716 16.3284 17 15.5 17C14.6716 17 14 17.6716 14 18.5C14 19.3284 14.6716 20 15.5 20Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
DragHandleIcon.displayName = "ForwardRef(DragHandleIcon)";
var DropIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "drop",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18.5 14.5C18.5 18 16 20.5 12.5 20.5C9 20.5 6.5 18 6.5 14.5C6.5 11 9.5 7.50001 12.5 4.5C15.5 7.5 18.5 11 18.5 14.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
DropIcon.displayName = "ForwardRef(DropIcon)";
var EarthAmericasIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "earth-americas",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7 13L5.5 9L10 5H15V10L14 9H11L9.5 11L10.5 12H12V13L13 14.5H15.5L18.5 17L15.5 19.5L10.5 20V17L12.5 15L9 13L7 10.5V13Z",
            fill: "currentColor",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "circle",
          {
            cx: 12.5,
            cy: 12.5,
            r: 8,
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
EarthAmericasIcon.displayName = "ForwardRef(EarthAmericasIcon)";
var EarthGlobeIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "earth-globe",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 16.5H19.5M5.5 8.5H19.5M4.5 12.5H20.5M12.5 20.5C12.5 20.5 8 18.5 8 12.5C8 6.5 12.5 4.5 12.5 4.5M12.5 4.5C12.5 4.5 17 6.5 17 12.5C17 18.5 12.5 20.5 12.5 20.5M12.5 4.5V20.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
EarthGlobeIcon.displayName = "ForwardRef(EarthGlobeIcon)";
var EditIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "edit",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M15 7L18 10M6 19L7 15L17 5L20 8L10 18L6 19Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
EditIcon.displayName = "ForwardRef(EditIcon)";
var EllipsisHorizontalIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "ellipsis-horizontal",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6.5 11C7.32843 11 8 11.6716 8 12.5C8 13.3284 7.32843 14 6.5 14C5.67157 14 5 13.3284 5 12.5C5 11.6716 5.67157 11 6.5 11Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 11C13.3284 11 14 11.6716 14 12.5C14 13.3284 13.3284 14 12.5 14C11.6716 14 11 13.3284 11 12.5C11 11.6716 11.6716 11 12.5 11Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M18.5 11C19.3284 11 20 11.6716 20 12.5C20 13.3284 19.3284 14 18.5 14C17.6716 14 17 13.3284 17 12.5C17 11.6716 17.6716 11 18.5 11Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
EllipsisHorizontalIcon.displayName = "ForwardRef(EllipsisHorizontalIcon)";
var EllipsisVerticalIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "ellipsis-vertical",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 6.5C14 7.32843 13.3284 8 12.5 8C11.6716 8 11 7.32843 11 6.5C11 5.67157 11.6716 5 12.5 5C13.3284 5 14 5.67157 14 6.5Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 12.5C14 13.3284 13.3284 14 12.5 14C11.6716 14 11 13.3284 11 12.5C11 11.6716 11.6716 11 12.5 11C13.3284 11 14 11.6716 14 12.5Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 18.5C14 19.3284 13.3284 20 12.5 20C11.6716 20 11 19.3284 11 18.5C11 17.6716 11.6716 17 12.5 17C13.3284 17 14 17.6716 14 18.5Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
EllipsisVerticalIcon.displayName = "ForwardRef(EllipsisVerticalIcon)";
var EmptyIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "empty",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 21V19.1111M8.25 19.8614L9.19445 18.2255M5.13878 16.7501L6.77461 15.8057M4 12.5H5.8889M5.13872 8.2499L6.77455 9.19436M8.25004 5.13876L9.19449 6.7746M12.5 5.88891V4M15.8055 6.77465L16.75 5.1388M18.2254 9.19449L19.8612 8.25004M19.1111 12.5001H21M18.2254 15.8056L19.8612 16.7501M15.8056 18.2255L16.75 19.8614",
          stroke: "currentColor",
          strokeWidth: 1.2
        }
      )
    }
  );
});
EmptyIcon.displayName = "ForwardRef(EmptyIcon)";
var EnterIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "enter",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M6 14.5H19.5V7", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10 18.5L6 14.5L10 10.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
EnterIcon.displayName = "ForwardRef(EnterIcon)";
var EnterRightIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "enter-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M19 14.5H5.5V7", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15 18.5L19 14.5L15 10.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
EnterRightIcon.displayName = "ForwardRef(EnterRightIcon)";
var EnvelopeIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "envelope",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M20.5 18.5H4.5V6.5H20.5V18.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M20.5 18.5L17.75 15.5L15 12.5M4.5 18.5L10 12.5M20.5 6.5L12.5 15L4.5 6.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
EnvelopeIcon.displayName = "ForwardRef(EnvelopeIcon)";
var EqualIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "equal",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M7.5 4.5H3.5V20.5H7.5", stroke: "currentColor", strokeWidth: 1.2 }),
        (0, import_jsx_runtime.jsx)("path", { d: "M17.5 20.5L21.5 20.5L21.5 4.5L17.5 4.5", stroke: "currentColor", strokeWidth: 1.2 }),
        (0, import_jsx_runtime.jsx)("path", { d: "M9 10.5H16", stroke: "currentColor", strokeWidth: 1.2 }),
        (0, import_jsx_runtime.jsx)("path", { d: "M9 14.5H16", stroke: "currentColor", strokeWidth: 1.2 })
      ]
    }
  );
});
EqualIcon.displayName = "ForwardRef(EqualIcon)";
var ErrorFilledIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "error-filled",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M4 12.5C4 7.80558 7.80558 4 12.5 4C17.1944 4 21 7.80558 21 12.5C21 17.1944 17.1944 21 12.5 21C7.80558 21 4 17.1944 4 12.5ZM13 14.5V16H12V14.5H13ZM12 9V13H13V9H12Z",
          fill: "currentColor"
        }
      )
    }
  );
});
ErrorFilledIcon.displayName = "ForwardRef(ErrorFilledIcon)";
var ErrorOutlineIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "error-outline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 16V14.5M12.5 9V13M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ErrorOutlineIcon.displayName = "ForwardRef(ErrorOutlineIcon)";
var ExpandIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "expand",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 6.5H18.5V11M11 18.5H6.5V14",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M18.5 6.5L14 11M6.5 18.5L11 14",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
ExpandIcon.displayName = "ForwardRef(ExpandIcon)";
var EyeClosedIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "eye-closed",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7 15.5L5.5 17.5M20.5 12.5C19.8612 13.5647 19.041 14.6294 18.0008 15.501M18.0008 15.501C16.5985 16.676 14.7965 17.5 12.5 17.5M18.0008 15.501L18 15.5M18.0008 15.501L19.5 17.5M12.5 17.5C8.5 17.5 6 15 4.5 12.5M12.5 17.5V20M15.5 17L16.5 19.5M9.5 17L8.5 19.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
EyeClosedIcon.displayName = "ForwardRef(EyeClosedIcon)";
var EyeOpenIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "eye-open",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M9.39999 12.5C9.39999 10.7879 10.7879 9.39999 12.5 9.39999C14.2121 9.39999 15.6 10.7879 15.6 12.5C15.6 14.2121 14.2121 15.6 12.5 15.6C10.7879 15.6 9.39999 14.2121 9.39999 12.5Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 7.5C8.5 7.5 6 10 4.5 12.5C6 15 8.5 17.5 12.5 17.5C16.5 17.5 19 15 20.5 12.5C19 10 16.5 7.5 12.5 7.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
EyeOpenIcon.displayName = "ForwardRef(EyeOpenIcon)";
var FilterIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "filter",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11 12L6 7V6L19 6L19 7L14 12V17L11 19V12Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinecap: "square",
          strokeLinejoin: "round"
        }
      )
    }
  );
});
FilterIcon.displayName = "ForwardRef(FilterIcon)";
var FolderIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "folder",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11.5 8.5H19.5V18.5H5.5V5.5H10.5L11.5 8.5ZM11.5 8.5H5.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
FolderIcon.displayName = "ForwardRef(FolderIcon)";
var GenerateIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "generate",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9 5.30423C6.33576 6.60253 4.5 9.33688 4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5V14.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16 11L12.5 14.5L9 11",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
GenerateIcon.displayName = "ForwardRef(GenerateIcon)";
var GroqIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "groq",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M13 13H21L13 21L13 13Z", fill: "currentColor" }),
        (0, import_jsx_runtime.jsx)("path", { d: "M12 12V4L4 12H12Z", fill: "currentColor" }),
        (0, import_jsx_runtime.jsx)("path", { d: "M12 13H4L12 21V13Z", fill: "currentColor" })
      ]
    }
  );
});
GroqIcon.displayName = "ForwardRef(GroqIcon)";
var HashIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "hash",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M8.33894 16.1002H5.44615L5.63077 14.9002H8.52356L9.26202 10.1002H6.36923L6.55384 8.90018H9.44663L9.89281 6H11.1069L10.6608 8.90018H15.4466L15.8928 6H17.1069L16.6608 8.90018H19.5539L19.3693 10.1002H16.4761L15.7377 14.9002H18.6308L18.4462 16.1002H15.5531L15.1069 19H13.8928L14.3389 16.1002H9.55306L9.10693 19H7.89281L8.33894 16.1002ZM10.4761 10.1002L9.73767 14.9002H14.5236L15.262 10.1002H10.4761Z",
          fill: "currentColor"
        }
      )
    }
  );
});
HashIcon.displayName = "ForwardRef(HashIcon)";
var HeartFilledIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "heart-filled",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17 16C15.8 17.3235 12.5 20.5 12.5 20.5C12.5 20.5 9.2 17.3235 8 16C5.2 12.9118 4.5 11.7059 4.5 9.5C4.5 7.29412 6.1 5.5 8.5 5.5C10.5 5.5 11.7 6.82353 12.5 8.14706C13.3 6.82353 14.5 5.5 16.5 5.5C18.9 5.5 20.5 7.29412 20.5 9.5C20.5 11.7059 19.8 12.9118 17 16Z",
          fill: "currentColor",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
HeartFilledIcon.displayName = "ForwardRef(HeartFilledIcon)";
var HeartIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "heart",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17 16C15.8 17.3235 12.5 20.5 12.5 20.5C12.5 20.5 9.2 17.3235 8 16C5.2 12.9118 4.5 11.7059 4.5 9.5C4.5 7.29412 6.1 5.5 8.5 5.5C10.5 5.5 11.7 6.82353 12.5 8.14706C13.3 6.82353 14.5 5.5 16.5 5.5C18.9 5.5 20.5 7.29412 20.5 9.5C20.5 11.7059 19.8 12.9118 17 16Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
HeartIcon.displayName = "ForwardRef(HeartIcon)";
var HelpCircleIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "help-circle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 13C12.5 11 14 11.5 14 10C14 9.34375 13.5 8.5 12.5 8.5C11.5 8.5 11 9 10.5 9.5M12.5 16V14.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
HelpCircleIcon.displayName = "ForwardRef(HelpCircleIcon)";
var HighlightIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "highlight",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17.5311 13.7141L8.0245 8.22547M17.5311 13.7141L20.25 9.00478M17.5311 13.7141L16.5 15.5L13.232 16.134L12 18L11.4142 17.6485M8.0245 8.22547L10.75 3.50479M8.0245 8.22547L6.99999 9.99998L7.99998 13L6.99998 15L7.58576 15.3514M7.58576 15.3514L4.90192 20L10.0566 20L11.4142 17.6485M7.58576 15.3514L11.4142 17.6485M13 20H20",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
HighlightIcon.displayName = "ForwardRef(HighlightIcon)";
var HomeIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "home",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M6.5 8.75V18.5H18.5V8.75M4.5 10L12.5 5L20.5 10M14.5 18.5V11.5H10.5V18.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
HomeIcon.displayName = "ForwardRef(HomeIcon)";
var IceCreamIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "ice-cream",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 13.5L12.5 20.5L15.5 13.5M12.5 8.26389C11.9692 7.78885 11.2684 7.5 10.5 7.5C8.84315 7.5 7.5 8.84315 7.5 10.5C7.5 12.1569 8.84315 13.5 10.5 13.5C11.2684 13.5 11.9692 13.2111 12.5 12.7361M9.5 7.5C9.5 5.84315 10.8431 4.5 12.5 4.5C14.1569 4.5 15.5 5.84315 15.5 7.5M17.5 10.5C17.5 12.1569 16.1569 13.5 14.5 13.5C12.8431 13.5 11.5 12.1569 11.5 10.5C11.5 8.84315 12.8431 7.5 14.5 7.5C16.1569 7.5 17.5 8.84315 17.5 10.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
IceCreamIcon.displayName = "ForwardRef(IceCreamIcon)";
var ImageIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "image",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 15.5L8.79289 12.2071C9.18342 11.8166 9.81658 11.8166 10.2071 12.2071L12.8867 14.8867C13.2386 15.2386 13.7957 15.2782 14.1938 14.9796L15.1192 14.2856C15.3601 14.1049 15.6696 14.0424 15.9618 14.1154L19.5 15M5.5 6.5H19.5V18.5H5.5V6.5ZM15.5 10.5C15.5 11.0523 15.0523 11.5 14.5 11.5C13.9477 11.5 13.5 11.0523 13.5 10.5C13.5 9.94772 13.9477 9.5 14.5 9.5C15.0523 9.5 15.5 9.94772 15.5 10.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ImageIcon.displayName = "ForwardRef(ImageIcon)";
var ImageRemoveIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "image-remove",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 11V6.5H19.5V11M5.5 14V18.5H19.5V14M3 12.5H22",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ImageRemoveIcon.displayName = "ForwardRef(ImageRemoveIcon)";
var ImagesIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "images",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18.5 7.5H20.5V19.5H6.5V17.5M4.5 14.5L7.79289 11.2071C8.18342 10.8166 8.81658 10.8166 9.20711 11.2071L11.8867 13.8867C12.2386 14.2386 12.7957 14.2782 13.1938 13.9796L14.1192 13.2856C14.3601 13.1049 14.6696 13.0424 14.9618 13.1154L18.5 14M4.5 5.5H18.5V17.5H4.5V5.5ZM14.5 9.5C14.5 10.0523 14.0523 10.5 13.5 10.5C12.9477 10.5 12.5 10.0523 12.5 9.5C12.5 8.94772 12.9477 8.5 13.5 8.5C14.0523 8.5 14.5 8.94772 14.5 9.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ImagesIcon.displayName = "ForwardRef(ImagesIcon)";
var InfoFilledIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "info-filled",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M21 12.5C21 17.1944 17.1944 21 12.5 21C7.80558 21 4 17.1944 4 12.5C4 7.80558 7.80558 4 12.5 4C17.1944 4 21 7.80558 21 12.5ZM12 10.5V9H13V10.5H12ZM13 16V12H12V16H13Z",
          fill: "currentColor"
        }
      )
    }
  );
});
InfoFilledIcon.displayName = "ForwardRef(InfoFilledIcon)";
var InfoOutlineIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "info-outline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 10.5V9M12.5 12V16M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
InfoOutlineIcon.displayName = "ForwardRef(InfoOutlineIcon)";
var InlineElementIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "inline-element",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 5V20M19.5 5V20M8.5 6.5H16.5V18.5H8.5V6.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
InlineElementIcon.displayName = "ForwardRef(InlineElementIcon)";
var InlineIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "inline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 6.5H19.5V18.5H12.5M12.5 6.5H5.5V18.5H12.5M12.5 6.5V18.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
InlineIcon.displayName = "ForwardRef(InlineIcon)";
var InsertAboveIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "insert-above",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M14.5 10.5556L10.5 10.5556M12.5 12.5L12.5 8.5M18.5 5.5L6.5 5.5M18.5 19.5L6.5 19.5L6.5 15.5L18.5 15.5L18.5 19.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinecap: "square",
          strokeLinejoin: "round"
        }
      )
    }
  );
});
InsertAboveIcon.displayName = "ForwardRef(InsertAboveIcon)";
var InsertBelowIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "insert-below",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 14.5H14.5M12.5 12.5V16.5M6.5 19.5H18.5M6.5 5.5H18.5V9.5H6.5V5.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinecap: "square",
          strokeLinejoin: "round"
        }
      )
    }
  );
});
InsertBelowIcon.displayName = "ForwardRef(InsertBelowIcon)";
var ItalicIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "italic",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.43 18H11.7276L13.4551 9.86763H12.1576L10.43 18ZM13.3043 8.29849C13.8022 8.29849 14.2095 7.89112 14.2095 7.39322C14.2095 6.89532 13.8022 6.48795 13.3043 6.48795C12.8064 6.48795 12.399 6.89532 12.399 7.39322C12.399 7.89112 12.8064 8.29849 13.3043 8.29849Z",
          fill: "currentColor"
        }
      )
    }
  );
});
ItalicIcon.displayName = "ForwardRef(ItalicIcon)";
var JoystickIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "joystick",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 16V14.5H15.5V16M13.5 10.5V14.5M11.5 10.5V14.5M15.5 7.5C15.5 9.15685 14.1569 10.5 12.5 10.5C10.8431 10.5 9.5 9.15685 9.5 7.5C9.5 5.84315 10.8431 4.5 12.5 4.5C14.1569 4.5 15.5 5.84315 15.5 7.5ZM18.5 19.5H6.5C5.94772 19.5 5.5 19.0523 5.5 18.5V17.5C5.5 16.9477 5.94772 16.5 6.5 16.5H18.5C19.0523 16.5 19.5 16.9477 19.5 17.5V18.5C19.5 19.0523 19.0523 19.5 18.5 19.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
JoystickIcon.displayName = "ForwardRef(JoystickIcon)";
var JsonIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "json",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11 5.5H9.5C8.39543 5.5 7.5 6.39543 7.5 7.5V12.5M7.5 12.5H4M7.5 12.5V17.5C7.5 18.6046 8.39543 19.5 9.5 19.5H11M14 5.5H15.5C16.6046 5.5 17.5 6.39543 17.5 7.5V12.5M17.5 12.5H21M17.5 12.5V17.5C17.5 18.6046 16.6046 19.5 15.5 19.5H14",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
JsonIcon.displayName = "ForwardRef(JsonIcon)";
var LaunchIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "launch",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12 7.5H6.5V18.5H17.5V13M19.5 5.5L10.5 14.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M14 5.5H19.5V11", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
      ]
    }
  );
});
LaunchIcon.displayName = "ForwardRef(LaunchIcon)";
var LeaveIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "leave",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14.5 15V18.5H5.5V6.5H14.5V10M9 12.5H21.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M18 9L21.5 12.5L18 16",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
LeaveIcon.displayName = "ForwardRef(LeaveIcon)";
var LemonIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "lemon",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.6569 10.3431L6.41422 14.5858C7.58579 15.7574 9.12132 16.3431 10.6569 16.3431M10.6569 10.3431L14.8995 6.1005C16.0711 7.27208 16.6569 8.80761 16.6569 10.3431M10.6569 10.3431L10.6569 16.3431M10.6569 10.3431L16.6569 10.3431M10.6569 10.3431L14.8995 14.5858M14.8995 14.5858C13.7279 15.7574 12.1924 16.3431 10.6569 16.3431M14.8995 14.5858C16.0711 13.4142 16.6569 11.8787 16.6569 10.3431M16.3137 4.68629C19.4379 7.81049 19.4379 12.8758 16.3137 16C13.1895 19.1242 8.12419 19.1242 5 16L16.3137 4.68629Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
LemonIcon.displayName = "ForwardRef(LemonIcon)";
var LinkIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "link",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11 12.5L12.5 14C13.281 14.781 14.719 14.781 15.5 14L18.5 11C19.281 10.219 19.281 8.78105 18.5 8L18 7.5C17.2189 6.71895 15.781 6.71895 15 7.5L13 9.5M12 15.5L10 17.5C9.21895 18.281 7.78105 18.281 7 17.5L6.5 17C5.71895 16.219 5.71896 14.781 6.5 14L9.50001 11C10.2811 10.219 11.719 10.2189 12.5 11L14 12.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
LinkIcon.displayName = "ForwardRef(LinkIcon)";
var LinkRemovedIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "link-removed",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18.5 11C19.281 10.219 19.281 8.78108 18.5 8.00003L18 7.50003C17.2189 6.71898 15.781 6.71898 15 7.50003L13 9.50003M15.5 14C14.7189 14.7811 13.281 14.7811 12.5 14M6.5 14C5.71895 14.7811 5.71894 16.219 6.49999 17L6.99999 17.5C7.78104 18.2811 9.21894 18.2811 9.99999 17.5L12 15.5M12.5 11C11.719 10.219 10.281 10.219 9.5 11M3 12.5H22",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
LinkRemovedIcon.displayName = "ForwardRef(LinkRemovedIcon)";
var LockIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "lock",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M15.5 11.5V8.5C15.5 6.5 14 5.5 12.5 5.5C11 5.5 9.5 6.5 9.5 8.5V11.5M7.5 11.5H17.5V19.5H7.5V11.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
LockIcon.displayName = "ForwardRef(LockIcon)";
var LogoJsIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "logo-js",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M20 5H5V20H20V5ZM12.5254 16.1572C12.5254 17.4189 11.7742 18.1536 10.4792 18.1536C9.24243 18.1536 8.49121 17.4189 8.45801 16.2942V16.261H9.67407V16.2859C9.69897 16.7466 9.9729 17.0703 10.4626 17.0703C10.9939 17.0703 11.272 16.7507 11.272 16.1489V12.011H12.5254V16.1572ZM18.2893 16.2153C18.2893 17.4023 17.3679 18.1536 15.8738 18.1536C14.4419 18.1536 13.5371 17.4688 13.4666 16.4062L13.4624 16.3398H14.6702L14.6743 16.3813C14.72 16.8296 15.2056 17.1326 15.907 17.1326C16.5752 17.1326 17.0359 16.813 17.0359 16.3523V16.3481C17.0359 15.9539 16.7412 15.7339 15.9983 15.5803L15.3674 15.4517C14.1223 15.1985 13.5869 14.6174 13.5869 13.7085V13.7043C13.5869 12.592 14.5415 11.8574 15.8696 11.8574C17.2683 11.8574 18.0901 12.5962 18.1689 13.5964L18.1731 13.6504H16.9944L16.9861 13.6006C16.9155 13.1731 16.5005 12.8743 15.8696 12.8743C15.2512 12.8784 14.8403 13.1606 14.8403 13.6089V13.613C14.8403 14.0032 15.1309 14.2356 15.8364 14.3809L16.4714 14.5095C17.7373 14.771 18.2893 15.2773 18.2893 16.2112V16.2153Z",
          fill: "currentColor"
        }
      )
    }
  );
});
LogoJsIcon.displayName = "ForwardRef(LogoJsIcon)";
var LogoTsIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "logo-ts",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M20 5H5V20H20V5ZM11.0769 18H9.82349V13.0444H8.02637V12.011H12.874V13.0444H11.0769V18ZM18.2893 16.2153C18.2893 17.4023 17.3679 18.1536 15.8738 18.1536C14.4419 18.1536 13.5371 17.4688 13.4666 16.4062L13.4624 16.3398H14.6702L14.6743 16.3813C14.72 16.8296 15.2056 17.1326 15.907 17.1326C16.5752 17.1326 17.0359 16.813 17.0359 16.3523V16.3481C17.0359 15.9539 16.7412 15.7339 15.9983 15.5803L15.3674 15.4517C14.1223 15.1985 13.5869 14.6174 13.5869 13.7085V13.7043C13.5869 12.592 14.5415 11.8574 15.8696 11.8574C17.2683 11.8574 18.0901 12.5962 18.1689 13.5964L18.1731 13.6504H16.9944L16.9861 13.6006C16.9155 13.1731 16.5005 12.8743 15.8696 12.8743C15.2512 12.8784 14.8403 13.1606 14.8403 13.6089V13.613C14.8403 14.0032 15.1309 14.2356 15.8364 14.3809L16.4714 14.5095C17.7373 14.771 18.2893 15.2773 18.2893 16.2112V16.2153Z",
          fill: "currentColor"
        }
      )
    }
  );
});
LogoTsIcon.displayName = "ForwardRef(LogoTsIcon)";
var MasterDetailIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "master-detail",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7 9.5H10M11.5 6.5V18.5M7 12.5H10M13 9.5H18M7 15.5H10M5.5 6.5H19.5V18.5H5.5V6.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
MasterDetailIcon.displayName = "ForwardRef(MasterDetailIcon)";
var MenuIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "menu",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M6 7.5H19M6 17.5H19M6 12.5H19",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
MenuIcon.displayName = "ForwardRef(MenuIcon)";
var MobileDeviceIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "mobile-device",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.5 6.5C7.5 5.39543 8.39543 4.5 9.5 4.5H15.5C16.6046 4.5 17.5 5.39543 17.5 6.5V18.5C17.5 19.6046 16.6046 20.5 15.5 20.5H9.5C8.39543 20.5 7.5 19.6046 7.5 18.5V6.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M13.5 17.5C13.5 18.0523 13.0523 18.5 12.5 18.5C11.9477 18.5 11.5 18.0523 11.5 17.5C11.5 16.9477 11.9477 16.5 12.5 16.5C13.0523 16.5 13.5 16.9477 13.5 17.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
MobileDeviceIcon.displayName = "ForwardRef(MobileDeviceIcon)";
var MoonIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "moon",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M19.6065 16.1775C18.9417 16.387 18.234 16.5 17.5 16.5C13.634 16.5 10.5 13.366 10.5 9.5C10.5 7.54163 11.3042 5.77109 12.6004 4.50062C12.567 4.50021 12.5335 4.5 12.5 4.5C8.08172 4.5 4.5 8.08172 4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C15.5924 20.5 18.275 18.7454 19.6065 16.1775Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
MoonIcon.displayName = "ForwardRef(MoonIcon)";
var NumberIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "number",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M21.0165 17.6336H3.83636V16.4336H21.0165V17.6336Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.09808 13.3967V7.508H5.74066L3.83636 8.78241V10.091L5.65277 8.88495H5.74066V13.3967H3.84125V14.5539H8.89984V13.3967H7.09808Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9.81781 9.63202V9.66132H11.1069V9.62714C11.1069 8.95331 11.5756 8.49432 12.2739 8.49432C12.9575 8.49432 13.4018 8.89471 13.4018 9.50507C13.4018 9.9787 13.1528 10.3498 12.1909 11.3117L9.89594 13.5822V14.5539H14.8618V13.3869H11.7807V13.299L13.1577 11.9855C14.3491 10.843 14.7543 10.1838 14.7543 9.41229C14.7543 8.19159 13.7729 7.36639 12.3178 7.36639C10.8383 7.36639 9.81781 8.28436 9.81781 9.63202Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M17.6694 11.4631H18.5092C19.3198 11.4631 19.8422 11.8683 19.8422 12.4982C19.8422 13.1183 19.3295 13.5139 18.5239 13.5139C17.767 13.5139 17.2592 13.133 17.2104 12.5324H15.9262C15.9897 13.8508 17.0248 14.6955 18.5629 14.6955C20.1401 14.6955 21.2192 13.841 21.2192 12.591C21.2192 11.6584 20.6528 11.0334 19.7006 10.9211V10.8332C20.4721 10.6769 20.9457 10.0666 20.9457 9.23651C20.9457 8.12323 19.9741 7.36639 18.5434 7.36639C17.0541 7.36639 16.1118 8.17694 16.0629 9.50018H17.2983C17.3422 8.88007 17.8061 8.48456 18.4995 8.48456C19.2075 8.48456 19.6567 8.85565 19.6567 9.44159C19.6567 10.0324 19.1977 10.4182 18.4946 10.4182H17.6694V11.4631Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
NumberIcon.displayName = "ForwardRef(NumberIcon)";
var OkHandIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "ok-hand",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M15.9957 11.5C14.8197 10.912 11.9957 9 10.4957 9C8.9957 9 5.17825 11.7674 6 13C7 14.5 9.15134 11.7256 10.4957 12C11.8401 12.2744 13 13.5 13 14.5C13 15.5 11.8401 16.939 10.4957 16.5C9.15134 16.061 8.58665 14.3415 7.4957 14C6.21272 13.5984 5.05843 14.6168 5.5 15.5C5.94157 16.3832 7.10688 17.6006 8.4957 19C9.74229 20.2561 11.9957 21.5 14.9957 20C17.9957 18.5 18.5 16.2498 18.5 13C18.5 11.5 13.7332 5.36875 11.9957 4.5C10.9957 4 10 5 10.9957 6.5C11.614 7.43149 13.5 9.27705 14 10.3751M15.5 8C15.5 8 15.3707 7.5 14.9957 6C14.4957 4 15.9957 3.5 16.4957 4.5C17.1281 5.76491 18.2872 10.9147 18.4957 13",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
OkHandIcon.displayName = "ForwardRef(OkHandIcon)";
var OlistIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "olist",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10 7.5H19M10 12.5H19M10 17.5H19M5 18.5H7.5L7 17.5L7.5 16.5H5M5 6.5H6.5V8.5M5 8.5H6.5M6.5 8.5H8M8 13.5H6L7 11.5H5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
OlistIcon.displayName = "ForwardRef(OlistIcon)";
var OverageIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "overage",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M18.5 11V6.5H14", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6.5 18.5L9 16L12 13L18.5 6.5M3 13.5H22",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
OverageIcon.displayName = "ForwardRef(OverageIcon)";
var PackageIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "package",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 13V22M12.5 13L4.5 8M12.5 13L20.5 8M8.5 5.5L16.5 10.5M4.5 8L12.5 3L20.5 8V17L12.5 22L4.5 17V8Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
PackageIcon.displayName = "ForwardRef(PackageIcon)";
var PanelLeftIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "panel-left",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 6.5H19.5V18.5H10.5M10.5 6.5H5.5V18.5H10.5M10.5 6.5V18.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
PanelLeftIcon.displayName = "ForwardRef(PanelLeftIcon)";
var PanelRightIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "panel-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M14.5 6.5H19.5V18.5H14.5M14.5 6.5H5.5V18.5H14.5M14.5 6.5V18.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
PanelRightIcon.displayName = "ForwardRef(PanelRightIcon)";
var PauseIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "pause",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M10.5 7.5H8.5V17.5H10.5V7.5Z", fill: "currentColor" }),
        (0, import_jsx_runtime.jsx)("path", { d: "M16.5 7.5H14.5V17.5H16.5V7.5Z", fill: "currentColor" }),
        (0, import_jsx_runtime.jsx)("path", { d: "M10.5 7.5H8.5V17.5H10.5V7.5Z", stroke: "currentColor", strokeWidth: 1.2 }),
        (0, import_jsx_runtime.jsx)("path", { d: "M16.5 7.5H14.5V17.5H16.5V7.5Z", stroke: "currentColor", strokeWidth: 1.2 })
      ]
    }
  );
});
PauseIcon.displayName = "ForwardRef(PauseIcon)";
var PinIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "pin",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6.5 10.5C6.5 7 9 4.5 12.5 4.5C16 4.5 18.5 7 18.5 10.5C18.5 14 15.5 17.5 12.5 20.5C9.5 17.5 6.5 14 6.5 10.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 10.5C14 11.3284 13.3284 12 12.5 12C11.6716 12 11 11.3284 11 10.5C11 9.67157 11.6716 9 12.5 9C13.3284 9 14 9.67157 14 10.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
PinIcon.displayName = "ForwardRef(PinIcon)";
var PinRemovedIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "pin-removed",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7.39787 14C8.51075 16.2897 10.5054 18.5054 12.5 20.5C14.4946 18.5054 16.4892 16.2897 17.6021 14M6.52009 11C6.50681 10.8334 6.5 10.6667 6.5 10.5C6.5 7 9 4.5 12.5 4.5C16 4.5 18.5 7 18.5 10.5C18.5 10.6667 18.4932 10.8334 18.4799 11M3 12.5H22",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
PinRemovedIcon.displayName = "ForwardRef(PinRemovedIcon)";
var PlayIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "play",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7.5 18.5V6.5L17.5 12.5L7.5 18.5Z",
          fill: "currentColor",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
PlayIcon.displayName = "ForwardRef(PlayIcon)";
var PlugIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "plug",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M13.25 8.5L16.75 5M16.25 11.5L19.75 8M9.25 15.5L5.25 19.5M7.75 14L9.75 12C8.25 10 8.75 9 9.75 8C10.15 7.6 11.25 6.5 11.25 6.5L18.25 13.5C18.25 13.5 17.3825 14.3675 16.75 15C15.75 16 14.75 16.5 12.75 15L10.75 17L7.75 14Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
PlugIcon.displayName = "ForwardRef(PlugIcon)";
var PresentationIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "presentation",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 18H5.5V8.5H19.5V18H14.5M10.5 18L9 22M10.5 18H14.5M14.5 18L16 22M4.5 8.5H20.5V6.5H4.5V8.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
PresentationIcon.displayName = "ForwardRef(PresentationIcon)";
var Progress50Icon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "progress-50",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M17 12.5C17 14.9853 14.9853 17 12.5 17V8C14.9853 8 17 10.0147 17 12.5Z",
            fill: "currentColor",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5C8.08172 4.5 4.5 8.08172 4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
Progress50Icon.displayName = "ForwardRef(Progress50Icon)";
var Progress75Icon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "progress-75",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 17C14.9853 17 17 14.9853 17 12.5C17 10.0147 14.9853 8 12.5 8V12.5H8C8 14.9853 10.0147 17 12.5 17Z",
            fill: "currentColor",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
Progress75Icon.displayName = "ForwardRef(Progress75Icon)";
var ProjectsIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "projects",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M21 17.5H14M17.5 14V21M5.5 14.5H10.5V19.5H5.5V14.5ZM14.5 5.5H19.5V10.5H14.5V5.5ZM5.5 5.5H10.5V10.5H5.5V5.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ProjectsIcon.displayName = "ForwardRef(ProjectsIcon)";
var PublishIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "publish",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M4.99997 5.50006H20M12.5 9.00005V20",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.5 14L12.5 9.00006L17.5 14",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
PublishIcon.displayName = "ForwardRef(PublishIcon)";
var ReadOnlyIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "read-only",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M15 7L18 10M10 12L7 15L6 19L10 18L13 15M12 10L17 5L20 8L15 13M19 19L5 5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ReadOnlyIcon.displayName = "ForwardRef(ReadOnlyIcon)";
var RedoIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "redo",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M19 9.5L10 9.5C7.51472 9.5 5.5 11.5147 5.5 14C5.5 16.4853 7.51472 18.5 10 18.5H19",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15 13.5L19 9.5L15 5.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
RedoIcon.displayName = "ForwardRef(RedoIcon)";
var RefreshIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "refresh",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M19.5 13.5C19.5 17.366 16.366 20.5 12.5 20.5C8.63401 20.5 5.5 17.366 5.5 13.5C5.5 9.63401 8.63401 6.5 12.5 6.5H15.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 10.5L15.5 6.5L11.5 2.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
RefreshIcon.displayName = "ForwardRef(RefreshIcon)";
var RemoveCircleIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "remove-circle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 12.4H17M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
RemoveCircleIcon.displayName = "ForwardRef(RemoveCircleIcon)";
var RemoveIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "remove",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)("path", { d: "M5 12.5H20", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
    }
  );
});
RemoveIcon.displayName = "ForwardRef(RemoveIcon)";
var ResetIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "reset",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M4.56189 13.5L4.14285 13.9294C4.25676 14.0406 4.41017 14.1019 4.56932 14.1C4.72847 14.098 4.88032 14.0329 4.99144 13.9189L4.56189 13.5ZM9.92427 15.9243L15.9243 9.92427L15.0757 9.07574L9.07574 15.0757L9.92427 15.9243ZM9.07574 9.92426L15.0757 15.9243L15.9243 15.0757L9.92426 9.07574L9.07574 9.92426ZM19.9 12.5C19.9 16.5869 16.5869 19.9 12.5 19.9V21.1C17.2496 21.1 21.1 17.2496 21.1 12.5H19.9ZM5.1 12.5C5.1 8.41309 8.41309 5.1 12.5 5.1V3.9C7.75035 3.9 3.9 7.75035 3.9 12.5H5.1ZM12.5 5.1C16.5869 5.1 19.9 8.41309 19.9 12.5H21.1C21.1 7.75035 17.2496 3.9 12.5 3.9V5.1ZM5.15728 13.4258C5.1195 13.1227 5.1 12.8138 5.1 12.5H3.9C3.9 12.8635 3.92259 13.2221 3.9665 13.5742L5.15728 13.4258ZM12.5 19.9C9.9571 19.9 7.71347 18.6179 6.38048 16.6621L5.38888 17.3379C6.93584 19.6076 9.54355 21.1 12.5 21.1V19.9ZM4.99144 13.9189L7.42955 11.4189L6.57045 10.5811L4.13235 13.0811L4.99144 13.9189ZM4.98094 13.0706L2.41905 10.5706L1.58095 11.4294L4.14285 13.9294L4.98094 13.0706Z",
          fill: "currentColor"
        }
      )
    }
  );
});
ResetIcon.displayName = "ForwardRef(ResetIcon)";
var RestoreIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "restore",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M5.88468 17C7.32466 19.1128 9.75033 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5C8.08172 4.5 4.5 8.08172 4.5 12.5V13.5M12.5 8V12.5L15.5 15.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7 11L4.5 13.5L2 11",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
RestoreIcon.displayName = "ForwardRef(RestoreIcon)";
var RetrieveIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "retrieve",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16 14L12.5 10.5L9 14M5.5 7.5H19.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 10.5L12.5 17.5M19.5 7.5V19.5H5.5V7.5L7.5 5.5H17.5L19.5 7.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
RetrieveIcon.displayName = "ForwardRef(RetrieveIcon)";
var RetryIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "retry",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M19 9.5L10 9.5C7.51472 9.5 5.5 11.5147 5.5 14C5.5 16.4853 7.51472 18.5 10 18.5H19",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15 13.5L19 9.5L15 5.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
RetryIcon.displayName = "ForwardRef(RetryIcon)";
var RevertIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "revert",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6 9.5L15 9.5C17.4853 9.5 19.5 11.5147 19.5 14C19.5 16.4853 17.4853 18.5 15 18.5H6",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10 13.5L6 9.5L10 5.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
RevertIcon.displayName = "ForwardRef(RevertIcon)";
var RobotIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "robot",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 15.5V17.5M12.5 8.5V6.5M12.5 6.5C13.3284 6.5 14 5.82843 14 5C14 4.17157 13.3284 3.5 12.5 3.5C11.6716 3.5 11 4.17157 11 5C11 5.82843 11.6716 6.5 12.5 6.5ZM20.5 20.5V19.5C20.5 18.3954 19.6046 17.5 18.5 17.5H6.5C5.39543 17.5 4.5 18.3954 4.5 19.5V20.5H20.5ZM11.5 12C11.5 12.5523 11.0523 13 10.5 13C9.94772 13 9.5 12.5523 9.5 12C9.5 11.4477 9.94772 11 10.5 11C11.0523 11 11.5 11.4477 11.5 12ZM15.5 12C15.5 12.5523 15.0523 13 14.5 13C13.9477 13 13.5 12.5523 13.5 12C13.5 11.4477 13.9477 11 14.5 11C15.0523 11 15.5 11.4477 15.5 12ZM8.5 15.5H16.5C17.6046 15.5 18.5 14.6046 18.5 13.5V10.5C18.5 9.39543 17.6046 8.5 16.5 8.5H8.5C7.39543 8.5 6.5 9.39543 6.5 10.5V13.5C6.5 14.6046 7.39543 15.5 8.5 15.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
RobotIcon.displayName = "ForwardRef(RobotIcon)";
var RocketIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "rocket",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 20.5L15.5 14M11 9.49999L4.5 12.5M9 14C9 14 7.54688 14.9531 6.5 16C5.5 17 4.5 20.5 4.5 20.5C4.5 20.5 8 19.5 9 18.5C10 17.5 11 16 11 16M9 14C9 14 10.1 9.9 12.5 7.5C15.5 4.5 20.5 4.5 20.5 4.5C20.5 4.5 20.5 9.5 17.5 12.5C15.7492 14.2508 11 16 11 16L9 14ZM16.5 9.99999C16.5 10.8284 15.8284 11.5 15 11.5C14.1716 11.5 13.5 10.8284 13.5 9.99999C13.5 9.17157 14.1716 8.49999 15 8.49999C15.8284 8.49999 16.5 9.17157 16.5 9.99999Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
RocketIcon.displayName = "ForwardRef(RocketIcon)";
var SchemaIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "schema",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 9.5V12.5M12.5 12.5H8.5V15.5M12.5 12.5H16.5V15.5M10.5 5.5H14.5V9.5H10.5V5.5ZM6.5 15.5H10.5V19.5H6.5V15.5ZM14.5 15.5H18.5V19.5H14.5V15.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
SchemaIcon.displayName = "ForwardRef(SchemaIcon)";
var SearchIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "search",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M15.0355 15.0355L20 20M16.5 11.5C16.5 14.2614 14.2614 16.5 11.5 16.5C8.73858 16.5 6.5 14.2614 6.5 11.5C6.5 8.73858 8.73858 6.5 11.5 6.5C14.2614 6.5 16.5 8.73858 16.5 11.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
SearchIcon.displayName = "ForwardRef(SearchIcon)";
var SelectIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "select",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M16 15L12.5 18.5L9 15M9 10L12.5 6.5L16 10",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
SelectIcon.displayName = "ForwardRef(SelectIcon)";
var ShareIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "share",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15 10.5H18.5V19.5H6.5L6.5 10.5H10M12.5 16V3.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M9 7L12.5 3.5L16 7", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
      ]
    }
  );
});
ShareIcon.displayName = "ForwardRef(ShareIcon)";
var SortIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "sort",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8.5 18.5V6M16.5 19V6.5M12 15L8.5 18.5L5 15M13 10L16.5 6.5L20 10",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
SortIcon.displayName = "ForwardRef(SortIcon)";
var SparkleIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "sparkle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 10.5C8.5 12.5 5 12.5 5 12.5C5 12.5 8.5 12.5 10.5 14.5C12.5 16.5 12.5 20 12.5 20C12.5 20 12.5 16.5 14.5 14.5C16.5 12.5 20 12.5 20 12.5C20 12.5 16.5 12.5 14.5 10.5C12.5 8.5 12.5 5 12.5 5C12.5 5 12.5 8.5 10.5 10.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
SparkleIcon.displayName = "ForwardRef(SparkleIcon)";
var SparklesIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "sparkles",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11 3.5V5M11 5V6.5M11 5H12.5M11 5H9.5M9.5 15C9.5 15 12.2308 14.7692 13.5 13.5C14.7692 12.2308 15 9.5 15 9.5C15 9.5 15.2308 12.2308 16.5 13.5C17.7692 14.7692 20.5 15 20.5 15C20.5 15 17.7692 15.2308 16.5 16.5C15.2308 17.7692 15 20.5 15 20.5C15 20.5 14.7692 17.7692 13.5 16.5C12.2308 15.2308 9.5 15 9.5 15ZM4.5 10C4.5 10 5.72308 9.87692 6.3 9.3C6.87692 8.72308 7 7.5 7 7.5C7 7.5 7.12308 8.72308 7.7 9.3C8.27692 9.87692 9.5 10 9.5 10C9.5 10 8.27692 10.1231 7.7 10.7C7.12308 11.2769 7 12.5 7 12.5C7 12.5 6.87692 11.2769 6.3 10.7C5.72308 10.1231 4.5 10 4.5 10Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      )
    }
  );
});
SparklesIcon.displayName = "ForwardRef(SparklesIcon)";
var SpinnerIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "spinner",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
SpinnerIcon.displayName = "ForwardRef(SpinnerIcon)";
var SplitHorizontalIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "split-horizontal",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M19.5 10.5V20.5H5.5V10.5M19.5 10.5H5.5M19.5 10.5V4.5H5.5V10.5M12.5 13V15.5M12.5 18V15.5M12.5 15.5H15M12.5 15.5H10",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
SplitHorizontalIcon.displayName = "ForwardRef(SplitHorizontalIcon)";
var SplitVerticalIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "split-vertical",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 5.5V19.5M13 12.5H15.5M18 12.5H15.5M15.5 12.5V15M15.5 12.5V10M4.5 5.5H20.5V19.5H4.5V5.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
SplitVerticalIcon.displayName = "ForwardRef(SplitVerticalIcon)";
var SquareIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "square",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "rect",
        {
          x: 5.5,
          y: 5.5,
          width: 14,
          height: 14,
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
SquareIcon.displayName = "ForwardRef(SquareIcon)";
var StackCompactIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "stack-compact",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 15.5V18.5H19.5V15.5M5.5 15.5H19.5M5.5 15.5V9.5M19.5 15.5V9.5M5.5 9.5V6.5H19.5V9.5M5.5 9.5H19.5M5.5 12.5H19.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
StackCompactIcon.displayName = "ForwardRef(StackCompactIcon)";
var StackIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "stack",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 12.5H19.5M5.5 18.5H19.5V6.5H5.5V18.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
StackIcon.displayName = "ForwardRef(StackIcon)";
var StarFilledIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "star-filled",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 5L14.522 10.217L20.1085 10.5279L15.7716 14.063L17.2023 19.4721L12.5 16.44L7.79772 19.4721L9.22837 14.063L4.89155 10.5279L10.478 10.217L12.5 5Z",
          fill: "currentColor",
          stroke: "currentColor",
          strokeLinejoin: "round"
        }
      )
    }
  );
});
StarFilledIcon.displayName = "ForwardRef(StarFilledIcon)";
var StarIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "star",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 5L14.522 10.217L20.1085 10.5279L15.7716 14.063L17.2023 19.4721L12.5 16.44L7.79772 19.4721L9.22837 14.063L4.89155 10.5279L10.478 10.217L12.5 5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
StarIcon.displayName = "ForwardRef(StarIcon)";
var StopIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "stop",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "rect",
        {
          x: 7.5,
          y: 7.5,
          width: 10,
          height: 10,
          fill: "currentColor",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
StopIcon.displayName = "ForwardRef(StopIcon)";
var StrikethroughIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "strikethrough",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5656 7.73438C11.0656 7.73438 10.0734 8.48438 10.0734 9.625C10.0734 10.2317 10.3649 10.6613 11.0519 11H8.90358C8.71703 10.6199 8.62813 10.1801 8.62813 9.67188C8.62813 7.75781 10.2297 6.46094 12.6125 6.46094C14.7922 6.46094 16.4172 7.75781 16.5344 9.57812H15.1203C14.925 8.42188 13.9719 7.73438 12.5656 7.73438Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.4875 18.2656C10.0969 18.2656 8.44844 17 8.3 15.0547H9.72188C9.89375 16.2344 11.0188 16.9844 12.6203 16.9844C14.1359 16.9844 15.2531 16.1641 15.2531 15.0469C15.2531 14.6375 15.1255 14.292 14.8589 14H16.5912C16.6638 14.266 16.6984 14.5566 16.6984 14.875C16.6984 16.9453 15.0656 18.2656 12.4875 18.2656Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M7 13.1H18V11.9H7V13.1Z", fill: "currentColor" })
      ]
    }
  );
});
StrikethroughIcon.displayName = "ForwardRef(StrikethroughIcon)";
var StringIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "string",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.6748 15.5227H13.1855L9.87842 6.36304H8.34863L5.0415 15.5227H6.50146L7.3457 13.0916H10.8369L11.6748 15.5227ZM9.04053 8.02612H9.14844L10.4751 11.8982H7.70752L9.04053 8.02612Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16.8101 14.488C16.0674 14.488 15.5278 14.1262 15.5278 13.5042C15.5278 12.8948 15.9595 12.571 16.9116 12.5076L18.6001 12.3997V12.9773C18.6001 13.8342 17.8384 14.488 16.8101 14.488ZM16.4609 15.637C17.3687 15.637 18.124 15.2434 18.5366 14.5515H18.6445V15.5227H19.9585V10.8C19.9585 9.34009 18.981 8.47681 17.248 8.47681C15.6802 8.47681 14.563 9.23853 14.4233 10.4255H15.7437C15.896 9.93677 16.4229 9.65747 17.1846 9.65747C18.1177 9.65747 18.6001 10.0701 18.6001 10.8V11.3967L16.7275 11.5046C15.0835 11.6062 14.1567 12.3235 14.1567 13.5676C14.1567 14.8308 15.1279 15.637 16.4609 15.637Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M19.9585 18.637L5.0415 18.637V17.437L19.9585 17.437V18.637Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
StringIcon.displayName = "ForwardRef(StringIcon)";
var SunIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "sun",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M19 12.5H22M3 12.5H6M12.5 6V3M12.5 22V19M17.3891 7.61091L19.5104 5.48959M5.48959 19.5104L7.61091 17.3891M7.61091 7.61091L5.48959 5.48959M19.5104 19.5104L17.3891 17.3891M16 12.5C16 14.433 14.433 16 12.5 16C10.567 16 9 14.433 9 12.5C9 10.567 10.567 9 12.5 9C14.433 9 16 10.567 16 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
SunIcon.displayName = "ForwardRef(SunIcon)";
var SyncIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "sync",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M13.5 4.5H12.5C8.08172 4.5 4.5 8.08172 4.5 12.5C4.5 15.6631 6.33576 18.3975 9 19.6958M11.5 20.5H12.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 9.33688 18.6642 6.60253 16 5.30423",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
SyncIcon.displayName = "ForwardRef(SyncIcon)";
var TabletDeviceIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "tablet-device",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M5.5 5.5C5.5 4.94772 5.94772 4.5 6.5 4.5H18.5C19.0523 4.5 19.5 4.94772 19.5 5.5V19.5C19.5 20.0523 19.0523 20.5 18.5 20.5H6.5C5.94772 20.5 5.5 20.0523 5.5 19.5V5.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M13 18C13 18.2761 12.7761 18.5 12.5 18.5C12.2239 18.5 12 18.2761 12 18C12 17.7239 12.2239 17.5 12.5 17.5C12.7761 17.5 13 17.7239 13 18Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
TabletDeviceIcon.displayName = "ForwardRef(TabletDeviceIcon)";
var TagIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "tag",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 20L5 20L5 12.5L12.5 5L20 12.5L12.5 20Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11 15.5C11 16.3284 10.3284 17 9.5 17C8.67157 17 8 16.3284 8 15.5C8 14.6716 8.67157 14 9.5 14C10.3284 14 11 14.6716 11 15.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
TagIcon.displayName = "ForwardRef(TagIcon)";
var TagsIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "tags",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.1562 7.93179L13.9717 6.11633L20.3553 12.5L13.9717 18.8836L10.6855 18.8836M11.0283 18.8836L17.4119 12.5L11.0283 6.11633L4.64462 12.5L4.64462 18.8836L11.0283 18.8836ZM9.75153 15.0534C9.75153 15.7585 9.17992 16.3302 8.47481 16.3302C7.76969 16.3302 7.19808 15.7585 7.19808 15.0534C7.19808 14.3483 7.76969 13.7767 8.47481 13.7767C9.17992 13.7767 9.75153 14.3483 9.75153 15.0534Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
TagsIcon.displayName = "ForwardRef(TagsIcon)";
var TaskIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "task",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M4.88281 10.75V19.75H20.8828V10.75M4.88281 10.75V5.75H20.8828V10.75M4.88281 10.75H12.8828H20.8828M17.8828 8.25V3.25M7.88281 8.25V3.25",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10.083 14.7358L12.083 16.7358L15.683 13.1758",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
TaskIcon.displayName = "ForwardRef(TaskIcon)";
var TerminalIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "terminal",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8.5 9.5L11.5 12.5L8.5 15.5M13 15.5H17M5.5 6.5H19.5V18.5H5.5V6.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
TerminalIcon.displayName = "ForwardRef(TerminalIcon)";
var TextIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "text",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7.5 9V6.5H17.5V9M12.5 18.5V6.5M10 18.5H15",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
TextIcon.displayName = "ForwardRef(TextIcon)";
var ThLargeIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "th-large",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 6.5V12.5M12.5 12.5V18.5M12.5 12.5H20.5M12.5 12.5H4.5M4.5 6.5H20.5V18.5H4.5V6.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ThLargeIcon.displayName = "ForwardRef(ThLargeIcon)";
var ThListIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "th-list",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 6.5V10.5M9.5 10.5V14.5M9.5 10.5H20.5M9.5 10.5H4.5M9.5 14.5V18.5M9.5 14.5H20.5M9.5 14.5H4.5M4.5 6.5H20.5V18.5H4.5V6.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ThListIcon.displayName = "ForwardRef(ThListIcon)";
var TiersIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "tiers",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M16.5 14.5L20.5 16.5L12.5 20.5L4.5 16.5L8.5 14.5M16.5 10.5L20.5 12.5L12.5 16.5L4.5 12.5L8.5 10.5M12.5 12.5L20.5 8.5L12.5 4.5L4.5 8.5L12.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
TiersIcon.displayName = "ForwardRef(TiersIcon)";
var ToggleArrowRightIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "toggle-arrow-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10 16.5V8.5L16 12.5L10 16.5Z",
          fill: "currentColor",
          stroke: "currentColor",
          strokeLinejoin: "round"
        }
      )
    }
  );
});
ToggleArrowRightIcon.displayName = "ForwardRef(ToggleArrowRightIcon)";
var TokenIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "token",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17.5711 12.5C17.5711 15.2614 15.3325 17.5 12.5711 17.5M7.57107 12.5C7.57107 9.73858 9.80964 7.5 12.5711 7.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
TokenIcon.displayName = "ForwardRef(TokenIcon)";
var TransferIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "transfer",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M19.5 16.5H6M5.5 8.5L19 8.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16 13L19.5 16.5L16 20M9 12L5.5 8.5L9 5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
TransferIcon.displayName = "ForwardRef(TransferIcon)";
var TranslateIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "translate",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M9.4 5.4H4V6.6H13.2189C13.1612 6.78478 13.0895 6.99578 13.0025 7.22211C12.7032 8.00031 12.2402 8.91125 11.5757 9.57574L10 11.1515L9.42426 10.5757C8.72102 9.8725 8.25297 9.16987 7.96199 8.64611C7.81668 8.38455 7.71617 8.16874 7.65305 8.02146C7.62151 7.94787 7.59937 7.89154 7.5857 7.85534C7.57886 7.83725 7.57415 7.8242 7.57144 7.81657L7.56886 7.80922C7.56886 7.80922 7.56921 7.81026 7 8C6.43079 8.18974 6.43091 8.19009 6.43091 8.19009L6.43133 8.19135L6.43206 8.19351L6.4341 8.19948L6.44052 8.21786C6.44587 8.23292 6.45336 8.25357 6.46313 8.27942C6.48266 8.33112 6.5113 8.40369 6.55008 8.49416C6.62758 8.67501 6.74582 8.92795 6.91301 9.22889C7.24703 9.83013 7.77898 10.6275 8.57574 11.4243L9.15147 12L4.57964 16.5718L4.57655 16.5749L4.57577 16.5757L5.4243 17.4242L5.42688 17.4216L10.0368 12.8117L12.6159 14.9609L13.3841 14.0391L10.8888 11.9597L12.4243 10.4243C13.2598 9.58875 13.7968 8.49969 14.1225 7.65289C14.2818 7.23863 14.395 6.87072 14.4696 6.6H16V5.4H10.6V4H9.4V5.4ZM17.4405 10L21.553 19.7672H20.2509L19.1279 17.1H14.8721L13.7491 19.7672H12.447L16.5595 10H17.4405ZM15.3773 15.9H18.6227L17 12.0462L15.3773 15.9Z",
          fill: "currentColor"
        }
      )
    }
  );
});
TranslateIcon.displayName = "ForwardRef(TranslateIcon)";
var TrashIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "trash",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5 6.5H20M10 6.5V4.5C10 3.94772 10.4477 3.5 11 3.5H14C14.5523 3.5 15 3.94772 15 4.5V6.5M12.5 9V17M15.5 9L15 17M9.5 9L10 17M18.5 6.5L17.571 18.5767C17.5309 19.0977 17.0965 19.5 16.574 19.5H8.42603C7.90349 19.5 7.46905 19.0977 7.42898 18.5767L6.5 6.5H18.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
TrashIcon.displayName = "ForwardRef(TrashIcon)";
var TrendUpwardIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "trend-upward",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M4.5 18.5L11.5 10.5L13.5 14.5L20.5 6.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M20.5 11V6.5H16", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
      ]
    }
  );
});
TrendUpwardIcon.displayName = "ForwardRef(TrendUpwardIcon)";
var TriangleOutlineIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "triangle-outline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M20.5 18.5H4.5L12.5 5.5L20.5 18.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
TriangleOutlineIcon.displayName = "ForwardRef(TriangleOutlineIcon)";
var TrolleyIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "trolley",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 17.5L5.81763 6.26772C5.71013 5.81757 5.30779 5.5 4.84498 5.5H3M8 17.5H17M8 17.5C8.82843 17.5 9.5 18.1716 9.5 19C9.5 19.8284 8.82843 20.5 8 20.5C7.17157 20.5 6.5 19.8284 6.5 19C6.5 18.1716 7.17157 17.5 8 17.5ZM17 17.5C17.8284 17.5 18.5 18.1716 18.5 19C18.5 19.8284 17.8284 20.5 17 20.5C16.1716 20.5 15.5 19.8284 15.5 19C15.5 18.1716 16.1716 17.5 17 17.5ZM7.78357 14.5H17.5L19 7.5H6",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
TrolleyIcon.displayName = "ForwardRef(TrolleyIcon)";
var TruncateIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "truncate",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5 12.5H20M8.5 19.5L12.5 15.5L16.5 19.5M16.5 5.5L12.5 9.5L8.5 5.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
TruncateIcon.displayName = "ForwardRef(TruncateIcon)";
var TwitterIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "twitter",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18.8738 6.65751C18.1994 5.9447 17.2445 5.5 16.1857 5.5C14.1423 5.5 12.4857 7.15655 12.4857 9.2C12.4857 9.55263 12.535 9.89374 12.6272 10.2168C7.0826 9.56422 4.55703 6.02857 4.55703 6.02857C4.55703 6.02857 4.02846 9.2 6.14274 11.3143C5.08571 11.3143 4.55703 10.7857 4.55703 10.7857C4.55703 10.7857 4.55703 13.4286 7.19989 14.4857C6.67143 15.0143 5.61417 14.4857 5.61417 14.4857C5.97533 15.9303 7.45606 16.8562 8.82133 17.1358C6.67298 19.1676 3.5 18.7143 3.5 18.7143C5.14562 19.771 7.21334 20.3 9.31429 20.3C16.1214 20.3 19.8162 15.6315 19.8848 9.37762C20.8722 8.58943 22 7.08571 22 7.08571C22 7.08571 21.277 7.45458 19.6913 7.98315C21.277 6.92601 21.4714 5.5 21.4714 5.5C21.4714 5.5 20.4135 6.55789 18.8738 6.65751Z",
          fill: "currentColor"
        }
      )
    }
  );
});
TwitterIcon.displayName = "ForwardRef(TwitterIcon)";
var UlistIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "ulist",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.10153 17.5001C7.10153 17.8323 6.83221 18.1016 6.5 18.1016C6.16778 18.1016 5.89847 17.8323 5.89847 17.5001C5.89847 17.1678 6.16778 16.8985 6.5 16.8985C6.83221 16.8985 7.10153 17.1678 7.10153 17.5001Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.10153 7.5C7.10153 7.83221 6.83221 8.10153 6.5 8.10153C6.16778 8.10153 5.89847 7.83221 5.89847 7.5C5.89847 7.16778 6.16778 6.89847 6.5 6.89847C6.83221 6.89847 7.10153 7.16778 7.10153 7.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.10153 12.5C7.10153 12.8322 6.83221 13.1015 6.5 13.1015C6.16778 13.1015 5.89847 12.8322 5.89847 12.5C5.89847 12.1678 6.16778 11.8985 6.5 11.8985C6.83221 11.8985 7.10153 12.1678 7.10153 12.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10 7.5H19M10 17.5H19M10 12.5H19",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
UlistIcon.displayName = "ForwardRef(UlistIcon)";
var UnarchiveIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "unarchive",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 10.5V18M20.5 7.5V20.5H4.5V7.5L7.5 4.5H17.5L20.5 7.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M4.5 7.5H20.5M16 14L12.5 10.5L9 14",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
UnarchiveIcon.displayName = "ForwardRef(UnarchiveIcon)";
var UnderlineIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "underline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9.52791 7.11407H8.17V14.2582C8.17 16.5817 9.79195 18.2565 12.4927 18.2565C15.1934 18.2565 16.8154 16.5817 16.8154 14.2582V7.11407H15.4574V14.1677C15.4574 15.8122 14.3787 17.0042 12.4927 17.0042C10.6067 17.0042 9.52791 15.8122 9.52791 14.1677V7.11407Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M7 20.5H18", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
      ]
    }
  );
});
UnderlineIcon.displayName = "ForwardRef(UnderlineIcon)";
var UndoIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "undo",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6 9.5L15 9.5C17.4853 9.5 19.5 11.5147 19.5 14C19.5 16.4853 17.4853 18.5 15 18.5H6",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10 13.5L6 9.5L10 5.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
UndoIcon.displayName = "ForwardRef(UndoIcon)";
var UnknownIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "unknown",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 13C12.5 11 14 11.5 14 10C14 9.34375 13.5 8.5 12.5 8.5C11.5 8.5 11 9 10.5 9.5M12.5 16V14.5M5.5 5.5H19.5V19.5H5.5V5.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
UnknownIcon.displayName = "ForwardRef(UnknownIcon)";
var UnlinkIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "unlink",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M15 13.5L17.5 11C18.281 10.219 18.281 8.78105 17.5 8L17 7.5C16.2189 6.71895 14.781 6.71895 14 7.5L11.5 10M10 11.5L7.5 14C6.71896 14.781 6.71895 16.219 7.5 17L8 17.5C8.78105 18.281 10.2189 18.281 11 17.5L13.5 15M9.5 8V5M8 9.5H5M17 15.5H20M15.5 17V20",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
UnlinkIcon.displayName = "ForwardRef(UnlinkIcon)";
var UnlockIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "unlock",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 11.5V8.5C9.5 6.5 8 5.5 6.5 5.5C5 5.5 3.5 6.5 3.5 8.5V11.5M7.5 11.5H17.5V19.5H7.5V11.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
UnlockIcon.displayName = "ForwardRef(UnlockIcon)";
var UnpublishIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "unpublish",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M5 19.5H20M12.5 16V5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M17.5 11L12.5 16L7.5 11",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
UnpublishIcon.displayName = "ForwardRef(UnpublishIcon)";
var UploadIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "upload",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 6.00003V15.5M5.5 15.5H19.5V19.5H5.5V15.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.5 11L12.5 6.00003L17.5 11",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
UploadIcon.displayName = "ForwardRef(UploadIcon)";
var UserIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "user",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 14.5C7 15 5.5 16 5.5 19.5H19.5C19.5 16 18.3416 15.1708 17 14.5C16 14 14 14 14 12.5C14 11 15 10.25 15 8.25C15 6.25 14 5.25 12.5 5.25C11 5.25 10 6.25 10 8.25C10 10.25 11 11 11 12.5C11 14 9 14 8 14.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
UserIcon.displayName = "ForwardRef(UserIcon)";
var UsersIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "users",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17.5 18.5H21.5C21.5 15 20.8416 14.1708 19.5 13.5C18.5 13 16.5 12.5 16.5 11C16.5 9.5 17.5 9 17.5 7C17.5 5 16.5 4 15 4C13.6628 4 12.723 4.79472 12.5347 6.38415M4.5 20.5C4.5 17 5.5 16 6.5 15.5C7.5 15 9.5 14.5 9.5 13C9.5 11.5 8.5 11 8.5 9C8.5 7 9.5 6 11 6C12.5 6 13.5 7 13.5 9C13.5 11 12.5 11.5 12.5 13C12.5 14.5 14.5 15 15.5 15.5C16.8416 16.1708 17.5 17 17.5 20.5H4.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
UsersIcon.displayName = "ForwardRef(UsersIcon)";
var WarningFilledIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "warning-filled",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M14.741 5.12637C13.7357 3.41737 11.2643 3.41737 10.259 5.12637L3.7558 16.1818C2.73624 17.915 3.98595 20.1 5.99683 20.1H19.0032C21.014 20.1 22.2637 17.915 21.2442 16.1818L14.741 5.12637ZM11.9 9V13H13.1V9H11.9ZM13.1 16V14.5H11.9V16H13.1Z",
          fill: "currentColor"
        }
      )
    }
  );
});
WarningFilledIcon.displayName = "ForwardRef(WarningFilledIcon)";
var WarningOutlineIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "warning-outline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 9V13M12.5 16V14.5M14.2239 5.43058L20.727 16.486C21.5113 17.8192 20.55 19.5 19.0032 19.5H5.99683C4.45 19.5 3.48869 17.8192 4.27297 16.486L10.7761 5.43058C11.5494 4.11596 13.4506 4.11596 14.2239 5.43058Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
WarningOutlineIcon.displayName = "ForwardRef(WarningOutlineIcon)";
var WrenchIcon = (0, import_react2.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "wrench",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17.0407 5.14624L17.4649 5.57051C17.6166 5.41887 17.6758 5.19783 17.6202 4.99071C17.5646 4.78359 17.4027 4.62189 17.1955 4.56656L17.0407 5.14624ZM14.4013 7.7856L13.9771 7.36134C13.8288 7.50959 13.7687 7.72447 13.8185 7.92813L14.4013 7.7856ZM12.8778 6.26211L12.4535 5.83784L12.4535 5.83784L12.8778 6.26211ZM11.8309 10.6568L12.2552 11.0811C12.4152 10.9211 12.4716 10.6847 12.401 10.4697L11.8309 10.6568ZM5.63925 16.8485L5.21498 16.4242L5.21498 16.4242L5.63925 16.8485ZM5.63925 19.935L6.06351 19.5108L6.06351 19.5108L5.63925 19.935ZM8.72581 19.935L9.15007 20.3593L9.15007 20.3593L8.72581 19.935ZM15.1184 13.5425L15.2301 12.953C15.0351 12.916 14.8344 12.9779 14.6941 13.1182L15.1184 13.5425ZM18.9718 12.3561L18.5475 11.9318L18.5475 11.9318L18.9718 12.3561ZM20.0877 8.19324L20.6674 8.03843C20.612 7.83124 20.4503 7.66934 20.2432 7.61375C20.0361 7.55816 19.815 7.61734 19.6634 7.76897L20.0877 8.19324ZM17.4483 10.8326L17.3058 11.4154C17.5094 11.4652 17.7243 11.4051 17.8726 11.2569L17.4483 10.8326ZM15 10.2339L14.4172 10.3764C14.4704 10.5938 14.6401 10.7635 14.8575 10.8167L15 10.2339ZM16.6164 4.72198L13.9771 7.36134L14.8256 8.20986L17.4649 5.57051L16.6164 4.72198ZM13.3021 6.68637C14.2723 5.71612 15.6467 5.39501 16.8859 5.72593L17.1955 4.56656C15.5595 4.12966 13.7389 4.55245 12.4535 5.83784L13.3021 6.68637ZM12.401 10.4697C11.9779 9.18109 12.2794 7.70907 13.3021 6.68637L12.4535 5.83784C11.0986 7.19284 10.7021 9.14217 11.2608 10.844L12.401 10.4697ZM11.4066 10.2326L5.21498 16.4242L6.06351 17.2727L12.2552 11.0811L11.4066 10.2326ZM5.21498 16.4242C4.12834 17.5109 4.12834 19.2727 5.21498 20.3593L6.06351 19.5108C5.4455 18.8928 5.4455 17.8908 6.06351 17.2727L5.21498 16.4242ZM5.21498 20.3593C6.30163 21.446 8.06343 21.446 9.15007 20.3593L8.30155 19.5108C7.68353 20.1288 6.68153 20.1288 6.06351 19.5108L5.21498 20.3593ZM9.15007 20.3593L15.5426 13.9668L14.6941 13.1182L8.30155 19.5108L9.15007 20.3593ZM18.5475 11.9318C17.6463 12.8331 16.3968 13.1742 15.2301 12.953L15.0066 14.132C16.5466 14.4239 18.2023 13.9741 19.3961 12.7804L18.5475 11.9318ZM19.508 8.34804C19.8389 9.58721 19.5178 10.9616 18.5475 11.9318L19.3961 12.7804C20.6815 11.495 21.1043 9.67445 20.6674 8.03843L19.508 8.34804ZM17.8726 11.2569L20.5119 8.6175L19.6634 7.76897L17.024 10.4083L17.8726 11.2569ZM14.8575 10.8167L17.3058 11.4154L17.5908 10.2498L15.1426 9.65106L14.8575 10.8167ZM13.8185 7.92813L14.4172 10.3764L15.5829 10.0914L14.9841 7.64307L13.8185 7.92813Z",
          fill: "currentColor"
        }
      )
    }
  );
});
WrenchIcon.displayName = "ForwardRef(WrenchIcon)";
var icons = {
  "access-denied": AccessDeniedIcon,
  activity: ActivityIcon,
  "add-circle": AddCircleIcon,
  "add-comment": AddCommentIcon,
  "add-document": AddDocumentIcon,
  add: AddIcon,
  "add-user": AddUserIcon,
  api: ApiIcon,
  archive: ArchiveIcon,
  "arrow-down": ArrowDownIcon,
  "arrow-left": ArrowLeftIcon,
  "arrow-right": ArrowRightIcon,
  "arrow-top-right": ArrowTopRightIcon,
  "arrow-up": ArrowUpIcon,
  asterisk: AsteriskIcon,
  "bar-chart": BarChartIcon,
  basket: BasketIcon,
  bell: BellIcon,
  bill: BillIcon,
  "binary-document": BinaryDocumentIcon,
  "block-content": BlockContentIcon,
  "block-element": BlockElementIcon,
  blockquote: BlockquoteIcon,
  bold: BoldIcon,
  bolt: BoltIcon,
  book: BookIcon,
  bottle: BottleIcon,
  "bulb-filled": BulbFilledIcon,
  "bulb-outline": BulbOutlineIcon,
  calendar: CalendarIcon,
  case: CaseIcon,
  "chart-upward": ChartUpwardIcon,
  "checkmark-circle": CheckmarkCircleIcon,
  checkmark: CheckmarkIcon,
  "chevron-down": ChevronDownIcon,
  "chevron-left": ChevronLeftIcon,
  "chevron-right": ChevronRightIcon,
  "chevron-up": ChevronUpIcon,
  circle: CircleIcon,
  clipboard: ClipboardIcon,
  "clipboard-image": ClipboardImageIcon,
  clock: ClockIcon,
  "close-circle": CloseCircleIcon,
  close: CloseIcon,
  "code-block": CodeBlockIcon,
  code: CodeIcon,
  cog: CogIcon,
  collapse: CollapseIcon,
  "color-wheel": ColorWheelIcon,
  comment: CommentIcon,
  component: ComponentIcon,
  compose: ComposeIcon,
  confetti: ConfettiIcon,
  controls: ControlsIcon,
  copy: CopyIcon,
  "credit-card": CreditCardIcon,
  crop: CropIcon,
  cube: CubeIcon,
  dashboard: DashboardIcon,
  database: DatabaseIcon,
  desktop: DesktopIcon,
  diamond: DiamondIcon,
  document: DocumentIcon,
  "document-pdf": DocumentPdfIcon,
  "document-remove": DocumentRemoveIcon,
  "document-sheet": DocumentSheetIcon,
  "document-text": DocumentTextIcon,
  "document-video": DocumentVideoIcon,
  "document-word": DocumentWordIcon,
  "document-zip": DocumentZipIcon,
  documents: DocumentsIcon,
  dot: DotIcon,
  "double-chevron-down": DoubleChevronDownIcon,
  "double-chevron-left": DoubleChevronLeftIcon,
  "double-chevron-right": DoubleChevronRightIcon,
  "double-chevron-up": DoubleChevronUpIcon,
  download: DownloadIcon,
  "drag-handle": DragHandleIcon,
  drop: DropIcon,
  "earth-americas": EarthAmericasIcon,
  "earth-globe": EarthGlobeIcon,
  edit: EditIcon,
  "ellipsis-horizontal": EllipsisHorizontalIcon,
  "ellipsis-vertical": EllipsisVerticalIcon,
  empty: EmptyIcon,
  enter: EnterIcon,
  "enter-right": EnterRightIcon,
  envelope: EnvelopeIcon,
  equal: EqualIcon,
  "error-filled": ErrorFilledIcon,
  "error-outline": ErrorOutlineIcon,
  expand: ExpandIcon,
  "eye-closed": EyeClosedIcon,
  "eye-open": EyeOpenIcon,
  filter: FilterIcon,
  folder: FolderIcon,
  generate: GenerateIcon,
  groq: GroqIcon,
  hash: HashIcon,
  "heart-filled": HeartFilledIcon,
  heart: HeartIcon,
  "help-circle": HelpCircleIcon,
  highlight: HighlightIcon,
  home: HomeIcon,
  "ice-cream": IceCreamIcon,
  image: ImageIcon,
  "image-remove": ImageRemoveIcon,
  images: ImagesIcon,
  "info-filled": InfoFilledIcon,
  "info-outline": InfoOutlineIcon,
  "inline-element": InlineElementIcon,
  inline: InlineIcon,
  "insert-above": InsertAboveIcon,
  "insert-below": InsertBelowIcon,
  italic: ItalicIcon,
  joystick: JoystickIcon,
  json: JsonIcon,
  launch: LaunchIcon,
  leave: LeaveIcon,
  lemon: LemonIcon,
  link: LinkIcon,
  "link-removed": LinkRemovedIcon,
  lock: LockIcon,
  "logo-js": LogoJsIcon,
  "logo-ts": LogoTsIcon,
  "master-detail": MasterDetailIcon,
  menu: MenuIcon,
  "mobile-device": MobileDeviceIcon,
  moon: MoonIcon,
  number: NumberIcon,
  "ok-hand": OkHandIcon,
  olist: OlistIcon,
  overage: OverageIcon,
  package: PackageIcon,
  "panel-left": PanelLeftIcon,
  "panel-right": PanelRightIcon,
  pause: PauseIcon,
  pin: PinIcon,
  "pin-removed": PinRemovedIcon,
  play: PlayIcon,
  plug: PlugIcon,
  presentation: PresentationIcon,
  "progress-50": Progress50Icon,
  "progress-75": Progress75Icon,
  projects: ProjectsIcon,
  publish: PublishIcon,
  "read-only": ReadOnlyIcon,
  redo: RedoIcon,
  refresh: RefreshIcon,
  "remove-circle": RemoveCircleIcon,
  remove: RemoveIcon,
  reset: ResetIcon,
  restore: RestoreIcon,
  retrieve: RetrieveIcon,
  retry: RetryIcon,
  revert: RevertIcon,
  robot: RobotIcon,
  rocket: RocketIcon,
  schema: SchemaIcon,
  search: SearchIcon,
  select: SelectIcon,
  share: ShareIcon,
  sort: SortIcon,
  sparkle: SparkleIcon,
  sparkles: SparklesIcon,
  spinner: SpinnerIcon,
  "split-horizontal": SplitHorizontalIcon,
  "split-vertical": SplitVerticalIcon,
  square: SquareIcon,
  "stack-compact": StackCompactIcon,
  stack: StackIcon,
  "star-filled": StarFilledIcon,
  star: StarIcon,
  stop: StopIcon,
  strikethrough: StrikethroughIcon,
  string: StringIcon,
  sun: SunIcon,
  sync: SyncIcon,
  "tablet-device": TabletDeviceIcon,
  tag: TagIcon,
  tags: TagsIcon,
  task: TaskIcon,
  terminal: TerminalIcon,
  text: TextIcon,
  "th-large": ThLargeIcon,
  "th-list": ThListIcon,
  tiers: TiersIcon,
  "toggle-arrow-right": ToggleArrowRightIcon,
  token: TokenIcon,
  transfer: TransferIcon,
  translate: TranslateIcon,
  trash: TrashIcon,
  "trend-upward": TrendUpwardIcon,
  "triangle-outline": TriangleOutlineIcon,
  trolley: TrolleyIcon,
  truncate: TruncateIcon,
  twitter: TwitterIcon,
  ulist: UlistIcon,
  unarchive: UnarchiveIcon,
  underline: UnderlineIcon,
  undo: UndoIcon,
  unknown: UnknownIcon,
  unlink: UnlinkIcon,
  unlock: UnlockIcon,
  unpublish: UnpublishIcon,
  upload: UploadIcon,
  user: UserIcon,
  users: UsersIcon,
  "warning-filled": WarningFilledIcon,
  "warning-outline": WarningOutlineIcon,
  wrench: WrenchIcon
};
var Icon = (0, import_react2.forwardRef)(function(props, ref) {
  const { symbol, ...restProps } = props, IconComponent = icons[symbol];
  return IconComponent ? (0, import_jsx_runtime.jsx)(IconComponent, { ...restProps, ref }) : null;
});
Icon.displayName = "ForwardRef(Icon)";

// node_modules/framer-motion/dist/es/motion/index.mjs
var React = __toESM(require_react(), 1);
var import_react13 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs
var import_react3 = __toESM(require_react(), 1);
var MotionConfigContext = (0, import_react3.createContext)({
  transformPagePoint: (p2) => p2,
  isStatic: false,
  reducedMotion: "never"
});

// node_modules/framer-motion/dist/es/context/MotionContext/index.mjs
var import_react4 = __toESM(require_react(), 1);
var MotionContext = (0, import_react4.createContext)({});

// node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
var import_react8 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/PresenceContext.mjs
var import_react5 = __toESM(require_react(), 1);
var PresenceContext = (0, import_react5.createContext)(null);

// node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
var import_react6 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/is-browser.mjs
var isBrowser = typeof document !== "undefined";

// node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
var useIsomorphicLayoutEffect = isBrowser ? import_react6.useLayoutEffect : import_react6.useEffect;

// node_modules/framer-motion/dist/es/context/LazyContext.mjs
var import_react7 = __toESM(require_react(), 1);
var LazyContext = (0, import_react7.createContext)({ strict: false });

// node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs
var camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();

// node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs
var optimizedAppearDataId = "framerAppearId";
var optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);

// node_modules/framer-motion/dist/es/utils/GlobalConfig.mjs
var MotionGlobalConfig = {
  skipAnimations: false,
  useManualTiming: false
};

// node_modules/framer-motion/dist/es/frameloop/render-step.mjs
var Queue = class {
  constructor() {
    this.order = [];
    this.scheduled = /* @__PURE__ */ new Set();
  }
  add(process3) {
    if (!this.scheduled.has(process3)) {
      this.scheduled.add(process3);
      this.order.push(process3);
      return true;
    }
  }
  remove(process3) {
    const index3 = this.order.indexOf(process3);
    if (index3 !== -1) {
      this.order.splice(index3, 1);
      this.scheduled.delete(process3);
    }
  }
  clear() {
    this.order.length = 0;
    this.scheduled.clear();
  }
};
function createRenderStep(runNextFrame) {
  let thisFrame = new Queue();
  let nextFrame = new Queue();
  let numToRun = 0;
  let isProcessing = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    /**
     * Schedule a process to run on the next frame.
     */
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing;
      const queue = addToCurrentFrame ? thisFrame : nextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (queue.add(callback) && addToCurrentFrame && isProcessing) {
        numToRun = thisFrame.order.length;
      }
      return callback;
    },
    /**
     * Cancel the provided callback from running on the next frame.
     */
    cancel: (callback) => {
      nextFrame.remove(callback);
      toKeepAlive.delete(callback);
    },
    /**
     * Execute all schedule callbacks.
     */
    process: (frameData2) => {
      if (isProcessing) {
        flushNextFrame = true;
        return;
      }
      isProcessing = true;
      [thisFrame, nextFrame] = [nextFrame, thisFrame];
      nextFrame.clear();
      numToRun = thisFrame.order.length;
      if (numToRun) {
        for (let i2 = 0; i2 < numToRun; i2++) {
          const callback = thisFrame.order[i2];
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame();
          }
          callback(frameData2);
        }
      }
      isProcessing = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/framer-motion/dist/es/frameloop/batcher.mjs
var stepsOrder = [
  "prepare",
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var maxElapsed = 40;
function createRenderBatcher(scheduleNextBatch, allowKeepAlive) {
  let runNextFrame = false;
  let useDefaultElapsed = true;
  const state = {
    delta: 0,
    timestamp: 0,
    isProcessing: false
  };
  const steps2 = stepsOrder.reduce((acc, key2) => {
    acc[key2] = createRenderStep(() => runNextFrame = true);
    return acc;
  }, {});
  const processStep = (stepId) => {
    steps2[stepId].process(state);
  };
  const processBatch = () => {
    const timestamp = MotionGlobalConfig.useManualTiming ? state.timestamp : performance.now();
    runNextFrame = false;
    state.delta = useDefaultElapsed ? 1e3 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);
    state.timestamp = timestamp;
    state.isProcessing = true;
    stepsOrder.forEach(processStep);
    state.isProcessing = false;
    if (runNextFrame && allowKeepAlive) {
      useDefaultElapsed = false;
      scheduleNextBatch(processBatch);
    }
  };
  const wake = () => {
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!state.isProcessing) {
      scheduleNextBatch(processBatch);
    }
  };
  const schedule = stepsOrder.reduce((acc, key2) => {
    const step = steps2[key2];
    acc[key2] = (process3, keepAlive = false, immediate = false) => {
      if (!runNextFrame)
        wake();
      return step.schedule(process3, keepAlive, immediate);
    };
    return acc;
  }, {});
  const cancel = (process3) => stepsOrder.forEach((key2) => steps2[key2].cancel(process3));
  return { schedule, cancel, state, steps: steps2 };
}

// node_modules/framer-motion/dist/es/frameloop/microtask.mjs
var { schedule: microtask, cancel: cancelMicrotask } = createRenderBatcher(queueMicrotask, false);

// node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
function useVisualElement(Component3, visualState, props, createVisualElement2) {
  const { visualElement: parent } = (0, import_react8.useContext)(MotionContext);
  const lazyContext = (0, import_react8.useContext)(LazyContext);
  const presenceContext = (0, import_react8.useContext)(PresenceContext);
  const reducedMotionConfig = (0, import_react8.useContext)(MotionConfigContext).reducedMotion;
  const visualElementRef = (0, import_react8.useRef)();
  createVisualElement2 = createVisualElement2 || lazyContext.renderer;
  if (!visualElementRef.current && createVisualElement2) {
    visualElementRef.current = createVisualElement2(Component3, {
      visualState,
      parent,
      props,
      presenceContext,
      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,
      reducedMotionConfig
    });
  }
  const visualElement = visualElementRef.current;
  (0, import_react8.useInsertionEffect)(() => {
    visualElement && visualElement.update(props, presenceContext);
  });
  const wantsHandoff = (0, import_react8.useRef)(Boolean(props[optimizedAppearDataAttribute] && !window.HandoffComplete));
  useIsomorphicLayoutEffect(() => {
    if (!visualElement)
      return;
    microtask.postRender(visualElement.render);
    if (wantsHandoff.current && visualElement.animationState) {
      visualElement.animationState.animateChanges();
    }
  });
  (0, import_react8.useEffect)(() => {
    if (!visualElement)
      return;
    visualElement.updateFeatures();
    if (!wantsHandoff.current && visualElement.animationState) {
      visualElement.animationState.animateChanges();
    }
    if (wantsHandoff.current) {
      wantsHandoff.current = false;
      window.HandoffComplete = true;
    }
  });
  return visualElement;
}

// node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
var import_react9 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/is-ref-object.mjs
function isRefObject(ref) {
  return ref && typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}

// node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
function useMotionRef(visualState, visualElement, externalRef) {
  return (0, import_react9.useCallback)(
    (instance) => {
      instance && visualState.mount && visualState.mount(instance);
      if (visualElement) {
        instance ? visualElement.mount(instance) : visualElement.unmount();
      }
      if (externalRef) {
        if (typeof externalRef === "function") {
          externalRef(instance);
        } else if (isRefObject(externalRef)) {
          externalRef.current = instance;
        }
      }
    },
    /**
     * Only pass a new ref callback to React if we've received a visual element
     * factory. Otherwise we'll be mounting/remounting every time externalRef
     * or other dependencies change.
     */
    [visualElement]
  );
}

// node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
var import_react10 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs
function isVariantLabel(v2) {
  return typeof v2 === "string" || Array.isArray(v2);
}

// node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs
function isAnimationControls(v2) {
  return v2 !== null && typeof v2 === "object" && typeof v2.start === "function";
}

// node_modules/framer-motion/dist/es/render/utils/variant-props.mjs
var variantPriorityOrder = [
  "animate",
  "whileInView",
  "whileFocus",
  "whileHover",
  "whileTap",
  "whileDrag",
  "exit"
];
var variantProps = ["initial", ...variantPriorityOrder];

// node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs
function isControllingVariants(props) {
  return isAnimationControls(props.animate) || variantProps.some((name) => isVariantLabel(props[name]));
}
function isVariantNode(props) {
  return Boolean(isControllingVariants(props) || props.variants);
}

// node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
function getCurrentTreeVariants(props, context) {
  if (isControllingVariants(props)) {
    const { initial, animate: animate2 } = props;
    return {
      initial: initial === false || isVariantLabel(initial) ? initial : void 0,
      animate: isVariantLabel(animate2) ? animate2 : void 0
    };
  }
  return props.inherit !== false ? context : {};
}

// node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
function useCreateMotionContext(props) {
  const { initial, animate: animate2 } = getCurrentTreeVariants(props, (0, import_react10.useContext)(MotionContext));
  return (0, import_react10.useMemo)(() => ({ initial, animate: animate2 }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate2)]);
}
function variantLabelsAsDependency(prop) {
  return Array.isArray(prop) ? prop.join(" ") : prop;
}

// node_modules/framer-motion/dist/es/motion/features/definitions.mjs
var featureProps = {
  animation: [
    "animate",
    "variants",
    "whileHover",
    "whileTap",
    "exit",
    "whileInView",
    "whileFocus",
    "whileDrag"
  ],
  exit: ["exit"],
  drag: ["drag", "dragControls"],
  focus: ["whileFocus"],
  hover: ["whileHover", "onHoverStart", "onHoverEnd"],
  tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
  pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
  inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
  layout: ["layout", "layoutId"]
};
var featureDefinitions = {};
for (const key2 in featureProps) {
  featureDefinitions[key2] = {
    isEnabled: (props) => featureProps[key2].some((name) => !!props[name])
  };
}

// node_modules/framer-motion/dist/es/motion/features/load-features.mjs
function loadFeatures(features) {
  for (const key2 in features) {
    featureDefinitions[key2] = {
      ...featureDefinitions[key2],
      ...features[key2]
    };
  }
}

// node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs
var import_react11 = __toESM(require_react(), 1);
var LayoutGroupContext = (0, import_react11.createContext)({});

// node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs
var import_react12 = __toESM(require_react(), 1);
var SwitchLayoutGroupContext = (0, import_react12.createContext)({});

// node_modules/framer-motion/dist/es/motion/utils/symbol.mjs
var motionComponentSymbol = Symbol.for("motionComponentSymbol");

// node_modules/framer-motion/dist/es/motion/index.mjs
function createMotionComponent({ preloadedFeatures: preloadedFeatures2, createVisualElement: createVisualElement2, useRender, useVisualState: useVisualState2, Component: Component3 }) {
  preloadedFeatures2 && loadFeatures(preloadedFeatures2);
  function MotionComponent(props, externalRef) {
    let MeasureLayout2;
    const configAndProps = {
      ...(0, import_react13.useContext)(MotionConfigContext),
      ...props,
      layoutId: useLayoutId(props)
    };
    const { isStatic } = configAndProps;
    const context = useCreateMotionContext(props);
    const visualState = useVisualState2(props, isStatic);
    if (!isStatic && isBrowser) {
      context.visualElement = useVisualElement(Component3, visualState, configAndProps, createVisualElement2);
      const initialLayoutGroupConfig = (0, import_react13.useContext)(SwitchLayoutGroupContext);
      const isStrict = (0, import_react13.useContext)(LazyContext).strict;
      if (context.visualElement) {
        MeasureLayout2 = context.visualElement.loadFeatures(
          // Note: Pass the full new combined props to correctly re-render dynamic feature components.
          configAndProps,
          isStrict,
          preloadedFeatures2,
          initialLayoutGroupConfig
        );
      }
    }
    return React.createElement(
      MotionContext.Provider,
      { value: context },
      MeasureLayout2 && context.visualElement ? React.createElement(MeasureLayout2, { visualElement: context.visualElement, ...configAndProps }) : null,
      useRender(Component3, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)
    );
  }
  const ForwardRefComponent = (0, import_react13.forwardRef)(MotionComponent);
  ForwardRefComponent[motionComponentSymbol] = Component3;
  return ForwardRefComponent;
}
function useLayoutId({ layoutId }) {
  const layoutGroupId = (0, import_react13.useContext)(LayoutGroupContext).id;
  return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
}

// node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs
function createMotionProxy(createConfig) {
  function custom(Component3, customMotionComponentConfig = {}) {
    return createMotionComponent(createConfig(Component3, customMotionComponentConfig));
  }
  if (typeof Proxy === "undefined") {
    return custom;
  }
  const componentCache = /* @__PURE__ */ new Map();
  return new Proxy(custom, {
    /**
     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
     * The prop name is passed through as `key` and we can use that to generate a `motion`
     * DOM component with that name.
     */
    get: (_target, key2) => {
      if (!componentCache.has(key2)) {
        componentCache.set(key2, custom(key2));
      }
      return componentCache.get(key2);
    }
  });
}

// node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs
var lowercaseSVGElements = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "switch",
  "symbol",
  "svg",
  "text",
  "tspan",
  "use",
  "view"
];

// node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
function isSVGComponent(Component3) {
  if (
    /**
     * If it's not a string, it's a custom React component. Currently we only support
     * HTML custom React components.
     */
    typeof Component3 !== "string" || /**
     * If it contains a dash, the element is a custom HTML webcomponent.
     */
    Component3.includes("-")
  ) {
    return false;
  } else if (
    /**
     * If it's in our list of lowercase SVG tags, it's an SVG component
     */
    lowercaseSVGElements.indexOf(Component3) > -1 || /**
     * If it contains a capital letter, it's an SVG component
     */
    /[A-Z]/.test(Component3)
  ) {
    return true;
  }
  return false;
}

// node_modules/framer-motion/dist/es/render/dom/use-render.mjs
var import_react16 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/html/use-props.mjs
var import_react14 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs
var scaleCorrectors = {};
function addScaleCorrector(correctors) {
  Object.assign(scaleCorrectors, correctors);
}

// node_modules/framer-motion/dist/es/render/html/utils/transform.mjs
var transformPropOrder = [
  "transformPerspective",
  "x",
  "y",
  "z",
  "translateX",
  "translateY",
  "translateZ",
  "scale",
  "scaleX",
  "scaleY",
  "rotate",
  "rotateX",
  "rotateY",
  "rotateZ",
  "skew",
  "skewX",
  "skewY"
];
var transformProps = new Set(transformPropOrder);

// node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
function isForcedMotionValue(key2, { layout: layout2, layoutId }) {
  return transformProps.has(key2) || key2.startsWith("origin") || (layout2 || layoutId !== void 0) && (!!scaleCorrectors[key2] || key2 === "opacity");
}

// node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs
var isMotionValue = (value) => Boolean(value && value.getVelocity);

// node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs
var translateAlias = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective"
};
var numTransforms = transformPropOrder.length;
function buildTransform(transform2, { enableHardwareAcceleration = true, allowTransformNone = true }, transformIsDefault, transformTemplate) {
  let transformString = "";
  for (let i2 = 0; i2 < numTransforms; i2++) {
    const key2 = transformPropOrder[i2];
    if (transform2[key2] !== void 0) {
      const transformName = translateAlias[key2] || key2;
      transformString += `${transformName}(${transform2[key2]}) `;
    }
  }
  if (enableHardwareAcceleration && !transform2.z) {
    transformString += "translateZ(0)";
  }
  transformString = transformString.trim();
  if (transformTemplate) {
    transformString = transformTemplate(transform2, transformIsDefault ? "" : transformString);
  } else if (allowTransformNone && transformIsDefault) {
    transformString = "none";
  }
  return transformString;
}

// node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs
var checkStringStartsWith = (token2) => (key2) => typeof key2 === "string" && key2.startsWith(token2);
var isCSSVariableName = checkStringStartsWith("--");
var startsAsVariableToken = checkStringStartsWith("var(--");
var isCSSVariableToken = (value) => {
  const startsWithToken = startsAsVariableToken(value);
  if (!startsWithToken)
    return false;
  return singleCssVariableRegex.test(value.split("/*")[0].trim());
};
var singleCssVariableRegex = /var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)$/i;

// node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs
var getValueAsType = (value, type) => {
  return type && typeof value === "number" ? type.transform(value) : value;
};

// node_modules/framer-motion/dist/es/utils/clamp.mjs
var clamp2 = (min2, max2, v2) => {
  if (v2 > max2)
    return max2;
  if (v2 < min2)
    return min2;
  return v2;
};

// node_modules/framer-motion/dist/es/value/types/numbers/index.mjs
var number = {
  test: (v2) => typeof v2 === "number",
  parse: parseFloat,
  transform: (v2) => v2
};
var alpha = {
  ...number,
  transform: (v2) => clamp2(0, 1, v2)
};
var scale = {
  ...number,
  default: 1
};

// node_modules/framer-motion/dist/es/value/types/utils.mjs
var sanitize = (v2) => Math.round(v2 * 1e5) / 1e5;
var floatRegex = /(-)?([\d]*\.?[\d])+/g;
var colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi;
var singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
function isString(v2) {
  return typeof v2 === "string";
}

// node_modules/framer-motion/dist/es/value/types/numbers/units.mjs
var createUnitType = (unit) => ({
  test: (v2) => isString(v2) && v2.endsWith(unit) && v2.split(" ").length === 1,
  parse: parseFloat,
  transform: (v2) => `${v2}${unit}`
});
var degrees = createUnitType("deg");
var percent = createUnitType("%");
var px = createUnitType("px");
var vh = createUnitType("vh");
var vw = createUnitType("vw");
var progressPercentage = {
  ...percent,
  parse: (v2) => percent.parse(v2) / 100,
  transform: (v2) => percent.transform(v2 * 100)
};

// node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs
var int = {
  ...number,
  transform: Math.round
};

// node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
var numberValueTypes = {
  // Border props
  borderWidth: px,
  borderTopWidth: px,
  borderRightWidth: px,
  borderBottomWidth: px,
  borderLeftWidth: px,
  borderRadius: px,
  radius: px,
  borderTopLeftRadius: px,
  borderTopRightRadius: px,
  borderBottomRightRadius: px,
  borderBottomLeftRadius: px,
  // Positioning props
  width: px,
  maxWidth: px,
  height: px,
  maxHeight: px,
  size: px,
  top: px,
  right: px,
  bottom: px,
  left: px,
  // Spacing props
  padding: px,
  paddingTop: px,
  paddingRight: px,
  paddingBottom: px,
  paddingLeft: px,
  margin: px,
  marginTop: px,
  marginRight: px,
  marginBottom: px,
  marginLeft: px,
  // Transform props
  rotate: degrees,
  rotateX: degrees,
  rotateY: degrees,
  rotateZ: degrees,
  scale,
  scaleX: scale,
  scaleY: scale,
  scaleZ: scale,
  skew: degrees,
  skewX: degrees,
  skewY: degrees,
  distance: px,
  translateX: px,
  translateY: px,
  translateZ: px,
  x: px,
  y: px,
  z: px,
  perspective: px,
  transformPerspective: px,
  opacity: alpha,
  originX: progressPercentage,
  originY: progressPercentage,
  originZ: px,
  // Misc
  zIndex: int,
  // SVG
  fillOpacity: alpha,
  strokeOpacity: alpha,
  numOctaves: int
};

// node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
function buildHTMLStyles(state, latestValues, options, transformTemplate) {
  const { style, vars, transform: transform2, transformOrigin } = state;
  let hasTransform2 = false;
  let hasTransformOrigin = false;
  let transformIsNone = true;
  for (const key2 in latestValues) {
    const value = latestValues[key2];
    if (isCSSVariableName(key2)) {
      vars[key2] = value;
      continue;
    }
    const valueType = numberValueTypes[key2];
    const valueAsType = getValueAsType(value, valueType);
    if (transformProps.has(key2)) {
      hasTransform2 = true;
      transform2[key2] = valueAsType;
      if (!transformIsNone)
        continue;
      if (value !== (valueType.default || 0))
        transformIsNone = false;
    } else if (key2.startsWith("origin")) {
      hasTransformOrigin = true;
      transformOrigin[key2] = valueAsType;
    } else {
      style[key2] = valueAsType;
    }
  }
  if (!latestValues.transform) {
    if (hasTransform2 || transformTemplate) {
      style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);
    } else if (style.transform) {
      style.transform = "none";
    }
  }
  if (hasTransformOrigin) {
    const { originX = "50%", originY = "50%", originZ = 0 } = transformOrigin;
    style.transformOrigin = `${originX} ${originY} ${originZ}`;
  }
}

// node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs
var createHtmlRenderState = () => ({
  style: {},
  transform: {},
  transformOrigin: {},
  vars: {}
});

// node_modules/framer-motion/dist/es/render/html/use-props.mjs
function copyRawValuesOnly(target, source, props) {
  for (const key2 in source) {
    if (!isMotionValue(source[key2]) && !isForcedMotionValue(key2, props)) {
      target[key2] = source[key2];
    }
  }
}
function useInitialMotionValues({ transformTemplate }, visualState, isStatic) {
  return (0, import_react14.useMemo)(() => {
    const state = createHtmlRenderState();
    buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);
    return Object.assign({}, state.vars, state.style);
  }, [visualState]);
}
function useStyle(props, visualState, isStatic) {
  const styleProp = props.style || {};
  const style = {};
  copyRawValuesOnly(style, styleProp, props);
  Object.assign(style, useInitialMotionValues(props, visualState, isStatic));
  return style;
}
function useHTMLProps(props, visualState, isStatic) {
  const htmlProps = {};
  const style = useStyle(props, visualState, isStatic);
  if (props.drag && props.dragListener !== false) {
    htmlProps.draggable = false;
    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
    style.touchAction = props.drag === true ? "none" : `pan-${props.drag === "x" ? "y" : "x"}`;
  }
  if (props.tabIndex === void 0 && (props.onTap || props.onTapStart || props.whileTap)) {
    htmlProps.tabIndex = 0;
  }
  htmlProps.style = style;
  return htmlProps;
}

// node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs
var validMotionProps = /* @__PURE__ */ new Set([
  "animate",
  "exit",
  "variants",
  "initial",
  "style",
  "values",
  "variants",
  "transition",
  "transformTemplate",
  "custom",
  "inherit",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "_dragX",
  "_dragY",
  "onHoverStart",
  "onHoverEnd",
  "onViewportEnter",
  "onViewportLeave",
  "globalTapTarget",
  "ignoreStrict",
  "viewport"
]);
function isValidMotionProp(key2) {
  return key2.startsWith("while") || key2.startsWith("drag") && key2 !== "draggable" || key2.startsWith("layout") || key2.startsWith("onTap") || key2.startsWith("onPan") || key2.startsWith("onLayout") || validMotionProps.has(key2);
}

// node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
var shouldForward = (key2) => !isValidMotionProp(key2);
function loadExternalIsValidProp(isValidProp) {
  if (!isValidProp)
    return;
  shouldForward = (key2) => key2.startsWith("on") ? !isValidMotionProp(key2) : isValidProp(key2);
}
try {
  loadExternalIsValidProp((init_is_prop_valid_browser_esm(), __toCommonJS(is_prop_valid_browser_esm_exports)).default);
} catch (_a) {
}
function filterProps(props, isDom, forwardMotionProps) {
  const filteredProps = {};
  for (const key2 in props) {
    if (key2 === "values" && typeof props.values === "object")
      continue;
    if (shouldForward(key2) || forwardMotionProps === true && isValidMotionProp(key2) || !isDom && !isValidMotionProp(key2) || // If trying to use native HTML drag events, forward drag listeners
    props["draggable"] && key2.startsWith("onDrag")) {
      filteredProps[key2] = props[key2];
    }
  }
  return filteredProps;
}

// node_modules/framer-motion/dist/es/render/svg/use-props.mjs
var import_react15 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs
function calcOrigin(origin2, offset4, size4) {
  return typeof origin2 === "string" ? origin2 : px.transform(offset4 + size4 * origin2);
}
function calcSVGTransformOrigin(dimensions, originX, originY) {
  const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
  const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
  return `${pxOriginX} ${pxOriginY}`;
}

// node_modules/framer-motion/dist/es/render/svg/utils/path.mjs
var dashKeys = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray"
};
var camelKeys = {
  offset: "strokeDashoffset",
  array: "strokeDasharray"
};
function buildSVGPath(attrs, length2, spacing = 1, offset4 = 0, useDashCase = true) {
  attrs.pathLength = 1;
  const keys = useDashCase ? dashKeys : camelKeys;
  attrs[keys.offset] = px.transform(-offset4);
  const pathLength = px.transform(length2);
  const pathSpacing = px.transform(spacing);
  attrs[keys.array] = `${pathLength} ${pathSpacing}`;
}

// node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
function buildSVGAttrs(state, {
  attrX,
  attrY,
  attrScale,
  originX,
  originY,
  pathLength,
  pathSpacing = 1,
  pathOffset = 0,
  // This is object creation, which we try to avoid per-frame.
  ...latest
}, options, isSVGTag2, transformTemplate) {
  buildHTMLStyles(state, latest, options, transformTemplate);
  if (isSVGTag2) {
    if (state.style.viewBox) {
      state.attrs.viewBox = state.style.viewBox;
    }
    return;
  }
  state.attrs = state.style;
  state.style = {};
  const { attrs, style, dimensions } = state;
  if (attrs.transform) {
    if (dimensions)
      style.transform = attrs.transform;
    delete attrs.transform;
  }
  if (dimensions && (originX !== void 0 || originY !== void 0 || style.transform)) {
    style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
  }
  if (attrX !== void 0)
    attrs.x = attrX;
  if (attrY !== void 0)
    attrs.y = attrY;
  if (attrScale !== void 0)
    attrs.scale = attrScale;
  if (pathLength !== void 0) {
    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
  }
}

// node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs
var createSvgRenderState = () => ({
  ...createHtmlRenderState(),
  attrs: {}
});

// node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs
var isSVGTag = (tag) => typeof tag === "string" && tag.toLowerCase() === "svg";

// node_modules/framer-motion/dist/es/render/svg/use-props.mjs
function useSVGProps(props, visualState, _isStatic, Component3) {
  const visualProps = (0, import_react15.useMemo)(() => {
    const state = createSvgRenderState();
    buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component3), props.transformTemplate);
    return {
      ...state.attrs,
      style: { ...state.style }
    };
  }, [visualState]);
  if (props.style) {
    const rawStyles = {};
    copyRawValuesOnly(rawStyles, props.style, props);
    visualProps.style = { ...rawStyles, ...visualProps.style };
  }
  return visualProps;
}

// node_modules/framer-motion/dist/es/render/dom/use-render.mjs
function createUseRender(forwardMotionProps = false) {
  const useRender = (Component3, props, ref, { latestValues }, isStatic) => {
    const useVisualProps = isSVGComponent(Component3) ? useSVGProps : useHTMLProps;
    const visualProps = useVisualProps(props, latestValues, isStatic, Component3);
    const filteredProps = filterProps(props, typeof Component3 === "string", forwardMotionProps);
    const elementProps = Component3 !== import_react16.Fragment ? { ...filteredProps, ...visualProps, ref } : {};
    const { children } = props;
    const renderedChildren = (0, import_react16.useMemo)(() => isMotionValue(children) ? children.get() : children, [children]);
    return (0, import_react16.createElement)(Component3, {
      ...elementProps,
      children: renderedChildren
    });
  };
  return useRender;
}

// node_modules/framer-motion/dist/es/render/html/utils/render.mjs
function renderHTML(element, { style, vars }, styleProp, projection) {
  Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
  for (const key2 in vars) {
    element.style.setProperty(key2, vars[key2]);
  }
}

// node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs
var camelCaseAttributes = /* @__PURE__ */ new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform",
  "pathLength",
  "startOffset",
  "textLength",
  "lengthAdjust"
]);

// node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
function renderSVG(element, renderState, _styleProp, projection) {
  renderHTML(element, renderState, void 0, projection);
  for (const key2 in renderState.attrs) {
    element.setAttribute(!camelCaseAttributes.has(key2) ? camelToDash(key2) : key2, renderState.attrs[key2]);
  }
}

// node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs
function scrapeMotionValuesFromProps(props, prevProps) {
  const { style } = props;
  const newValues = {};
  for (const key2 in style) {
    if (isMotionValue(style[key2]) || prevProps.style && isMotionValue(prevProps.style[key2]) || isForcedMotionValue(key2, props)) {
      newValues[key2] = style[key2];
    }
  }
  return newValues;
}

// node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
function scrapeMotionValuesFromProps2(props, prevProps) {
  const newValues = scrapeMotionValuesFromProps(props, prevProps);
  for (const key2 in props) {
    if (isMotionValue(props[key2]) || isMotionValue(prevProps[key2])) {
      const targetKey = transformPropOrder.indexOf(key2) !== -1 ? "attr" + key2.charAt(0).toUpperCase() + key2.substring(1) : key2;
      newValues[targetKey] = props[key2];
    }
  }
  return newValues;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
var import_react18 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs
function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {
  if (typeof definition === "function") {
    definition = definition(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
  }
  if (typeof definition === "string") {
    definition = props.variants && props.variants[definition];
  }
  if (typeof definition === "function") {
    definition = definition(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
  }
  return definition;
}

// node_modules/framer-motion/dist/es/utils/use-constant.mjs
var import_react17 = __toESM(require_react(), 1);
function useConstant(init) {
  const ref = (0, import_react17.useRef)(null);
  if (ref.current === null) {
    ref.current = init();
  }
  return ref.current;
}

// node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs
var isKeyframesTarget = (v2) => {
  return Array.isArray(v2);
};

// node_modules/framer-motion/dist/es/utils/resolve-value.mjs
var isCustomValue = (v2) => {
  return Boolean(v2 && typeof v2 === "object" && v2.mix && v2.toValue);
};
var resolveFinalValueInKeyframes = (v2) => {
  return isKeyframesTarget(v2) ? v2[v2.length - 1] || 0 : v2;
};

// node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
function resolveMotionValue(value) {
  const unwrappedValue = isMotionValue(value) ? value.get() : value;
  return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
function makeState({ scrapeMotionValuesFromProps: scrapeMotionValuesFromProps3, createRenderState, onMount }, props, context, presenceContext) {
  const state = {
    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3),
    renderState: createRenderState()
  };
  if (onMount) {
    state.mount = (instance) => onMount(props, instance, state);
  }
  return state;
}
var makeUseVisualState = (config) => (props, isStatic) => {
  const context = (0, import_react18.useContext)(MotionContext);
  const presenceContext = (0, import_react18.useContext)(PresenceContext);
  const make = () => makeState(config, props, context, presenceContext);
  return isStatic ? make() : useConstant(make);
};
function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
  const values = {};
  const motionValues = scrapeMotionValues(props, {});
  for (const key2 in motionValues) {
    values[key2] = resolveMotionValue(motionValues[key2]);
  }
  let { initial, animate: animate2 } = props;
  const isControllingVariants$1 = isControllingVariants(props);
  const isVariantNode$1 = isVariantNode(props);
  if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {
    if (initial === void 0)
      initial = context.initial;
    if (animate2 === void 0)
      animate2 = context.animate;
  }
  let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;
  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
  const variantToSet = isInitialAnimationBlocked ? animate2 : initial;
  if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
    const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
    list.forEach((definition) => {
      const resolved = resolveVariantFromProps(props, definition);
      if (!resolved)
        return;
      const { transitionEnd, transition, ...target } = resolved;
      for (const key2 in target) {
        let valueTarget = target[key2];
        if (Array.isArray(valueTarget)) {
          const index3 = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;
          valueTarget = valueTarget[index3];
        }
        if (valueTarget !== null) {
          values[key2] = valueTarget;
        }
      }
      for (const key2 in transitionEnd)
        values[key2] = transitionEnd[key2];
    });
  }
  return values;
}

// node_modules/framer-motion/dist/es/utils/noop.mjs
var noop = (any) => any;

// node_modules/framer-motion/dist/es/frameloop/frame.mjs
var { schedule: frame, cancel: cancelFrame, state: frameData, steps } = createRenderBatcher(typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : noop, true);

// node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
var svgMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
    createRenderState: createSvgRenderState,
    onMount: (props, instance, { renderState, latestValues }) => {
      frame.read(() => {
        try {
          renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
        } catch (e) {
          renderState.dimensions = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          };
        }
      });
      frame.render(() => {
        buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);
        renderSVG(instance, renderState);
      });
    }
  })
};

// node_modules/framer-motion/dist/es/render/html/config-motion.mjs
var htmlMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps,
    createRenderState: createHtmlRenderState
  })
};

// node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
function createDomMotionConfig(Component3, { forwardMotionProps = false }, preloadedFeatures2, createVisualElement2) {
  const baseConfig = isSVGComponent(Component3) ? svgMotionConfig : htmlMotionConfig;
  return {
    ...baseConfig,
    preloadedFeatures: preloadedFeatures2,
    useRender: createUseRender(forwardMotionProps),
    createVisualElement: createVisualElement2,
    Component: Component3
  };
}

// node_modules/framer-motion/dist/es/events/add-dom-event.mjs
function addDomEvent(target, eventName, handler, options = { passive: true }) {
  target.addEventListener(eventName, handler, options);
  return () => target.removeEventListener(eventName, handler);
}

// node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs
var isPrimaryPointer = (event) => {
  if (event.pointerType === "mouse") {
    return typeof event.button !== "number" || event.button <= 0;
  } else {
    return event.isPrimary !== false;
  }
};

// node_modules/framer-motion/dist/es/events/event-info.mjs
function extractEventInfo(event, pointType = "page") {
  return {
    point: {
      x: event[pointType + "X"],
      y: event[pointType + "Y"]
    }
  };
}
var addPointerInfo = (handler) => {
  return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));
};

// node_modules/framer-motion/dist/es/events/add-pointer-event.mjs
function addPointerEvent(target, eventName, handler, options) {
  return addDomEvent(target, eventName, addPointerInfo(handler), options);
}

// node_modules/framer-motion/dist/es/utils/pipe.mjs
var combineFunctions = (a2, b2) => (v2) => b2(a2(v2));
var pipe = (...transformers) => transformers.reduce(combineFunctions);

// node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs
function createLock(name) {
  let lock = null;
  return () => {
    const openLock = () => {
      lock = null;
    };
    if (lock === null) {
      lock = name;
      return openLock;
    }
    return false;
  };
}
var globalHorizontalLock = createLock("dragHorizontal");
var globalVerticalLock = createLock("dragVertical");
function getGlobalLock(drag2) {
  let lock = false;
  if (drag2 === "y") {
    lock = globalVerticalLock();
  } else if (drag2 === "x") {
    lock = globalHorizontalLock();
  } else {
    const openHorizontal = globalHorizontalLock();
    const openVertical = globalVerticalLock();
    if (openHorizontal && openVertical) {
      lock = () => {
        openHorizontal();
        openVertical();
      };
    } else {
      if (openHorizontal)
        openHorizontal();
      if (openVertical)
        openVertical();
    }
  }
  return lock;
}
function isDragActive() {
  const openGestureLock = getGlobalLock(true);
  if (!openGestureLock)
    return true;
  openGestureLock();
  return false;
}

// node_modules/framer-motion/dist/es/motion/features/Feature.mjs
var Feature = class {
  constructor(node2) {
    this.isMounted = false;
    this.node = node2;
  }
  update() {
  }
};

// node_modules/framer-motion/dist/es/gestures/hover.mjs
function addHoverEvent(node2, isActive) {
  const eventName = "pointer" + (isActive ? "enter" : "leave");
  const callbackName = "onHover" + (isActive ? "Start" : "End");
  const handleEvent = (event, info) => {
    if (event.pointerType === "touch" || isDragActive())
      return;
    const props = node2.getProps();
    if (node2.animationState && props.whileHover) {
      node2.animationState.setActive("whileHover", isActive);
    }
    if (props[callbackName]) {
      frame.update(() => props[callbackName](event, info));
    }
  };
  return addPointerEvent(node2.current, eventName, handleEvent, {
    passive: !node2.getProps()[callbackName]
  });
}
var HoverGesture = class extends Feature {
  mount() {
    this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));
  }
  unmount() {
  }
};

// node_modules/framer-motion/dist/es/gestures/focus.mjs
var FocusGesture = class extends Feature {
  constructor() {
    super(...arguments);
    this.isActive = false;
  }
  onFocus() {
    let isFocusVisible = false;
    try {
      isFocusVisible = this.node.current.matches(":focus-visible");
    } catch (e) {
      isFocusVisible = true;
    }
    if (!isFocusVisible || !this.node.animationState)
      return;
    this.node.animationState.setActive("whileFocus", true);
    this.isActive = true;
  }
  onBlur() {
    if (!this.isActive || !this.node.animationState)
      return;
    this.node.animationState.setActive("whileFocus", false);
    this.isActive = false;
  }
  mount() {
    this.unmount = pipe(addDomEvent(this.node.current, "focus", () => this.onFocus()), addDomEvent(this.node.current, "blur", () => this.onBlur()));
  }
  unmount() {
  }
};

// node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs
var isNodeOrChild = (parent, child) => {
  if (!child) {
    return false;
  } else if (parent === child) {
    return true;
  } else {
    return isNodeOrChild(parent, child.parentElement);
  }
};

// node_modules/framer-motion/dist/es/gestures/press.mjs
function fireSyntheticPointerEvent(name, handler) {
  if (!handler)
    return;
  const syntheticPointerEvent = new PointerEvent("pointer" + name);
  handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));
}
var PressGesture = class extends Feature {
  constructor() {
    super(...arguments);
    this.removeStartListeners = noop;
    this.removeEndListeners = noop;
    this.removeAccessibleListeners = noop;
    this.startPointerPress = (startEvent, startInfo) => {
      if (this.isPressing)
        return;
      this.removeEndListeners();
      const props = this.node.getProps();
      const endPointerPress = (endEvent, endInfo) => {
        if (!this.checkPressEnd())
          return;
        const { onTap, onTapCancel, globalTapTarget } = this.node.getProps();
        frame.update(() => {
          !globalTapTarget && !isNodeOrChild(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);
        });
      };
      const removePointerUpListener = addPointerEvent(window, "pointerup", endPointerPress, { passive: !(props.onTap || props["onPointerUp"]) });
      const removePointerCancelListener = addPointerEvent(window, "pointercancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props["onPointerCancel"]) });
      this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);
      this.startPress(startEvent, startInfo);
    };
    this.startAccessiblePress = () => {
      const handleKeydown = (keydownEvent) => {
        if (keydownEvent.key !== "Enter" || this.isPressing)
          return;
        const handleKeyup = (keyupEvent) => {
          if (keyupEvent.key !== "Enter" || !this.checkPressEnd())
            return;
          fireSyntheticPointerEvent("up", (event, info) => {
            const { onTap } = this.node.getProps();
            if (onTap) {
              frame.update(() => onTap(event, info));
            }
          });
        };
        this.removeEndListeners();
        this.removeEndListeners = addDomEvent(this.node.current, "keyup", handleKeyup);
        fireSyntheticPointerEvent("down", (event, info) => {
          this.startPress(event, info);
        });
      };
      const removeKeydownListener = addDomEvent(this.node.current, "keydown", handleKeydown);
      const handleBlur = () => {
        if (!this.isPressing)
          return;
        fireSyntheticPointerEvent("cancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));
      };
      const removeBlurListener = addDomEvent(this.node.current, "blur", handleBlur);
      this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);
    };
  }
  startPress(event, info) {
    this.isPressing = true;
    const { onTapStart, whileTap } = this.node.getProps();
    if (whileTap && this.node.animationState) {
      this.node.animationState.setActive("whileTap", true);
    }
    if (onTapStart) {
      frame.update(() => onTapStart(event, info));
    }
  }
  checkPressEnd() {
    this.removeEndListeners();
    this.isPressing = false;
    const props = this.node.getProps();
    if (props.whileTap && this.node.animationState) {
      this.node.animationState.setActive("whileTap", false);
    }
    return !isDragActive();
  }
  cancelPress(event, info) {
    if (!this.checkPressEnd())
      return;
    const { onTapCancel } = this.node.getProps();
    if (onTapCancel) {
      frame.update(() => onTapCancel(event, info));
    }
  }
  mount() {
    const props = this.node.getProps();
    const removePointerListener = addPointerEvent(props.globalTapTarget ? window : this.node.current, "pointerdown", this.startPointerPress, { passive: !(props.onTapStart || props["onPointerStart"]) });
    const removeFocusListener = addDomEvent(this.node.current, "focus", this.startAccessiblePress);
    this.removeStartListeners = pipe(removePointerListener, removeFocusListener);
  }
  unmount() {
    this.removeStartListeners();
    this.removeEndListeners();
    this.removeAccessibleListeners();
  }
};

// node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs
var observerCallbacks = /* @__PURE__ */ new WeakMap();
var observers = /* @__PURE__ */ new WeakMap();
var fireObserverCallback = (entry) => {
  const callback = observerCallbacks.get(entry.target);
  callback && callback(entry);
};
var fireAllObserverCallbacks = (entries) => {
  entries.forEach(fireObserverCallback);
};
function initIntersectionObserver({ root, ...options }) {
  const lookupRoot = root || document;
  if (!observers.has(lookupRoot)) {
    observers.set(lookupRoot, {});
  }
  const rootObservers = observers.get(lookupRoot);
  const key2 = JSON.stringify(options);
  if (!rootObservers[key2]) {
    rootObservers[key2] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });
  }
  return rootObservers[key2];
}
function observeIntersection(element, options, callback) {
  const rootInteresectionObserver = initIntersectionObserver(options);
  observerCallbacks.set(element, callback);
  rootInteresectionObserver.observe(element);
  return () => {
    observerCallbacks.delete(element);
    rootInteresectionObserver.unobserve(element);
  };
}

// node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs
var thresholdNames = {
  some: 0,
  all: 1
};
var InViewFeature = class extends Feature {
  constructor() {
    super(...arguments);
    this.hasEnteredView = false;
    this.isInView = false;
  }
  startObserver() {
    this.unmount();
    const { viewport = {} } = this.node.getProps();
    const { root, margin: rootMargin, amount = "some", once } = viewport;
    const options = {
      root: root ? root.current : void 0,
      rootMargin,
      threshold: typeof amount === "number" ? amount : thresholdNames[amount]
    };
    const onIntersectionUpdate = (entry) => {
      const { isIntersecting } = entry;
      if (this.isInView === isIntersecting)
        return;
      this.isInView = isIntersecting;
      if (once && !isIntersecting && this.hasEnteredView) {
        return;
      } else if (isIntersecting) {
        this.hasEnteredView = true;
      }
      if (this.node.animationState) {
        this.node.animationState.setActive("whileInView", isIntersecting);
      }
      const { onViewportEnter, onViewportLeave } = this.node.getProps();
      const callback = isIntersecting ? onViewportEnter : onViewportLeave;
      callback && callback(entry);
    };
    return observeIntersection(this.node.current, options, onIntersectionUpdate);
  }
  mount() {
    this.startObserver();
  }
  update() {
    if (typeof IntersectionObserver === "undefined")
      return;
    const { props, prevProps } = this.node;
    const hasOptionsChanged = ["amount", "margin", "root"].some(hasViewportOptionChanged(props, prevProps));
    if (hasOptionsChanged) {
      this.startObserver();
    }
  }
  unmount() {
  }
};
function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
  return (name) => viewport[name] !== prevViewport[name];
}

// node_modules/framer-motion/dist/es/motion/features/gestures.mjs
var gestureAnimations = {
  inView: {
    Feature: InViewFeature
  },
  tap: {
    Feature: PressGesture
  },
  focus: {
    Feature: FocusGesture
  },
  hover: {
    Feature: HoverGesture
  }
};

// node_modules/framer-motion/dist/es/utils/shallow-compare.mjs
function shallowCompare(next2, prev2) {
  if (!Array.isArray(prev2))
    return false;
  const prevLength = prev2.length;
  if (prevLength !== next2.length)
    return false;
  for (let i2 = 0; i2 < prevLength; i2++) {
    if (prev2[i2] !== next2[i2])
      return false;
  }
  return true;
}

// node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs
function getCurrent(visualElement) {
  const current = {};
  visualElement.values.forEach((value, key2) => current[key2] = value.get());
  return current;
}
function getVelocity(visualElement) {
  const velocity = {};
  visualElement.values.forEach((value, key2) => velocity[key2] = value.getVelocity());
  return velocity;
}
function resolveVariant(visualElement, definition, custom) {
  const props = visualElement.getProps();
  return resolveVariantFromProps(props, definition, custom !== void 0 ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));
}

// node_modules/framer-motion/dist/es/utils/errors.mjs
var warning = noop;
var invariant = noop;
if (true) {
  warning = (check, message) => {
    if (!check && typeof console !== "undefined") {
      console.warn(message);
    }
  };
  invariant = (check, message) => {
    if (!check) {
      throw new Error(message);
    }
  };
}

// node_modules/framer-motion/dist/es/utils/time-conversion.mjs
var secondsToMilliseconds = (seconds) => seconds * 1e3;
var millisecondsToSeconds = (milliseconds) => milliseconds / 1e3;

// node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs
var instantAnimationState = {
  current: false
};

// node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs
var isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === "number";

// node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs
function isWaapiSupportedEasing(easing) {
  return Boolean(!easing || typeof easing === "string" && supportedWaapiEasing[easing] || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));
}
var cubicBezierAsString = ([a2, b2, c2, d]) => `cubic-bezier(${a2}, ${b2}, ${c2}, ${d})`;
var supportedWaapiEasing = {
  linear: "linear",
  ease: "ease",
  easeIn: "ease-in",
  easeOut: "ease-out",
  easeInOut: "ease-in-out",
  circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),
  circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),
  backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
  backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99])
};
function mapEasingToNativeEasing(easing) {
  if (!easing)
    return void 0;
  return isBezierDefinition(easing) ? cubicBezierAsString(easing) : Array.isArray(easing) ? easing.map(mapEasingToNativeEasing) : supportedWaapiEasing[easing];
}

// node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs
function animateStyle(element, valueName, keyframes2, { delay: delay2 = 0, duration, repeat = 0, repeatType = "loop", ease: ease2, times } = {}) {
  const keyframeOptions = { [valueName]: keyframes2 };
  if (times)
    keyframeOptions.offset = times;
  const easing = mapEasingToNativeEasing(ease2);
  if (Array.isArray(easing))
    keyframeOptions.easing = easing;
  return element.animate(keyframeOptions, {
    delay: delay2,
    duration,
    easing: !Array.isArray(easing) ? easing : "linear",
    fill: "both",
    iterations: repeat + 1,
    direction: repeatType === "reverse" ? "alternate" : "normal"
  });
}

// node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs
function getFinalKeyframe(keyframes2, { repeat, repeatType = "loop" }) {
  const index3 = repeat && repeatType !== "loop" && repeat % 2 === 1 ? 0 : keyframes2.length - 1;
  return keyframes2[index3];
}

// node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs
var calcBezier = (t, a1, a2) => (((1 - 3 * a2 + 3 * a1) * t + (3 * a2 - 6 * a1)) * t + 3 * a1) * t;
var subdivisionPrecision = 1e-7;
var subdivisionMaxIterations = 12;
function binarySubdivide(x2, lowerBound, upperBound, mX1, mX2) {
  let currentX;
  let currentT;
  let i2 = 0;
  do {
    currentT = lowerBound + (upperBound - lowerBound) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - x2;
    if (currentX > 0) {
      upperBound = currentT;
    } else {
      lowerBound = currentT;
    }
  } while (Math.abs(currentX) > subdivisionPrecision && ++i2 < subdivisionMaxIterations);
  return currentT;
}
function cubicBezier(mX1, mY1, mX2, mY2) {
  if (mX1 === mY1 && mX2 === mY2)
    return noop;
  const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
  return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
}

// node_modules/framer-motion/dist/es/easing/ease.mjs
var easeIn = cubicBezier(0.42, 0, 1, 1);
var easeOut = cubicBezier(0, 0, 0.58, 1);
var easeInOut = cubicBezier(0.42, 0, 0.58, 1);

// node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs
var isEasingArray = (ease2) => {
  return Array.isArray(ease2) && typeof ease2[0] !== "number";
};

// node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs
var mirrorEasing = (easing) => (p2) => p2 <= 0.5 ? easing(2 * p2) / 2 : (2 - easing(2 * (1 - p2))) / 2;

// node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs
var reverseEasing = (easing) => (p2) => 1 - easing(1 - p2);

// node_modules/framer-motion/dist/es/easing/circ.mjs
var circIn = (p2) => 1 - Math.sin(Math.acos(p2));
var circOut = reverseEasing(circIn);
var circInOut = mirrorEasing(circIn);

// node_modules/framer-motion/dist/es/easing/back.mjs
var backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);
var backIn = reverseEasing(backOut);
var backInOut = mirrorEasing(backIn);

// node_modules/framer-motion/dist/es/easing/anticipate.mjs
var anticipate = (p2) => (p2 *= 2) < 1 ? 0.5 * backIn(p2) : 0.5 * (2 - Math.pow(2, -10 * (p2 - 1)));

// node_modules/framer-motion/dist/es/easing/utils/map.mjs
var easingLookup = {
  linear: noop,
  easeIn,
  easeInOut,
  easeOut,
  circIn,
  circInOut,
  circOut,
  backIn,
  backInOut,
  backOut,
  anticipate
};
var easingDefinitionToFunction = (definition) => {
  if (Array.isArray(definition)) {
    invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);
    const [x1, y1, x2, y2] = definition;
    return cubicBezier(x1, y1, x2, y2);
  } else if (typeof definition === "string") {
    invariant(easingLookup[definition] !== void 0, `Invalid easing type '${definition}'`);
    return easingLookup[definition];
  }
  return definition;
};

// node_modules/framer-motion/dist/es/utils/progress.mjs
var progress = (from2, to, value) => {
  const toFromDifference = to - from2;
  return toFromDifference === 0 ? 1 : (value - from2) / toFromDifference;
};

// node_modules/framer-motion/dist/es/utils/mix/number.mjs
var mixNumber = (from2, to, progress2) => {
  return from2 + (to - from2) * progress2;
};

// node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs
function hueToRgb(p2, q2, t) {
  if (t < 0)
    t += 1;
  if (t > 1)
    t -= 1;
  if (t < 1 / 6)
    return p2 + (q2 - p2) * 6 * t;
  if (t < 1 / 2)
    return q2;
  if (t < 2 / 3)
    return p2 + (q2 - p2) * (2 / 3 - t) * 6;
  return p2;
}
function hslaToRgba({ hue, saturation, lightness, alpha: alpha2 }) {
  hue /= 360;
  saturation /= 100;
  lightness /= 100;
  let red2 = 0;
  let green2 = 0;
  let blue2 = 0;
  if (!saturation) {
    red2 = green2 = blue2 = lightness;
  } else {
    const q2 = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
    const p2 = 2 * lightness - q2;
    red2 = hueToRgb(p2, q2, hue + 1 / 3);
    green2 = hueToRgb(p2, q2, hue);
    blue2 = hueToRgb(p2, q2, hue - 1 / 3);
  }
  return {
    red: Math.round(red2 * 255),
    green: Math.round(green2 * 255),
    blue: Math.round(blue2 * 255),
    alpha: alpha2
  };
}

// node_modules/framer-motion/dist/es/value/types/color/utils.mjs
var isColorString = (type, testProp) => (v2) => {
  return Boolean(isString(v2) && singleColorRegex.test(v2) && v2.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v2, testProp));
};
var splitColor = (aName, bName, cName) => (v2) => {
  if (!isString(v2))
    return v2;
  const [a2, b2, c2, alpha2] = v2.match(floatRegex);
  return {
    [aName]: parseFloat(a2),
    [bName]: parseFloat(b2),
    [cName]: parseFloat(c2),
    alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
  };
};

// node_modules/framer-motion/dist/es/value/types/color/rgba.mjs
var clampRgbUnit = (v2) => clamp2(0, 255, v2);
var rgbUnit = {
  ...number,
  transform: (v2) => Math.round(clampRgbUnit(v2))
};
var rgba2 = {
  test: isColorString("rgb", "red"),
  parse: splitColor("red", "green", "blue"),
  transform: ({ red: red2, green: green2, blue: blue2, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red2) + ", " + rgbUnit.transform(green2) + ", " + rgbUnit.transform(blue2) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
};

// node_modules/framer-motion/dist/es/value/types/color/hex.mjs
function parseHex(v2) {
  let r2 = "";
  let g2 = "";
  let b2 = "";
  let a2 = "";
  if (v2.length > 5) {
    r2 = v2.substring(1, 3);
    g2 = v2.substring(3, 5);
    b2 = v2.substring(5, 7);
    a2 = v2.substring(7, 9);
  } else {
    r2 = v2.substring(1, 2);
    g2 = v2.substring(2, 3);
    b2 = v2.substring(3, 4);
    a2 = v2.substring(4, 5);
    r2 += r2;
    g2 += g2;
    b2 += b2;
    a2 += a2;
  }
  return {
    red: parseInt(r2, 16),
    green: parseInt(g2, 16),
    blue: parseInt(b2, 16),
    alpha: a2 ? parseInt(a2, 16) / 255 : 1
  };
}
var hex = {
  test: isColorString("#"),
  parse: parseHex,
  transform: rgba2.transform
};

// node_modules/framer-motion/dist/es/value/types/color/hsla.mjs
var hsla = {
  test: isColorString("hsl", "hue"),
  parse: splitColor("hue", "saturation", "lightness"),
  transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
    return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
  }
};

// node_modules/framer-motion/dist/es/utils/mix/color.mjs
var mixLinearColor = (from2, to, v2) => {
  const fromExpo = from2 * from2;
  const expo = v2 * (to * to - fromExpo) + fromExpo;
  return expo < 0 ? 0 : Math.sqrt(expo);
};
var colorTypes = [hex, rgba2, hsla];
var getColorType = (v2) => colorTypes.find((type) => type.test(v2));
function asRGBA(color3) {
  const type = getColorType(color3);
  invariant(Boolean(type), `'${color3}' is not an animatable color. Use the equivalent color code instead.`);
  let model = type.parse(color3);
  if (type === hsla) {
    model = hslaToRgba(model);
  }
  return model;
}
var mixColor = (from2, to) => {
  const fromRGBA = asRGBA(from2);
  const toRGBA = asRGBA(to);
  const blended = { ...fromRGBA };
  return (v2) => {
    blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v2);
    blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v2);
    blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v2);
    blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v2);
    return rgba2.transform(blended);
  };
};

// node_modules/framer-motion/dist/es/value/types/color/index.mjs
var color2 = {
  test: (v2) => rgba2.test(v2) || hex.test(v2) || hsla.test(v2),
  parse: (v2) => {
    if (rgba2.test(v2)) {
      return rgba2.parse(v2);
    } else if (hsla.test(v2)) {
      return hsla.parse(v2);
    } else {
      return hex.parse(v2);
    }
  },
  transform: (v2) => {
    return isString(v2) ? v2 : v2.hasOwnProperty("red") ? rgba2.transform(v2) : hsla.transform(v2);
  }
};

// node_modules/framer-motion/dist/es/value/types/complex/index.mjs
function test(v2) {
  var _a, _b;
  return isNaN(v2) && isString(v2) && (((_a = v2.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v2.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;
}
var NUMBER_TOKEN = "number";
var COLOR_TOKEN = "color";
var VAR_TOKEN = "var";
var VAR_FUNCTION_TOKEN = "var(";
var SPLIT_TOKEN = "${}";
var complexRegex = /(var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\))|(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))|((-)?([\d]*\.?[\d])+)/gi;
function analyseComplexValue(value) {
  const originalValue = value.toString();
  const matchedValues = originalValue.match(complexRegex) || [];
  const values = [];
  const indexes = {
    color: [],
    number: [],
    var: []
  };
  const types2 = [];
  for (let i2 = 0; i2 < matchedValues.length; i2++) {
    const parsedValue = matchedValues[i2];
    if (color2.test(parsedValue)) {
      indexes.color.push(i2);
      types2.push(COLOR_TOKEN);
      values.push(color2.parse(parsedValue));
    } else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {
      indexes.var.push(i2);
      types2.push(VAR_TOKEN);
      values.push(parsedValue);
    } else {
      indexes.number.push(i2);
      types2.push(NUMBER_TOKEN);
      values.push(parseFloat(parsedValue));
    }
  }
  const tokenised = originalValue.replace(complexRegex, SPLIT_TOKEN);
  const split = tokenised.split(SPLIT_TOKEN);
  return { values, split, indexes, types: types2 };
}
function parseComplexValue(v2) {
  return analyseComplexValue(v2).values;
}
function createTransformer(source) {
  const { split, types: types2 } = analyseComplexValue(source);
  const numSections = split.length;
  return (v2) => {
    let output = "";
    for (let i2 = 0; i2 < numSections; i2++) {
      output += split[i2];
      if (v2[i2] !== void 0) {
        const type = types2[i2];
        if (type === NUMBER_TOKEN) {
          output += sanitize(v2[i2]);
        } else if (type === COLOR_TOKEN) {
          output += color2.transform(v2[i2]);
        } else {
          output += v2[i2];
        }
      }
    }
    return output;
  };
}
var convertNumbersToZero = (v2) => typeof v2 === "number" ? 0 : v2;
function getAnimatableNone(v2) {
  const parsed = parseComplexValue(v2);
  const transformer = createTransformer(v2);
  return transformer(parsed.map(convertNumbersToZero));
}
var complex = {
  test,
  parse: parseComplexValue,
  createTransformer,
  getAnimatableNone
};

// node_modules/framer-motion/dist/es/utils/mix/complex.mjs
function mixImmediate(a2, b2) {
  return (p2) => p2 > 0 ? b2 : a2;
}
function mixNumber2(a2, b2) {
  return (p2) => mixNumber(a2, b2, p2);
}
function getMixer(a2) {
  if (typeof a2 === "number") {
    return mixNumber2;
  } else if (typeof a2 === "string") {
    return isCSSVariableToken(a2) ? mixImmediate : color2.test(a2) ? mixColor : mixComplex;
  } else if (Array.isArray(a2)) {
    return mixArray;
  } else if (typeof a2 === "object") {
    return color2.test(a2) ? mixColor : mixObject;
  }
  return mixImmediate;
}
function mixArray(a2, b2) {
  const output = [...a2];
  const numValues = output.length;
  const blendValue = a2.map((v2, i2) => getMixer(v2)(v2, b2[i2]));
  return (p2) => {
    for (let i2 = 0; i2 < numValues; i2++) {
      output[i2] = blendValue[i2](p2);
    }
    return output;
  };
}
function mixObject(a2, b2) {
  const output = { ...a2, ...b2 };
  const blendValue = {};
  for (const key2 in output) {
    if (a2[key2] !== void 0 && b2[key2] !== void 0) {
      blendValue[key2] = getMixer(a2[key2])(a2[key2], b2[key2]);
    }
  }
  return (v2) => {
    for (const key2 in blendValue) {
      output[key2] = blendValue[key2](v2);
    }
    return output;
  };
}
function matchOrder(origin2, target) {
  var _a;
  const orderedOrigin = [];
  const pointers = { color: 0, var: 0, number: 0 };
  for (let i2 = 0; i2 < target.values.length; i2++) {
    const type = target.types[i2];
    const originIndex = origin2.indexes[type][pointers[type]];
    const originValue = (_a = origin2.values[originIndex]) !== null && _a !== void 0 ? _a : 0;
    orderedOrigin[i2] = originValue;
    pointers[type]++;
  }
  return orderedOrigin;
}
var mixComplex = (origin2, target) => {
  const template = complex.createTransformer(target);
  const originStats = analyseComplexValue(origin2);
  const targetStats = analyseComplexValue(target);
  const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length && originStats.indexes.color.length === targetStats.indexes.color.length && originStats.indexes.number.length >= targetStats.indexes.number.length;
  if (canInterpolate) {
    return pipe(mixArray(matchOrder(originStats, targetStats), targetStats.values), template);
  } else {
    warning(true, `Complex values '${origin2}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
    return mixImmediate(origin2, target);
  }
};

// node_modules/framer-motion/dist/es/utils/mix/index.mjs
function mix2(from2, to, p2) {
  if (typeof from2 === "number" && typeof to === "number" && typeof p2 === "number") {
    return mixNumber(from2, to, p2);
  }
  const mixer = getMixer(from2);
  return mixer(from2, to);
}

// node_modules/framer-motion/dist/es/utils/interpolate.mjs
function createMixers(output, ease2, customMixer) {
  const mixers = [];
  const mixerFactory = customMixer || mix2;
  const numMixers = output.length - 1;
  for (let i2 = 0; i2 < numMixers; i2++) {
    let mixer = mixerFactory(output[i2], output[i2 + 1]);
    if (ease2) {
      const easingFunction = Array.isArray(ease2) ? ease2[i2] || noop : ease2;
      mixer = pipe(easingFunction, mixer);
    }
    mixers.push(mixer);
  }
  return mixers;
}
function interpolate(input, output, { clamp: isClamp = true, ease: ease2, mixer } = {}) {
  const inputLength = input.length;
  invariant(inputLength === output.length, "Both input and output ranges must be the same length");
  if (inputLength === 1)
    return () => output[0];
  if (input[0] > input[inputLength - 1]) {
    input = [...input].reverse();
    output = [...output].reverse();
  }
  const mixers = createMixers(output, ease2, mixer);
  const numMixers = mixers.length;
  const interpolator = (v2) => {
    let i2 = 0;
    if (numMixers > 1) {
      for (; i2 < input.length - 2; i2++) {
        if (v2 < input[i2 + 1])
          break;
      }
    }
    const progressInRange = progress(input[i2], input[i2 + 1], v2);
    return mixers[i2](progressInRange);
  };
  return isClamp ? (v2) => interpolator(clamp2(input[0], input[inputLength - 1], v2)) : interpolator;
}

// node_modules/framer-motion/dist/es/utils/offsets/fill.mjs
function fillOffset(offset4, remaining) {
  const min2 = offset4[offset4.length - 1];
  for (let i2 = 1; i2 <= remaining; i2++) {
    const offsetProgress = progress(0, remaining, i2);
    offset4.push(mixNumber(min2, 1, offsetProgress));
  }
}

// node_modules/framer-motion/dist/es/utils/offsets/default.mjs
function defaultOffset(arr) {
  const offset4 = [0];
  fillOffset(offset4, arr.length - 1);
  return offset4;
}

// node_modules/framer-motion/dist/es/utils/offsets/time.mjs
function convertOffsetToTimes(offset4, duration) {
  return offset4.map((o2) => o2 * duration);
}

// node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs
function defaultEasing(values, easing) {
  return values.map(() => easing || easeInOut).splice(0, values.length - 1);
}
function keyframes({ duration = 300, keyframes: keyframeValues, times, ease: ease2 = "easeInOut" }) {
  const easingFunctions = isEasingArray(ease2) ? ease2.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease2);
  const state = {
    done: false,
    value: keyframeValues[0]
  };
  const absoluteTimes = convertOffsetToTimes(
    // Only use the provided offsets if they're the correct length
    // TODO Maybe we should warn here if there's a length mismatch
    times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues),
    duration
  );
  const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {
    ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)
  });
  return {
    calculatedDuration: duration,
    next: (t) => {
      state.value = mapTimeToKeyframe(t);
      state.done = t >= duration;
      return state;
    }
  };
}

// node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs
function velocityPerSecond(velocity, frameDuration) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}

// node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs
var velocitySampleDuration = 5;
function calcGeneratorVelocity(resolveValue, t, current) {
  const prevT = Math.max(t - velocitySampleDuration, 0);
  return velocityPerSecond(current - resolveValue(prevT), t - prevT);
}

// node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs
var safeMin = 1e-3;
var minDuration = 0.01;
var maxDuration = 10;
var minDamping = 0.05;
var maxDamping = 1;
function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
  let envelope;
  let derivative;
  warning(duration <= secondsToMilliseconds(maxDuration), "Spring duration must be 10 seconds or less");
  let dampingRatio = 1 - bounce;
  dampingRatio = clamp2(minDamping, maxDamping, dampingRatio);
  duration = clamp2(minDuration, maxDuration, millisecondsToSeconds(duration));
  if (dampingRatio < 1) {
    envelope = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const a2 = exponentialDecay - velocity;
      const b2 = calcAngularFreq(undampedFreq2, dampingRatio);
      const c2 = Math.exp(-delta);
      return safeMin - a2 / b2 * c2;
    };
    derivative = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const d = delta * velocity + velocity;
      const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
      const f2 = Math.exp(-delta);
      const g2 = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
      const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
      return factor * ((d - e) * f2) / g2;
    };
  } else {
    envelope = (undampedFreq2) => {
      const a2 = Math.exp(-undampedFreq2 * duration);
      const b2 = (undampedFreq2 - velocity) * duration + 1;
      return -safeMin + a2 * b2;
    };
    derivative = (undampedFreq2) => {
      const a2 = Math.exp(-undampedFreq2 * duration);
      const b2 = (velocity - undampedFreq2) * (duration * duration);
      return a2 * b2;
    };
  }
  const initialGuess = 5 / duration;
  const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
  duration = secondsToMilliseconds(duration);
  if (isNaN(undampedFreq)) {
    return {
      stiffness: 100,
      damping: 10,
      duration
    };
  } else {
    const stiffness = Math.pow(undampedFreq, 2) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
      duration
    };
  }
}
var rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess) {
  let result = initialGuess;
  for (let i2 = 1; i2 < rootIterations; i2++) {
    result = result - envelope(result) / derivative(result);
  }
  return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}

// node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs
var durationKeys = ["duration", "bounce"];
var physicsKeys = ["stiffness", "damping", "mass"];
function isSpringType(options, keys) {
  return keys.some((key2) => options[key2] !== void 0);
}
function getSpringOptions(options) {
  let springOptions = {
    velocity: 0,
    stiffness: 100,
    damping: 10,
    mass: 1,
    isResolvedFromDuration: false,
    ...options
  };
  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
    const derived = findSpring(options);
    springOptions = {
      ...springOptions,
      ...derived,
      mass: 1
    };
    springOptions.isResolvedFromDuration = true;
  }
  return springOptions;
}
function spring({ keyframes: keyframes2, restDelta, restSpeed, ...options }) {
  const origin2 = keyframes2[0];
  const target = keyframes2[keyframes2.length - 1];
  const state = { done: false, value: origin2 };
  const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration } = getSpringOptions({
    ...options,
    velocity: -millisecondsToSeconds(options.velocity || 0)
  });
  const initialVelocity = velocity || 0;
  const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
  const initialDelta = target - origin2;
  const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));
  const isGranularScale = Math.abs(initialDelta) < 5;
  restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);
  restDelta || (restDelta = isGranularScale ? 5e-3 : 0.5);
  let resolveSpring;
  if (dampingRatio < 1) {
    const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
    resolveSpring = (t) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));
    };
  } else if (dampingRatio === 1) {
    resolveSpring = (t) => target - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);
  } else {
    const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
    resolveSpring = (t) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
      const freqForT = Math.min(dampedAngularFreq * t, 300);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
    };
  }
  return {
    calculatedDuration: isResolvedFromDuration ? duration || null : null,
    next: (t) => {
      const current = resolveSpring(t);
      if (!isResolvedFromDuration) {
        let currentVelocity = initialVelocity;
        if (t !== 0) {
          if (dampingRatio < 1) {
            currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);
          } else {
            currentVelocity = 0;
          }
        }
        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
        const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      } else {
        state.done = t >= duration;
      }
      state.value = state.done ? target : current;
      return state;
    }
  };
}

// node_modules/framer-motion/dist/es/animation/generators/inertia.mjs
function inertia({ keyframes: keyframes2, velocity = 0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min: min2, max: max2, restDelta = 0.5, restSpeed }) {
  const origin2 = keyframes2[0];
  const state = {
    done: false,
    value: origin2
  };
  const isOutOfBounds = (v2) => min2 !== void 0 && v2 < min2 || max2 !== void 0 && v2 > max2;
  const nearestBoundary = (v2) => {
    if (min2 === void 0)
      return max2;
    if (max2 === void 0)
      return min2;
    return Math.abs(min2 - v2) < Math.abs(max2 - v2) ? min2 : max2;
  };
  let amplitude = power * velocity;
  const ideal = origin2 + amplitude;
  const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
  if (target !== ideal)
    amplitude = target - origin2;
  const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);
  const calcLatest = (t) => target + calcDelta(t);
  const applyFriction = (t) => {
    const delta = calcDelta(t);
    const latest = calcLatest(t);
    state.done = Math.abs(delta) <= restDelta;
    state.value = state.done ? target : latest;
  };
  let timeReachedBoundary;
  let spring$1;
  const checkCatchBoundary = (t) => {
    if (!isOutOfBounds(state.value))
      return;
    timeReachedBoundary = t;
    spring$1 = spring({
      keyframes: [state.value, nearestBoundary(state.value)],
      velocity: calcGeneratorVelocity(calcLatest, t, state.value),
      damping: bounceDamping,
      stiffness: bounceStiffness,
      restDelta,
      restSpeed
    });
  };
  checkCatchBoundary(0);
  return {
    calculatedDuration: null,
    next: (t) => {
      let hasUpdatedFrame = false;
      if (!spring$1 && timeReachedBoundary === void 0) {
        hasUpdatedFrame = true;
        applyFriction(t);
        checkCatchBoundary(t);
      }
      if (timeReachedBoundary !== void 0 && t > timeReachedBoundary) {
        return spring$1.next(t - timeReachedBoundary);
      } else {
        !hasUpdatedFrame && applyFriction(t);
        return state;
      }
    }
  };
}

// node_modules/framer-motion/dist/es/frameloop/sync-time.mjs
var now;
function clearTime() {
  now = void 0;
}
var time = {
  now: () => {
    if (now === void 0) {
      time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming ? frameData.timestamp : performance.now());
    }
    return now;
  },
  set: (newTime) => {
    now = newTime;
    queueMicrotask(clearTime);
  }
};

// node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs
var frameloopDriver = (update) => {
  const passTimestamp = ({ timestamp }) => update(timestamp);
  return {
    start: () => frame.update(passTimestamp, true),
    stop: () => cancelFrame(passTimestamp),
    /**
     * If we're processing this frame we can use the
     * framelocked timestamp to keep things in sync.
     */
    now: () => frameData.isProcessing ? frameData.timestamp : time.now()
  };
};

// node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs
var maxGeneratorDuration = 2e4;
function calcGeneratorDuration(generator) {
  let duration = 0;
  const timeStep = 50;
  let state = generator.next(duration);
  while (!state.done && duration < maxGeneratorDuration) {
    duration += timeStep;
    state = generator.next(duration);
  }
  return duration >= maxGeneratorDuration ? Infinity : duration;
}

// node_modules/framer-motion/dist/es/animation/animators/js/index.mjs
var types = {
  decay: inertia,
  inertia,
  tween: keyframes,
  keyframes,
  spring
};
var percentToProgress = (percent2) => percent2 / 100;
function animateValue({ autoplay = true, delay: delay2 = 0, driver = frameloopDriver, keyframes: keyframes$1, type = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", onPlay, onStop, onComplete, onUpdate, ...options }) {
  let speed = 1;
  let hasStopped = false;
  let resolveFinishedPromise;
  let currentFinishedPromise;
  const updateFinishedPromise = () => {
    currentFinishedPromise = new Promise((resolve) => {
      resolveFinishedPromise = resolve;
    });
  };
  updateFinishedPromise();
  let animationDriver;
  const generatorFactory = types[type] || keyframes;
  let mapNumbersToKeyframes;
  if (generatorFactory !== keyframes && typeof keyframes$1[0] !== "number") {
    if (true) {
      invariant(keyframes$1.length === 2, `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${keyframes$1}`);
    }
    mapNumbersToKeyframes = pipe(percentToProgress, mix2(keyframes$1[0], keyframes$1[1]));
    keyframes$1 = [0, 100];
  }
  const generator = generatorFactory({ ...options, keyframes: keyframes$1 });
  let mirroredGenerator;
  if (repeatType === "mirror") {
    mirroredGenerator = generatorFactory({
      ...options,
      keyframes: [...keyframes$1].reverse(),
      velocity: -(options.velocity || 0)
    });
  }
  let playState = "idle";
  let holdTime = null;
  let startTime = null;
  let cancelTime = null;
  if (generator.calculatedDuration === null && repeat) {
    generator.calculatedDuration = calcGeneratorDuration(generator);
  }
  const { calculatedDuration } = generator;
  let resolvedDuration = Infinity;
  let totalDuration = Infinity;
  if (calculatedDuration !== null) {
    resolvedDuration = calculatedDuration + repeatDelay;
    totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;
  }
  let currentTime = 0;
  const tick = (timestamp) => {
    if (startTime === null)
      return;
    if (speed > 0)
      startTime = Math.min(startTime, timestamp);
    if (speed < 0)
      startTime = Math.min(timestamp - totalDuration / speed, startTime);
    if (holdTime !== null) {
      currentTime = holdTime;
    } else {
      currentTime = Math.round(timestamp - startTime) * speed;
    }
    const timeWithoutDelay = currentTime - delay2 * (speed >= 0 ? 1 : -1);
    const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;
    currentTime = Math.max(timeWithoutDelay, 0);
    if (playState === "finished" && holdTime === null) {
      currentTime = totalDuration;
    }
    let elapsed = currentTime;
    let frameGenerator = generator;
    if (repeat) {
      const progress2 = Math.min(currentTime, totalDuration) / resolvedDuration;
      let currentIteration = Math.floor(progress2);
      let iterationProgress = progress2 % 1;
      if (!iterationProgress && progress2 >= 1) {
        iterationProgress = 1;
      }
      iterationProgress === 1 && currentIteration--;
      currentIteration = Math.min(currentIteration, repeat + 1);
      const isOddIteration = Boolean(currentIteration % 2);
      if (isOddIteration) {
        if (repeatType === "reverse") {
          iterationProgress = 1 - iterationProgress;
          if (repeatDelay) {
            iterationProgress -= repeatDelay / resolvedDuration;
          }
        } else if (repeatType === "mirror") {
          frameGenerator = mirroredGenerator;
        }
      }
      elapsed = clamp2(0, 1, iterationProgress) * resolvedDuration;
    }
    const state = isInDelayPhase ? { done: false, value: keyframes$1[0] } : frameGenerator.next(elapsed);
    if (mapNumbersToKeyframes) {
      state.value = mapNumbersToKeyframes(state.value);
    }
    let { done } = state;
    if (!isInDelayPhase && calculatedDuration !== null) {
      done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;
    }
    const isAnimationFinished = holdTime === null && (playState === "finished" || playState === "running" && done);
    if (onUpdate) {
      onUpdate(state.value);
    }
    if (isAnimationFinished) {
      finish();
    }
    return state;
  };
  const stopAnimationDriver = () => {
    animationDriver && animationDriver.stop();
    animationDriver = void 0;
  };
  const cancel = () => {
    playState = "idle";
    stopAnimationDriver();
    resolveFinishedPromise();
    updateFinishedPromise();
    startTime = cancelTime = null;
  };
  const finish = () => {
    playState = "finished";
    onComplete && onComplete();
    stopAnimationDriver();
    resolveFinishedPromise();
  };
  const play = () => {
    if (hasStopped)
      return;
    if (!animationDriver)
      animationDriver = driver(tick);
    const now2 = animationDriver.now();
    onPlay && onPlay();
    if (holdTime !== null) {
      startTime = now2 - holdTime;
    } else if (!startTime || playState === "finished") {
      startTime = now2;
    }
    if (playState === "finished") {
      updateFinishedPromise();
    }
    cancelTime = startTime;
    holdTime = null;
    playState = "running";
    animationDriver.start();
  };
  if (autoplay) {
    play();
  }
  const controls = {
    then(resolve, reject) {
      return currentFinishedPromise.then(resolve, reject);
    },
    get time() {
      return millisecondsToSeconds(currentTime);
    },
    set time(newTime) {
      newTime = secondsToMilliseconds(newTime);
      currentTime = newTime;
      if (holdTime !== null || !animationDriver || speed === 0) {
        holdTime = newTime;
      } else {
        startTime = animationDriver.now() - newTime / speed;
      }
    },
    get duration() {
      const duration = generator.calculatedDuration === null ? calcGeneratorDuration(generator) : generator.calculatedDuration;
      return millisecondsToSeconds(duration);
    },
    get speed() {
      return speed;
    },
    set speed(newSpeed) {
      if (newSpeed === speed || !animationDriver)
        return;
      speed = newSpeed;
      controls.time = millisecondsToSeconds(currentTime);
    },
    get state() {
      return playState;
    },
    play,
    pause: () => {
      playState = "paused";
      holdTime = currentTime;
    },
    stop: () => {
      hasStopped = true;
      if (playState === "idle")
        return;
      playState = "idle";
      onStop && onStop();
      cancel();
    },
    cancel: () => {
      if (cancelTime !== null)
        tick(cancelTime);
      cancel();
    },
    complete: () => {
      playState = "finished";
    },
    sample: (elapsed) => {
      startTime = 0;
      return tick(elapsed);
    }
  };
  return controls;
}

// node_modules/framer-motion/dist/es/utils/memo.mjs
function memo(callback) {
  let result;
  return () => {
    if (result === void 0)
      result = callback();
    return result;
  };
}

// node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs
var supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, "animate"));
var acceleratedValues = /* @__PURE__ */ new Set([
  "opacity",
  "clipPath",
  "filter",
  "transform"
]);
var sampleDelta = 10;
var maxDuration2 = 2e4;
var requiresPregeneratedKeyframes = (valueName, options) => options.type === "spring" || valueName === "backgroundColor" || !isWaapiSupportedEasing(options.ease);
function createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {
  const canAccelerateAnimation = supportsWaapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== "mirror" && options.damping !== 0 && options.type !== "inertia";
  if (!canAccelerateAnimation)
    return false;
  let hasStopped = false;
  let resolveFinishedPromise;
  let currentFinishedPromise;
  let pendingCancel = false;
  const updateFinishedPromise = () => {
    currentFinishedPromise = new Promise((resolve) => {
      resolveFinishedPromise = resolve;
    });
  };
  updateFinishedPromise();
  let { keyframes: keyframes2, duration = 300, ease: ease2, times } = options;
  if (requiresPregeneratedKeyframes(valueName, options)) {
    const sampleAnimation = animateValue({
      ...options,
      repeat: 0,
      delay: 0
    });
    let state = { done: false, value: keyframes2[0] };
    const pregeneratedKeyframes = [];
    let t = 0;
    while (!state.done && t < maxDuration2) {
      state = sampleAnimation.sample(t);
      pregeneratedKeyframes.push(state.value);
      t += sampleDelta;
    }
    times = void 0;
    keyframes2 = pregeneratedKeyframes;
    duration = t - sampleDelta;
    ease2 = "linear";
  }
  const animation2 = animateStyle(value.owner.current, valueName, keyframes2, {
    ...options,
    duration,
    /**
     * This function is currently not called if ease is provided
     * as a function so the cast is safe.
     *
     * However it would be possible for a future refinement to port
     * in easing pregeneration from Motion One for browsers that
     * support the upcoming `linear()` easing function.
     */
    ease: ease2,
    times
  });
  const cancelAnimation = () => {
    pendingCancel = false;
    animation2.cancel();
  };
  const safeCancel = () => {
    pendingCancel = true;
    frame.update(cancelAnimation);
    resolveFinishedPromise();
    updateFinishedPromise();
  };
  animation2.onfinish = () => {
    if (pendingCancel)
      return;
    value.set(getFinalKeyframe(keyframes2, options));
    onComplete && onComplete();
    safeCancel();
  };
  const controls = {
    then(resolve, reject) {
      return currentFinishedPromise.then(resolve, reject);
    },
    attachTimeline(timeline) {
      animation2.timeline = timeline;
      animation2.onfinish = null;
      return noop;
    },
    get time() {
      return millisecondsToSeconds(animation2.currentTime || 0);
    },
    set time(newTime) {
      animation2.currentTime = secondsToMilliseconds(newTime);
    },
    get speed() {
      return animation2.playbackRate;
    },
    set speed(newSpeed) {
      animation2.playbackRate = newSpeed;
    },
    get duration() {
      return millisecondsToSeconds(duration);
    },
    play: () => {
      if (hasStopped)
        return;
      animation2.play();
      cancelFrame(cancelAnimation);
    },
    pause: () => animation2.pause(),
    stop: () => {
      hasStopped = true;
      if (animation2.playState === "idle")
        return;
      const { currentTime } = animation2;
      if (currentTime) {
        const sampleAnimation = animateValue({
          ...options,
          autoplay: false
        });
        value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);
      }
      safeCancel();
    },
    complete: () => {
      if (pendingCancel)
        return;
      animation2.finish();
    },
    cancel: safeCancel
  };
  return controls;
}

// node_modules/framer-motion/dist/es/animation/animators/instant.mjs
function createInstantAnimation({ keyframes: keyframes2, delay: delay2, onUpdate, onComplete }) {
  const setValue = () => {
    onUpdate && onUpdate(keyframes2[keyframes2.length - 1]);
    onComplete && onComplete();
    return {
      time: 0,
      speed: 1,
      duration: 0,
      play: noop,
      pause: noop,
      stop: noop,
      then: (resolve) => {
        resolve();
        return Promise.resolve();
      },
      cancel: noop,
      complete: noop
    };
  };
  return delay2 ? animateValue({
    keyframes: [0, 1],
    duration: 0,
    delay: delay2,
    onComplete: setValue
  }) : setValue();
}

// node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs
var underDampedSpring = {
  type: "spring",
  stiffness: 500,
  damping: 25,
  restSpeed: 10
};
var criticallyDampedSpring = (target) => ({
  type: "spring",
  stiffness: 550,
  damping: target === 0 ? 2 * Math.sqrt(550) : 30,
  restSpeed: 10
});
var keyframesTransition = {
  type: "keyframes",
  duration: 0.8
};
var ease = {
  type: "keyframes",
  ease: [0.25, 0.1, 0.35, 1],
  duration: 0.3
};
var getDefaultTransition = (valueKey, { keyframes: keyframes2 }) => {
  if (keyframes2.length > 2) {
    return keyframesTransition;
  } else if (transformProps.has(valueKey)) {
    return valueKey.startsWith("scale") ? criticallyDampedSpring(keyframes2[1]) : underDampedSpring;
  }
  return ease;
};

// node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs
var isAnimatable = (key2, value) => {
  if (key2 === "zIndex")
    return false;
  if (typeof value === "number" || Array.isArray(value))
    return true;
  if (typeof value === "string" && // It's animatable if we have a string
  (complex.test(value) || value === "0") && // And it contains numbers and/or colors
  !value.startsWith("url(")) {
    return true;
  }
  return false;
};

// node_modules/framer-motion/dist/es/value/types/complex/filter.mjs
var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function applyDefaultFilter(v2) {
  const [name, value] = v2.slice(0, -1).split("(");
  if (name === "drop-shadow")
    return v2;
  const [number2] = value.match(floatRegex) || [];
  if (!number2)
    return v2;
  const unit = value.replace(number2, "");
  let defaultValue = maxDefaults.has(name) ? 1 : 0;
  if (number2 !== value)
    defaultValue *= 100;
  return name + "(" + defaultValue + unit + ")";
}
var functionRegex = /([a-z-]*)\(.*?\)/g;
var filter2 = {
  ...complex,
  getAnimatableNone: (v2) => {
    const functions = v2.match(functionRegex);
    return functions ? functions.map(applyDefaultFilter).join(" ") : v2;
  }
};

// node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs
var defaultValueTypes = {
  ...numberValueTypes,
  // Color props
  color: color2,
  backgroundColor: color2,
  outlineColor: color2,
  fill: color2,
  stroke: color2,
  // Border props
  borderColor: color2,
  borderTopColor: color2,
  borderRightColor: color2,
  borderBottomColor: color2,
  borderLeftColor: color2,
  filter: filter2,
  WebkitFilter: filter2
};
var getDefaultValueType = (key2) => defaultValueTypes[key2];

// node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
function getAnimatableNone2(key2, value) {
  let defaultValueType = getDefaultValueType(key2);
  if (defaultValueType !== filter2)
    defaultValueType = complex;
  return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : void 0;
}

// node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs
var isZeroValueString = (v2) => /^0[^.\s]+$/.test(v2);

// node_modules/framer-motion/dist/es/animation/utils/is-none.mjs
function isNone(value) {
  if (typeof value === "number") {
    return value === 0;
  } else if (value !== null) {
    return value === "none" || value === "0" || isZeroValueString(value);
  }
}

// node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs
function getKeyframes(value, valueName, target, transition) {
  const isTargetAnimatable = isAnimatable(valueName, target);
  let keyframes2;
  if (Array.isArray(target)) {
    keyframes2 = [...target];
  } else {
    keyframes2 = [null, target];
  }
  const defaultOrigin = transition.from !== void 0 ? transition.from : value.get();
  let animatableTemplateValue = void 0;
  const noneKeyframeIndexes = [];
  for (let i2 = 0; i2 < keyframes2.length; i2++) {
    if (keyframes2[i2] === null) {
      keyframes2[i2] = i2 === 0 ? defaultOrigin : keyframes2[i2 - 1];
    }
    if (isNone(keyframes2[i2])) {
      noneKeyframeIndexes.push(i2);
    }
    if (typeof keyframes2[i2] === "string" && keyframes2[i2] !== "none" && keyframes2[i2] !== "0") {
      animatableTemplateValue = keyframes2[i2];
    }
  }
  if (isTargetAnimatable && noneKeyframeIndexes.length && animatableTemplateValue) {
    for (let i2 = 0; i2 < noneKeyframeIndexes.length; i2++) {
      const index3 = noneKeyframeIndexes[i2];
      keyframes2[index3] = getAnimatableNone2(valueName, animatableTemplateValue);
    }
  }
  return keyframes2;
}

// node_modules/framer-motion/dist/es/animation/utils/transitions.mjs
function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from: from2, elapsed, ...transition }) {
  return !!Object.keys(transition).length;
}
function getValueTransition(transition, key2) {
  return transition[key2] || transition["default"] || transition;
}

// node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs
var animateMotionValue = (valueName, value, target, transition = {}) => {
  return (onComplete) => {
    const valueTransition = getValueTransition(transition, valueName) || {};
    const delay2 = valueTransition.delay || transition.delay || 0;
    let { elapsed = 0 } = transition;
    elapsed = elapsed - secondsToMilliseconds(delay2);
    const keyframes2 = getKeyframes(value, valueName, target, valueTransition);
    const originKeyframe = keyframes2[0];
    const targetKeyframe = keyframes2[keyframes2.length - 1];
    const isOriginAnimatable = isAnimatable(valueName, originKeyframe);
    const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);
    warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from "${originKeyframe}" to "${targetKeyframe}". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \`style\` property.`);
    let options = {
      keyframes: keyframes2,
      velocity: value.getVelocity(),
      ease: "easeOut",
      ...valueTransition,
      delay: -elapsed,
      onUpdate: (v2) => {
        value.set(v2);
        valueTransition.onUpdate && valueTransition.onUpdate(v2);
      },
      onComplete: () => {
        onComplete();
        valueTransition.onComplete && valueTransition.onComplete();
      }
    };
    if (!isTransitionDefined(valueTransition)) {
      options = {
        ...options,
        ...getDefaultTransition(valueName, options)
      };
    }
    if (options.duration) {
      options.duration = secondsToMilliseconds(options.duration);
    }
    if (options.repeatDelay) {
      options.repeatDelay = secondsToMilliseconds(options.repeatDelay);
    }
    if (!isOriginAnimatable || !isTargetAnimatable || instantAnimationState.current || valueTransition.type === false || MotionGlobalConfig.skipAnimations) {
      return createInstantAnimation(instantAnimationState.current ? { ...options, delay: 0 } : options);
    }
    if (
      /**
       * If this is a handoff animation, the optimised animation will be running via
       * WAAPI. Therefore, this animation must be JS to ensure it runs "under" the
       * optimised animation.
       */
      !transition.isHandoff && value.owner && value.owner.current instanceof HTMLElement && /**
       * If we're outputting values to onUpdate then we can't use WAAPI as there's
       * no way to read the value from WAAPI every frame.
       */
      !value.owner.getProps().onUpdate
    ) {
      const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);
      if (acceleratedAnimation)
        return acceleratedAnimation;
    }
    return animateValue(options);
  };
};

// node_modules/framer-motion/dist/es/value/use-will-change/is.mjs
function isWillChangeMotionValue(value) {
  return Boolean(isMotionValue(value) && value.add);
}

// node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs
var isNumericalString = (v2) => /^\-?\d*\.?\d+$/.test(v2);

// node_modules/framer-motion/dist/es/utils/array.mjs
function addUniqueItem(arr, item) {
  if (arr.indexOf(item) === -1)
    arr.push(item);
}
function removeItem(arr, item) {
  const index3 = arr.indexOf(item);
  if (index3 > -1)
    arr.splice(index3, 1);
}
function moveItem([...arr], fromIndex, toIndex) {
  const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;
  if (startIndex >= 0 && startIndex < arr.length) {
    const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;
    const [item] = arr.splice(fromIndex, 1);
    arr.splice(endIndex, 0, item);
  }
  return arr;
}

// node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
var SubscriptionManager = class {
  constructor() {
    this.subscriptions = [];
  }
  add(handler) {
    addUniqueItem(this.subscriptions, handler);
    return () => removeItem(this.subscriptions, handler);
  }
  notify(a2, b2, c2) {
    const numSubscriptions = this.subscriptions.length;
    if (!numSubscriptions)
      return;
    if (numSubscriptions === 1) {
      this.subscriptions[0](a2, b2, c2);
    } else {
      for (let i2 = 0; i2 < numSubscriptions; i2++) {
        const handler = this.subscriptions[i2];
        handler && handler(a2, b2, c2);
      }
    }
  }
  getSize() {
    return this.subscriptions.length;
  }
  clear() {
    this.subscriptions.length = 0;
  }
};

// node_modules/framer-motion/dist/es/utils/warn-once.mjs
var warned = /* @__PURE__ */ new Set();
function warnOnce(condition, message, element) {
  if (condition || warned.has(message))
    return;
  console.warn(message);
  if (element)
    console.warn(element);
  warned.add(message);
}

// node_modules/framer-motion/dist/es/value/index.mjs
var MAX_VELOCITY_DELTA = 30;
var isFloat = (value) => {
  return !isNaN(parseFloat(value));
};
var collectMotionValues = {
  current: void 0
};
var MotionValue = class {
  /**
   * @param init - The initiating value
   * @param config - Optional configuration options
   *
   * -  `transformer`: A function to transform incoming values with.
   *
   * @internal
   */
  constructor(init, options = {}) {
    this.version = "11.0.8";
    this.canTrackVelocity = false;
    this.events = {};
    this.updateAndNotify = (v2, render = true) => {
      const currentTime = time.now();
      if (this.updatedAt !== currentTime) {
        this.setPrevFrameValue();
      }
      this.prev = this.current;
      this.setCurrent(v2);
      if (this.current !== this.prev && this.events.change) {
        this.events.change.notify(this.current);
      }
      if (render && this.events.renderRequest) {
        this.events.renderRequest.notify(this.current);
      }
    };
    this.hasAnimated = false;
    this.setCurrent(init);
    this.canTrackVelocity = isFloat(this.current);
    this.owner = options.owner;
  }
  setCurrent(current) {
    this.current = current;
    this.updatedAt = time.now();
  }
  setPrevFrameValue(prevFrameValue = this.current) {
    this.prevFrameValue = prevFrameValue;
    this.prevUpdatedAt = this.updatedAt;
  }
  /**
   * Adds a function that will be notified when the `MotionValue` is updated.
   *
   * It returns a function that, when called, will cancel the subscription.
   *
   * When calling `onChange` inside a React component, it should be wrapped with the
   * `useEffect` hook. As it returns an unsubscribe function, this should be returned
   * from the `useEffect` function to ensure you don't add duplicate subscribers..
   *
   * ```jsx
   * export const MyComponent = () => {
   *   const x = useMotionValue(0)
   *   const y = useMotionValue(0)
   *   const opacity = useMotionValue(1)
   *
   *   useEffect(() => {
   *     function updateOpacity() {
   *       const maxXY = Math.max(x.get(), y.get())
   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
   *       opacity.set(newOpacity)
   *     }
   *
   *     const unsubscribeX = x.on("change", updateOpacity)
   *     const unsubscribeY = y.on("change", updateOpacity)
   *
   *     return () => {
   *       unsubscribeX()
   *       unsubscribeY()
   *     }
   *   }, [])
   *
   *   return <motion.div style={{ x }} />
   * }
   * ```
   *
   * @param subscriber - A function that receives the latest value.
   * @returns A function that, when called, will cancel this subscription.
   *
   * @deprecated
   */
  onChange(subscription) {
    if (true) {
      warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on("change", callback).`);
    }
    return this.on("change", subscription);
  }
  on(eventName, callback) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    const unsubscribe = this.events[eventName].add(callback);
    if (eventName === "change") {
      return () => {
        unsubscribe();
        frame.read(() => {
          if (!this.events.change.getSize()) {
            this.stop();
          }
        });
      };
    }
    return unsubscribe;
  }
  clearListeners() {
    for (const eventManagers in this.events) {
      this.events[eventManagers].clear();
    }
  }
  /**
   * Attaches a passive effect to the `MotionValue`.
   *
   * @internal
   */
  attach(passiveEffect, stopPassiveEffect) {
    this.passiveEffect = passiveEffect;
    this.stopPassiveEffect = stopPassiveEffect;
  }
  /**
   * Sets the state of the `MotionValue`.
   *
   * @remarks
   *
   * ```jsx
   * const x = useMotionValue(0)
   * x.set(10)
   * ```
   *
   * @param latest - Latest value to set.
   * @param render - Whether to notify render subscribers. Defaults to `true`
   *
   * @public
   */
  set(v2, render = true) {
    if (!render || !this.passiveEffect) {
      this.updateAndNotify(v2, render);
    } else {
      this.passiveEffect(v2, this.updateAndNotify);
    }
  }
  setWithVelocity(prev2, current, delta) {
    this.set(current);
    this.prev = void 0;
    this.prevFrameValue = prev2;
    this.prevUpdatedAt = this.updatedAt - delta;
  }
  /**
   * Set the state of the `MotionValue`, stopping any active animations,
   * effects, and resets velocity to `0`.
   */
  jump(v2) {
    this.updateAndNotify(v2);
    this.prev = v2;
    this.prevUpdatedAt = this.prevFrameValue = void 0;
    this.stop();
    if (this.stopPassiveEffect)
      this.stopPassiveEffect();
  }
  /**
   * Returns the latest state of `MotionValue`
   *
   * @returns - The latest state of `MotionValue`
   *
   * @public
   */
  get() {
    if (collectMotionValues.current) {
      collectMotionValues.current.push(this);
    }
    return this.current;
  }
  /**
   * @public
   */
  getPrevious() {
    return this.prev;
  }
  /**
   * Returns the latest velocity of `MotionValue`
   *
   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
   *
   * @public
   */
  getVelocity() {
    const currentTime = time.now();
    if (!this.canTrackVelocity || this.prevFrameValue === void 0 || currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {
      return 0;
    }
    const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);
    return velocityPerSecond(parseFloat(this.current) - parseFloat(this.prevFrameValue), delta);
  }
  /**
   * Registers a new animation to control this `MotionValue`. Only one
   * animation can drive a `MotionValue` at one time.
   *
   * ```jsx
   * value.start()
   * ```
   *
   * @param animation - A function that starts the provided animation
   *
   * @internal
   */
  start(startAnimation) {
    this.stop();
    return new Promise((resolve) => {
      this.hasAnimated = true;
      this.animation = startAnimation(resolve);
      if (this.events.animationStart) {
        this.events.animationStart.notify();
      }
    }).then(() => {
      if (this.events.animationComplete) {
        this.events.animationComplete.notify();
      }
      this.clearAnimation();
    });
  }
  /**
   * Stop the currently active animation.
   *
   * @public
   */
  stop() {
    if (this.animation) {
      this.animation.stop();
      if (this.events.animationCancel) {
        this.events.animationCancel.notify();
      }
    }
    this.clearAnimation();
  }
  /**
   * Returns `true` if this value is currently animating.
   *
   * @public
   */
  isAnimating() {
    return !!this.animation;
  }
  clearAnimation() {
    delete this.animation;
  }
  /**
   * Destroy and clean up subscribers to this `MotionValue`.
   *
   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
   * created a `MotionValue` via the `motionValue` function.
   *
   * @public
   */
  destroy() {
    this.clearListeners();
    this.stop();
    if (this.stopPassiveEffect) {
      this.stopPassiveEffect();
    }
  }
};
function motionValue(init, options) {
  return new MotionValue(init, options);
}

// node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs
var testValueType = (v2) => (type) => type.test(v2);

// node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs
var auto = {
  test: (v2) => v2 === "auto",
  parse: (v2) => v2
};

// node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
var dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];
var findDimensionValueType = (v2) => dimensionValueTypes.find(testValueType(v2));

// node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
var valueTypes = [...dimensionValueTypes, color2, complex];
var findValueType = (v2) => valueTypes.find(testValueType(v2));

// node_modules/framer-motion/dist/es/render/utils/setters.mjs
function setMotionValue(visualElement, key2, value) {
  if (visualElement.hasValue(key2)) {
    visualElement.getValue(key2).set(value);
  } else {
    visualElement.addValue(key2, motionValue(value));
  }
}
function setTarget(visualElement, definition) {
  const resolved = resolveVariant(visualElement, definition);
  let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};
  target = { ...target, ...transitionEnd };
  for (const key2 in target) {
    const value = resolveFinalValueInKeyframes(target[key2]);
    setMotionValue(visualElement, key2, value);
  }
}
function checkTargetForNewValues(visualElement, target, origin2) {
  var _a, _b;
  const newValueKeys = Object.keys(target).filter((key2) => !visualElement.hasValue(key2));
  const numNewValues = newValueKeys.length;
  if (!numNewValues)
    return;
  for (let i2 = 0; i2 < numNewValues; i2++) {
    const key2 = newValueKeys[i2];
    const targetValue = target[key2];
    let value = null;
    if (Array.isArray(targetValue)) {
      value = targetValue[0];
    }
    if (value === null) {
      value = (_b = (_a = origin2[key2]) !== null && _a !== void 0 ? _a : visualElement.readValue(key2)) !== null && _b !== void 0 ? _b : target[key2];
    }
    if (value === void 0 || value === null)
      continue;
    if (typeof value === "string" && (isNumericalString(value) || isZeroValueString(value))) {
      value = parseFloat(value);
    } else if (!findValueType(value) && complex.test(targetValue)) {
      value = getAnimatableNone2(key2, targetValue);
    }
    visualElement.addValue(key2, motionValue(value, { owner: visualElement }));
    if (origin2[key2] === void 0) {
      origin2[key2] = value;
    }
    if (value !== null)
      visualElement.setBaseTarget(key2, value);
  }
}
function getOriginFromTransition(key2, transition) {
  if (!transition)
    return;
  const valueTransition = transition[key2] || transition["default"] || transition;
  return valueTransition.from;
}
function getOrigin(target, transition, visualElement) {
  const origin2 = {};
  for (const key2 in target) {
    const transitionOrigin = getOriginFromTransition(key2, transition);
    if (transitionOrigin !== void 0) {
      origin2[key2] = transitionOrigin;
    } else {
      const value = visualElement.getValue(key2);
      if (value) {
        origin2[key2] = value.get();
      }
    }
  }
  return origin2;
}

// node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs
function shouldBlockAnimation({ protectedKeys, needsAnimating }, key2) {
  const shouldBlock = protectedKeys.hasOwnProperty(key2) && needsAnimating[key2] !== true;
  needsAnimating[key2] = false;
  return shouldBlock;
}
function hasKeyframesChanged(value, target) {
  const current = value.get();
  if (Array.isArray(target)) {
    for (let i2 = 0; i2 < target.length; i2++) {
      if (target[i2] !== current)
        return true;
    }
  } else {
    return current !== target;
  }
}
function animateTarget(visualElement, definition, { delay: delay2 = 0, transitionOverride, type } = {}) {
  let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);
  const willChange = visualElement.getValue("willChange");
  if (transitionOverride)
    transition = transitionOverride;
  const animations2 = [];
  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];
  for (const key2 in target) {
    const value = visualElement.getValue(key2);
    const valueTarget = target[key2];
    if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key2)) {
      continue;
    }
    const valueTransition = {
      delay: delay2,
      elapsed: 0,
      ...getValueTransition(transition || {}, key2)
    };
    if (window.HandoffAppearAnimations) {
      const appearId = visualElement.getProps()[optimizedAppearDataAttribute];
      if (appearId) {
        const elapsed = window.HandoffAppearAnimations(appearId, key2, value, frame);
        if (elapsed !== null) {
          valueTransition.elapsed = elapsed;
          valueTransition.isHandoff = true;
        }
      }
    }
    let canSkip = !valueTransition.isHandoff && !hasKeyframesChanged(value, valueTarget);
    if (valueTransition.type === "spring" && (value.getVelocity() || valueTransition.velocity)) {
      canSkip = false;
    }
    if (value.animation) {
      canSkip = false;
    }
    if (canSkip)
      continue;
    value.start(animateMotionValue(key2, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key2) ? { type: false } : valueTransition));
    const animation2 = value.animation;
    if (isWillChangeMotionValue(willChange)) {
      willChange.add(key2);
      animation2.then(() => willChange.remove(key2));
    }
    animations2.push(animation2);
  }
  if (transitionEnd) {
    Promise.all(animations2).then(() => {
      transitionEnd && setTarget(visualElement, transitionEnd);
    });
  }
  return animations2;
}

// node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs
function animateVariant(visualElement, variant, options = {}) {
  const resolved = resolveVariant(visualElement, variant, options.custom);
  let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};
  if (options.transitionOverride) {
    transition = options.transitionOverride;
  }
  const getAnimation = resolved ? () => Promise.all(animateTarget(visualElement, resolved, options)) : () => Promise.resolve();
  const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0) => {
    const { delayChildren = 0, staggerChildren, staggerDirection } = transition;
    return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
  } : () => Promise.resolve();
  const { when } = transition;
  if (when) {
    const [first, last] = when === "beforeChildren" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];
    return first().then(() => last());
  } else {
    return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
  }
}
function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
  const animations2 = [];
  const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
  const generateStaggerDuration = staggerDirection === 1 ? (i2 = 0) => i2 * staggerChildren : (i2 = 0) => maxStaggerDuration - i2 * staggerChildren;
  Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i2) => {
    child.notify("AnimationStart", variant);
    animations2.push(animateVariant(child, variant, {
      ...options,
      delay: delayChildren + generateStaggerDuration(i2)
    }).then(() => child.notify("AnimationComplete", variant)));
  });
  return Promise.all(animations2);
}
function sortByTreeOrder(a2, b2) {
  return a2.sortNodePosition(b2);
}

// node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs
function animateVisualElement(visualElement, definition, options = {}) {
  visualElement.notify("AnimationStart", definition);
  let animation2;
  if (Array.isArray(definition)) {
    const animations2 = definition.map((variant) => animateVariant(visualElement, variant, options));
    animation2 = Promise.all(animations2);
  } else if (typeof definition === "string") {
    animation2 = animateVariant(visualElement, definition, options);
  } else {
    const resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement, definition, options.custom) : definition;
    animation2 = Promise.all(animateTarget(visualElement, resolvedDefinition, options));
  }
  return animation2.then(() => visualElement.notify("AnimationComplete", definition));
}

// node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
var reversePriorityOrder = [...variantPriorityOrder].reverse();
var numAnimationTypes = variantPriorityOrder.length;
function animateList(visualElement) {
  return (animations2) => Promise.all(animations2.map(({ animation: animation2, options }) => animateVisualElement(visualElement, animation2, options)));
}
function createAnimationState(visualElement) {
  let animate2 = animateList(visualElement);
  const state = createState();
  let isInitialRender = true;
  const buildResolvedTypeValues = (acc, definition) => {
    const resolved = resolveVariant(visualElement, definition);
    if (resolved) {
      const { transition, transitionEnd, ...target } = resolved;
      acc = { ...acc, ...target, ...transitionEnd };
    }
    return acc;
  };
  function setAnimateFunction(makeAnimator) {
    animate2 = makeAnimator(visualElement);
  }
  function animateChanges(options, changedActiveType) {
    const props = visualElement.getProps();
    const context = visualElement.getVariantContext(true) || {};
    const animations2 = [];
    const removedKeys = /* @__PURE__ */ new Set();
    let encounteredKeys = {};
    let removedVariantIndex = Infinity;
    for (let i2 = 0; i2 < numAnimationTypes; i2++) {
      const type = reversePriorityOrder[i2];
      const typeState = state[type];
      const prop = props[type] !== void 0 ? props[type] : context[type];
      const propIsVariant = isVariantLabel(prop);
      const activeDelta = type === changedActiveType ? typeState.isActive : null;
      if (activeDelta === false)
        removedVariantIndex = i2;
      let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
      if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {
        isInherited = false;
      }
      typeState.protectedKeys = { ...encounteredKeys };
      if (
        // If it isn't active and hasn't *just* been set as inactive
        !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type
        !prop && !typeState.prevProp || // Or if the prop doesn't define an animation
        isAnimationControls(prop) || typeof prop === "boolean"
      ) {
        continue;
      }
      const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
      let shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active
      type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)
      i2 > removedVariantIndex && propIsVariant;
      let handledRemovedValues = false;
      const definitionList = Array.isArray(prop) ? prop : [prop];
      let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
      if (activeDelta === false)
        resolvedValues = {};
      const { prevResolvedValues = {} } = typeState;
      const allKeys = {
        ...prevResolvedValues,
        ...resolvedValues
      };
      const markToAnimate = (key2) => {
        shouldAnimateType = true;
        if (removedKeys.has(key2)) {
          handledRemovedValues = true;
          removedKeys.delete(key2);
        }
        typeState.needsAnimating[key2] = true;
      };
      for (const key2 in allKeys) {
        const next2 = resolvedValues[key2];
        const prev2 = prevResolvedValues[key2];
        if (encounteredKeys.hasOwnProperty(key2))
          continue;
        let valueHasChanged = false;
        if (isKeyframesTarget(next2) && isKeyframesTarget(prev2)) {
          valueHasChanged = !shallowCompare(next2, prev2);
        } else {
          valueHasChanged = next2 !== prev2;
        }
        if (valueHasChanged) {
          if (next2 !== void 0) {
            markToAnimate(key2);
          } else {
            removedKeys.add(key2);
          }
        } else if (next2 !== void 0 && removedKeys.has(key2)) {
          markToAnimate(key2);
        } else {
          typeState.protectedKeys[key2] = true;
        }
      }
      typeState.prevProp = prop;
      typeState.prevResolvedValues = resolvedValues;
      if (typeState.isActive) {
        encounteredKeys = { ...encounteredKeys, ...resolvedValues };
      }
      if (isInitialRender && visualElement.blockInitialAnimation) {
        shouldAnimateType = false;
      }
      if (shouldAnimateType && (!isInherited || handledRemovedValues)) {
        animations2.push(...definitionList.map((animation2) => ({
          animation: animation2,
          options: { type, ...options }
        })));
      }
    }
    if (removedKeys.size) {
      const fallbackAnimation = {};
      removedKeys.forEach((key2) => {
        const fallbackTarget = visualElement.getBaseTarget(key2);
        if (fallbackTarget !== void 0) {
          fallbackAnimation[key2] = fallbackTarget;
        }
      });
      animations2.push({ animation: fallbackAnimation });
    }
    let shouldAnimate = Boolean(animations2.length);
    if (isInitialRender && (props.initial === false || props.initial === props.animate) && !visualElement.manuallyAnimateOnMount) {
      shouldAnimate = false;
    }
    isInitialRender = false;
    return shouldAnimate ? animate2(animations2) : Promise.resolve();
  }
  function setActive(type, isActive, options) {
    var _a;
    if (state[type].isActive === isActive)
      return Promise.resolve();
    (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => {
      var _a2;
      return (_a2 = child.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(type, isActive);
    });
    state[type].isActive = isActive;
    const animations2 = animateChanges(options, type);
    for (const key2 in state) {
      state[key2].protectedKeys = {};
    }
    return animations2;
  }
  return {
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: () => state
  };
}
function checkVariantsDidChange(prev2, next2) {
  if (typeof next2 === "string") {
    return next2 !== prev2;
  } else if (Array.isArray(next2)) {
    return !shallowCompare(next2, prev2);
  }
  return false;
}
function createTypeState(isActive = false) {
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function createState() {
  return {
    animate: createTypeState(true),
    whileInView: createTypeState(),
    whileHover: createTypeState(),
    whileTap: createTypeState(),
    whileDrag: createTypeState(),
    whileFocus: createTypeState(),
    exit: createTypeState()
  };
}

// node_modules/framer-motion/dist/es/motion/features/animation/index.mjs
var AnimationFeature = class extends Feature {
  /**
   * We dynamically generate the AnimationState manager as it contains a reference
   * to the underlying animation library. We only want to load that if we load this,
   * so people can optionally code split it out using the `m` component.
   */
  constructor(node2) {
    super(node2);
    node2.animationState || (node2.animationState = createAnimationState(node2));
  }
  updateAnimationControlsSubscription() {
    const { animate: animate2 } = this.node.getProps();
    this.unmount();
    if (isAnimationControls(animate2)) {
      this.unmount = animate2.subscribe(this.node);
    }
  }
  /**
   * Subscribe any provided AnimationControls to the component's VisualElement
   */
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    const { animate: animate2 } = this.node.getProps();
    const { animate: prevAnimate } = this.node.prevProps || {};
    if (animate2 !== prevAnimate) {
      this.updateAnimationControlsSubscription();
    }
  }
  unmount() {
  }
};

// node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs
var id = 0;
var ExitAnimationFeature = class extends Feature {
  constructor() {
    super(...arguments);
    this.id = id++;
  }
  update() {
    if (!this.node.presenceContext)
      return;
    const { isPresent, onExitComplete, custom } = this.node.presenceContext;
    const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
    if (!this.node.animationState || isPresent === prevIsPresent) {
      return;
    }
    const exitAnimation = this.node.animationState.setActive("exit", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });
    if (onExitComplete && !isPresent) {
      exitAnimation.then(() => onExitComplete(this.id));
    }
  }
  mount() {
    const { register } = this.node.presenceContext || {};
    if (register) {
      this.unmount = register(this.id);
    }
  }
  unmount() {
  }
};

// node_modules/framer-motion/dist/es/motion/features/animations.mjs
var animations = {
  animation: {
    Feature: AnimationFeature
  },
  exit: {
    Feature: ExitAnimationFeature
  }
};

// node_modules/framer-motion/dist/es/utils/distance.mjs
var distance = (a2, b2) => Math.abs(a2 - b2);
function distance2D(a2, b2) {
  const xDelta = distance(a2.x, b2.x);
  const yDelta = distance(a2.y, b2.y);
  return Math.sqrt(xDelta ** 2 + yDelta ** 2);
}

// node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs
var PanSession = class {
  constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false } = {}) {
    this.startEvent = null;
    this.lastMoveEvent = null;
    this.lastMoveEventInfo = null;
    this.handlers = {};
    this.contextWindow = window;
    this.updatePoint = () => {
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const info2 = getPanInfo(this.lastMoveEventInfo, this.history);
      const isPanStarted = this.startEvent !== null;
      const isDistancePastThreshold = distance2D(info2.offset, { x: 0, y: 0 }) >= 3;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      const { point: point2 } = info2;
      const { timestamp: timestamp2 } = frameData;
      this.history.push({ ...point2, timestamp: timestamp2 });
      const { onStart, onMove } = this.handlers;
      if (!isPanStarted) {
        onStart && onStart(this.lastMoveEvent, info2);
        this.startEvent = this.lastMoveEvent;
      }
      onMove && onMove(this.lastMoveEvent, info2);
    };
    this.handlePointerMove = (event2, info2) => {
      this.lastMoveEvent = event2;
      this.lastMoveEventInfo = transformPoint(info2, this.transformPagePoint);
      frame.update(this.updatePoint, true);
    };
    this.handlePointerUp = (event2, info2) => {
      this.end();
      const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;
      if (this.dragSnapToOrigin)
        resumeAnimation && resumeAnimation();
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const panInfo = getPanInfo(event2.type === "pointercancel" ? this.lastMoveEventInfo : transformPoint(info2, this.transformPagePoint), this.history);
      if (this.startEvent && onEnd) {
        onEnd(event2, panInfo);
      }
      onSessionEnd && onSessionEnd(event2, panInfo);
    };
    if (!isPrimaryPointer(event))
      return;
    this.dragSnapToOrigin = dragSnapToOrigin;
    this.handlers = handlers;
    this.transformPagePoint = transformPagePoint;
    this.contextWindow = contextWindow || window;
    const info = extractEventInfo(event);
    const initialInfo = transformPoint(info, this.transformPagePoint);
    const { point } = initialInfo;
    const { timestamp } = frameData;
    this.history = [{ ...point, timestamp }];
    const { onSessionStart } = handlers;
    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
    this.removeListeners = pipe(addPointerEvent(this.contextWindow, "pointermove", this.handlePointerMove), addPointerEvent(this.contextWindow, "pointerup", this.handlePointerUp), addPointerEvent(this.contextWindow, "pointercancel", this.handlePointerUp));
  }
  updateHandlers(handlers) {
    this.handlers = handlers;
  }
  end() {
    this.removeListeners && this.removeListeners();
    cancelFrame(this.updatePoint);
  }
};
function transformPoint(info, transformPagePoint) {
  return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
}
function subtractPoint(a2, b2) {
  return { x: a2.x - b2.x, y: a2.y - b2.y };
}
function getPanInfo({ point }, history) {
  return {
    point,
    delta: subtractPoint(point, lastDevicePoint(history)),
    offset: subtractPoint(point, startDevicePoint(history)),
    velocity: getVelocity2(history, 0.1)
  };
}
function startDevicePoint(history) {
  return history[0];
}
function lastDevicePoint(history) {
  return history[history.length - 1];
}
function getVelocity2(history, timeDelta) {
  if (history.length < 2) {
    return { x: 0, y: 0 };
  }
  let i2 = history.length - 1;
  let timestampedPoint = null;
  const lastPoint = lastDevicePoint(history);
  while (i2 >= 0) {
    timestampedPoint = history[i2];
    if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
      break;
    }
    i2--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  const time3 = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);
  if (time3 === 0) {
    return { x: 0, y: 0 };
  }
  const currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time3,
    y: (lastPoint.y - timestampedPoint.y) / time3
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs
function calcLength(axis) {
  return axis.max - axis.min;
}
function isNear(value, target = 0, maxDistance = 0.01) {
  return Math.abs(value - target) <= maxDistance;
}
function calcAxisDelta(delta, source, target, origin2 = 0.5) {
  delta.origin = origin2;
  delta.originPoint = mixNumber(source.min, source.max, delta.origin);
  delta.scale = calcLength(target) / calcLength(source);
  if (isNear(delta.scale, 1, 1e-4) || isNaN(delta.scale))
    delta.scale = 1;
  delta.translate = mixNumber(target.min, target.max, delta.origin) - delta.originPoint;
  if (isNear(delta.translate) || isNaN(delta.translate))
    delta.translate = 0;
}
function calcBoxDelta(delta, source, target, origin2) {
  calcAxisDelta(delta.x, source.x, target.x, origin2 ? origin2.originX : void 0);
  calcAxisDelta(delta.y, source.y, target.y, origin2 ? origin2.originY : void 0);
}
function calcRelativeAxis(target, relative, parent) {
  target.min = parent.min + relative.min;
  target.max = target.min + calcLength(relative);
}
function calcRelativeBox(target, relative, parent) {
  calcRelativeAxis(target.x, relative.x, parent.x);
  calcRelativeAxis(target.y, relative.y, parent.y);
}
function calcRelativeAxisPosition(target, layout2, parent) {
  target.min = layout2.min - parent.min;
  target.max = target.min + calcLength(layout2);
}
function calcRelativePosition(target, layout2, parent) {
  calcRelativeAxisPosition(target.x, layout2.x, parent.x);
  calcRelativeAxisPosition(target.y, layout2.y, parent.y);
}

// node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs
function applyConstraints(point, { min: min2, max: max2 }, elastic) {
  if (min2 !== void 0 && point < min2) {
    point = elastic ? mixNumber(min2, point, elastic.min) : Math.max(point, min2);
  } else if (max2 !== void 0 && point > max2) {
    point = elastic ? mixNumber(max2, point, elastic.max) : Math.min(point, max2);
  }
  return point;
}
function calcRelativeAxisConstraints(axis, min2, max2) {
  return {
    min: min2 !== void 0 ? axis.min + min2 : void 0,
    max: max2 !== void 0 ? axis.max + max2 - (axis.max - axis.min) : void 0
  };
}
function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
  return {
    x: calcRelativeAxisConstraints(layoutBox.x, left, right),
    y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
  };
}
function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
  let min2 = constraintsAxis.min - layoutAxis.min;
  let max2 = constraintsAxis.max - layoutAxis.max;
  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
    [min2, max2] = [max2, min2];
  }
  return { min: min2, max: max2 };
}
function calcViewportConstraints(layoutBox, constraintsBox) {
  return {
    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
  };
}
function calcOrigin2(source, target) {
  let origin2 = 0.5;
  const sourceLength = calcLength(source);
  const targetLength = calcLength(target);
  if (targetLength > sourceLength) {
    origin2 = progress(target.min, target.max - sourceLength, source.min);
  } else if (sourceLength > targetLength) {
    origin2 = progress(source.min, source.max - targetLength, target.min);
  }
  return clamp2(0, 1, origin2);
}
function rebaseAxisConstraints(layout2, constraints) {
  const relativeConstraints = {};
  if (constraints.min !== void 0) {
    relativeConstraints.min = constraints.min - layout2.min;
  }
  if (constraints.max !== void 0) {
    relativeConstraints.max = constraints.max - layout2.min;
  }
  return relativeConstraints;
}
var defaultElastic = 0.35;
function resolveDragElastic(dragElastic = defaultElastic) {
  if (dragElastic === false) {
    dragElastic = 0;
  } else if (dragElastic === true) {
    dragElastic = defaultElastic;
  }
  return {
    x: resolveAxisElastic(dragElastic, "left", "right"),
    y: resolveAxisElastic(dragElastic, "top", "bottom")
  };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
  return {
    min: resolvePointElastic(dragElastic, minLabel),
    max: resolvePointElastic(dragElastic, maxLabel)
  };
}
function resolvePointElastic(dragElastic, label) {
  return typeof dragElastic === "number" ? dragElastic : dragElastic[label] || 0;
}

// node_modules/framer-motion/dist/es/projection/geometry/models.mjs
var createAxisDelta = () => ({
  translate: 0,
  scale: 1,
  origin: 0,
  originPoint: 0
});
var createDelta = () => ({
  x: createAxisDelta(),
  y: createAxisDelta()
});
var createAxis = () => ({ min: 0, max: 0 });
var createBox = () => ({
  x: createAxis(),
  y: createAxis()
});

// node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs
function eachAxis(callback) {
  return [callback("x"), callback("y")];
}

// node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs
function convertBoundingBoxToBox({ top, left, right, bottom }) {
  return {
    x: { min: left, max: right },
    y: { min: top, max: bottom }
  };
}
function convertBoxToBoundingBox({ x: x2, y: y2 }) {
  return { top: y2.min, right: x2.max, bottom: y2.max, left: x2.min };
}
function transformBoxPoints(point, transformPoint2) {
  if (!transformPoint2)
    return point;
  const topLeft = transformPoint2({ x: point.left, y: point.top });
  const bottomRight = transformPoint2({ x: point.right, y: point.bottom });
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x
  };
}

// node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs
function isIdentityScale(scale2) {
  return scale2 === void 0 || scale2 === 1;
}
function hasScale({ scale: scale2, scaleX, scaleY }) {
  return !isIdentityScale(scale2) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
}
function hasTransform(values) {
  return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY;
}
function has2DTranslate(values) {
  return is2DTranslate(values.x) || is2DTranslate(values.y);
}
function is2DTranslate(value) {
  return value && value !== "0%";
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs
function scalePoint(point, scale2, originPoint) {
  const distanceFromOrigin = point - originPoint;
  const scaled = scale2 * distanceFromOrigin;
  return originPoint + scaled;
}
function applyPointDelta(point, translate, scale2, originPoint, boxScale) {
  if (boxScale !== void 0) {
    point = scalePoint(point, boxScale, originPoint);
  }
  return scalePoint(point, scale2, originPoint) + translate;
}
function applyAxisDelta(axis, translate = 0, scale2 = 1, originPoint, boxScale) {
  axis.min = applyPointDelta(axis.min, translate, scale2, originPoint, boxScale);
  axis.max = applyPointDelta(axis.max, translate, scale2, originPoint, boxScale);
}
function applyBoxDelta(box, { x: x2, y: y2 }) {
  applyAxisDelta(box.x, x2.translate, x2.scale, x2.originPoint);
  applyAxisDelta(box.y, y2.translate, y2.scale, y2.originPoint);
}
function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
  const treeLength = treePath.length;
  if (!treeLength)
    return;
  treeScale.x = treeScale.y = 1;
  let node2;
  let delta;
  for (let i2 = 0; i2 < treeLength; i2++) {
    node2 = treePath[i2];
    delta = node2.projectionDelta;
    const instance = node2.instance;
    if (instance && instance.style && instance.style.display === "contents") {
      continue;
    }
    if (isSharedTransition && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
      transformBox(box, {
        x: -node2.scroll.offset.x,
        y: -node2.scroll.offset.y
      });
    }
    if (delta) {
      treeScale.x *= delta.x.scale;
      treeScale.y *= delta.y.scale;
      applyBoxDelta(box, delta);
    }
    if (isSharedTransition && hasTransform(node2.latestValues)) {
      transformBox(box, node2.latestValues);
    }
  }
  treeScale.x = snapToDefault(treeScale.x);
  treeScale.y = snapToDefault(treeScale.y);
}
function snapToDefault(scale2) {
  if (Number.isInteger(scale2))
    return scale2;
  return scale2 > 1.0000000000001 || scale2 < 0.999999999999 ? scale2 : 1;
}
function translateAxis(axis, distance2) {
  axis.min = axis.min + distance2;
  axis.max = axis.max + distance2;
}
function transformAxis(axis, transforms, [key2, scaleKey, originKey]) {
  const axisOrigin = transforms[originKey] !== void 0 ? transforms[originKey] : 0.5;
  const originPoint = mixNumber(axis.min, axis.max, axisOrigin);
  applyAxisDelta(axis, transforms[key2], transforms[scaleKey], originPoint, transforms.scale);
}
var xKeys = ["x", "scaleX", "originX"];
var yKeys = ["y", "scaleY", "originY"];
function transformBox(box, transform2) {
  transformAxis(box.x, transform2, xKeys);
  transformAxis(box.y, transform2, yKeys);
}

// node_modules/framer-motion/dist/es/projection/utils/measure.mjs
function measureViewportBox(instance, transformPoint2) {
  return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2));
}
function measurePageBox(element, rootProjectionNode2, transformPagePoint) {
  const viewportBox = measureViewportBox(element, transformPagePoint);
  const { scroll: scroll2 } = rootProjectionNode2;
  if (scroll2) {
    translateAxis(viewportBox.x, scroll2.offset.x);
    translateAxis(viewportBox.y, scroll2.offset.y);
  }
  return viewportBox;
}

// node_modules/framer-motion/dist/es/utils/get-context-window.mjs
var getContextWindow = ({ current }) => {
  return current ? current.ownerDocument.defaultView : null;
};

// node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
var elementDragControls = /* @__PURE__ */ new WeakMap();
var VisualElementDragControls = class {
  constructor(visualElement) {
    this.openGlobalLock = null;
    this.isDragging = false;
    this.currentDirection = null;
    this.originPoint = { x: 0, y: 0 };
    this.constraints = false;
    this.hasMutatedConstraints = false;
    this.elastic = createBox();
    this.visualElement = visualElement;
  }
  start(originEvent, { snapToCursor = false } = {}) {
    const { presenceContext } = this.visualElement;
    if (presenceContext && presenceContext.isPresent === false)
      return;
    const onSessionStart = (event) => {
      const { dragSnapToOrigin: dragSnapToOrigin2 } = this.getProps();
      dragSnapToOrigin2 ? this.pauseAnimation() : this.stopAnimation();
      if (snapToCursor) {
        this.snapToCursor(extractEventInfo(event, "page").point);
      }
    };
    const onStart = (event, info) => {
      const { drag: drag2, dragPropagation, onDragStart } = this.getProps();
      if (drag2 && !dragPropagation) {
        if (this.openGlobalLock)
          this.openGlobalLock();
        this.openGlobalLock = getGlobalLock(drag2);
        if (!this.openGlobalLock)
          return;
      }
      this.isDragging = true;
      this.currentDirection = null;
      this.resolveConstraints();
      if (this.visualElement.projection) {
        this.visualElement.projection.isAnimationBlocked = true;
        this.visualElement.projection.target = void 0;
      }
      eachAxis((axis) => {
        let current = this.getAxisMotionValue(axis).get() || 0;
        if (percent.test(current)) {
          const { projection } = this.visualElement;
          if (projection && projection.layout) {
            const measuredAxis = projection.layout.layoutBox[axis];
            if (measuredAxis) {
              const length2 = calcLength(measuredAxis);
              current = length2 * (parseFloat(current) / 100);
            }
          }
        }
        this.originPoint[axis] = current;
      });
      if (onDragStart) {
        frame.update(() => onDragStart(event, info), false, true);
      }
      const { animationState } = this.visualElement;
      animationState && animationState.setActive("whileDrag", true);
    };
    const onMove = (event, info) => {
      const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();
      if (!dragPropagation && !this.openGlobalLock)
        return;
      const { offset: offset4 } = info;
      if (dragDirectionLock && this.currentDirection === null) {
        this.currentDirection = getCurrentDirection(offset4);
        if (this.currentDirection !== null) {
          onDirectionLock && onDirectionLock(this.currentDirection);
        }
        return;
      }
      this.updateAxis("x", info.point, offset4);
      this.updateAxis("y", info.point, offset4);
      this.visualElement.render();
      onDrag && onDrag(event, info);
    };
    const onSessionEnd = (event, info) => this.stop(event, info);
    const resumeAnimation = () => eachAxis((axis) => {
      var _a;
      return this.getAnimationState(axis) === "paused" && ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());
    });
    const { dragSnapToOrigin } = this.getProps();
    this.panSession = new PanSession(originEvent, {
      onSessionStart,
      onStart,
      onMove,
      onSessionEnd,
      resumeAnimation
    }, {
      transformPagePoint: this.visualElement.getTransformPagePoint(),
      dragSnapToOrigin,
      contextWindow: getContextWindow(this.visualElement)
    });
  }
  stop(event, info) {
    const isDragging = this.isDragging;
    this.cancel();
    if (!isDragging)
      return;
    const { velocity } = info;
    this.startAnimation(velocity);
    const { onDragEnd } = this.getProps();
    if (onDragEnd) {
      frame.update(() => onDragEnd(event, info));
    }
  }
  cancel() {
    this.isDragging = false;
    const { projection, animationState } = this.visualElement;
    if (projection) {
      projection.isAnimationBlocked = false;
    }
    this.panSession && this.panSession.end();
    this.panSession = void 0;
    const { dragPropagation } = this.getProps();
    if (!dragPropagation && this.openGlobalLock) {
      this.openGlobalLock();
      this.openGlobalLock = null;
    }
    animationState && animationState.setActive("whileDrag", false);
  }
  updateAxis(axis, _point, offset4) {
    const { drag: drag2 } = this.getProps();
    if (!offset4 || !shouldDrag(axis, drag2, this.currentDirection))
      return;
    const axisValue = this.getAxisMotionValue(axis);
    let next2 = this.originPoint[axis] + offset4[axis];
    if (this.constraints && this.constraints[axis]) {
      next2 = applyConstraints(next2, this.constraints[axis], this.elastic[axis]);
    }
    axisValue.set(next2);
  }
  resolveConstraints() {
    var _a;
    const { dragConstraints, dragElastic } = this.getProps();
    const layout2 = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;
    const prevConstraints = this.constraints;
    if (dragConstraints && isRefObject(dragConstraints)) {
      if (!this.constraints) {
        this.constraints = this.resolveRefConstraints();
      }
    } else {
      if (dragConstraints && layout2) {
        this.constraints = calcRelativeConstraints(layout2.layoutBox, dragConstraints);
      } else {
        this.constraints = false;
      }
    }
    this.elastic = resolveDragElastic(dragElastic);
    if (prevConstraints !== this.constraints && layout2 && this.constraints && !this.hasMutatedConstraints) {
      eachAxis((axis) => {
        if (this.getAxisMotionValue(axis)) {
          this.constraints[axis] = rebaseAxisConstraints(layout2.layoutBox[axis], this.constraints[axis]);
        }
      });
    }
  }
  resolveRefConstraints() {
    const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
    if (!constraints || !isRefObject(constraints))
      return false;
    const constraintsElement = constraints.current;
    invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
    const { projection } = this.visualElement;
    if (!projection || !projection.layout)
      return false;
    const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
    let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);
    if (onMeasureDragConstraints) {
      const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
      this.hasMutatedConstraints = !!userConstraints;
      if (userConstraints) {
        measuredConstraints = convertBoundingBoxToBox(userConstraints);
      }
    }
    return measuredConstraints;
  }
  startAnimation(velocity) {
    const { drag: drag2, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps();
    const constraints = this.constraints || {};
    const momentumAnimations = eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, this.currentDirection)) {
        return;
      }
      let transition = constraints && constraints[axis] || {};
      if (dragSnapToOrigin)
        transition = { min: 0, max: 0 };
      const bounceStiffness = dragElastic ? 200 : 1e6;
      const bounceDamping = dragElastic ? 40 : 1e7;
      const inertia2 = {
        type: "inertia",
        velocity: dragMomentum ? velocity[axis] : 0,
        bounceStiffness,
        bounceDamping,
        timeConstant: 750,
        restDelta: 1,
        restSpeed: 10,
        ...dragTransition,
        ...transition
      };
      return this.startAxisValueAnimation(axis, inertia2);
    });
    return Promise.all(momentumAnimations).then(onDragTransitionEnd);
  }
  startAxisValueAnimation(axis, transition) {
    const axisValue = this.getAxisMotionValue(axis);
    return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));
  }
  stopAnimation() {
    eachAxis((axis) => this.getAxisMotionValue(axis).stop());
  }
  pauseAnimation() {
    eachAxis((axis) => {
      var _a;
      return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause();
    });
  }
  getAnimationState(axis) {
    var _a;
    return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;
  }
  /**
   * Drag works differently depending on which props are provided.
   *
   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
   * - Otherwise, we apply the delta to the x/y motion values.
   */
  getAxisMotionValue(axis) {
    const dragKey = "_drag" + axis.toUpperCase();
    const props = this.visualElement.getProps();
    const externalMotionValue = props[dragKey];
    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : void 0) || 0);
  }
  snapToCursor(point) {
    eachAxis((axis) => {
      const { drag: drag2 } = this.getProps();
      if (!shouldDrag(axis, drag2, this.currentDirection))
        return;
      const { projection } = this.visualElement;
      const axisValue = this.getAxisMotionValue(axis);
      if (projection && projection.layout) {
        const { min: min2, max: max2 } = projection.layout.layoutBox[axis];
        axisValue.set(point[axis] - mixNumber(min2, max2, 0.5));
      }
    });
  }
  /**
   * When the viewport resizes we want to check if the measured constraints
   * have changed and, if so, reposition the element within those new constraints
   * relative to where it was before the resize.
   */
  scalePositionWithinConstraints() {
    if (!this.visualElement.current)
      return;
    const { drag: drag2, dragConstraints } = this.getProps();
    const { projection } = this.visualElement;
    if (!isRefObject(dragConstraints) || !projection || !this.constraints)
      return;
    this.stopAnimation();
    const boxProgress = { x: 0, y: 0 };
    eachAxis((axis) => {
      const axisValue = this.getAxisMotionValue(axis);
      if (axisValue) {
        const latest = axisValue.get();
        boxProgress[axis] = calcOrigin2({ min: latest, max: latest }, this.constraints[axis]);
      }
    });
    const { transformTemplate } = this.visualElement.getProps();
    this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, "") : "none";
    projection.root && projection.root.updateScroll();
    projection.updateLayout();
    this.resolveConstraints();
    eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, null))
        return;
      const axisValue = this.getAxisMotionValue(axis);
      const { min: min2, max: max2 } = this.constraints[axis];
      axisValue.set(mixNumber(min2, max2, boxProgress[axis]));
    });
  }
  addListeners() {
    if (!this.visualElement.current)
      return;
    elementDragControls.set(this.visualElement, this);
    const element = this.visualElement.current;
    const stopPointerListener = addPointerEvent(element, "pointerdown", (event) => {
      const { drag: drag2, dragListener = true } = this.getProps();
      drag2 && dragListener && this.start(event);
    });
    const measureDragConstraints = () => {
      const { dragConstraints } = this.getProps();
      if (isRefObject(dragConstraints)) {
        this.constraints = this.resolveRefConstraints();
      }
    };
    const { projection } = this.visualElement;
    const stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
    if (projection && !projection.layout) {
      projection.root && projection.root.updateScroll();
      projection.updateLayout();
    }
    measureDragConstraints();
    const stopResizeListener = addDomEvent(window, "resize", () => this.scalePositionWithinConstraints());
    const stopLayoutUpdateListener = projection.addEventListener("didUpdate", ({ delta, hasLayoutChanged }) => {
      if (this.isDragging && hasLayoutChanged) {
        eachAxis((axis) => {
          const motionValue2 = this.getAxisMotionValue(axis);
          if (!motionValue2)
            return;
          this.originPoint[axis] += delta[axis].translate;
          motionValue2.set(motionValue2.get() + delta[axis].translate);
        });
        this.visualElement.render();
      }
    });
    return () => {
      stopResizeListener();
      stopPointerListener();
      stopMeasureLayoutListener();
      stopLayoutUpdateListener && stopLayoutUpdateListener();
    };
  }
  getProps() {
    const props = this.visualElement.getProps();
    const { drag: drag2 = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true } = props;
    return {
      ...props,
      drag: drag2,
      dragDirectionLock,
      dragPropagation,
      dragConstraints,
      dragElastic,
      dragMomentum
    };
  }
};
function shouldDrag(direction, drag2, currentDirection) {
  return (drag2 === true || drag2 === direction) && (currentDirection === null || currentDirection === direction);
}
function getCurrentDirection(offset4, lockThreshold = 10) {
  let direction = null;
  if (Math.abs(offset4.y) > lockThreshold) {
    direction = "y";
  } else if (Math.abs(offset4.x) > lockThreshold) {
    direction = "x";
  }
  return direction;
}

// node_modules/framer-motion/dist/es/gestures/drag/index.mjs
var DragGesture = class extends Feature {
  constructor(node2) {
    super(node2);
    this.removeGroupControls = noop;
    this.removeListeners = noop;
    this.controls = new VisualElementDragControls(node2);
  }
  mount() {
    const { dragControls } = this.node.getProps();
    if (dragControls) {
      this.removeGroupControls = dragControls.subscribe(this.controls);
    }
    this.removeListeners = this.controls.addListeners() || noop;
  }
  unmount() {
    this.removeGroupControls();
    this.removeListeners();
  }
};

// node_modules/framer-motion/dist/es/gestures/pan/index.mjs
var asyncHandler = (handler) => (event, info) => {
  if (handler) {
    frame.update(() => handler(event, info));
  }
};
var PanGesture = class extends Feature {
  constructor() {
    super(...arguments);
    this.removePointerDownListener = noop;
  }
  onPointerDown(pointerDownEvent) {
    this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {
      transformPagePoint: this.node.getTransformPagePoint(),
      contextWindow: getContextWindow(this.node)
    });
  }
  createPanHandlers() {
    const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
    return {
      onSessionStart: asyncHandler(onPanSessionStart),
      onStart: asyncHandler(onPanStart),
      onMove: onPan,
      onEnd: (event, info) => {
        delete this.session;
        if (onPanEnd) {
          frame.update(() => onPanEnd(event, info));
        }
      }
    };
  }
  mount() {
    this.removePointerDownListener = addPointerEvent(this.node.current, "pointerdown", (event) => this.onPointerDown(event));
  }
  update() {
    this.session && this.session.updateHandlers(this.createPanHandlers());
  }
  unmount() {
    this.removePointerDownListener();
    this.session && this.session.end();
  }
};

// node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
var import_react20 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
var import_react19 = __toESM(require_react(), 1);
function usePresence() {
  const context = (0, import_react19.useContext)(PresenceContext);
  if (context === null)
    return [true, null];
  const { isPresent, onExitComplete, register } = context;
  const id3 = (0, import_react19.useId)();
  (0, import_react19.useEffect)(() => register(id3), []);
  const safeToRemove = () => onExitComplete && onExitComplete(id3);
  return !isPresent && onExitComplete ? [false, safeToRemove] : [true];
}

// node_modules/framer-motion/dist/es/projection/node/state.mjs
var globalProjectionState = {
  /**
   * Global flag as to whether the tree has animated since the last time
   * we resized the window
   */
  hasAnimatedSinceResize: true,
  /**
   * We set this to true once, on the first update. Any nodes added to the tree beyond that
   * update will be given a `data-projection-id` attribute.
   */
  hasEverUpdated: false
};

// node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs
function pixelsToPercent(pixels, axis) {
  if (axis.max === axis.min)
    return 0;
  return pixels / (axis.max - axis.min) * 100;
}
var correctBorderRadius = {
  correct: (latest, node2) => {
    if (!node2.target)
      return latest;
    if (typeof latest === "string") {
      if (px.test(latest)) {
        latest = parseFloat(latest);
      } else {
        return latest;
      }
    }
    const x2 = pixelsToPercent(latest, node2.target.x);
    const y2 = pixelsToPercent(latest, node2.target.y);
    return `${x2}% ${y2}%`;
  }
};

// node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs
var correctBoxShadow = {
  correct: (latest, { treeScale, projectionDelta }) => {
    const original = latest;
    const shadow = complex.parse(latest);
    if (shadow.length > 5)
      return original;
    const template = complex.createTransformer(latest);
    const offset4 = typeof shadow[0] !== "number" ? 1 : 0;
    const xScale = projectionDelta.x.scale * treeScale.x;
    const yScale = projectionDelta.y.scale * treeScale.y;
    shadow[0 + offset4] /= xScale;
    shadow[1 + offset4] /= yScale;
    const averageScale = mixNumber(xScale, yScale, 0.5);
    if (typeof shadow[2 + offset4] === "number")
      shadow[2 + offset4] /= averageScale;
    if (typeof shadow[3 + offset4] === "number")
      shadow[3 + offset4] /= averageScale;
    return template(shadow);
  }
};

// node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
var MeasureLayoutWithContext = class extends import_react20.default.Component {
  /**
   * This only mounts projection nodes for components that
   * need measuring, we might want to do it for all components
   * in order to incorporate transforms
   */
  componentDidMount() {
    const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;
    const { projection } = visualElement;
    addScaleCorrector(defaultScaleCorrectors);
    if (projection) {
      if (layoutGroup.group)
        layoutGroup.group.add(projection);
      if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
        switchLayoutGroup.register(projection);
      }
      projection.root.didUpdate();
      projection.addEventListener("animationComplete", () => {
        this.safeToRemove();
      });
      projection.setOptions({
        ...projection.options,
        onExitComplete: () => this.safeToRemove()
      });
    }
    globalProjectionState.hasEverUpdated = true;
  }
  getSnapshotBeforeUpdate(prevProps) {
    const { layoutDependency, visualElement, drag: drag2, isPresent } = this.props;
    const projection = visualElement.projection;
    if (!projection)
      return null;
    projection.isPresent = isPresent;
    if (drag2 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
      projection.willUpdate();
    } else {
      this.safeToRemove();
    }
    if (prevProps.isPresent !== isPresent) {
      if (isPresent) {
        projection.promote();
      } else if (!projection.relegate()) {
        frame.postRender(() => {
          const stack = projection.getStack();
          if (!stack || !stack.members.length) {
            this.safeToRemove();
          }
        });
      }
    }
    return null;
  }
  componentDidUpdate() {
    const { projection } = this.props.visualElement;
    if (projection) {
      projection.root.didUpdate();
      microtask.postRender(() => {
        if (!projection.currentAnimation && projection.isLead()) {
          this.safeToRemove();
        }
      });
    }
  }
  componentWillUnmount() {
    const { visualElement, layoutGroup, switchLayoutGroup: promoteContext } = this.props;
    const { projection } = visualElement;
    if (projection) {
      projection.scheduleCheckAfterUnmount();
      if (layoutGroup && layoutGroup.group)
        layoutGroup.group.remove(projection);
      if (promoteContext && promoteContext.deregister)
        promoteContext.deregister(projection);
    }
  }
  safeToRemove() {
    const { safeToRemove } = this.props;
    safeToRemove && safeToRemove();
  }
  render() {
    return null;
  }
};
function MeasureLayout(props) {
  const [isPresent, safeToRemove] = usePresence();
  const layoutGroup = (0, import_react20.useContext)(LayoutGroupContext);
  return import_react20.default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup, switchLayoutGroup: (0, import_react20.useContext)(SwitchLayoutGroupContext), isPresent, safeToRemove });
}
var defaultScaleCorrectors = {
  borderRadius: {
    ...correctBorderRadius,
    applyTo: [
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "borderBottomLeftRadius",
      "borderBottomRightRadius"
    ]
  },
  borderTopLeftRadius: correctBorderRadius,
  borderTopRightRadius: correctBorderRadius,
  borderBottomLeftRadius: correctBorderRadius,
  borderBottomRightRadius: correctBorderRadius,
  boxShadow: correctBoxShadow
};

// node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs
var borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
var numBorders = borders.length;
var asNumber = (value) => typeof value === "string" ? parseFloat(value) : value;
var isPx = (value) => typeof value === "number" || px.test(value);
function mixValues(target, follow, lead, progress2, shouldCrossfadeOpacity, isOnlyMember) {
  if (shouldCrossfadeOpacity) {
    target.opacity = mixNumber(
      0,
      // TODO Reinstate this if only child
      lead.opacity !== void 0 ? lead.opacity : 1,
      easeCrossfadeIn(progress2)
    );
    target.opacityExit = mixNumber(follow.opacity !== void 0 ? follow.opacity : 1, 0, easeCrossfadeOut(progress2));
  } else if (isOnlyMember) {
    target.opacity = mixNumber(follow.opacity !== void 0 ? follow.opacity : 1, lead.opacity !== void 0 ? lead.opacity : 1, progress2);
  }
  for (let i2 = 0; i2 < numBorders; i2++) {
    const borderLabel = `border${borders[i2]}Radius`;
    let followRadius = getRadius(follow, borderLabel);
    let leadRadius = getRadius(lead, borderLabel);
    if (followRadius === void 0 && leadRadius === void 0)
      continue;
    followRadius || (followRadius = 0);
    leadRadius || (leadRadius = 0);
    const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
    if (canMix) {
      target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress2), 0);
      if (percent.test(leadRadius) || percent.test(followRadius)) {
        target[borderLabel] += "%";
      }
    } else {
      target[borderLabel] = leadRadius;
    }
  }
  if (follow.rotate || lead.rotate) {
    target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress2);
  }
}
function getRadius(values, radiusName) {
  return values[radiusName] !== void 0 ? values[radiusName] : values.borderRadius;
}
var easeCrossfadeIn = compress(0, 0.5, circOut);
var easeCrossfadeOut = compress(0.5, 0.95, noop);
function compress(min2, max2, easing) {
  return (p2) => {
    if (p2 < min2)
      return 0;
    if (p2 > max2)
      return 1;
    return easing(progress(min2, max2, p2));
  };
}

// node_modules/framer-motion/dist/es/projection/geometry/copy.mjs
function copyAxisInto(axis, originAxis) {
  axis.min = originAxis.min;
  axis.max = originAxis.max;
}
function copyBoxInto(box, originBox) {
  copyAxisInto(box.x, originBox.x);
  copyAxisInto(box.y, originBox.y);
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs
function removePointDelta(point, translate, scale2, originPoint, boxScale) {
  point -= translate;
  point = scalePoint(point, 1 / scale2, originPoint);
  if (boxScale !== void 0) {
    point = scalePoint(point, 1 / boxScale, originPoint);
  }
  return point;
}
function removeAxisDelta(axis, translate = 0, scale2 = 1, origin2 = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
  if (percent.test(translate)) {
    translate = parseFloat(translate);
    const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);
    translate = relativeProgress - sourceAxis.min;
  }
  if (typeof translate !== "number")
    return;
  let originPoint = mixNumber(originAxis.min, originAxis.max, origin2);
  if (axis === originAxis)
    originPoint -= translate;
  axis.min = removePointDelta(axis.min, translate, scale2, originPoint, boxScale);
  axis.max = removePointDelta(axis.max, translate, scale2, originPoint, boxScale);
}
function removeAxisTransforms(axis, transforms, [key2, scaleKey, originKey], origin2, sourceAxis) {
  removeAxisDelta(axis, transforms[key2], transforms[scaleKey], transforms[originKey], transforms.scale, origin2, sourceAxis);
}
var xKeys2 = ["x", "scaleX", "originX"];
var yKeys2 = ["y", "scaleY", "originY"];
function removeBoxTransforms(box, transforms, originBox, sourceBox) {
  removeAxisTransforms(box.x, transforms, xKeys2, originBox ? originBox.x : void 0, sourceBox ? sourceBox.x : void 0);
  removeAxisTransforms(box.y, transforms, yKeys2, originBox ? originBox.y : void 0, sourceBox ? sourceBox.y : void 0);
}

// node_modules/framer-motion/dist/es/projection/geometry/utils.mjs
function isAxisDeltaZero(delta) {
  return delta.translate === 0 && delta.scale === 1;
}
function isDeltaZero(delta) {
  return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
}
function boxEquals(a2, b2) {
  return a2.x.min === b2.x.min && a2.x.max === b2.x.max && a2.y.min === b2.y.min && a2.y.max === b2.y.max;
}
function boxEqualsRounded(a2, b2) {
  return Math.round(a2.x.min) === Math.round(b2.x.min) && Math.round(a2.x.max) === Math.round(b2.x.max) && Math.round(a2.y.min) === Math.round(b2.y.min) && Math.round(a2.y.max) === Math.round(b2.y.max);
}
function aspectRatio(box) {
  return calcLength(box.x) / calcLength(box.y);
}

// node_modules/framer-motion/dist/es/projection/shared/stack.mjs
var NodeStack = class {
  constructor() {
    this.members = [];
  }
  add(node2) {
    addUniqueItem(this.members, node2);
    node2.scheduleRender();
  }
  remove(node2) {
    removeItem(this.members, node2);
    if (node2 === this.prevLead) {
      this.prevLead = void 0;
    }
    if (node2 === this.lead) {
      const prevLead = this.members[this.members.length - 1];
      if (prevLead) {
        this.promote(prevLead);
      }
    }
  }
  relegate(node2) {
    const indexOfNode = this.members.findIndex((member) => node2 === member);
    if (indexOfNode === 0)
      return false;
    let prevLead;
    for (let i2 = indexOfNode; i2 >= 0; i2--) {
      const member = this.members[i2];
      if (member.isPresent !== false) {
        prevLead = member;
        break;
      }
    }
    if (prevLead) {
      this.promote(prevLead);
      return true;
    } else {
      return false;
    }
  }
  promote(node2, preserveFollowOpacity) {
    const prevLead = this.lead;
    if (node2 === prevLead)
      return;
    this.prevLead = prevLead;
    this.lead = node2;
    node2.show();
    if (prevLead) {
      prevLead.instance && prevLead.scheduleRender();
      node2.scheduleRender();
      node2.resumeFrom = prevLead;
      if (preserveFollowOpacity) {
        node2.resumeFrom.preserveOpacity = true;
      }
      if (prevLead.snapshot) {
        node2.snapshot = prevLead.snapshot;
        node2.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
      }
      if (node2.root && node2.root.isUpdating) {
        node2.isLayoutDirty = true;
      }
      const { crossfade } = node2.options;
      if (crossfade === false) {
        prevLead.hide();
      }
    }
  }
  exitAnimationComplete() {
    this.members.forEach((node2) => {
      const { options, resumingFrom } = node2;
      options.onExitComplete && options.onExitComplete();
      if (resumingFrom) {
        resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();
      }
    });
  }
  scheduleRender() {
    this.members.forEach((node2) => {
      node2.instance && node2.scheduleRender(false);
    });
  }
  /**
   * Clear any leads that have been removed this render to prevent them from being
   * used in future animations and to prevent memory leaks
   */
  removeLeadSnapshot() {
    if (this.lead && this.lead.snapshot) {
      this.lead.snapshot = void 0;
    }
  }
};

// node_modules/framer-motion/dist/es/projection/styles/transform.mjs
function buildProjectionTransform(delta, treeScale, latestTransform) {
  let transform2 = "";
  const xTranslate = delta.x.translate / treeScale.x;
  const yTranslate = delta.y.translate / treeScale.y;
  if (xTranslate || yTranslate) {
    transform2 = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;
  }
  if (treeScale.x !== 1 || treeScale.y !== 1) {
    transform2 += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
  }
  if (latestTransform) {
    const { rotate: rotate2, rotateX, rotateY } = latestTransform;
    if (rotate2)
      transform2 += `rotate(${rotate2}deg) `;
    if (rotateX)
      transform2 += `rotateX(${rotateX}deg) `;
    if (rotateY)
      transform2 += `rotateY(${rotateY}deg) `;
  }
  const elementScaleX = delta.x.scale * treeScale.x;
  const elementScaleY = delta.y.scale * treeScale.y;
  if (elementScaleX !== 1 || elementScaleY !== 1) {
    transform2 += `scale(${elementScaleX}, ${elementScaleY})`;
  }
  return transform2 || "none";
}

// node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs
var compareByDepth = (a2, b2) => a2.depth - b2.depth;

// node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs
var FlatTree = class {
  constructor() {
    this.children = [];
    this.isDirty = false;
  }
  add(child) {
    addUniqueItem(this.children, child);
    this.isDirty = true;
  }
  remove(child) {
    removeItem(this.children, child);
    this.isDirty = true;
  }
  forEach(callback) {
    this.isDirty && this.children.sort(compareByDepth);
    this.isDirty = false;
    this.children.forEach(callback);
  }
};

// node_modules/framer-motion/dist/es/utils/delay.mjs
function delay(callback, timeout) {
  const start = time.now();
  const checkElapsed = ({ timestamp }) => {
    const elapsed = timestamp - start;
    if (elapsed >= timeout) {
      cancelFrame(checkElapsed);
      callback(elapsed - timeout);
    }
  };
  frame.read(checkElapsed, true);
  return () => cancelFrame(checkElapsed);
}

// node_modules/framer-motion/dist/es/debug/record.mjs
function record(data) {
  if (window.MotionDebug) {
    window.MotionDebug.record(data);
  }
}

// node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs
function isSVGElement(element) {
  return element instanceof SVGElement && element.tagName !== "svg";
}

// node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs
function animateSingleValue(value, keyframes2, options) {
  const motionValue$1 = isMotionValue(value) ? value : motionValue(value);
  motionValue$1.start(animateMotionValue("", motionValue$1, keyframes2, options));
  return motionValue$1.animation;
}

// node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs
var transformAxes = ["", "X", "Y", "Z"];
var hiddenVisibility = { visibility: "hidden" };
var animationTarget = 1e3;
var id2 = 0;
var projectionFrameData = {
  type: "projectionFrame",
  totalNodes: 0,
  resolvedTargetDeltas: 0,
  recalculatedProjection: 0
};
function createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {
  return class ProjectionNode {
    constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {
      this.id = id2++;
      this.animationId = 0;
      this.children = /* @__PURE__ */ new Set();
      this.options = {};
      this.isTreeAnimating = false;
      this.isAnimationBlocked = false;
      this.isLayoutDirty = false;
      this.isProjectionDirty = false;
      this.isSharedProjectionDirty = false;
      this.isTransformDirty = false;
      this.updateManuallyBlocked = false;
      this.updateBlockedByResize = false;
      this.isUpdating = false;
      this.isSVG = false;
      this.needsReset = false;
      this.shouldResetTransform = false;
      this.treeScale = { x: 1, y: 1 };
      this.eventHandlers = /* @__PURE__ */ new Map();
      this.hasTreeAnimated = false;
      this.updateScheduled = false;
      this.projectionUpdateScheduled = false;
      this.checkUpdateFailed = () => {
        if (this.isUpdating) {
          this.isUpdating = false;
          this.clearAllSnapshots();
        }
      };
      this.updateProjection = () => {
        this.projectionUpdateScheduled = false;
        projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;
        this.nodes.forEach(propagateDirtyNodes);
        this.nodes.forEach(resolveTargetDelta);
        this.nodes.forEach(calcProjection);
        this.nodes.forEach(cleanDirtyNodes);
        record(projectionFrameData);
      };
      this.hasProjected = false;
      this.isVisible = true;
      this.animationProgress = 0;
      this.sharedNodes = /* @__PURE__ */ new Map();
      this.latestValues = latestValues;
      this.root = parent ? parent.root || parent : this;
      this.path = parent ? [...parent.path, parent] : [];
      this.parent = parent;
      this.depth = parent ? parent.depth + 1 : 0;
      for (let i2 = 0; i2 < this.path.length; i2++) {
        this.path[i2].shouldResetTransform = true;
      }
      if (this.root === this)
        this.nodes = new FlatTree();
    }
    addEventListener(name, handler) {
      if (!this.eventHandlers.has(name)) {
        this.eventHandlers.set(name, new SubscriptionManager());
      }
      return this.eventHandlers.get(name).add(handler);
    }
    notifyListeners(name, ...args) {
      const subscriptionManager = this.eventHandlers.get(name);
      subscriptionManager && subscriptionManager.notify(...args);
    }
    hasListeners(name) {
      return this.eventHandlers.has(name);
    }
    /**
     * Lifecycles
     */
    mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {
      if (this.instance)
        return;
      this.isSVG = isSVGElement(instance);
      this.instance = instance;
      const { layoutId, layout: layout2, visualElement } = this.options;
      if (visualElement && !visualElement.current) {
        visualElement.mount(instance);
      }
      this.root.nodes.add(this);
      this.parent && this.parent.children.add(this);
      if (isLayoutDirty && (layout2 || layoutId)) {
        this.isLayoutDirty = true;
      }
      if (attachResizeListener) {
        let cancelDelay;
        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;
        attachResizeListener(instance, () => {
          this.root.updateBlockedByResize = true;
          cancelDelay && cancelDelay();
          cancelDelay = delay(resizeUnblockUpdate, 250);
          if (globalProjectionState.hasAnimatedSinceResize) {
            globalProjectionState.hasAnimatedSinceResize = false;
            this.nodes.forEach(finishAnimation);
          }
        });
      }
      if (layoutId) {
        this.root.registerSharedNode(layoutId, this);
      }
      if (this.options.animate !== false && visualElement && (layoutId || layout2)) {
        this.addEventListener("didUpdate", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout }) => {
          if (this.isTreeAnimationBlocked()) {
            this.target = void 0;
            this.relativeTarget = void 0;
            return;
          }
          const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;
          const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps();
          const targetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout) || hasRelativeTargetChanged;
          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
          if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {
            if (this.resumeFrom) {
              this.resumingFrom = this.resumeFrom;
              this.resumingFrom.resumingFrom = void 0;
            }
            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
            const animationOptions = {
              ...getValueTransition(layoutTransition, "layout"),
              onPlay: onLayoutAnimationStart,
              onComplete: onLayoutAnimationComplete
            };
            if (visualElement.shouldReduceMotion || this.options.layoutRoot) {
              animationOptions.delay = 0;
              animationOptions.type = false;
            }
            this.startAnimation(animationOptions);
          } else {
            if (!hasLayoutChanged) {
              finishAnimation(this);
            }
            if (this.isLead() && this.options.onExitComplete) {
              this.options.onExitComplete();
            }
          }
          this.targetLayout = newLayout;
        });
      }
    }
    unmount() {
      this.options.layoutId && this.willUpdate();
      this.root.nodes.remove(this);
      const stack = this.getStack();
      stack && stack.remove(this);
      this.parent && this.parent.children.delete(this);
      this.instance = void 0;
      cancelFrame(this.updateProjection);
    }
    // only on the root
    blockUpdate() {
      this.updateManuallyBlocked = true;
    }
    unblockUpdate() {
      this.updateManuallyBlocked = false;
    }
    isUpdateBlocked() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    }
    isTreeAnimationBlocked() {
      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;
    }
    // Note: currently only running on root node
    startUpdate() {
      if (this.isUpdateBlocked())
        return;
      this.isUpdating = true;
      this.nodes && this.nodes.forEach(resetRotation);
      this.animationId++;
    }
    getTransformTemplate() {
      const { visualElement } = this.options;
      return visualElement && visualElement.getProps().transformTemplate;
    }
    willUpdate(shouldNotifyListeners = true) {
      this.root.hasTreeAnimated = true;
      if (this.root.isUpdateBlocked()) {
        this.options.onExitComplete && this.options.onExitComplete();
        return;
      }
      !this.root.isUpdating && this.root.startUpdate();
      if (this.isLayoutDirty)
        return;
      this.isLayoutDirty = true;
      for (let i2 = 0; i2 < this.path.length; i2++) {
        const node2 = this.path[i2];
        node2.shouldResetTransform = true;
        node2.updateScroll("snapshot");
        if (node2.options.layoutRoot) {
          node2.willUpdate(false);
        }
      }
      const { layoutId, layout: layout2 } = this.options;
      if (layoutId === void 0 && !layout2)
        return;
      const transformTemplate = this.getTransformTemplate();
      this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : void 0;
      this.updateSnapshot();
      shouldNotifyListeners && this.notifyListeners("willUpdate");
    }
    update() {
      this.updateScheduled = false;
      const updateWasBlocked = this.isUpdateBlocked();
      if (updateWasBlocked) {
        this.unblockUpdate();
        this.clearAllSnapshots();
        this.nodes.forEach(clearMeasurements);
        return;
      }
      if (!this.isUpdating) {
        this.nodes.forEach(clearIsLayoutDirty);
      }
      this.isUpdating = false;
      if (window.HandoffCancelAllAnimations) {
        window.HandoffCancelAllAnimations();
      }
      this.nodes.forEach(resetTransformStyle);
      this.nodes.forEach(updateLayout);
      this.nodes.forEach(notifyLayoutUpdate);
      this.clearAllSnapshots();
      const now2 = time.now();
      frameData.delta = clamp2(0, 1e3 / 60, now2 - frameData.timestamp);
      frameData.timestamp = now2;
      frameData.isProcessing = true;
      steps.update.process(frameData);
      steps.preRender.process(frameData);
      steps.render.process(frameData);
      frameData.isProcessing = false;
    }
    didUpdate() {
      if (!this.updateScheduled) {
        this.updateScheduled = true;
        microtask.read(() => this.update());
      }
    }
    clearAllSnapshots() {
      this.nodes.forEach(clearSnapshot);
      this.sharedNodes.forEach(removeLeadSnapshots);
    }
    scheduleUpdateProjection() {
      if (!this.projectionUpdateScheduled) {
        this.projectionUpdateScheduled = true;
        frame.preRender(this.updateProjection, false, true);
      }
    }
    scheduleCheckAfterUnmount() {
      frame.postRender(() => {
        if (this.isLayoutDirty) {
          this.root.didUpdate();
        } else {
          this.root.checkUpdateFailed();
        }
      });
    }
    /**
     * Update measurements
     */
    updateSnapshot() {
      if (this.snapshot || !this.instance)
        return;
      this.snapshot = this.measure();
    }
    updateLayout() {
      if (!this.instance)
        return;
      this.updateScroll();
      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
        return;
      }
      if (this.resumeFrom && !this.resumeFrom.instance) {
        for (let i2 = 0; i2 < this.path.length; i2++) {
          const node2 = this.path[i2];
          node2.updateScroll();
        }
      }
      const prevLayout = this.layout;
      this.layout = this.measure(false);
      this.layoutCorrected = createBox();
      this.isLayoutDirty = false;
      this.projectionDelta = void 0;
      this.notifyListeners("measure", this.layout.layoutBox);
      const { visualElement } = this.options;
      visualElement && visualElement.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : void 0);
    }
    updateScroll(phase = "measure") {
      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {
        needsMeasurement = false;
      }
      if (needsMeasurement) {
        this.scroll = {
          animationId: this.root.animationId,
          phase,
          isRoot: checkIsScrollRoot(this.instance),
          offset: measureScroll(this.instance)
        };
      }
    }
    resetTransform() {
      if (!resetTransform)
        return;
      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
      const transformTemplate = this.getTransformTemplate();
      const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : void 0;
      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {
        resetTransform(this.instance, transformTemplateValue);
        this.shouldResetTransform = false;
        this.scheduleRender();
      }
    }
    measure(removeTransform = true) {
      const pageBox = this.measurePageBox();
      let layoutBox = this.removeElementScroll(pageBox);
      if (removeTransform) {
        layoutBox = this.removeTransform(layoutBox);
      }
      roundBox(layoutBox);
      return {
        animationId: this.root.animationId,
        measuredBox: pageBox,
        layoutBox,
        latestValues: {},
        source: this.id
      };
    }
    measurePageBox() {
      const { visualElement } = this.options;
      if (!visualElement)
        return createBox();
      const box = visualElement.measureViewportBox();
      const { scroll: scroll2 } = this.root;
      if (scroll2) {
        translateAxis(box.x, scroll2.offset.x);
        translateAxis(box.y, scroll2.offset.y);
      }
      return box;
    }
    removeElementScroll(box) {
      const boxWithoutScroll = createBox();
      copyBoxInto(boxWithoutScroll, box);
      for (let i2 = 0; i2 < this.path.length; i2++) {
        const node2 = this.path[i2];
        const { scroll: scroll2, options } = node2;
        if (node2 !== this.root && scroll2 && options.layoutScroll) {
          if (scroll2.isRoot) {
            copyBoxInto(boxWithoutScroll, box);
            const { scroll: rootScroll } = this.root;
            if (rootScroll) {
              translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);
              translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);
            }
          }
          translateAxis(boxWithoutScroll.x, scroll2.offset.x);
          translateAxis(boxWithoutScroll.y, scroll2.offset.y);
        }
      }
      return boxWithoutScroll;
    }
    applyTransform(box, transformOnly = false) {
      const withTransforms = createBox();
      copyBoxInto(withTransforms, box);
      for (let i2 = 0; i2 < this.path.length; i2++) {
        const node2 = this.path[i2];
        if (!transformOnly && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
          transformBox(withTransforms, {
            x: -node2.scroll.offset.x,
            y: -node2.scroll.offset.y
          });
        }
        if (!hasTransform(node2.latestValues))
          continue;
        transformBox(withTransforms, node2.latestValues);
      }
      if (hasTransform(this.latestValues)) {
        transformBox(withTransforms, this.latestValues);
      }
      return withTransforms;
    }
    removeTransform(box) {
      const boxWithoutTransform = createBox();
      copyBoxInto(boxWithoutTransform, box);
      for (let i2 = 0; i2 < this.path.length; i2++) {
        const node2 = this.path[i2];
        if (!node2.instance)
          continue;
        if (!hasTransform(node2.latestValues))
          continue;
        hasScale(node2.latestValues) && node2.updateSnapshot();
        const sourceBox = createBox();
        const nodeBox = node2.measurePageBox();
        copyBoxInto(sourceBox, nodeBox);
        removeBoxTransforms(boxWithoutTransform, node2.latestValues, node2.snapshot ? node2.snapshot.layoutBox : void 0, sourceBox);
      }
      if (hasTransform(this.latestValues)) {
        removeBoxTransforms(boxWithoutTransform, this.latestValues);
      }
      return boxWithoutTransform;
    }
    setTargetDelta(delta) {
      this.targetDelta = delta;
      this.root.scheduleUpdateProjection();
      this.isProjectionDirty = true;
    }
    setOptions(options) {
      this.options = {
        ...this.options,
        ...options,
        crossfade: options.crossfade !== void 0 ? options.crossfade : true
      };
    }
    clearMeasurements() {
      this.scroll = void 0;
      this.layout = void 0;
      this.snapshot = void 0;
      this.prevTransformTemplateValue = void 0;
      this.targetDelta = void 0;
      this.target = void 0;
      this.isLayoutDirty = false;
    }
    forceRelativeParentToResolveTarget() {
      if (!this.relativeParent)
        return;
      if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {
        this.relativeParent.resolveTargetDelta(true);
      }
    }
    resolveTargetDelta(forceRecalculation = false) {
      var _a;
      const lead = this.getLead();
      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
      this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget);
      if (canSkip)
        return;
      const { layout: layout2, layoutId } = this.options;
      if (!this.layout || !(layout2 || layoutId))
        return;
      this.resolvedRelativeTargetAt = frameData.timestamp;
      if (!this.targetDelta && !this.relativeTarget) {
        const relativeParent = this.getClosestProjectingParent();
        if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      if (!this.relativeTarget && !this.targetDelta)
        return;
      if (!this.target) {
        this.target = createBox();
        this.targetWithTransforms = createBox();
      }
      if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {
        this.forceRelativeParentToResolveTarget();
        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
      } else if (this.targetDelta) {
        if (Boolean(this.resumingFrom)) {
          this.target = this.applyTransform(this.layout.layoutBox);
        } else {
          copyBoxInto(this.target, this.layout.layoutBox);
        }
        applyBoxDelta(this.target, this.targetDelta);
      } else {
        copyBoxInto(this.target, this.layout.layoutBox);
      }
      if (this.attemptToResolveRelativeTarget) {
        this.attemptToResolveRelativeTarget = false;
        const relativeParent = this.getClosestProjectingParent();
        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      projectionFrameData.resolvedTargetDeltas++;
    }
    getClosestProjectingParent() {
      if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {
        return void 0;
      }
      if (this.parent.isProjecting()) {
        return this.parent;
      } else {
        return this.parent.getClosestProjectingParent();
      }
    }
    isProjecting() {
      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
    }
    calcProjection() {
      var _a;
      const lead = this.getLead();
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      let canSkip = true;
      if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {
        canSkip = false;
      }
      if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {
        canSkip = false;
      }
      if (this.resolvedRelativeTargetAt === frameData.timestamp) {
        canSkip = false;
      }
      if (canSkip)
        return;
      const { layout: layout2, layoutId } = this.options;
      this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);
      if (!this.isTreeAnimating) {
        this.targetDelta = this.relativeTarget = void 0;
      }
      if (!this.layout || !(layout2 || layoutId))
        return;
      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
      const prevTreeScaleX = this.treeScale.x;
      const prevTreeScaleY = this.treeScale.y;
      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);
      if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {
        lead.target = lead.layout.layoutBox;
        lead.targetWithTransforms = createBox();
      }
      const { target } = lead;
      if (!target) {
        if (this.projectionTransform) {
          this.projectionDelta = createDelta();
          this.projectionTransform = "none";
          this.scheduleRender();
        }
        return;
      }
      if (!this.projectionDelta) {
        this.projectionDelta = createDelta();
        this.projectionDeltaWithTransform = createDelta();
      }
      const prevProjectionTransform = this.projectionTransform;
      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);
      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {
        this.hasProjected = true;
        this.scheduleRender();
        this.notifyListeners("projectionUpdate", target);
      }
      projectionFrameData.recalculatedProjection++;
    }
    hide() {
      this.isVisible = false;
    }
    show() {
      this.isVisible = true;
    }
    scheduleRender(notifyAll = true) {
      this.options.scheduleRender && this.options.scheduleRender();
      if (notifyAll) {
        const stack = this.getStack();
        stack && stack.scheduleRender();
      }
      if (this.resumingFrom && !this.resumingFrom.instance) {
        this.resumingFrom = void 0;
      }
    }
    setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {
      const snapshot = this.snapshot;
      const snapshotLatestValues = snapshot ? snapshot.latestValues : {};
      const mixedValues = { ...this.latestValues };
      const targetDelta = createDelta();
      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {
        this.relativeTarget = this.relativeTargetOrigin = void 0;
      }
      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
      const relativeLayout = createBox();
      const snapshotSource = snapshot ? snapshot.source : void 0;
      const layoutSource = this.layout ? this.layout.source : void 0;
      const isSharedLayoutAnimation = snapshotSource !== layoutSource;
      const stack = this.getStack();
      const isOnlyMember = !stack || stack.members.length <= 1;
      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
      this.animationProgress = 0;
      let prevRelativeTarget;
      this.mixTargetDelta = (latest) => {
        const progress2 = latest / 1e3;
        mixAxisDelta(targetDelta.x, delta.x, progress2);
        mixAxisDelta(targetDelta.y, delta.y, progress2);
        this.setTargetDelta(targetDelta);
        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {
          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);
          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress2);
          if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {
            this.isProjectionDirty = false;
          }
          if (!prevRelativeTarget)
            prevRelativeTarget = createBox();
          copyBoxInto(prevRelativeTarget, this.relativeTarget);
        }
        if (isSharedLayoutAnimation) {
          this.animationValues = mixedValues;
          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress2, shouldCrossfadeOpacity, isOnlyMember);
        }
        this.root.scheduleUpdateProjection();
        this.scheduleRender();
        this.animationProgress = progress2;
      };
      this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
    }
    startAnimation(options) {
      this.notifyListeners("animationStart");
      this.currentAnimation && this.currentAnimation.stop();
      if (this.resumingFrom && this.resumingFrom.currentAnimation) {
        this.resumingFrom.currentAnimation.stop();
      }
      if (this.pendingAnimation) {
        cancelFrame(this.pendingAnimation);
        this.pendingAnimation = void 0;
      }
      this.pendingAnimation = frame.update(() => {
        globalProjectionState.hasAnimatedSinceResize = true;
        this.currentAnimation = animateSingleValue(0, animationTarget, {
          ...options,
          onUpdate: (latest) => {
            this.mixTargetDelta(latest);
            options.onUpdate && options.onUpdate(latest);
          },
          onComplete: () => {
            options.onComplete && options.onComplete();
            this.completeAnimation();
          }
        });
        if (this.resumingFrom) {
          this.resumingFrom.currentAnimation = this.currentAnimation;
        }
        this.pendingAnimation = void 0;
      });
    }
    completeAnimation() {
      if (this.resumingFrom) {
        this.resumingFrom.currentAnimation = void 0;
        this.resumingFrom.preserveOpacity = void 0;
      }
      const stack = this.getStack();
      stack && stack.exitAnimationComplete();
      this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
      this.notifyListeners("animationComplete");
    }
    finishAnimation() {
      if (this.currentAnimation) {
        this.mixTargetDelta && this.mixTargetDelta(animationTarget);
        this.currentAnimation.stop();
      }
      this.completeAnimation();
    }
    applyTransformsToTarget() {
      const lead = this.getLead();
      let { targetWithTransforms, target, layout: layout2, latestValues } = lead;
      if (!targetWithTransforms || !target || !layout2)
        return;
      if (this !== lead && this.layout && layout2 && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout2.layoutBox)) {
        target = this.target || createBox();
        const xLength = calcLength(this.layout.layoutBox.x);
        target.x.min = lead.target.x.min;
        target.x.max = target.x.min + xLength;
        const yLength = calcLength(this.layout.layoutBox.y);
        target.y.min = lead.target.y.min;
        target.y.max = target.y.min + yLength;
      }
      copyBoxInto(targetWithTransforms, target);
      transformBox(targetWithTransforms, latestValues);
      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
    }
    registerSharedNode(layoutId, node2) {
      if (!this.sharedNodes.has(layoutId)) {
        this.sharedNodes.set(layoutId, new NodeStack());
      }
      const stack = this.sharedNodes.get(layoutId);
      stack.add(node2);
      const config = node2.options.initialPromotionConfig;
      node2.promote({
        transition: config ? config.transition : void 0,
        preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node2) : void 0
      });
    }
    isLead() {
      const stack = this.getStack();
      return stack ? stack.lead === this : true;
    }
    getLead() {
      var _a;
      const { layoutId } = this.options;
      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;
    }
    getPrevLead() {
      var _a;
      const { layoutId } = this.options;
      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : void 0;
    }
    getStack() {
      const { layoutId } = this.options;
      if (layoutId)
        return this.root.sharedNodes.get(layoutId);
    }
    promote({ needsReset, transition, preserveFollowOpacity } = {}) {
      const stack = this.getStack();
      if (stack)
        stack.promote(this, preserveFollowOpacity);
      if (needsReset) {
        this.projectionDelta = void 0;
        this.needsReset = true;
      }
      if (transition)
        this.setOptions({ transition });
    }
    relegate() {
      const stack = this.getStack();
      if (stack) {
        return stack.relegate(this);
      } else {
        return false;
      }
    }
    resetRotation() {
      const { visualElement } = this.options;
      if (!visualElement)
        return;
      let hasRotate = false;
      const { latestValues } = visualElement;
      if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {
        hasRotate = true;
      }
      if (!hasRotate)
        return;
      const resetValues = {};
      for (let i2 = 0; i2 < transformAxes.length; i2++) {
        const key2 = "rotate" + transformAxes[i2];
        if (latestValues[key2]) {
          resetValues[key2] = latestValues[key2];
          visualElement.setStaticValue(key2, 0);
        }
      }
      visualElement.render();
      for (const key2 in resetValues) {
        visualElement.setStaticValue(key2, resetValues[key2]);
      }
      visualElement.scheduleRender();
    }
    getProjectionStyles(styleProp) {
      var _a, _b;
      if (!this.instance || this.isSVG)
        return void 0;
      if (!this.isVisible) {
        return hiddenVisibility;
      }
      const styles = {
        visibility: ""
      };
      const transformTemplate = this.getTransformTemplate();
      if (this.needsReset) {
        this.needsReset = false;
        styles.opacity = "";
        styles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
        styles.transform = transformTemplate ? transformTemplate(this.latestValues, "") : "none";
        return styles;
      }
      const lead = this.getLead();
      if (!this.projectionDelta || !this.layout || !lead.target) {
        const emptyStyles = {};
        if (this.options.layoutId) {
          emptyStyles.opacity = this.latestValues.opacity !== void 0 ? this.latestValues.opacity : 1;
          emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
        }
        if (this.hasProjected && !hasTransform(this.latestValues)) {
          emptyStyles.transform = transformTemplate ? transformTemplate({}, "") : "none";
          this.hasProjected = false;
        }
        return emptyStyles;
      }
      const valuesToRender = lead.animationValues || lead.latestValues;
      this.applyTransformsToTarget();
      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
      if (transformTemplate) {
        styles.transform = transformTemplate(valuesToRender, styles.transform);
      }
      const { x: x2, y: y2 } = this.projectionDelta;
      styles.transformOrigin = `${x2.origin * 100}% ${y2.origin * 100}% 0`;
      if (lead.animationValues) {
        styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
      } else {
        styles.opacity = lead === this ? valuesToRender.opacity !== void 0 ? valuesToRender.opacity : "" : valuesToRender.opacityExit !== void 0 ? valuesToRender.opacityExit : 0;
      }
      for (const key2 in scaleCorrectors) {
        if (valuesToRender[key2] === void 0)
          continue;
        const { correct, applyTo } = scaleCorrectors[key2];
        const corrected = styles.transform === "none" ? valuesToRender[key2] : correct(valuesToRender[key2], lead);
        if (applyTo) {
          const num = applyTo.length;
          for (let i2 = 0; i2 < num; i2++) {
            styles[applyTo[i2]] = corrected;
          }
        } else {
          styles[key2] = corrected;
        }
      }
      if (this.options.layoutId) {
        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "" : "none";
      }
      return styles;
    }
    clearSnapshot() {
      this.resumeFrom = this.snapshot = void 0;
    }
    // Only run on root
    resetTree() {
      this.root.nodes.forEach((node2) => {
        var _a;
        return (_a = node2.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();
      });
      this.root.nodes.forEach(clearMeasurements);
      this.root.sharedNodes.clear();
    }
  };
}
function updateLayout(node2) {
  node2.updateLayout();
}
function notifyLayoutUpdate(node2) {
  var _a;
  const snapshot = ((_a = node2.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node2.snapshot;
  if (node2.isLead() && node2.layout && snapshot && node2.hasListeners("didUpdate")) {
    const { layoutBox: layout2, measuredBox: measuredLayout } = node2.layout;
    const { animationType } = node2.options;
    const isShared = snapshot.source !== node2.layout.source;
    if (animationType === "size") {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length2 = calcLength(axisSnapshot);
        axisSnapshot.min = layout2[axis].min;
        axisSnapshot.max = axisSnapshot.min + length2;
      });
    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout2)) {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length2 = calcLength(layout2[axis]);
        axisSnapshot.max = axisSnapshot.min + length2;
        if (node2.relativeTarget && !node2.currentAnimation) {
          node2.isProjectionDirty = true;
          node2.relativeTarget[axis].max = node2.relativeTarget[axis].min + length2;
        }
      });
    }
    const layoutDelta = createDelta();
    calcBoxDelta(layoutDelta, layout2, snapshot.layoutBox);
    const visualDelta = createDelta();
    if (isShared) {
      calcBoxDelta(visualDelta, node2.applyTransform(measuredLayout, true), snapshot.measuredBox);
    } else {
      calcBoxDelta(visualDelta, layout2, snapshot.layoutBox);
    }
    const hasLayoutChanged = !isDeltaZero(layoutDelta);
    let hasRelativeTargetChanged = false;
    if (!node2.resumeFrom) {
      const relativeParent = node2.getClosestProjectingParent();
      if (relativeParent && !relativeParent.resumeFrom) {
        const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
        if (parentSnapshot && parentLayout) {
          const relativeSnapshot = createBox();
          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
          const relativeLayout = createBox();
          calcRelativePosition(relativeLayout, layout2, parentLayout.layoutBox);
          if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {
            hasRelativeTargetChanged = true;
          }
          if (relativeParent.options.layoutRoot) {
            node2.relativeTarget = relativeLayout;
            node2.relativeTargetOrigin = relativeSnapshot;
            node2.relativeParent = relativeParent;
          }
        }
      }
    }
    node2.notifyListeners("didUpdate", {
      layout: layout2,
      snapshot,
      delta: visualDelta,
      layoutDelta,
      hasLayoutChanged,
      hasRelativeTargetChanged
    });
  } else if (node2.isLead()) {
    const { onExitComplete } = node2.options;
    onExitComplete && onExitComplete();
  }
  node2.options.transition = void 0;
}
function propagateDirtyNodes(node2) {
  projectionFrameData.totalNodes++;
  if (!node2.parent)
    return;
  if (!node2.isProjecting()) {
    node2.isProjectionDirty = node2.parent.isProjectionDirty;
  }
  node2.isSharedProjectionDirty || (node2.isSharedProjectionDirty = Boolean(node2.isProjectionDirty || node2.parent.isProjectionDirty || node2.parent.isSharedProjectionDirty));
  node2.isTransformDirty || (node2.isTransformDirty = node2.parent.isTransformDirty);
}
function cleanDirtyNodes(node2) {
  node2.isProjectionDirty = node2.isSharedProjectionDirty = node2.isTransformDirty = false;
}
function clearSnapshot(node2) {
  node2.clearSnapshot();
}
function clearMeasurements(node2) {
  node2.clearMeasurements();
}
function clearIsLayoutDirty(node2) {
  node2.isLayoutDirty = false;
}
function resetTransformStyle(node2) {
  const { visualElement } = node2.options;
  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {
    visualElement.notify("BeforeLayoutMeasure");
  }
  node2.resetTransform();
}
function finishAnimation(node2) {
  node2.finishAnimation();
  node2.targetDelta = node2.relativeTarget = node2.target = void 0;
  node2.isProjectionDirty = true;
}
function resolveTargetDelta(node2) {
  node2.resolveTargetDelta();
}
function calcProjection(node2) {
  node2.calcProjection();
}
function resetRotation(node2) {
  node2.resetRotation();
}
function removeLeadSnapshots(stack) {
  stack.removeLeadSnapshot();
}
function mixAxisDelta(output, delta, p2) {
  output.translate = mixNumber(delta.translate, 0, p2);
  output.scale = mixNumber(delta.scale, 1, p2);
  output.origin = delta.origin;
  output.originPoint = delta.originPoint;
}
function mixAxis(output, from2, to, p2) {
  output.min = mixNumber(from2.min, to.min, p2);
  output.max = mixNumber(from2.max, to.max, p2);
}
function mixBox(output, from2, to, p2) {
  mixAxis(output.x, from2.x, to.x, p2);
  mixAxis(output.y, from2.y, to.y, p2);
}
function hasOpacityCrossfade(node2) {
  return node2.animationValues && node2.animationValues.opacityExit !== void 0;
}
var defaultLayoutTransition = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1]
};
var userAgentContains = (string) => typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(string);
var roundPoint = userAgentContains("applewebkit/") && !userAgentContains("chrome/") ? Math.round : noop;
function roundAxis(axis) {
  axis.min = roundPoint(axis.min);
  axis.max = roundPoint(axis.max);
}
function roundBox(box) {
  roundAxis(box.x);
  roundAxis(box.y);
}
function shouldAnimatePositionOnly(animationType, snapshot, layout2) {
  return animationType === "position" || animationType === "preserve-aspect" && !isNear(aspectRatio(snapshot), aspectRatio(layout2), 0.2);
}

// node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs
var DocumentProjectionNode = createProjectionNode({
  attachResizeListener: (ref, notify2) => addDomEvent(ref, "resize", notify2),
  measureScroll: () => ({
    x: document.documentElement.scrollLeft || document.body.scrollLeft,
    y: document.documentElement.scrollTop || document.body.scrollTop
  }),
  checkIsScrollRoot: () => true
});

// node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs
var rootProjectionNode = {
  current: void 0
};
var HTMLProjectionNode = createProjectionNode({
  measureScroll: (instance) => ({
    x: instance.scrollLeft,
    y: instance.scrollTop
  }),
  defaultParent: () => {
    if (!rootProjectionNode.current) {
      const documentNode = new DocumentProjectionNode({});
      documentNode.mount(window);
      documentNode.setOptions({ layoutScroll: true });
      rootProjectionNode.current = documentNode;
    }
    return rootProjectionNode.current;
  },
  resetTransform: (instance, value) => {
    instance.style.transform = value !== void 0 ? value : "none";
  },
  checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === "fixed")
});

// node_modules/framer-motion/dist/es/motion/features/drag.mjs
var drag = {
  pan: {
    Feature: PanGesture
  },
  drag: {
    Feature: DragGesture,
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};

// node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs
var splitCSSVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function parseCSSVariable(current) {
  const match2 = splitCSSVariableRegex.exec(current);
  if (!match2)
    return [,];
  const [, token2, fallback] = match2;
  return [token2, fallback];
}
var maxDepth = 4;
function getVariableValue(current, element, depth = 1) {
  invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property "${current}". This may indicate a circular fallback dependency.`);
  const [token2, fallback] = parseCSSVariable(current);
  if (!token2)
    return;
  const resolved = window.getComputedStyle(element).getPropertyValue(token2);
  if (resolved) {
    const trimmed = resolved.trim();
    return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;
  } else if (isCSSVariableToken(fallback)) {
    return getVariableValue(fallback, element, depth + 1);
  } else {
    return fallback;
  }
}
function resolveCSSVariables(visualElement, { ...target }, transitionEnd) {
  const element = visualElement.current;
  if (!(element instanceof Element))
    return { target, transitionEnd };
  if (transitionEnd) {
    transitionEnd = { ...transitionEnd };
  }
  visualElement.values.forEach((value) => {
    const current = value.get();
    if (!isCSSVariableToken(current))
      return;
    const resolved = getVariableValue(current, element);
    if (resolved)
      value.set(resolved);
  });
  for (const key2 in target) {
    const current = target[key2];
    if (!isCSSVariableToken(current))
      continue;
    const resolved = getVariableValue(current, element);
    if (!resolved)
      continue;
    target[key2] = resolved;
    if (!transitionEnd)
      transitionEnd = {};
    if (transitionEnd[key2] === void 0) {
      transitionEnd[key2] = current;
    }
  }
  return { target, transitionEnd };
}

// node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs
var positionalKeys = /* @__PURE__ */ new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  "x",
  "y",
  "translateX",
  "translateY"
]);
var isPositionalKey = (key2) => positionalKeys.has(key2);
var hasPositionalKey = (target) => {
  return Object.keys(target).some(isPositionalKey);
};
var isNumOrPxType = (v2) => v2 === number || v2 === px;
var getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(", ")[pos]);
var getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform: transform2 }) => {
  if (transform2 === "none" || !transform2)
    return 0;
  const matrix3d = transform2.match(/^matrix3d\((.+)\)$/);
  if (matrix3d) {
    return getPosFromMatrix(matrix3d[1], pos3);
  } else {
    const matrix = transform2.match(/^matrix\((.+)\)$/);
    if (matrix) {
      return getPosFromMatrix(matrix[1], pos2);
    } else {
      return 0;
    }
  }
};
var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
var nonTranslationalTransformKeys = transformPropOrder.filter((key2) => !transformKeys.has(key2));
function removeNonTranslationalTransform(visualElement) {
  const removedTransforms = [];
  nonTranslationalTransformKeys.forEach((key2) => {
    const value = visualElement.getValue(key2);
    if (value !== void 0) {
      removedTransforms.push([key2, value.get()]);
      value.set(key2.startsWith("scale") ? 1 : 0);
    }
  });
  if (removedTransforms.length)
    visualElement.render();
  return removedTransforms;
}
var positionalValues = {
  // Dimensions
  width: ({ x: x2 }, { paddingLeft = "0", paddingRight = "0" }) => x2.max - x2.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
  height: ({ y: y2 }, { paddingTop = "0", paddingBottom = "0" }) => y2.max - y2.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
  top: (_bbox, { top }) => parseFloat(top),
  left: (_bbox, { left }) => parseFloat(left),
  bottom: ({ y: y2 }, { top }) => parseFloat(top) + (y2.max - y2.min),
  right: ({ x: x2 }, { left }) => parseFloat(left) + (x2.max - x2.min),
  // Transform
  x: getTranslateFromMatrix(4, 13),
  y: getTranslateFromMatrix(5, 14)
};
positionalValues.translateX = positionalValues.x;
positionalValues.translateY = positionalValues.y;
var convertChangedValueTypes = (target, visualElement, changedKeys) => {
  const originBbox = visualElement.measureViewportBox();
  const element = visualElement.current;
  const elementComputedStyle = getComputedStyle(element);
  const { display } = elementComputedStyle;
  const origin2 = {};
  if (display === "none") {
    visualElement.setStaticValue("display", target.display || "block");
  }
  changedKeys.forEach((key2) => {
    origin2[key2] = positionalValues[key2](originBbox, elementComputedStyle);
  });
  visualElement.render();
  const targetBbox = visualElement.measureViewportBox();
  changedKeys.forEach((key2) => {
    const value = visualElement.getValue(key2);
    value && value.jump(origin2[key2]);
    target[key2] = positionalValues[key2](targetBbox, elementComputedStyle);
  });
  return target;
};
var checkAndConvertChangedValueTypes = (visualElement, target, origin2 = {}, transitionEnd = {}) => {
  target = { ...target };
  transitionEnd = { ...transitionEnd };
  const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
  let removedTransformValues = [];
  let hasAttemptedToRemoveTransformValues = false;
  const changedValueTypeKeys = [];
  targetPositionalKeys.forEach((key2) => {
    const value = visualElement.getValue(key2);
    if (!visualElement.hasValue(key2))
      return;
    let from2 = origin2[key2];
    let fromType = findDimensionValueType(from2);
    const to = target[key2];
    let toType;
    if (isKeyframesTarget(to)) {
      const numKeyframes = to.length;
      const fromIndex = to[0] === null ? 1 : 0;
      from2 = to[fromIndex];
      fromType = findDimensionValueType(from2);
      for (let i2 = fromIndex; i2 < numKeyframes; i2++) {
        if (to[i2] === null)
          break;
        if (!toType) {
          toType = findDimensionValueType(to[i2]);
          invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
        } else {
          invariant(findDimensionValueType(to[i2]) === toType, "All keyframes must be of the same type");
        }
      }
    } else {
      toType = findDimensionValueType(to);
    }
    if (fromType !== toType) {
      if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
        const current = value.get();
        if (typeof current === "string") {
          value.set(parseFloat(current));
        }
        if (typeof to === "string") {
          target[key2] = parseFloat(to);
        } else if (Array.isArray(to) && toType === px) {
          target[key2] = to.map(parseFloat);
        }
      } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from2 === 0 || to === 0)) {
        if (from2 === 0) {
          value.set(toType.transform(from2));
        } else {
          target[key2] = fromType.transform(to);
        }
      } else {
        if (!hasAttemptedToRemoveTransformValues) {
          removedTransformValues = removeNonTranslationalTransform(visualElement);
          hasAttemptedToRemoveTransformValues = true;
        }
        changedValueTypeKeys.push(key2);
        transitionEnd[key2] = transitionEnd[key2] !== void 0 ? transitionEnd[key2] : target[key2];
        value.jump(to);
      }
    }
  });
  if (changedValueTypeKeys.length) {
    const scrollY = changedValueTypeKeys.indexOf("height") >= 0 ? window.pageYOffset : null;
    const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);
    if (removedTransformValues.length) {
      removedTransformValues.forEach(([key2, value]) => {
        visualElement.getValue(key2).set(value);
      });
    }
    visualElement.render();
    if (isBrowser && scrollY !== null) {
      window.scrollTo({ top: scrollY });
    }
    return { target: convertedTarget, transitionEnd };
  } else {
    return { target, transitionEnd };
  }
};
function unitConversion(visualElement, target, origin2, transitionEnd) {
  return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement, target, origin2, transitionEnd) : { target, transitionEnd };
}

// node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
var parseDomVariant = (visualElement, target, origin2, transitionEnd) => {
  const resolved = resolveCSSVariables(visualElement, target, transitionEnd);
  target = resolved.target;
  transitionEnd = resolved.transitionEnd;
  return unitConversion(visualElement, target, origin2, transitionEnd);
};

// node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs
var prefersReducedMotion = { current: null };
var hasReducedMotionListener = { current: false };

// node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs
function initPrefersReducedMotion() {
  hasReducedMotionListener.current = true;
  if (!isBrowser)
    return;
  if (window.matchMedia) {
    const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
    const setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;
    motionMediaQuery.addListener(setReducedMotionPreferences);
    setReducedMotionPreferences();
  } else {
    prefersReducedMotion.current = false;
  }
}

// node_modules/framer-motion/dist/es/render/utils/motion-values.mjs
function updateMotionValuesFromProps(element, next2, prev2) {
  const { willChange } = next2;
  for (const key2 in next2) {
    const nextValue = next2[key2];
    const prevValue = prev2[key2];
    if (isMotionValue(nextValue)) {
      element.addValue(key2, nextValue);
      if (isWillChangeMotionValue(willChange)) {
        willChange.add(key2);
      }
      if (true) {
        warnOnce(nextValue.version === "11.0.8", `Attempting to mix Framer Motion versions ${nextValue.version} with 11.0.8 may not work as expected.`);
      }
    } else if (isMotionValue(prevValue)) {
      element.addValue(key2, motionValue(nextValue, { owner: element }));
      if (isWillChangeMotionValue(willChange)) {
        willChange.remove(key2);
      }
    } else if (prevValue !== nextValue) {
      if (element.hasValue(key2)) {
        const existingValue = element.getValue(key2);
        !existingValue.hasAnimated && existingValue.set(nextValue);
      } else {
        const latestValue = element.getStaticValue(key2);
        element.addValue(key2, motionValue(latestValue !== void 0 ? latestValue : nextValue, { owner: element }));
      }
    }
  }
  for (const key2 in prev2) {
    if (next2[key2] === void 0)
      element.removeValue(key2);
  }
  return next2;
}

// node_modules/framer-motion/dist/es/render/store.mjs
var visualElementStore = /* @__PURE__ */ new WeakMap();

// node_modules/framer-motion/dist/es/render/VisualElement.mjs
var featureNames = Object.keys(featureDefinitions);
var numFeatures = featureNames.length;
var propEventHandlers = [
  "AnimationStart",
  "AnimationComplete",
  "Update",
  "BeforeLayoutMeasure",
  "LayoutMeasure",
  "LayoutAnimationStart",
  "LayoutAnimationComplete"
];
var numVariantProps = variantProps.length;
var VisualElement = class {
  constructor({ parent, props, presenceContext, reducedMotionConfig, visualState }, options = {}) {
    this.current = null;
    this.children = /* @__PURE__ */ new Set();
    this.isVariantNode = false;
    this.isControllingVariants = false;
    this.shouldReduceMotion = null;
    this.values = /* @__PURE__ */ new Map();
    this.features = {};
    this.valueSubscriptions = /* @__PURE__ */ new Map();
    this.prevMotionValues = {};
    this.events = {};
    this.propEventSubscriptions = {};
    this.notifyUpdate = () => this.notify("Update", this.latestValues);
    this.render = () => {
      if (!this.current)
        return;
      this.triggerBuild();
      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
    };
    this.scheduleRender = () => frame.render(this.render, false, true);
    const { latestValues, renderState } = visualState;
    this.latestValues = latestValues;
    this.baseTarget = { ...latestValues };
    this.initialValues = props.initial ? { ...latestValues } : {};
    this.renderState = renderState;
    this.parent = parent;
    this.props = props;
    this.presenceContext = presenceContext;
    this.depth = parent ? parent.depth + 1 : 0;
    this.reducedMotionConfig = reducedMotionConfig;
    this.options = options;
    this.isControllingVariants = isControllingVariants(props);
    this.isVariantNode = isVariantNode(props);
    if (this.isVariantNode) {
      this.variantChildren = /* @__PURE__ */ new Set();
    }
    this.manuallyAnimateOnMount = Boolean(parent && parent.current);
    const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});
    for (const key2 in initialMotionValues) {
      const value = initialMotionValues[key2];
      if (latestValues[key2] !== void 0 && isMotionValue(value)) {
        value.set(latestValues[key2], false);
        if (isWillChangeMotionValue(willChange)) {
          willChange.add(key2);
        }
      }
    }
  }
  /**
   * This method takes React props and returns found MotionValues. For example, HTML
   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
   *
   * This isn't an abstract method as it needs calling in the constructor, but it is
   * intended to be one.
   */
  scrapeMotionValuesFromProps(_props, _prevProps) {
    return {};
  }
  mount(instance) {
    this.current = instance;
    visualElementStore.set(instance, this);
    if (this.projection && !this.projection.instance) {
      this.projection.mount(instance);
    }
    if (this.parent && this.isVariantNode && !this.isControllingVariants) {
      this.removeFromVariantTree = this.parent.addVariantChild(this);
    }
    this.values.forEach((value, key2) => this.bindToMotionValue(key2, value));
    if (!hasReducedMotionListener.current) {
      initPrefersReducedMotion();
    }
    this.shouldReduceMotion = this.reducedMotionConfig === "never" ? false : this.reducedMotionConfig === "always" ? true : prefersReducedMotion.current;
    if (true) {
      warnOnce(this.shouldReduceMotion !== true, "You have Reduced Motion enabled on your device. Animations may not appear as expected.");
    }
    if (this.parent)
      this.parent.children.add(this);
    this.update(this.props, this.presenceContext);
  }
  unmount() {
    visualElementStore.delete(this.current);
    this.projection && this.projection.unmount();
    cancelFrame(this.notifyUpdate);
    cancelFrame(this.render);
    this.valueSubscriptions.forEach((remove) => remove());
    this.removeFromVariantTree && this.removeFromVariantTree();
    this.parent && this.parent.children.delete(this);
    for (const key2 in this.events) {
      this.events[key2].clear();
    }
    for (const key2 in this.features) {
      this.features[key2].unmount();
    }
    this.current = null;
  }
  bindToMotionValue(key2, value) {
    const valueIsTransform = transformProps.has(key2);
    const removeOnChange = value.on("change", (latestValue) => {
      this.latestValues[key2] = latestValue;
      this.props.onUpdate && frame.update(this.notifyUpdate, false, true);
      if (valueIsTransform && this.projection) {
        this.projection.isTransformDirty = true;
      }
    });
    const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
    this.valueSubscriptions.set(key2, () => {
      removeOnChange();
      removeOnRenderRequest();
    });
  }
  sortNodePosition(other) {
    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {
      return 0;
    }
    return this.sortInstanceNodePosition(this.current, other.current);
  }
  loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures2, initialLayoutGroupConfig) {
    let ProjectionNodeConstructor;
    let MeasureLayout2;
    if (preloadedFeatures2 && isStrict) {
      const strictMessage = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
      renderedProps.ignoreStrict ? warning(false, strictMessage) : invariant(false, strictMessage);
    }
    for (let i2 = 0; i2 < numFeatures; i2++) {
      const name = featureNames[i2];
      const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent } = featureDefinitions[name];
      if (ProjectionNode)
        ProjectionNodeConstructor = ProjectionNode;
      if (isEnabled(renderedProps)) {
        if (!this.features[name] && FeatureConstructor) {
          this.features[name] = new FeatureConstructor(this);
        }
        if (MeasureLayoutComponent) {
          MeasureLayout2 = MeasureLayoutComponent;
        }
      }
    }
    if ((this.type === "html" || this.type === "svg") && !this.projection && ProjectionNodeConstructor) {
      this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);
      const { layoutId, layout: layout2, drag: drag2, dragConstraints, layoutScroll, layoutRoot } = renderedProps;
      this.projection.setOptions({
        layoutId,
        layout: layout2,
        alwaysMeasureLayout: Boolean(drag2) || dragConstraints && isRefObject(dragConstraints),
        visualElement: this,
        scheduleRender: () => this.scheduleRender(),
        /**
         * TODO: Update options in an effect. This could be tricky as it'll be too late
         * to update by the time layout animations run.
         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
         * ensuring it gets called if there's no potential layout animations.
         *
         */
        animationType: typeof layout2 === "string" ? layout2 : "both",
        initialPromotionConfig: initialLayoutGroupConfig,
        layoutScroll,
        layoutRoot
      });
    }
    return MeasureLayout2;
  }
  updateFeatures() {
    for (const key2 in this.features) {
      const feature = this.features[key2];
      if (feature.isMounted) {
        feature.update();
      } else {
        feature.mount();
        feature.isMounted = true;
      }
    }
  }
  triggerBuild() {
    this.build(this.renderState, this.latestValues, this.options, this.props);
  }
  /**
   * Measure the current viewport box with or without transforms.
   * Only measures axis-aligned boxes, rotate and skew must be manually
   * removed with a re-render to work.
   */
  measureViewportBox() {
    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();
  }
  getStaticValue(key2) {
    return this.latestValues[key2];
  }
  setStaticValue(key2, value) {
    this.latestValues[key2] = value;
  }
  /**
   * Make a target animatable by Popmotion. For instance, if we're
   * trying to animate width from 100px to 100vw we need to measure 100vw
   * in pixels to determine what we really need to animate to. This is also
   * pluggable to support Framer's custom value types like Color,
   * and CSS variables.
   */
  makeTargetAnimatable(target, canMutate = true) {
    return this.makeTargetAnimatableFromInstance(target, canMutate);
  }
  /**
   * Update the provided props. Ensure any newly-added motion values are
   * added to our map, old ones removed, and listeners updated.
   */
  update(props, presenceContext) {
    if (props.transformTemplate || this.props.transformTemplate) {
      this.scheduleRender();
    }
    this.prevProps = this.props;
    this.props = props;
    this.prevPresenceContext = this.presenceContext;
    this.presenceContext = presenceContext;
    for (let i2 = 0; i2 < propEventHandlers.length; i2++) {
      const key2 = propEventHandlers[i2];
      if (this.propEventSubscriptions[key2]) {
        this.propEventSubscriptions[key2]();
        delete this.propEventSubscriptions[key2];
      }
      const listener = props["on" + key2];
      if (listener) {
        this.propEventSubscriptions[key2] = this.on(key2, listener);
      }
    }
    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);
    if (this.handleChildMotionValue) {
      this.handleChildMotionValue();
    }
  }
  getProps() {
    return this.props;
  }
  /**
   * Returns the variant definition with a given name.
   */
  getVariant(name) {
    return this.props.variants ? this.props.variants[name] : void 0;
  }
  /**
   * Returns the defined default transition on this component.
   */
  getDefaultTransition() {
    return this.props.transition;
  }
  getTransformPagePoint() {
    return this.props.transformPagePoint;
  }
  getClosestVariantNode() {
    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
  }
  getVariantContext(startAtParent = false) {
    if (startAtParent) {
      return this.parent ? this.parent.getVariantContext() : void 0;
    }
    if (!this.isControllingVariants) {
      const context2 = this.parent ? this.parent.getVariantContext() || {} : {};
      if (this.props.initial !== void 0) {
        context2.initial = this.props.initial;
      }
      return context2;
    }
    const context = {};
    for (let i2 = 0; i2 < numVariantProps; i2++) {
      const name = variantProps[i2];
      const prop = this.props[name];
      if (isVariantLabel(prop) || prop === false) {
        context[name] = prop;
      }
    }
    return context;
  }
  /**
   * Add a child visual element to our set of children.
   */
  addVariantChild(child) {
    const closestVariantNode = this.getClosestVariantNode();
    if (closestVariantNode) {
      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);
      return () => closestVariantNode.variantChildren.delete(child);
    }
  }
  /**
   * Add a motion value and bind it to this visual element.
   */
  addValue(key2, value) {
    if (value !== this.values.get(key2)) {
      this.removeValue(key2);
      this.bindToMotionValue(key2, value);
    }
    this.values.set(key2, value);
    this.latestValues[key2] = value.get();
  }
  /**
   * Remove a motion value and unbind any active subscriptions.
   */
  removeValue(key2) {
    this.values.delete(key2);
    const unsubscribe = this.valueSubscriptions.get(key2);
    if (unsubscribe) {
      unsubscribe();
      this.valueSubscriptions.delete(key2);
    }
    delete this.latestValues[key2];
    this.removeValueFromRenderState(key2, this.renderState);
  }
  /**
   * Check whether we have a motion value for this key
   */
  hasValue(key2) {
    return this.values.has(key2);
  }
  getValue(key2, defaultValue) {
    if (this.props.values && this.props.values[key2]) {
      return this.props.values[key2];
    }
    let value = this.values.get(key2);
    if (value === void 0 && defaultValue !== void 0) {
      value = motionValue(defaultValue, { owner: this });
      this.addValue(key2, value);
    }
    return value;
  }
  /**
   * If we're trying to animate to a previously unencountered value,
   * we need to check for it in our state and as a last resort read it
   * directly from the instance (which might have performance implications).
   */
  readValue(key2) {
    var _a;
    return this.latestValues[key2] !== void 0 || !this.current ? this.latestValues[key2] : (_a = this.getBaseTargetFromProps(this.props, key2)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key2, this.options);
  }
  /**
   * Set the base target to later animate back to. This is currently
   * only hydrated on creation and when we first read a value.
   */
  setBaseTarget(key2, value) {
    this.baseTarget[key2] = value;
  }
  /**
   * Find the base target for a value thats been removed from all animation
   * props.
   */
  getBaseTarget(key2) {
    var _a;
    const { initial } = this.props;
    const valueFromInitial = typeof initial === "string" || typeof initial === "object" ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key2] : void 0;
    if (initial && valueFromInitial !== void 0) {
      return valueFromInitial;
    }
    const target = this.getBaseTargetFromProps(this.props, key2);
    if (target !== void 0 && !isMotionValue(target))
      return target;
    return this.initialValues[key2] !== void 0 && valueFromInitial === void 0 ? void 0 : this.baseTarget[key2];
  }
  on(eventName, callback) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    return this.events[eventName].add(callback);
  }
  notify(eventName, ...args) {
    if (this.events[eventName]) {
      this.events[eventName].notify(...args);
    }
  }
};

// node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs
var DOMVisualElement = class extends VisualElement {
  sortInstanceNodePosition(a2, b2) {
    return a2.compareDocumentPosition(b2) & 2 ? 1 : -1;
  }
  getBaseTargetFromProps(props, key2) {
    return props.style ? props.style[key2] : void 0;
  }
  removeValueFromRenderState(key2, { vars, style }) {
    delete vars[key2];
    delete style[key2];
  }
  makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, isMounted) {
    const origin2 = getOrigin(target, transition || {}, this);
    if (isMounted) {
      checkTargetForNewValues(this, target, origin2);
      const parsed = parseDomVariant(this, target, origin2, transitionEnd);
      transitionEnd = parsed.transitionEnd;
      target = parsed.target;
    }
    return {
      transition,
      transitionEnd,
      ...target
    };
  }
};

// node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs
function getComputedStyle2(element) {
  return window.getComputedStyle(element);
}
var HTMLVisualElement = class extends DOMVisualElement {
  constructor() {
    super(...arguments);
    this.type = "html";
  }
  readValueFromInstance(instance, key2) {
    if (transformProps.has(key2)) {
      const defaultType = getDefaultValueType(key2);
      return defaultType ? defaultType.default || 0 : 0;
    } else {
      const computedStyle = getComputedStyle2(instance);
      const value = (isCSSVariableName(key2) ? computedStyle.getPropertyValue(key2) : computedStyle[key2]) || 0;
      return typeof value === "string" ? value.trim() : value;
    }
  }
  measureInstanceViewportBox(instance, { transformPagePoint }) {
    return measureViewportBox(instance, transformPagePoint);
  }
  build(renderState, latestValues, options, props) {
    buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);
  }
  scrapeMotionValuesFromProps(props, prevProps) {
    return scrapeMotionValuesFromProps(props, prevProps);
  }
  handleChildMotionValue() {
    if (this.childSubscription) {
      this.childSubscription();
      delete this.childSubscription;
    }
    const { children } = this.props;
    if (isMotionValue(children)) {
      this.childSubscription = children.on("change", (latest) => {
        if (this.current)
          this.current.textContent = `${latest}`;
      });
    }
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderHTML(instance, renderState, styleProp, projection);
  }
};

// node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs
var SVGVisualElement = class extends DOMVisualElement {
  constructor() {
    super(...arguments);
    this.type = "svg";
    this.isSVGTag = false;
  }
  getBaseTargetFromProps(props, key2) {
    return props[key2];
  }
  readValueFromInstance(instance, key2) {
    if (transformProps.has(key2)) {
      const defaultType = getDefaultValueType(key2);
      return defaultType ? defaultType.default || 0 : 0;
    }
    key2 = !camelCaseAttributes.has(key2) ? camelToDash(key2) : key2;
    return instance.getAttribute(key2);
  }
  measureInstanceViewportBox() {
    return createBox();
  }
  scrapeMotionValuesFromProps(props, prevProps) {
    return scrapeMotionValuesFromProps2(props, prevProps);
  }
  build(renderState, latestValues, options, props) {
    buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderSVG(instance, renderState, styleProp, projection);
  }
  mount(instance) {
    this.isSVGTag = isSVGTag(instance.tagName);
    super.mount(instance);
  }
};

// node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
var createDomVisualElement = (Component3, options) => {
  return isSVGComponent(Component3) ? new SVGVisualElement(options, { enableHardwareAcceleration: false }) : new HTMLVisualElement(options, { enableHardwareAcceleration: true });
};

// node_modules/framer-motion/dist/es/motion/features/layout.mjs
var layout = {
  layout: {
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};

// node_modules/framer-motion/dist/es/render/dom/motion.mjs
var preloadedFeatures = {
  ...animations,
  ...gestureAnimations,
  ...drag,
  ...layout
};
var motion = createMotionProxy((Component3, config) => createDomMotionConfig(Component3, config, preloadedFeatures, createDomVisualElement));

// node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
var React4 = __toESM(require_react(), 1);
var import_react26 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-force-update.mjs
var import_react22 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs
var import_react21 = __toESM(require_react(), 1);
function useIsMounted() {
  const isMounted = (0, import_react21.useRef)(false);
  useIsomorphicLayoutEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
}

// node_modules/framer-motion/dist/es/utils/use-force-update.mjs
function useForceUpdate() {
  const isMounted = useIsMounted();
  const [forcedRenderCount, setForcedRenderCount] = (0, import_react22.useState)(0);
  const forceRender = (0, import_react22.useCallback)(() => {
    isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
  }, [forcedRenderCount]);
  const deferredForceRender = (0, import_react22.useCallback)(() => frame.postRender(forceRender), [forceRender]);
  return [deferredForceRender, forcedRenderCount];
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
var React3 = __toESM(require_react(), 1);
var import_react24 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs
var React2 = __toESM(require_react(), 1);
var import_react23 = __toESM(require_react(), 1);
var PopChildMeasure = class extends React2.Component {
  getSnapshotBeforeUpdate(prevProps) {
    const element = this.props.childRef.current;
    if (element && prevProps.isPresent && !this.props.isPresent) {
      const size4 = this.props.sizeRef.current;
      size4.height = element.offsetHeight || 0;
      size4.width = element.offsetWidth || 0;
      size4.top = element.offsetTop;
      size4.left = element.offsetLeft;
    }
    return null;
  }
  /**
   * Required with getSnapshotBeforeUpdate to stop React complaining.
   */
  componentDidUpdate() {
  }
  render() {
    return this.props.children;
  }
};
function PopChild({ children, isPresent }) {
  const id3 = (0, import_react23.useId)();
  const ref = (0, import_react23.useRef)(null);
  const size4 = (0, import_react23.useRef)({
    width: 0,
    height: 0,
    top: 0,
    left: 0
  });
  (0, import_react23.useInsertionEffect)(() => {
    const { width, height, top, left } = size4.current;
    if (isPresent || !ref.current || !width || !height)
      return;
    ref.current.dataset.motionPopId = id3;
    const style = document.createElement("style");
    document.head.appendChild(style);
    if (style.sheet) {
      style.sheet.insertRule(`
          [data-motion-pop-id="${id3}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
            top: ${top}px !important;
            left: ${left}px !important;
          }
        `);
    }
    return () => {
      document.head.removeChild(style);
    };
  }, [isPresent]);
  return React2.createElement(PopChildMeasure, { isPresent, childRef: ref, sizeRef: size4 }, React2.cloneElement(children, { ref }));
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
var PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode }) => {
  const presenceChildren = useConstant(newChildrenMap);
  const id3 = (0, import_react24.useId)();
  const context = (0, import_react24.useMemo)(
    () => ({
      id: id3,
      initial,
      isPresent,
      custom,
      onExitComplete: (childId) => {
        presenceChildren.set(childId, true);
        for (const isComplete of presenceChildren.values()) {
          if (!isComplete)
            return;
        }
        onExitComplete && onExitComplete();
      },
      register: (childId) => {
        presenceChildren.set(childId, false);
        return () => presenceChildren.delete(childId);
      }
    }),
    /**
     * If the presence of a child affects the layout of the components around it,
     * we want to make a new context value to ensure they get re-rendered
     * so they can detect that layout change.
     */
    presenceAffectsLayout ? void 0 : [isPresent]
  );
  (0, import_react24.useMemo)(() => {
    presenceChildren.forEach((_2, key2) => presenceChildren.set(key2, false));
  }, [isPresent]);
  React3.useEffect(() => {
    !isPresent && !presenceChildren.size && onExitComplete && onExitComplete();
  }, [isPresent]);
  if (mode === "popLayout") {
    children = React3.createElement(PopChild, { isPresent }, children);
  }
  return React3.createElement(PresenceContext.Provider, { value: context }, children);
};
function newChildrenMap() {
  return /* @__PURE__ */ new Map();
}

// node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs
var import_react25 = __toESM(require_react(), 1);
function useUnmountEffect(callback) {
  return (0, import_react25.useEffect)(() => () => callback(), []);
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
var getChildKey = (child) => child.key || "";
function updateChildLookup(children, allChildren) {
  children.forEach((child) => {
    const key2 = getChildKey(child);
    allChildren.set(key2, child);
  });
}
function onlyElements(children) {
  const filtered = [];
  import_react26.Children.forEach(children, (child) => {
    if ((0, import_react26.isValidElement)(child))
      filtered.push(child);
  });
  return filtered;
}
var AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = "sync" }) => {
  invariant(!exitBeforeEnter, "Replace exitBeforeEnter with mode='wait'");
  const forceRender = (0, import_react26.useContext)(LayoutGroupContext).forceRender || useForceUpdate()[0];
  const isMounted = useIsMounted();
  const filteredChildren = onlyElements(children);
  let childrenToRender = filteredChildren;
  const exitingChildren = (0, import_react26.useRef)(/* @__PURE__ */ new Map()).current;
  const presentChildren = (0, import_react26.useRef)(childrenToRender);
  const allChildren = (0, import_react26.useRef)(/* @__PURE__ */ new Map()).current;
  const isInitialRender = (0, import_react26.useRef)(true);
  useIsomorphicLayoutEffect(() => {
    isInitialRender.current = false;
    updateChildLookup(filteredChildren, allChildren);
    presentChildren.current = childrenToRender;
  });
  useUnmountEffect(() => {
    isInitialRender.current = true;
    allChildren.clear();
    exitingChildren.clear();
  });
  if (isInitialRender.current) {
    return React4.createElement(React4.Fragment, null, childrenToRender.map((child) => React4.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? void 0 : false, presenceAffectsLayout, mode }, child)));
  }
  childrenToRender = [...childrenToRender];
  const presentKeys = presentChildren.current.map(getChildKey);
  const targetKeys = filteredChildren.map(getChildKey);
  const numPresent = presentKeys.length;
  for (let i2 = 0; i2 < numPresent; i2++) {
    const key2 = presentKeys[i2];
    if (targetKeys.indexOf(key2) === -1 && !exitingChildren.has(key2)) {
      exitingChildren.set(key2, void 0);
    }
  }
  if (mode === "wait" && exitingChildren.size) {
    childrenToRender = [];
  }
  exitingChildren.forEach((component, key2) => {
    if (targetKeys.indexOf(key2) !== -1)
      return;
    const child = allChildren.get(key2);
    if (!child)
      return;
    const insertionIndex = presentKeys.indexOf(key2);
    let exitingComponent = component;
    if (!exitingComponent) {
      const onExit = () => {
        exitingChildren.delete(key2);
        const leftOverKeys = Array.from(allChildren.keys()).filter((childKey) => !targetKeys.includes(childKey));
        leftOverKeys.forEach((leftOverKey) => allChildren.delete(leftOverKey));
        presentChildren.current = filteredChildren.filter((presentChild) => {
          const presentChildKey = getChildKey(presentChild);
          return (
            // filter out the node exiting
            presentChildKey === key2 || // filter out the leftover children
            leftOverKeys.includes(presentChildKey)
          );
        });
        if (!exitingChildren.size) {
          if (isMounted.current === false)
            return;
          forceRender();
          onExitComplete && onExitComplete();
        }
      };
      exitingComponent = React4.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout, mode }, child);
      exitingChildren.set(key2, exitingComponent);
    }
    childrenToRender.splice(insertionIndex, 0, exitingComponent);
  });
  childrenToRender = childrenToRender.map((child) => {
    const key2 = child.key;
    return exitingChildren.has(key2) ? child : React4.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout, mode }, child);
  });
  if (mode === "wait" && childrenToRender.length > 1) {
    console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`);
  }
  return React4.createElement(React4.Fragment, null, exitingChildren.size ? childrenToRender : childrenToRender.map((child) => (0, import_react26.cloneElement)(child)));
};

// node_modules/framer-motion/dist/es/render/dom/motion-minimal.mjs
var m2 = createMotionProxy(createDomMotionConfig);

// node_modules/framer-motion/dist/es/components/MotionConfig/index.mjs
var React5 = __toESM(require_react(), 1);
var import_react27 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/LazyMotion/index.mjs
var React6 = __toESM(require_react(), 1);
var import_react28 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/LayoutGroup/index.mjs
var React7 = __toESM(require_react(), 1);
var import_react30 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/DeprecatedLayoutGroupContext.mjs
var import_react29 = __toESM(require_react(), 1);
var DeprecatedLayoutGroupContext = (0, import_react29.createContext)(null);

// node_modules/framer-motion/dist/es/components/Reorder/Group.mjs
var React8 = __toESM(require_react(), 1);
var import_react32 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/ReorderContext.mjs
var import_react31 = __toESM(require_react(), 1);
var ReorderContext = (0, import_react31.createContext)(null);

// node_modules/framer-motion/dist/es/components/Reorder/utils/check-reorder.mjs
function checkReorder(order, value, offset4, velocity) {
  if (!velocity)
    return order;
  const index3 = order.findIndex((item2) => item2.value === value);
  if (index3 === -1)
    return order;
  const nextOffset = velocity > 0 ? 1 : -1;
  const nextItem = order[index3 + nextOffset];
  if (!nextItem)
    return order;
  const item = order[index3];
  const nextLayout = nextItem.layout;
  const nextItemCenter = mixNumber(nextLayout.min, nextLayout.max, 0.5);
  if (nextOffset === 1 && item.layout.max + offset4 > nextItemCenter || nextOffset === -1 && item.layout.min + offset4 < nextItemCenter) {
    return moveItem(order, index3, index3 + nextOffset);
  }
  return order;
}

// node_modules/framer-motion/dist/es/components/Reorder/Group.mjs
function ReorderGroup({ children, as = "ul", axis = "y", onReorder, values, ...props }, externalRef) {
  const Component3 = useConstant(() => motion(as));
  const order = [];
  const isReordering = (0, import_react32.useRef)(false);
  invariant(Boolean(values), "Reorder.Group must be provided a values prop");
  const context = {
    axis,
    registerItem: (value, layout2) => {
      const idx = order.findIndex((entry) => value === entry.value);
      if (idx !== -1) {
        order[idx].layout = layout2[axis];
      } else {
        order.push({ value, layout: layout2[axis] });
      }
      order.sort(compareMin);
    },
    updateOrder: (item, offset4, velocity) => {
      if (isReordering.current)
        return;
      const newOrder = checkReorder(order, item, offset4, velocity);
      if (order !== newOrder) {
        isReordering.current = true;
        onReorder(newOrder.map(getValue).filter((value) => values.indexOf(value) !== -1));
      }
    }
  };
  (0, import_react32.useEffect)(() => {
    isReordering.current = false;
  });
  return React8.createElement(
    Component3,
    { ...props, ref: externalRef, ignoreStrict: true },
    React8.createElement(ReorderContext.Provider, { value: context }, children)
  );
}
var Group = (0, import_react32.forwardRef)(ReorderGroup);
function getValue(item) {
  return item.value;
}
function compareMin(a2, b2) {
  return a2.layout.min - b2.layout.min;
}

// node_modules/framer-motion/dist/es/components/Reorder/Item.mjs
var React9 = __toESM(require_react(), 1);
var import_react34 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/value/use-motion-value.mjs
var import_react33 = __toESM(require_react(), 1);
function useMotionValue(initial) {
  const value = useConstant(() => motionValue(initial));
  const { isStatic } = (0, import_react33.useContext)(MotionConfigContext);
  if (isStatic) {
    const [, setLatest] = (0, import_react33.useState)(initial);
    (0, import_react33.useEffect)(() => value.on("change", setLatest), []);
  }
  return value;
}

// node_modules/framer-motion/dist/es/utils/transform.mjs
var isCustomValueType = (v2) => {
  return v2 && typeof v2 === "object" && v2.mix;
};
var getMixer2 = (v2) => isCustomValueType(v2) ? v2.mix : void 0;
function transform(...args) {
  const useImmediate = !Array.isArray(args[0]);
  const argOffset = useImmediate ? 0 : -1;
  const inputValue = args[0 + argOffset];
  const inputRange = args[1 + argOffset];
  const outputRange = args[2 + argOffset];
  const options = args[3 + argOffset];
  const interpolator = interpolate(inputRange, outputRange, {
    mixer: getMixer2(outputRange[0]),
    ...options
  });
  return useImmediate ? interpolator(inputValue) : interpolator;
}

// node_modules/framer-motion/dist/es/value/use-combine-values.mjs
function useCombineMotionValues(values, combineValues) {
  const value = useMotionValue(combineValues());
  const updateValue = () => value.set(combineValues());
  updateValue();
  useIsomorphicLayoutEffect(() => {
    const scheduleUpdate = () => frame.update(updateValue, false, true);
    const subscriptions = values.map((v2) => v2.on("change", scheduleUpdate));
    return () => {
      subscriptions.forEach((unsubscribe) => unsubscribe());
      cancelFrame(updateValue);
    };
  });
  return value;
}

// node_modules/framer-motion/dist/es/value/use-computed.mjs
function useComputed(compute) {
  collectMotionValues.current = [];
  compute();
  const value = useCombineMotionValues(collectMotionValues.current, compute);
  collectMotionValues.current = void 0;
  return value;
}

// node_modules/framer-motion/dist/es/value/use-transform.mjs
function useTransform(input, inputRangeOrTransformer, outputRange, options) {
  if (typeof input === "function") {
    return useComputed(input);
  }
  const transformer = typeof inputRangeOrTransformer === "function" ? inputRangeOrTransformer : transform(inputRangeOrTransformer, outputRange, options);
  return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([input], ([latest]) => transformer(latest));
}
function useListTransform(values, transformer) {
  const latest = useConstant(() => []);
  return useCombineMotionValues(values, () => {
    latest.length = 0;
    const numValues = values.length;
    for (let i2 = 0; i2 < numValues; i2++) {
      latest[i2] = values[i2].get();
    }
    return transformer(latest);
  });
}

// node_modules/framer-motion/dist/es/components/Reorder/Item.mjs
function useDefaultMotionValue(value, defaultValue = 0) {
  return isMotionValue(value) ? value : useMotionValue(defaultValue);
}
function ReorderItem({ children, style = {}, value, as = "li", onDrag, layout: layout2 = true, ...props }, externalRef) {
  const Component3 = useConstant(() => motion(as));
  const context = (0, import_react34.useContext)(ReorderContext);
  const point = {
    x: useDefaultMotionValue(style.x),
    y: useDefaultMotionValue(style.y)
  };
  const zIndex = useTransform([point.x, point.y], ([latestX, latestY]) => latestX || latestY ? 1 : "unset");
  invariant(Boolean(context), "Reorder.Item must be a child of Reorder.Group");
  const { axis, registerItem, updateOrder } = context;
  return React9.createElement(Component3, { drag: axis, ...props, dragSnapToOrigin: true, style: { ...style, x: point.x, y: point.y, zIndex }, layout: layout2, onDrag: (event, gesturePoint) => {
    const { velocity } = gesturePoint;
    velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);
    onDrag && onDrag(event, gesturePoint);
  }, onLayoutMeasure: (measured) => registerItem(value, measured), ref: externalRef, ignoreStrict: true }, children);
}
var Item = (0, import_react34.forwardRef)(ReorderItem);

// node_modules/framer-motion/dist/es/render/dom/features-animation.mjs
var domAnimation = {
  renderer: createDomVisualElement,
  ...animations,
  ...gestureAnimations
};

// node_modules/framer-motion/dist/es/render/dom/features-max.mjs
var domMax = {
  ...domAnimation,
  ...drag,
  ...layout
};

// node_modules/framer-motion/dist/es/value/use-spring.mjs
var import_react35 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-motion-value-event.mjs
var import_react36 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/value/use-scroll.mjs
var import_react37 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/dom/utils/resolve-element.mjs
function resolveElements(elements, scope, selectorCache) {
  var _a;
  if (typeof elements === "string") {
    let root = document;
    if (scope) {
      invariant(Boolean(scope.current), "Scope provided, but no element detected.");
      root = scope.current;
    }
    if (selectorCache) {
      (_a = selectorCache[elements]) !== null && _a !== void 0 ? _a : selectorCache[elements] = root.querySelectorAll(elements);
      elements = selectorCache[elements];
    } else {
      elements = root.querySelectorAll(elements);
    }
  } else if (elements instanceof Element) {
    elements = [elements];
  }
  return Array.from(elements || []);
}

// node_modules/framer-motion/dist/es/utils/use-animation-frame.mjs
var import_react38 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/reduced-motion/use-reduced-motion.mjs
var import_react39 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/reduced-motion/use-reduced-motion-config.mjs
var import_react40 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/dom/scroll/observe.mjs
function observeTimeline(update, timeline) {
  let prevProgress;
  const onFrame = () => {
    const { currentTime } = timeline;
    const percentage = currentTime === null ? 0 : currentTime.value;
    const progress2 = percentage / 100;
    if (prevProgress !== progress2) {
      update(progress2);
    }
    prevProgress = progress2;
  };
  frame.update(onFrame, true);
  return () => cancelFrame(onFrame);
}

// node_modules/framer-motion/dist/es/render/dom/scroll/supports.mjs
var supportsScrollTimeline = memo(() => window.ScrollTimeline !== void 0);

// node_modules/framer-motion/dist/es/animation/GroupPlaybackControls.mjs
var GroupPlaybackControls = class {
  constructor(animations2) {
    this.animations = animations2.filter(Boolean);
  }
  then(onResolve, onReject) {
    return Promise.all(this.animations).then(onResolve).catch(onReject);
  }
  /**
   * TODO: Filter out cancelled or stopped animations before returning
   */
  getAll(propName) {
    return this.animations[0][propName];
  }
  setAll(propName, newValue) {
    for (let i2 = 0; i2 < this.animations.length; i2++) {
      this.animations[i2][propName] = newValue;
    }
  }
  attachTimeline(timeline) {
    const cancelAll = this.animations.map((animation2) => {
      if (supportsScrollTimeline() && animation2.attachTimeline) {
        animation2.attachTimeline(timeline);
      } else {
        animation2.pause();
        return observeTimeline((progress2) => {
          animation2.time = animation2.duration * progress2;
        }, timeline);
      }
    });
    return () => {
      cancelAll.forEach((cancelTimeline, i2) => {
        if (cancelTimeline)
          cancelTimeline();
        this.animations[i2].stop();
      });
    };
  }
  get time() {
    return this.getAll("time");
  }
  set time(time3) {
    this.setAll("time", time3);
  }
  get speed() {
    return this.getAll("speed");
  }
  set speed(speed) {
    this.setAll("speed", speed);
  }
  get duration() {
    let max2 = 0;
    for (let i2 = 0; i2 < this.animations.length; i2++) {
      max2 = Math.max(max2, this.animations[i2].duration);
    }
    return max2;
  }
  runAll(methodName) {
    this.animations.forEach((controls) => controls[methodName]());
  }
  play() {
    this.runAll("play");
  }
  pause() {
    this.runAll("pause");
  }
  stop() {
    this.runAll("stop");
  }
  cancel() {
    this.runAll("cancel");
  }
  complete() {
    this.runAll("complete");
  }
};

// node_modules/framer-motion/dist/es/animation/utils/is-dom-keyframes.mjs
function isDOMKeyframes(keyframes2) {
  return typeof keyframes2 === "object" && !Array.isArray(keyframes2);
}

// node_modules/framer-motion/dist/es/animation/utils/create-visual-element.mjs
function createVisualElement(element) {
  const options = {
    presenceContext: null,
    props: {},
    visualState: {
      renderState: {
        transform: {},
        transformOrigin: {},
        style: {},
        vars: {},
        attrs: {}
      },
      latestValues: {}
    }
  };
  const node2 = isSVGElement(element) ? new SVGVisualElement(options, {
    enableHardwareAcceleration: false
  }) : new HTMLVisualElement(options, {
    enableHardwareAcceleration: true
  });
  node2.mount(element);
  visualElementStore.set(element, node2);
}

// node_modules/framer-motion/dist/es/easing/utils/create-generator-easing.mjs
function createGeneratorEasing(options, scale2 = 100) {
  const generator = spring({ keyframes: [0, scale2], ...options });
  const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);
  return {
    type: "keyframes",
    ease: (progress2) => generator.next(duration * progress2).value / scale2,
    duration: millisecondsToSeconds(duration)
  };
}

// node_modules/framer-motion/dist/es/animation/sequence/utils/calc-time.mjs
function calcNextTime(current, next2, prev2, labels) {
  var _a;
  if (typeof next2 === "number") {
    return next2;
  } else if (next2.startsWith("-") || next2.startsWith("+")) {
    return Math.max(0, current + parseFloat(next2));
  } else if (next2 === "<") {
    return prev2;
  } else {
    return (_a = labels.get(next2)) !== null && _a !== void 0 ? _a : current;
  }
}

// node_modules/framer-motion/dist/es/utils/wrap.mjs
var wrap = (min2, max2, v2) => {
  const rangeSize = max2 - min2;
  return ((v2 - min2) % rangeSize + rangeSize) % rangeSize + min2;
};

// node_modules/framer-motion/dist/es/easing/utils/get-easing-for-segment.mjs
function getEasingForSegment(easing, i2) {
  return isEasingArray(easing) ? easing[wrap(0, easing.length, i2)] : easing;
}

// node_modules/framer-motion/dist/es/animation/sequence/utils/edit.mjs
function eraseKeyframes(sequence, startTime, endTime) {
  for (let i2 = 0; i2 < sequence.length; i2++) {
    const keyframe2 = sequence[i2];
    if (keyframe2.at > startTime && keyframe2.at < endTime) {
      removeItem(sequence, keyframe2);
      i2--;
    }
  }
}
function addKeyframes(sequence, keyframes2, easing, offset4, startTime, endTime) {
  eraseKeyframes(sequence, startTime, endTime);
  for (let i2 = 0; i2 < keyframes2.length; i2++) {
    sequence.push({
      value: keyframes2[i2],
      at: mixNumber(startTime, endTime, offset4[i2]),
      easing: getEasingForSegment(easing, i2)
    });
  }
}

// node_modules/framer-motion/dist/es/animation/sequence/utils/sort.mjs
function compareByTime(a2, b2) {
  if (a2.at === b2.at) {
    if (a2.value === null)
      return 1;
    if (b2.value === null)
      return -1;
    return 0;
  } else {
    return a2.at - b2.at;
  }
}

// node_modules/framer-motion/dist/es/animation/sequence/create.mjs
var defaultSegmentEasing = "easeInOut";
function createAnimationsFromSequence(sequence, { defaultTransition = {}, ...sequenceTransition } = {}, scope) {
  const defaultDuration = defaultTransition.duration || 0.3;
  const animationDefinitions = /* @__PURE__ */ new Map();
  const sequences = /* @__PURE__ */ new Map();
  const elementCache = {};
  const timeLabels = /* @__PURE__ */ new Map();
  let prevTime = 0;
  let currentTime = 0;
  let totalDuration = 0;
  for (let i2 = 0; i2 < sequence.length; i2++) {
    const segment = sequence[i2];
    if (typeof segment === "string") {
      timeLabels.set(segment, currentTime);
      continue;
    } else if (!Array.isArray(segment)) {
      timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));
      continue;
    }
    let [subject, keyframes2, transition = {}] = segment;
    if (transition.at !== void 0) {
      currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);
    }
    let maxDuration3 = 0;
    const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numElements = 0) => {
      const valueKeyframesAsList = keyframesAsList(valueKeyframes);
      const { delay: delay2 = 0, times = defaultOffset(valueKeyframesAsList), type = "keyframes", ...remainingTransition } = valueTransition;
      let { ease: ease2 = defaultTransition.ease || "easeOut", duration } = valueTransition;
      const calculatedDelay = typeof delay2 === "function" ? delay2(elementIndex, numElements) : delay2;
      const numKeyframes = valueKeyframesAsList.length;
      if (numKeyframes <= 2 && type === "spring") {
        let absoluteDelta = 100;
        if (numKeyframes === 2 && isNumberKeyframesArray(valueKeyframesAsList)) {
          const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];
          absoluteDelta = Math.abs(delta);
        }
        const springTransition = { ...remainingTransition };
        if (duration !== void 0) {
          springTransition.duration = secondsToMilliseconds(duration);
        }
        const springEasing = createGeneratorEasing(springTransition, absoluteDelta);
        ease2 = springEasing.ease;
        duration = springEasing.duration;
      }
      duration !== null && duration !== void 0 ? duration : duration = defaultDuration;
      const startTime = currentTime + calculatedDelay;
      const targetTime = startTime + duration;
      if (times.length === 1 && times[0] === 0) {
        times[1] = 1;
      }
      const remainder = times.length - valueKeyframesAsList.length;
      remainder > 0 && fillOffset(times, remainder);
      valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null);
      addKeyframes(valueSequence, valueKeyframesAsList, ease2, times, startTime, targetTime);
      maxDuration3 = Math.max(calculatedDelay + duration, maxDuration3);
      totalDuration = Math.max(targetTime, totalDuration);
    };
    if (isMotionValue(subject)) {
      const subjectSequence = getSubjectSequence(subject, sequences);
      resolveValueSequence(keyframes2, transition, getValueSequence("default", subjectSequence));
    } else {
      const elements = resolveElements(subject, scope, elementCache);
      const numElements = elements.length;
      for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {
        keyframes2 = keyframes2;
        transition = transition;
        const element = elements[elementIndex];
        const subjectSequence = getSubjectSequence(element, sequences);
        for (const key2 in keyframes2) {
          resolveValueSequence(keyframes2[key2], getValueTransition2(transition, key2), getValueSequence(key2, subjectSequence), elementIndex, numElements);
        }
      }
    }
    prevTime = currentTime;
    currentTime += maxDuration3;
  }
  sequences.forEach((valueSequences, element) => {
    for (const key2 in valueSequences) {
      const valueSequence = valueSequences[key2];
      valueSequence.sort(compareByTime);
      const keyframes2 = [];
      const valueOffset = [];
      const valueEasing = [];
      for (let i2 = 0; i2 < valueSequence.length; i2++) {
        const { at: at2, value, easing } = valueSequence[i2];
        keyframes2.push(value);
        valueOffset.push(progress(0, totalDuration, at2));
        valueEasing.push(easing || "easeOut");
      }
      if (valueOffset[0] !== 0) {
        valueOffset.unshift(0);
        keyframes2.unshift(keyframes2[0]);
        valueEasing.unshift(defaultSegmentEasing);
      }
      if (valueOffset[valueOffset.length - 1] !== 1) {
        valueOffset.push(1);
        keyframes2.push(null);
      }
      if (!animationDefinitions.has(element)) {
        animationDefinitions.set(element, {
          keyframes: {},
          transition: {}
        });
      }
      const definition = animationDefinitions.get(element);
      definition.keyframes[key2] = keyframes2;
      definition.transition[key2] = {
        ...defaultTransition,
        duration: totalDuration,
        ease: valueEasing,
        times: valueOffset,
        ...sequenceTransition
      };
    }
  });
  return animationDefinitions;
}
function getSubjectSequence(subject, sequences) {
  !sequences.has(subject) && sequences.set(subject, {});
  return sequences.get(subject);
}
function getValueSequence(name, sequences) {
  if (!sequences[name])
    sequences[name] = [];
  return sequences[name];
}
function keyframesAsList(keyframes2) {
  return Array.isArray(keyframes2) ? keyframes2 : [keyframes2];
}
function getValueTransition2(transition, key2) {
  return transition[key2] ? { ...transition, ...transition[key2] } : { ...transition };
}
var isNumber = (keyframe2) => typeof keyframe2 === "number";
var isNumberKeyframesArray = (keyframes2) => keyframes2.every(isNumber);

// node_modules/framer-motion/dist/es/animation/animate.mjs
function animateElements(elementOrSelector, keyframes2, options, scope) {
  const elements = resolveElements(elementOrSelector, scope);
  const numElements = elements.length;
  invariant(Boolean(numElements), "No valid element provided.");
  const animations2 = [];
  for (let i2 = 0; i2 < numElements; i2++) {
    const element = elements[i2];
    if (!visualElementStore.has(element)) {
      createVisualElement(element);
    }
    const visualElement = visualElementStore.get(element);
    const transition = { ...options };
    if (typeof transition.delay === "function") {
      transition.delay = transition.delay(i2, numElements);
    }
    animations2.push(...animateTarget(visualElement, { ...keyframes2, transition }, {}));
  }
  return new GroupPlaybackControls(animations2);
}
var isSequence = (value) => Array.isArray(value) && Array.isArray(value[0]);
function animateSequence(sequence, options, scope) {
  const animations2 = [];
  const animationDefinitions = createAnimationsFromSequence(sequence, options, scope);
  animationDefinitions.forEach(({ keyframes: keyframes2, transition }, subject) => {
    let animation2;
    if (isMotionValue(subject)) {
      animation2 = animateSingleValue(subject, keyframes2.default, transition.default);
    } else {
      animation2 = animateElements(subject, keyframes2, transition);
    }
    animations2.push(animation2);
  });
  return new GroupPlaybackControls(animations2);
}
var createScopedAnimate = (scope) => {
  function scopedAnimate(valueOrElementOrSequence, keyframes2, options) {
    let animation2;
    if (isSequence(valueOrElementOrSequence)) {
      animation2 = animateSequence(valueOrElementOrSequence, keyframes2, scope);
    } else if (isDOMKeyframes(keyframes2)) {
      animation2 = animateElements(valueOrElementOrSequence, keyframes2, options, scope);
    } else {
      animation2 = animateSingleValue(valueOrElementOrSequence, keyframes2, options);
    }
    if (scope) {
      scope.animations.push(animation2);
    }
    return animation2;
  }
  return scopedAnimate;
};
var animate = createScopedAnimate();

// node_modules/framer-motion/dist/es/utils/use-cycle.mjs
var import_react41 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-in-view.mjs
var import_react42 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/events/use-dom-event.mjs
var import_react43 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-instant-transition.mjs
var import_react44 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/projection/use-reset-projection.mjs
var React10 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/animation/hooks/use-animated-state.mjs
var import_react45 = __toESM(require_react(), 1);
var createObject = () => ({});
var useVisualState = makeUseVisualState({
  scrapeMotionValuesFromProps: createObject,
  createRenderState: createObject
});

// node_modules/framer-motion/dist/es/value/use-inverted-scale.mjs
var import_react46 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/AnimateSharedLayout.mjs
var React11 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/frameloop/index-legacy.mjs
var cancelSync = stepsOrder.reduce((acc, key2) => {
  acc[key2] = (process3) => cancelFrame(process3);
  return acc;
}, {});

// node_modules/@sanity/ui/dist/index.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react49 = __toESM(require_react(), 1);
var import_react_is = __toESM(require_react_is(), 1);
var import_react_refractor = __toESM(require_Refractor(), 1);

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min = Math.min;
var max = Math.max;
var round2 = Math.round;
var floor = Math.floor;
var createCoords = (v2) => ({
  x: v2,
  y: v2
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp3(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length2 = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length2] > rects.floating[length2]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x: x2,
    y: y2,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y2,
    left: x2,
    right: x2 + width,
    bottom: y2 + height,
    x: x2,
    y: y2
  };
}

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware: middleware2 = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware2.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x2,
    y: y2
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i2 = 0; i2 < validMiddleware.length; i2++) {
    const {
      name,
      fn
    } = validMiddleware[i2];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x: x2,
      y: y2,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x2 = nextX != null ? nextX : x2;
    y2 = nextY != null ? nextY : y2;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x: x2,
          y: y2
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i2 = -1;
    }
  }
  return {
    x: x2,
    y: y2,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x: x2,
    y: y2,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x: x2,
    y: y2,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x: x2,
      y: y2,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x: x2,
      y: y2
    };
    const axis = getAlignmentAxis(placement);
    const length2 = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length2] + rects.reference[axis] - coords[axis] - rects.floating[length2];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length2];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length2] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length2] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length2] / 2 + centerToReference;
    const offset4 = clamp3(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset4 && rects.reference[length2] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length2] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset4,
        centerOffset: center - offset4 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const initialSideAxis = getSideAxis(initialPlacement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a2, b2) => a2.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$filter2;
              const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                if (hasFallbackAxisSideDirection) {
                  const currentSideAxis = getSideAxis(d.placement);
                  return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                  // reading directions favoring greater width.
                  currentSideAxis === "y";
                }
                return true;
              }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a2, b2) => a2[1] - b2[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
var hide = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "hide",
    options,
    async fn(state) {
      const {
        rects
      } = state;
      const {
        strategy = "referenceHidden",
        ...detectOverflowOptions
      } = evaluate(options, state);
      switch (strategy) {
        case "referenceHidden": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            elementContext: "reference"
          });
          const offsets = getSideOffsets(overflow, rects.reference);
          return {
            data: {
              referenceHiddenOffsets: offsets,
              referenceHidden: isAnySideFullyClipped(offsets)
            }
          };
        }
        case "escaped": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            altBoundary: true
          });
          const offsets = getSideOffsets(overflow, rects.floating);
          return {
            data: {
              escapedOffsets: offsets,
              escaped: isAnySideFullyClipped(offsets)
            }
          };
        }
        default: {
          return {};
        }
      }
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: rawValue.mainAxis || 0,
    crossAxis: rawValue.crossAxis || 0,
    alignmentAxis: rawValue.alignmentAxis
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x: x2,
        y: y2,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x2 + diffCoords.x,
        y: y2 + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x: x2,
        y: y2,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x3,
              y: y3
            } = _ref;
            return {
              x: x3,
              y: y3
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x: x2,
        y: y2
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp3(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp3(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x2,
          y: limitedCoords.y - y2,
          enabled: {
            [mainAxis]: checkMainAxis,
            [crossAxis]: checkCrossAxis
          }
        }
      };
    }
  };
};

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node2) {
  if (isNode(node2)) {
    return (node2.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node2) {
  var _node$ownerDocument;
  return (node2 == null || (_node$ownerDocument = node2.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node2) {
  var _ref;
  return (_ref = (isNode(node2) ? node2.ownerDocument : node2.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle3(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector) => {
    try {
      return element.matches(selector);
    } catch (e) {
      return false;
    }
  });
}
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css = isElement(elementOrCss) ? getComputedStyle3(elementOrCss) : elementOrCss;
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node2) {
  return ["html", "body", "#document"].includes(getNodeName(node2));
}
function getComputedStyle3(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node2) {
  if (getNodeName(node2) === "html") {
    return node2;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node2.assignedSlot || // DOM Element detected.
    node2.parentNode || // ShadowRoot detected.
    isShadowRoot(node2) && node2.host || // Fallback.
    getDocumentElement(node2)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node2) {
  const parentNode = getParentNode(node2);
  if (isLastTraversableNode(parentNode)) {
    return node2.ownerDocument ? node2.ownerDocument.body : node2.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node2, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node2);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node2.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle3(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round2(width) !== offsetWidth || round2(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $: $2
  } = getCssDimensions(domElement);
  let x2 = ($2 ? round2(rect.width) : rect.width) / width;
  let y2 = ($2 ? round2(rect.height) : rect.height) / height;
  if (!x2 || !Number.isFinite(x2)) {
    x2 = 1;
  }
  if (!y2 || !Number.isFinite(y2)) {
    y2 = 1;
  }
  return {
    x: x2,
    y: y2
  };
}
var noOffsets = createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale2 = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale2 = getScale(offsetParent);
      }
    } else {
      scale2 = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x2 = (clientRect.left + visualOffsets.x) / scale2.x;
  let y2 = (clientRect.top + visualOffsets.y) / scale2.y;
  let width = clientRect.width / scale2.x;
  let height = clientRect.height / scale2.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle3(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x2 *= iframeScale.x;
      y2 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x2 += left;
      y2 += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x2,
    y: y2
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll2 = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale2 = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll2 = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale2 = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale2.x,
    height: rect.height * scale2.y,
    x: rect.x * scale2.x - scroll2.scrollLeft * scale2.x + offsets.x,
    y: rect.y * scale2.y - scroll2.scrollTop * scale2.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element, rect) {
  const leftScroll = getNodeScroll(element).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
  }
  return rect.left + leftScroll;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll2 = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x2 = -scroll2.scrollLeft + getWindowScrollBarX(element);
  const y2 = -scroll2.scrollTop;
  if (getComputedStyle3(body).direction === "rtl") {
    x2 += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x2 = 0;
  let y2 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x2 = visualViewport.offsetLeft;
      y2 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale2 = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale2.x;
  const height = element.clientHeight * scale2.y;
  const x2 = left * scale2.x;
  const y2 = top * scale2.y;
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle3(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache4) {
  const cachedResult = cache4.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle3(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle3(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache4.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll2 = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll2 = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  let htmlX = 0;
  let htmlY = 0;
  if (documentElement && !isOffsetParentAnElement && !isFixed) {
    const htmlRect = documentElement.getBoundingClientRect();
    htmlY = htmlRect.top + scroll2.scrollTop;
    htmlX = htmlRect.left + scroll2.scrollLeft - // RTL <body> scrollbar.
    getWindowScrollBarX(documentElement, htmlRect);
  }
  const x2 = rect.left + scroll2.scrollLeft - offsets.x - htmlX;
  const y2 = rect.top + scroll2.scrollTop - offsets.y - htmlY;
  return {
    x: x2,
    y: y2,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle3(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle3(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  let rawOffsetParent = element.offsetParent;
  if (getDocumentElement(element) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
var getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle3(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var detectOverflow2 = detectOverflow;
var offset2 = offset;
var shift2 = shift;
var flip2 = flip;
var hide2 = hide;
var arrow2 = arrow;
var computePosition2 = (reference, floating, options) => {
  const cache4 = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache4
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
var React12 = __toESM(require_react(), 1);
var import_react47 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
var index2 = typeof document !== "undefined" ? import_react47.useLayoutEffect : import_react47.useEffect;
function deepEqual(a2, b2) {
  if (a2 === b2) {
    return true;
  }
  if (typeof a2 !== typeof b2) {
    return false;
  }
  if (typeof a2 === "function" && a2.toString() === b2.toString()) {
    return true;
  }
  let length2;
  let i2;
  let keys;
  if (a2 && b2 && typeof a2 === "object") {
    if (Array.isArray(a2)) {
      length2 = a2.length;
      if (length2 !== b2.length)
        return false;
      for (i2 = length2; i2-- !== 0; ) {
        if (!deepEqual(a2[i2], b2[i2])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a2);
    length2 = keys.length;
    if (length2 !== Object.keys(b2).length) {
      return false;
    }
    for (i2 = length2; i2-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b2, keys[i2])) {
        return false;
      }
    }
    for (i2 = length2; i2-- !== 0; ) {
      const key2 = keys[i2];
      if (key2 === "_owner" && a2.$$typeof) {
        continue;
      }
      if (!deepEqual(a2[key2], b2[key2])) {
        return false;
      }
    }
    return true;
  }
  return a2 !== a2 && b2 !== b2;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef(value) {
  const ref = React12.useRef(value);
  index2(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware: middleware2 = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform: transform2 = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React12.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React12.useState(middleware2);
  if (!deepEqual(latestMiddleware, middleware2)) {
    setLatestMiddleware(middleware2);
  }
  const [_reference, _setReference] = React12.useState(null);
  const [_floating, _setFloating] = React12.useState(null);
  const setReference = React12.useCallback((node2) => {
    if (node2 !== referenceRef.current) {
      referenceRef.current = node2;
      _setReference(node2);
    }
  }, []);
  const setFloating = React12.useCallback((node2) => {
    if (node2 !== floatingRef.current) {
      floatingRef.current = node2;
      _setFloating(node2);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React12.useRef(null);
  const floatingRef = React12.useRef(null);
  const dataRef = React12.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const openRef = useLatestRef(open);
  const update = React12.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        // The floating element's position may be recomputed while it's closed
        // but still mounted (such as when transitioning out). To ensure
        // `isPositioned` will be `false` initially on the next open, avoid
        // setting it to `true` when `open === false` (must be specified).
        isPositioned: openRef.current !== false
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef, openRef]);
  index2(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React12.useRef(false);
  index2(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index2(() => {
    if (referenceEl)
      referenceRef.current = referenceEl;
    if (floatingEl)
      floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      }
      update();
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = React12.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React12.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React12.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x2 = roundByDPR(elements.floating, data.x);
    const y2 = roundByDPR(elements.floating, data.y);
    if (transform2) {
      return {
        ...initialStyles,
        transform: "translate(" + x2 + "px, " + y2 + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x2,
      top: y2
    };
  }, [strategy, transform2, elements.floating, data.x, data.y]);
  return React12.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}
var arrow$1 = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === "function" ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow2({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      }
      if (element) {
        return arrow2({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};
var offset3 = (options, deps) => ({
  ...offset2(options),
  options: [options, deps]
});
var shift3 = (options, deps) => ({
  ...shift2(options),
  options: [options, deps]
});
var flip3 = (options, deps) => ({
  ...flip2(options),
  options: [options, deps]
});
var hide3 = (options, deps) => ({
  ...hide2(options),
  options: [options, deps]
});
var arrow3 = (options, deps) => ({
  ...arrow$1(options),
  options: [options, deps]
});

// node_modules/@sanity/ui/dist/index.mjs
var import_react_dom2 = __toESM(require_react_dom(), 1);

// node_modules/use-effect-event/dist/index.js
var import_react48 = __toESM(require_react());
function useEffectEvent(fn) {
  const ref = (0, import_react48.useRef)(null);
  return (0, import_react48.useInsertionEffect)(() => {
    ref.current = fn;
  }, [fn]), (0, import_react48.useCallback)((...args) => {
    const latestFn = ref.current;
    return latestFn(...args);
  }, []);
}

// node_modules/@sanity/ui/dist/index.mjs
var rgba3 = rgba;
var studioTheme = buildTheme();
var EMPTY_ARRAY = [];
var EMPTY_RECORD = {};
var POPOVER_MOTION_CONTENT_OPACITY_PROPERTY = "--motion-content-opacity";
var POPOVER_MOTION_PROPS = {
  initial: {
    opacity: 0.5,
    [POPOVER_MOTION_CONTENT_OPACITY_PROPERTY]: 0,
    scale: 0.97,
    willChange: "transform"
  },
  animate: {
    opacity: [null, 1, 1],
    [POPOVER_MOTION_CONTENT_OPACITY_PROPERTY]: [null, null, 1],
    scale: 1
  },
  exit: {
    // @ts-expect-error -- passing null a second time is valid: https://github.com/framer/motion/blob/b9ce4c42914c3916ea523609c5b032dfc72718bb/packages/framer-motion/src/animation/utils/keyframes.ts#L34C22-L34C22
    opacity: [null, null, 0],
    [POPOVER_MOTION_CONTENT_OPACITY_PROPERTY]: [null, 0, 0],
    scale: 0.97
  },
  transition: { duration: 0.4, type: "spring" }
};
function _fillCSSObject(keys, value) {
  return keys.reduce((style, key2) => (style[key2] = value, style), {});
}
function rem(pixelValue) {
  return pixelValue === 0 ? 0 : `${pixelValue / 16}rem`;
}
function _responsive(media, values, callback) {
  return ((values == null ? void 0 : values.map(callback)) || []).map((statement, mediaIndex) => mediaIndex === 0 ? statement : { [`@media screen and (min-width: ${media[mediaIndex - 1]}px)`]: statement });
}
function _getArrayProp(val, defaultVal) {
  return val === void 0 ? defaultVal || EMPTY_ARRAY : Array.isArray(val) ? val : [val];
}
function _getResponsiveSpace(theme, props, spaceIndexes = EMPTY_ARRAY) {
  if (!Array.isArray(spaceIndexes))
    throw new Error("the property must be array of numbers");
  if (spaceIndexes.length === 0)
    return null;
  const { media, space } = getTheme_v2(theme);
  return _responsive(
    media,
    spaceIndexes,
    (spaceIndex) => _fillCSSObject(props, rem(space[spaceIndex]))
  );
}
function responsiveFont(fontKey, props) {
  const { $size, $weight } = props, { font, media } = getTheme_v2(props.theme), { family, sizes, weights } = font[fontKey], fontWeight = $weight && weights[$weight] || weights.regular, defaultSize = sizes[2], base = {
    position: "relative",
    fontFamily: family,
    fontWeight,
    padding: "1px 0",
    margin: 0,
    "&:before": {
      content: '""',
      display: "block",
      height: 0
    },
    "&:after": {
      content: '""',
      display: "block",
      height: 0
    },
    "& > code, & > span": {
      display: "block"
    },
    "&:not([hidden])": {
      display: "block"
    }
  };
  if (!$size)
    return responsiveFont.warned || (console.warn("No size specified for responsive font", { fontKey, $size, props, base }), responsiveFont.warned = true), [base];
  const resp = _responsive(media, $size, (sizeIndex) => fontSize(sizes[sizeIndex] || defaultSize));
  return [base, ...resp];
}
function fontSize(size22) {
  const { ascenderHeight, descenderHeight, fontSize: fontSize2, iconSize, letterSpacing, lineHeight } = size22, negHeight = ascenderHeight + descenderHeight, capHeight = lineHeight - negHeight, iconOffset = (capHeight - iconSize) / 2, customIconSize = Math.floor(fontSize2 * 1.125 / 2) * 2 + 1, customIconOffset = (capHeight - customIconSize) / 2;
  return {
    fontSize: rem(fontSize2),
    lineHeight: `calc(${lineHeight} / ${fontSize2})`,
    letterSpacing: rem(letterSpacing),
    transform: `translateY(${rem(descenderHeight)})`,
    "&:before": {
      marginTop: `calc(${rem(0 - negHeight)} - 1px)`
    },
    "&:after": {
      marginBottom: "-1px"
    },
    "& svg:not([data-sanity-icon])": {
      fontSize: `calc(${customIconSize} / 16 * 1rem)`,
      margin: rem(customIconOffset)
    },
    "& [data-sanity-icon]": {
      fontSize: `calc(${iconSize} / 16 * 1rem)`,
      margin: rem(iconOffset)
    }
  };
}
function responsiveCodeFontStyle(props) {
  return responsiveFont("code", props);
}
function responsiveHeadingFont(props) {
  return responsiveFont("heading", props);
}
function responsiveLabelFont(props) {
  return responsiveFont("label", props);
}
function responsiveTextAlignStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$align, (textAlign) => ({ textAlign }));
}
function responsiveTextFont(props) {
  return responsiveFont("text", props);
}
function useArrayProp(val, defaultVal) {
  const __perf_hash__ = (0, import_react49.useMemo)(() => JSON.stringify(val ?? defaultVal), [defaultVal, val]);
  return (0, import_react49.useMemo)(
    () => _getArrayProp(val, defaultVal),
    // Improve performance: Keep object identify for a given hash of the value
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [__perf_hash__]
  );
}
function useClickOutsideEvent(listener, elementsArg = () => EMPTY_ARRAY, boundaryElement) {
  const onEvent = useEffectEvent((evt) => {
    if (!listener)
      return;
    const target = evt.target;
    if (!(target instanceof Node))
      return;
    const resolvedBoundaryElement = boundaryElement == null ? void 0 : boundaryElement();
    if (resolvedBoundaryElement && !resolvedBoundaryElement.contains(target))
      return;
    const elements = elementsArg().flat();
    for (const el of elements)
      if (el && (target === el || el.contains(target)))
        return;
    listener(evt);
  }), hasListener = !!listener;
  (0, import_react49.useEffect)(() => {
    if (!hasListener)
      return;
    const handleEvent = (evt) => onEvent(evt);
    return document.addEventListener("mousedown", handleEvent), () => {
      document.removeEventListener("mousedown", handleEvent);
    };
  }, [hasListener, onEvent]), (0, import_react49.useDebugValue)(listener ? "MouseDown On" : "MouseDown Off");
}
function useCustomValidity(ref, customValidity) {
  (0, import_react49.useEffect)(() => {
    var _a;
    (_a = ref.current) == null ? void 0 : _a.setCustomValidity(customValidity || "");
  }, [customValidity, ref]);
}
var resizeObservers = [];
var hasActiveObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.activeTargets.length > 0;
  });
};
var hasSkippedObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.skippedTargets.length > 0;
  });
};
var msg = "ResizeObserver loop completed with undelivered notifications.";
var deliverResizeLoopError = function() {
  var event;
  typeof ErrorEvent == "function" ? event = new ErrorEvent("error", {
    message: msg
  }) : (event = document.createEvent("Event"), event.initEvent("error", false, false), event.message = msg), window.dispatchEvent(event);
};
var ResizeObserverBoxOptions;
(function(ResizeObserverBoxOptions2) {
  ResizeObserverBoxOptions2.BORDER_BOX = "border-box", ResizeObserverBoxOptions2.CONTENT_BOX = "content-box", ResizeObserverBoxOptions2.DEVICE_PIXEL_CONTENT_BOX = "device-pixel-content-box";
})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));
var freeze = function(obj) {
  return Object.freeze(obj);
};
var ResizeObserverSize = function() {
  function ResizeObserverSize2(inlineSize, blockSize) {
    this.inlineSize = inlineSize, this.blockSize = blockSize, freeze(this);
  }
  return ResizeObserverSize2;
}();
var DOMRectReadOnly = function() {
  function DOMRectReadOnly2(x2, y2, width, height) {
    return this.x = x2, this.y = y2, this.width = width, this.height = height, this.top = this.y, this.left = this.x, this.bottom = this.top + this.height, this.right = this.left + this.width, freeze(this);
  }
  return DOMRectReadOnly2.prototype.toJSON = function() {
    var _a = this, x2 = _a.x, y2 = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;
    return { x: x2, y: y2, top, right, bottom, left, width, height };
  }, DOMRectReadOnly2.fromRect = function(rectangle) {
    return new DOMRectReadOnly2(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
  }, DOMRectReadOnly2;
}();
var isSVG = function(target) {
  return target instanceof SVGElement && "getBBox" in target;
};
var isHidden = function(target) {
  if (isSVG(target)) {
    var _a = target.getBBox(), width = _a.width, height = _a.height;
    return !width && !height;
  }
  var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
  return !(offsetWidth || offsetHeight || target.getClientRects().length);
};
var isElement2 = function(obj) {
  var _a;
  if (obj instanceof Element)
    return true;
  var scope = (_a = obj == null ? void 0 : obj.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView;
  return !!(scope && obj instanceof scope.Element);
};
var isReplacedElement = function(target) {
  switch (target.tagName) {
    case "INPUT":
      if (target.type !== "image")
        break;
    case "VIDEO":
    case "AUDIO":
    case "EMBED":
    case "OBJECT":
    case "CANVAS":
    case "IFRAME":
    case "IMG":
      return true;
  }
  return false;
};
var global$1 = typeof window < "u" ? window : {};
var cache3 = /* @__PURE__ */ new WeakMap();
var scrollRegexp = /auto|scroll/;
var verticalRegexp = /^tb|vertical/;
var IE = /msie|trident/i.test(global$1.navigator && global$1.navigator.userAgent);
var parseDimension = function(pixel) {
  return parseFloat(pixel || "0");
};
var size$1 = function(inlineSize, blockSize, switchSizes) {
  return inlineSize === void 0 && (inlineSize = 0), blockSize === void 0 && (blockSize = 0), switchSizes === void 0 && (switchSizes = false), new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
};
var zeroBoxes = freeze({
  devicePixelContentBoxSize: size$1(),
  borderBoxSize: size$1(),
  contentBoxSize: size$1(),
  contentRect: new DOMRectReadOnly(0, 0, 0, 0)
});
var calculateBoxSizes = function(target, forceRecalculation) {
  if (forceRecalculation === void 0 && (forceRecalculation = false), cache3.has(target) && !forceRecalculation)
    return cache3.get(target);
  if (isHidden(target))
    return cache3.set(target, zeroBoxes), zeroBoxes;
  var cs = getComputedStyle(target), svg = isSVG(target) && target.ownerSVGElement && target.getBBox(), removePadding = !IE && cs.boxSizing === "border-box", switchSizes = verticalRegexp.test(cs.writingMode || ""), canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || ""), canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || ""), paddingTop = svg ? 0 : parseDimension(cs.paddingTop), paddingRight = svg ? 0 : parseDimension(cs.paddingRight), paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom), paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft), borderTop2 = svg ? 0 : parseDimension(cs.borderTopWidth), borderRight2 = svg ? 0 : parseDimension(cs.borderRightWidth), borderBottom2 = svg ? 0 : parseDimension(cs.borderBottomWidth), borderLeft2 = svg ? 0 : parseDimension(cs.borderLeftWidth), horizontalPadding = paddingLeft + paddingRight, verticalPadding = paddingTop + paddingBottom, horizontalBorderArea = borderLeft2 + borderRight2, verticalBorderArea = borderTop2 + borderBottom2, horizontalScrollbarThickness = canScrollHorizontally ? target.offsetHeight - verticalBorderArea - target.clientHeight : 0, verticalScrollbarThickness = canScrollVertically ? target.offsetWidth - horizontalBorderArea - target.clientWidth : 0, widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0, heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0, contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness, contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness, borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea, borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea, boxes = freeze({
    devicePixelContentBoxSize: size$1(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
    borderBoxSize: size$1(borderBoxWidth, borderBoxHeight, switchSizes),
    contentBoxSize: size$1(contentWidth, contentHeight, switchSizes),
    contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
  });
  return cache3.set(target, boxes), boxes;
};
var calculateBoxSize = function(target, observedBox, forceRecalculation) {
  var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;
  switch (observedBox) {
    case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
      return devicePixelContentBoxSize;
    case ResizeObserverBoxOptions.BORDER_BOX:
      return borderBoxSize;
    default:
      return contentBoxSize;
  }
};
var ResizeObserverEntry = function() {
  function ResizeObserverEntry2(target) {
    var boxes = calculateBoxSizes(target);
    this.target = target, this.contentRect = boxes.contentRect, this.borderBoxSize = freeze([boxes.borderBoxSize]), this.contentBoxSize = freeze([boxes.contentBoxSize]), this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
  }
  return ResizeObserverEntry2;
}();
var calculateDepthForNode = function(node2) {
  if (isHidden(node2))
    return 1 / 0;
  for (var depth = 0, parent = node2.parentNode; parent; )
    depth += 1, parent = parent.parentNode;
  return depth;
};
var broadcastActiveObservations = function() {
  var shallowestDepth = 1 / 0, callbacks2 = [];
  resizeObservers.forEach(function(ro) {
    if (ro.activeTargets.length !== 0) {
      var entries = [];
      ro.activeTargets.forEach(function(ot2) {
        var entry = new ResizeObserverEntry(ot2.target), targetDepth = calculateDepthForNode(ot2.target);
        entries.push(entry), ot2.lastReportedSize = calculateBoxSize(ot2.target, ot2.observedBox), targetDepth < shallowestDepth && (shallowestDepth = targetDepth);
      }), callbacks2.push(function() {
        ro.callback.call(ro.observer, entries, ro.observer);
      }), ro.activeTargets.splice(0, ro.activeTargets.length);
    }
  });
  for (var _i = 0, callbacks_1 = callbacks2; _i < callbacks_1.length; _i++) {
    var callback = callbacks_1[_i];
    callback();
  }
  return shallowestDepth;
};
var gatherActiveObservationsAtDepth = function(depth) {
  resizeObservers.forEach(function(ro) {
    ro.activeTargets.splice(0, ro.activeTargets.length), ro.skippedTargets.splice(0, ro.skippedTargets.length), ro.observationTargets.forEach(function(ot2) {
      ot2.isActive() && (calculateDepthForNode(ot2.target) > depth ? ro.activeTargets.push(ot2) : ro.skippedTargets.push(ot2));
    });
  });
};
var process2 = function() {
  var depth = 0;
  for (gatherActiveObservationsAtDepth(depth); hasActiveObservations(); )
    depth = broadcastActiveObservations(), gatherActiveObservationsAtDepth(depth);
  return hasSkippedObservations() && deliverResizeLoopError(), depth > 0;
};
var trigger;
var callbacks = [];
var notify = function() {
  return callbacks.splice(0).forEach(function(cb) {
    return cb();
  });
};
var queueMicroTask = function(callback) {
  if (!trigger) {
    var toggle_1 = 0, el_1 = document.createTextNode(""), config = { characterData: true };
    new MutationObserver(function() {
      return notify();
    }).observe(el_1, config), trigger = function() {
      el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++);
    };
  }
  callbacks.push(callback), trigger();
};
var queueResizeObserver = function(cb) {
  queueMicroTask(function() {
    requestAnimationFrame(cb);
  });
};
var watching = 0;
var isWatching = function() {
  return !!watching;
};
var CATCH_PERIOD = 250;
var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
var events = [
  "resize",
  "load",
  "transitionend",
  "animationend",
  "animationstart",
  "animationiteration",
  "keyup",
  "keydown",
  "mouseup",
  "mousedown",
  "mouseover",
  "mouseout",
  "blur",
  "focus"
];
var time2 = function(timeout) {
  return timeout === void 0 && (timeout = 0), Date.now() + timeout;
};
var scheduled = false;
var Scheduler = function() {
  function Scheduler2() {
    var _this = this;
    this.stopped = true, this.listener = function() {
      return _this.schedule();
    };
  }
  return Scheduler2.prototype.run = function(timeout) {
    var _this = this;
    if (timeout === void 0 && (timeout = CATCH_PERIOD), !scheduled) {
      scheduled = true;
      var until = time2(timeout);
      queueResizeObserver(function() {
        var elementsHaveResized = false;
        try {
          elementsHaveResized = process2();
        } finally {
          if (scheduled = false, timeout = until - time2(), !isWatching())
            return;
          elementsHaveResized ? _this.run(1e3) : timeout > 0 ? _this.run(timeout) : _this.start();
        }
      });
    }
  }, Scheduler2.prototype.schedule = function() {
    this.stop(), this.run();
  }, Scheduler2.prototype.observe = function() {
    var _this = this, cb = function() {
      return _this.observer && _this.observer.observe(document.body, observerConfig);
    };
    document.body ? cb() : global$1.addEventListener("DOMContentLoaded", cb);
  }, Scheduler2.prototype.start = function() {
    var _this = this;
    this.stopped && (this.stopped = false, this.observer = new MutationObserver(this.listener), this.observe(), events.forEach(function(name) {
      return global$1.addEventListener(name, _this.listener, true);
    }));
  }, Scheduler2.prototype.stop = function() {
    var _this = this;
    this.stopped || (this.observer && this.observer.disconnect(), events.forEach(function(name) {
      return global$1.removeEventListener(name, _this.listener, true);
    }), this.stopped = true);
  }, Scheduler2;
}();
var scheduler = new Scheduler();
var updateCount = function(n) {
  !watching && n > 0 && scheduler.start(), watching += n, !watching && scheduler.stop();
};
var skipNotifyOnElement = function(target) {
  return !isSVG(target) && !isReplacedElement(target) && getComputedStyle(target).display === "inline";
};
var ResizeObservation = function() {
  function ResizeObservation2(target, observedBox) {
    this.target = target, this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX, this.lastReportedSize = {
      inlineSize: 0,
      blockSize: 0
    };
  }
  return ResizeObservation2.prototype.isActive = function() {
    var size22 = calculateBoxSize(this.target, this.observedBox, true);
    return skipNotifyOnElement(this.target) && (this.lastReportedSize = size22), this.lastReportedSize.inlineSize !== size22.inlineSize || this.lastReportedSize.blockSize !== size22.blockSize;
  }, ResizeObservation2;
}();
var ResizeObserverDetail = function() {
  function ResizeObserverDetail2(resizeObserver, callback) {
    this.activeTargets = [], this.skippedTargets = [], this.observationTargets = [], this.observer = resizeObserver, this.callback = callback;
  }
  return ResizeObserverDetail2;
}();
var observerMap = /* @__PURE__ */ new WeakMap();
var getObservationIndex = function(observationTargets, target) {
  for (var i2 = 0; i2 < observationTargets.length; i2 += 1)
    if (observationTargets[i2].target === target)
      return i2;
  return -1;
};
var ResizeObserverController = function() {
  function ResizeObserverController2() {
  }
  return ResizeObserverController2.connect = function(resizeObserver, callback) {
    var detail = new ResizeObserverDetail(resizeObserver, callback);
    observerMap.set(resizeObserver, detail);
  }, ResizeObserverController2.observe = function(resizeObserver, target, options) {
    var detail = observerMap.get(resizeObserver), firstObservation = detail.observationTargets.length === 0;
    getObservationIndex(detail.observationTargets, target) < 0 && (firstObservation && resizeObservers.push(detail), detail.observationTargets.push(new ResizeObservation(target, options && options.box)), updateCount(1), scheduler.schedule());
  }, ResizeObserverController2.unobserve = function(resizeObserver, target) {
    var detail = observerMap.get(resizeObserver), index3 = getObservationIndex(detail.observationTargets, target), lastObservation = detail.observationTargets.length === 1;
    index3 >= 0 && (lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1), detail.observationTargets.splice(index3, 1), updateCount(-1));
  }, ResizeObserverController2.disconnect = function(resizeObserver) {
    var _this = this, detail = observerMap.get(resizeObserver);
    detail.observationTargets.slice().forEach(function(ot2) {
      return _this.unobserve(resizeObserver, ot2.target);
    }), detail.activeTargets.splice(0, detail.activeTargets.length);
  }, ResizeObserverController2;
}();
var ResizeObserver2 = function() {
  function ResizeObserver22(callback) {
    if (arguments.length === 0)
      throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
    if (typeof callback != "function")
      throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
    ResizeObserverController.connect(this, callback);
  }
  return ResizeObserver22.prototype.observe = function(target, options) {
    if (arguments.length === 0)
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
    if (!isElement2(target))
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
    ResizeObserverController.observe(this, target, options);
  }, ResizeObserver22.prototype.unobserve = function(target) {
    if (arguments.length === 0)
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
    if (!isElement2(target))
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
    ResizeObserverController.unobserve(this, target);
  }, ResizeObserver22.prototype.disconnect = function() {
    ResizeObserverController.disconnect(this);
  }, ResizeObserver22.toString = function() {
    return "function ResizeObserver () { [polyfill code] }";
  }, ResizeObserver22;
}();
var _ResizeObserver = typeof document < "u" && typeof window < "u" && window.ResizeObserver ? window.ResizeObserver : ResizeObserver2;
var _elementSizeObserver = _createElementSizeObserver();
function _createElementRectValueListener() {
  return {
    subscribe(element, subscriber) {
      const resizeObserver = new _ResizeObserver(([entry]) => {
        subscriber({
          _contentRect: entry.contentRect,
          border: {
            width: entry.borderBoxSize[0].inlineSize,
            height: entry.borderBoxSize[0].blockSize
          },
          content: {
            width: entry.contentRect.width,
            height: entry.contentRect.height
          }
        });
      });
      return resizeObserver.observe(element), () => {
        resizeObserver.unobserve(element), resizeObserver.disconnect();
      };
    }
  };
}
function _createElementSizeObserver() {
  const disposeCache = /* @__PURE__ */ new WeakMap(), subscribersCache = /* @__PURE__ */ new WeakMap();
  return {
    subscribe(element, subscriber) {
      const subscribers = subscribersCache.get(element) || [];
      let dispose = disposeCache.get(element);
      return subscribersCache.has(element) || (subscribersCache.set(element, subscribers), dispose = _createElementRectValueListener().subscribe(element, (elementRect) => {
        for (const sub of subscribers)
          sub(elementRect);
      })), subscribers.push(subscriber), () => {
        const idx = subscribers.indexOf(subscriber);
        idx > -1 && subscribers.splice(idx, 1), subscribers.length === 0 && dispose && dispose();
      };
    }
  };
}
function useElementSize(element) {
  const [size22, setSize] = (0, import_react49.useState)(null);
  return (0, import_react49.useEffect)(() => {
    if (element)
      return _elementSizeObserver.subscribe(element, setSize);
  }, [element]), size22;
}
function useElementRect(element) {
  var _a;
  return ((_a = useElementSize(element)) == null ? void 0 : _a._contentRect) || null;
}
function useGlobalKeyDown(onKeyDown) {
  return (0, import_react49.useEffect)(() => (addEventListener("keydown", onKeyDown), () => removeEventListener("keydown", onKeyDown)), [onKeyDown]);
}
function useMatchMedia(mediaQueryString, getServerSnapshot2) {
  const { subscribe: subscribe2, getSnapshot } = (0, import_react49.useMemo)(() => {
    let MEDIA_QUERY_CACHE;
    const getMatchMedia = () => (MEDIA_QUERY_CACHE || (MEDIA_QUERY_CACHE = window.matchMedia(mediaQueryString)), MEDIA_QUERY_CACHE);
    return {
      subscribe: (onStoreChange) => {
        const matchMedia = getMatchMedia();
        return matchMedia.addEventListener("change", onStoreChange), () => matchMedia.removeEventListener("change", onStoreChange);
      },
      getSnapshot: () => getMatchMedia().matches
    };
  }, [mediaQueryString]);
  return (0, import_react49.useDebugValue)(mediaQueryString), (0, import_react49.useSyncExternalStore)(subscribe2, getSnapshot, getServerSnapshot2);
}
function getGlobalScope() {
  if (typeof globalThis < "u")
    return globalThis;
  if (typeof window < "u")
    return window;
  if (typeof self < "u")
    return self;
  if (typeof global < "u")
    return global;
  throw new Error("@sanity/ui: could not locate global scope");
}
var globalScope = getGlobalScope();
function createGlobalScopedContext(key2, defaultValue) {
  const symbol = Symbol.for(key2);
  return typeof document > "u" ? (0, import_react49.createContext)(defaultValue) : (globalScope[symbol] = globalScope[symbol] || (0, import_react49.createContext)(defaultValue), globalScope[symbol]);
}
var ThemeContext = createGlobalScopedContext(
  "@sanity/ui/context/theme",
  null
);
function ThemeProvider(props) {
  const parentTheme = (0, import_react49.useContext)(ThemeContext), {
    children,
    scheme = (parentTheme == null ? void 0 : parentTheme.scheme) || "light",
    theme: rootTheme = (parentTheme == null ? void 0 : parentTheme.theme) || null,
    tone = (parentTheme == null ? void 0 : parentTheme.tone) || "default"
  } = props, themeContext = (0, import_react49.useMemo)(() => rootTheme ? {
    version: 0,
    theme: rootTheme,
    scheme,
    tone
  } : null, [rootTheme, scheme, tone]), theme = (0, import_react49.useMemo)(() => rootTheme ? getScopedTheme(rootTheme, scheme, tone) : null, [scheme, rootTheme, tone]);
  return theme ? (0, import_jsx_runtime2.jsx)(ThemeContext.Provider, { value: themeContext, children: (0, import_jsx_runtime2.jsx)(ot, { theme, children }) }) : (0, import_jsx_runtime2.jsx)("pre", { children: 'ThemeProvider: no "theme" property provided' });
}
ThemeProvider.displayName = "ThemeProvider";
function useRootTheme() {
  const value = (0, import_react49.useContext)(ThemeContext);
  if (!value)
    throw new Error("useRootTheme(): missing context value");
  return value;
}
function ThemeColorProvider(props) {
  const { children, scheme, tone } = props, root = useRootTheme();
  return (0, import_jsx_runtime2.jsx)(ThemeProvider, { scheme: scheme || root.scheme, theme: root.theme, tone, children });
}
ThemeColorProvider.displayName = "ThemeColorProvider";
function useTheme() {
  return nt();
}
function useTheme_v2() {
  return getTheme_v2(nt());
}
function _getMediaQuery(media, index3) {
  return index3 === 0 ? `screen and (max-width: ${media[index3] - 1}px)` : index3 === media.length ? `screen and (min-width: ${media[index3 - 1]}px)` : `screen and (min-width: ${media[index3 - 1]}px) and (max-width: ${media[index3] - 1}px)`;
}
function _createMediaStore(media) {
  const mediaLen = media.length;
  let sizes;
  const getSizes = () => {
    if (!sizes) {
      sizes = [];
      for (let index3 = mediaLen; index3 > -1; index3 -= 1) {
        const mediaQuery = _getMediaQuery(media, index3);
        sizes.push({ index: index3, mq: window.matchMedia(mediaQuery) });
      }
    }
    return sizes;
  };
  return { getSnapshot: () => {
    for (const { index: index3, mq } of getSizes())
      if (mq.matches)
        return index3;
    return 0;
  }, subscribe: (onStoreChange) => {
    const disposeFns = [];
    for (const { mq } of getSizes()) {
      const handleChange = () => {
        mq.matches && onStoreChange();
      };
      mq.addEventListener("change", handleChange), disposeFns.push(() => mq.removeEventListener("change", handleChange));
    }
    return () => {
      for (const disposeFn of disposeFns)
        disposeFn();
    };
  } };
}
function getServerSnapshot() {
  return 0;
}
function useMediaIndex() {
  const { media } = useTheme_v2(), store = (0, import_react49.useMemo)(() => _createMediaStore(media), [media]);
  return (0, import_react49.useSyncExternalStore)(store.subscribe, store.getSnapshot, getServerSnapshot);
}
function usePrefersDark(getServerSnapshot2 = () => false) {
  return useMatchMedia("(prefers-color-scheme: dark)", getServerSnapshot2);
}
function usePrefersReducedMotion(getServerSnapshot2 = () => false) {
  return useMatchMedia("(prefers-reduced-motion: reduce)", getServerSnapshot2);
}
function responsiveBorderStyle() {
  return [border, borderTop, borderRight, borderBottom, borderLeft];
}
function border(props) {
  var _a;
  const { card, media } = getTheme_v2(props.theme), borderStyle = `${((_a = card.border) == null ? void 0 : _a.width) ?? 1}px solid var(--card-border-color)`;
  return _responsive(
    media,
    props.$border,
    (value) => value ? { "&&": { border: borderStyle } } : { "&&": { border: 0 } }
  );
}
function borderTop(props) {
  var _a;
  const { card, media } = getTheme_v2(props.theme), borderStyle = `${((_a = card.border) == null ? void 0 : _a.width) ?? 1}px solid var(--card-border-color)`;
  return _responsive(
    media,
    props.$borderTop,
    (value) => value ? { "&&": { borderTop: borderStyle } } : { "&&": { borderTop: 0 } }
  );
}
function borderRight(props) {
  var _a;
  const { card, media } = getTheme_v2(props.theme), borderStyle = `${((_a = card.border) == null ? void 0 : _a.width) ?? 1}px solid var(--card-border-color)`;
  return _responsive(
    media,
    props.$borderRight,
    (value) => value ? { "&&": { borderRight: borderStyle } } : { "&&": { borderRight: 0 } }
  );
}
function borderBottom(props) {
  var _a;
  const { card, media } = getTheme_v2(props.theme), borderStyle = `${((_a = card.border) == null ? void 0 : _a.width) ?? 1}px solid var(--card-border-color)`;
  return _responsive(
    media,
    props.$borderBottom,
    (value) => value ? { "&&": { borderBottom: borderStyle } } : { "&&": { borderBottom: 0 } }
  );
}
function borderLeft(props) {
  var _a;
  const { card, media } = getTheme_v2(props.theme), borderStyle = `${((_a = card.border) == null ? void 0 : _a.width) ?? 1}px solid var(--card-border-color)`;
  return _responsive(
    media,
    props.$borderLeft,
    (value) => value ? { "&&": { borderLeft: borderStyle } } : { "&&": { borderLeft: 0 } }
  );
}
var BASE_STYLE$4 = {
  '&[data-as="ul"],&[data-as="ol"]': {
    listStyle: "none"
  }
};
var BOX_SIZING = {
  content: "content-box",
  border: "border-box"
};
var BOX_HEIGHT = {
  stretch: "stretch",
  fill: "100%"
};
function boxStyle() {
  return BASE_STYLE$4;
}
function responsiveBoxStyle() {
  return [
    responsiveBoxSizingStyle,
    responsiveBoxHeightStyle,
    responsiveBoxOverflowStyle,
    responsiveBoxDisplayStyle
  ];
}
function responsiveBoxDisplayStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$display, (display) => ({
    "&:not([hidden])": { display }
  }));
}
function responsiveBoxSizingStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$sizing, (sizing) => ({
    boxSizing: BOX_SIZING[sizing]
  }));
}
function responsiveBoxHeightStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$height, (height) => ({
    height: BOX_HEIGHT[height]
  }));
}
function responsiveBoxOverflowStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$overflow, (overflow) => ({
    overflow
  }));
}
var BASE_STYLE$3 = {
  "&&:not([hidden])": {
    display: "flex"
  }
};
function responsiveFlexStyle() {
  return [
    BASE_STYLE$3,
    responsiveFlexAlignStyle,
    responsiveFlexGapStyle,
    responsiveFlexWrapStyle,
    responsiveFlexJustifyStyle,
    responsiveFlexDirectionStyle
  ];
}
function responsiveFlexAlignStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$align, (align) => ({ alignItems: align }));
}
function responsiveFlexGapStyle(props) {
  const { media, space } = getTheme_v2(props.theme);
  return _responsive(media, props.$gap, (gap) => ({
    gap: gap ? rem(space[gap]) : void 0
  }));
}
function responsiveFlexWrapStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$wrap, (wrap2) => ({ flexWrap: wrap2 }));
}
function responsiveFlexJustifyStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$justify, (justify) => ({ justifyContent: justify }));
}
function responsiveFlexDirectionStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$direction, (direction) => ({ flexDirection: direction }));
}
var BASE_STYLE$2 = {
  minWidth: 0,
  minHeight: 0
};
function flexItemStyle() {
  return [BASE_STYLE$2, responsiveFlexItemStyle];
}
function responsiveFlexItemStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return props.$flex ? _responsive(media, props.$flex, (flex) => ({ flex })) : EMPTY_ARRAY;
}
function focusRingBorderStyle(border2) {
  return `inset 0 0 0 ${border2.width}px ${border2.color}`;
}
function focusRingStyle(opts) {
  const { base, border: border2, focusRing } = opts, focusRingOutsetWidth = focusRing.offset + focusRing.width, focusRingInsetWidth = 0 - focusRing.offset, bgColor = base ? base.bg : "var(--card-bg-color)";
  return [
    focusRingInsetWidth > 0 && `inset 0 0 0 ${focusRingInsetWidth}px var(--card-focus-ring-color)`,
    border2 && focusRingBorderStyle(border2),
    focusRingInsetWidth < 0 && `0 0 0 ${0 - focusRingInsetWidth}px ${bgColor}`,
    focusRingOutsetWidth > 0 && `0 0 0 ${focusRingOutsetWidth}px var(--card-focus-ring-color)`
  ].filter(Boolean).join(",");
}
var GRID_CSS = {
  "&&:not([hidden])": {
    display: "grid"
  },
  '&[data-as="ul"],&[data-as="ol"]': {
    listStyle: "none"
  }
};
var GRID_AUTO_COLUMS = {
  auto: "auto",
  min: "min-content",
  max: "max-content",
  fr: "minmax(0, 1fr)"
};
var GRID_AUTO_ROWS = {
  auto: "auto",
  min: "min-content",
  max: "max-content",
  fr: "minmax(0, 1fr)"
};
function responsiveGridStyle() {
  return [
    GRID_CSS,
    responsiveGridAutoFlowStyle,
    responsiveGridAutoRowsStyle,
    responsiveGridAutoColsStyle,
    responsiveGridColumnsStyle,
    responsiveGridRowsStyle,
    responsiveGridGapStyle,
    responsiveGridGapXStyle,
    responsiveGridGapYStyle
  ];
}
function responsiveGridAutoFlowStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$autoFlow, (autoFlow) => ({
    gridAutoFlow: autoFlow
  }));
}
function responsiveGridAutoRowsStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$autoRows, (autoRows) => ({
    gridAutoRows: autoRows && GRID_AUTO_ROWS[autoRows]
  }));
}
function responsiveGridAutoColsStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$autoCols, (autoCols) => ({
    gridAutoColumns: autoCols && GRID_AUTO_COLUMS[autoCols]
  }));
}
function responsiveGridColumnsStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$columns, (columns) => ({
    gridTemplateColumns: columns && `repeat(${columns},minmax(0,1fr));`
  }));
}
function responsiveGridRowsStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$rows, (rows) => ({
    gridTemplateRows: rows && `repeat(${rows},minmax(0,1fr));`
  }));
}
function responsiveGridGapStyle(props) {
  const { media, space } = getTheme_v2(props.theme);
  return _responsive(media, props.$gap, (gap) => ({
    gridGap: gap ? rem(space[gap]) : void 0
  }));
}
function responsiveGridGapXStyle(props) {
  const { media, space } = getTheme_v2(props.theme);
  return _responsive(media, props.$gapX, (gapX) => ({
    columnGap: gapX ? rem(space[gapX]) : void 0
  }));
}
function responsiveGridGapYStyle(props) {
  const { media, space } = getTheme_v2(props.theme);
  return _responsive(media, props.$gapY, (gapY) => ({
    rowGap: gapY ? rem(space[gapY]) : void 0
  }));
}
function responsiveGridItemStyle() {
  return [
    responsiveGridItemRowStyle,
    responsiveGridItemRowStartStyle,
    responsiveGridItemRowEndStyle,
    responsiveGridItemColumnStyle,
    responsiveGridItemColumnStartStyle,
    responsiveGridItemColumnEndStyle
  ];
}
var GRID_ITEM_ROW = {
  auto: "auto",
  full: "1 / -1"
};
var GRID_ITEM_COLUMN = {
  auto: "auto",
  full: "1 / -1"
};
function responsiveGridItemRowStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$row, (row) => typeof row == "number" ? { gridRow: `span ${row} / span ${row}` } : { gridRow: GRID_ITEM_ROW[row] });
}
function responsiveGridItemRowStartStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$rowStart, (rowStart) => ({
    gridRowStart: rowStart
  }));
}
function responsiveGridItemRowEndStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$rowEnd, (rowEnd) => ({ gridRowEnd: rowEnd }));
}
function responsiveGridItemColumnStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$column, (column2) => typeof column2 == "number" ? { gridColumn: `span ${column2} / span ${column2}` } : { gridColumn: GRID_ITEM_COLUMN[column2] });
}
function responsiveGridItemColumnStartStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$columnStart, (columnStart) => ({
    gridColumnStart: columnStart
  }));
}
function responsiveGridItemColumnEndStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$columnEnd, (columnEnd) => ({
    gridColumnEnd: columnEnd
  }));
}
function responsiveInputPaddingStyle(props) {
  const { $fontSize, $iconLeft, $iconRight, $padding, $space } = props, { font, media, space } = getTheme_v2(props.theme), len = Math.max($padding.length, $space.length, $fontSize.length), _padding = [], _space = [], _fontSize = [];
  for (let i2 = 0; i2 < len; i2 += 1)
    _fontSize[i2] = $fontSize[i2] === void 0 ? _fontSize[i2 - 1] : $fontSize[i2], _padding[i2] = $padding[i2] === void 0 ? _padding[i2 - 1] : $padding[i2], _space[i2] = $space[i2] === void 0 ? _space[i2 - 1] : $space[i2];
  return _responsive(media, _padding, (_2, i2) => {
    const size22 = font.text.sizes[_fontSize[i2]] || font.text.sizes[2], emSize = size22.lineHeight - size22.ascenderHeight - size22.descenderHeight, p2 = space[_padding[i2]], s2 = space[_space[i2]], styles = {
      paddingTop: rem(p2 - size22.ascenderHeight),
      paddingRight: rem(p2),
      paddingBottom: rem(p2 - size22.descenderHeight),
      paddingLeft: rem(p2)
    };
    return $iconRight && (styles.paddingRight = rem(p2 + emSize + s2)), $iconLeft && (styles.paddingLeft = rem(p2 + emSize + s2)), styles;
  });
}
function responsiveInputPaddingIconRightStyle(props) {
  return responsiveInputPaddingStyle({ ...props, $iconRight: true });
}
var ROOT_STYLE = lt`
  &:not([hidden]) {
    display: flex;
  }

  align-items: center;
`;
function textInputRootStyle() {
  return ROOT_STYLE;
}
function textInputBaseStyle(props) {
  const { $scheme, $tone, $weight } = props, { color: color3, font } = getTheme_v2(props.theme);
  return lt`
    appearance: none;
    background: none;
    border: 0;
    border-radius: 0;
    outline: none;
    width: 100%;
    box-sizing: border-box;
    font-family: ${font.text.family};
    font-weight: ${$weight && font.text.weights[$weight] || font.text.weights.regular};
    margin: 0;
    position: relative;
    z-index: 1;
    display: block;

    /* NOTE: This is a hack to disable Chrome’s autofill styles */
    &:-webkit-autofill,
    &:-webkit-autofill:hover,
    &:-webkit-autofill:focus,
    &:-webkit-autofill:active {
      -webkit-text-fill-color: var(--input-fg-color) !important;
      transition: background-color 5000s;
      transition-delay: 86400s /* 24h */;
    }

    /* &:is(textarea) */
    &[data-as='textarea'] {
      resize: none;
    }

    color: var(--input-fg-color);

    &::placeholder {
      color: var(--input-placeholder-color);
    }

    &[data-scheme='${$scheme}'][data-tone='${$tone}'] {
      --input-fg-color: ${color3.input.default.enabled.fg};
      --input-placeholder-color: ${color3.input.default.enabled.placeholder};

      /* enabled */
      &:not(:invalid):not(:disabled):not(:read-only) {
        --input-fg-color: ${color3.input.default.enabled.fg};
        --input-placeholder-color: ${color3.input.default.enabled.placeholder};
      }

      /* disabled */
      &:not(:invalid):disabled {
        --input-fg-color: ${color3.input.default.disabled.fg};
        --input-placeholder-color: ${color3.input.default.disabled.placeholder};
      }

      /* invalid */
      &:invalid {
        --input-fg-color: ${color3.input.invalid.enabled.fg};
        --input-placeholder-color: ${color3.input.invalid.enabled.placeholder};
      }

      /* readOnly */
      &:read-only {
        --input-fg-color: ${color3.input.default.readOnly.fg};
        --input-placeholder-color: ${color3.input.default.readOnly.placeholder};
      }
    }
  `;
}
function textInputFontSizeStyle(props) {
  const { font, media } = getTheme_v2(props.theme);
  return _responsive(media, props.$fontSize, (sizeIndex) => {
    const size22 = font.text.sizes[sizeIndex] || font.text.sizes[2];
    return {
      fontSize: rem(size22.fontSize),
      lineHeight: size22.lineHeight / size22.fontSize
    };
  });
}
function textInputRepresentationStyle(props) {
  const { $hasPrefix, $hasSuffix, $scheme, $tone, $unstableDisableFocusRing } = props, { color: color3, input } = getTheme_v2(props.theme);
  return lt`
    --input-box-shadow: none;

    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: block;
    pointer-events: none;
    z-index: 0;

    background-color: var(--card-bg-color);
    box-shadow: var(--input-box-shadow);

    border-top-left-radius: ${$hasPrefix ? 0 : void 0};
    border-bottom-left-radius: ${$hasPrefix ? 0 : void 0};
    border-top-right-radius: ${$hasSuffix ? 0 : void 0};
    border-bottom-right-radius: ${$hasSuffix ? 0 : void 0};

    &[data-scheme='${$scheme}'][data-tone='${$tone}'] {
      --card-bg-color: ${color3.input.default.enabled.bg};
      --card-fg-color: ${color3.input.default.enabled.fg};

      /* enabled */
      *:not(:disabled) + &[data-border] {
        --input-box-shadow: ${focusRingBorderStyle({
    color: color3.input.default.enabled.border,
    width: input.border.width
  })};
      }

      /* invalid */
      *:not(:disabled):invalid + & {
        --card-bg-color: ${color3.input.invalid.enabled.bg};
        --card-fg-color: ${color3.input.invalid.enabled.fg};

        &[data-border] {
          --input-box-shadow: ${focusRingBorderStyle({
    color: color3.input.invalid.enabled.border,
    width: input.border.width
  })};
        }
      }

      /* focused */
      *:not(:disabled):focus + & {
        &[data-border] {
          --input-box-shadow: ${$unstableDisableFocusRing ? void 0 : focusRingStyle({
    border: { color: color3.input.default.enabled.border, width: input.border.width },
    focusRing: input.text.focusRing
  })};
        }

        &:not([data-border]) {
          --input-box-shadow: ${$unstableDisableFocusRing ? void 0 : focusRingStyle({ focusRing: input.text.focusRing })};
        }
      }

      /* disabled */
      *:not(:invalid):disabled + & {
        --card-bg-color: ${color3.input.default.disabled.bg} !important;
        --card-fg-color: ${color3.input.default.disabled.fg} !important;
        --card-icon-color: ${color3.input.default.disabled.fg} !important;

        &[data-border] {
          --input-box-shadow: ${focusRingBorderStyle({
    color: color3.input.default.disabled.border,
    width: input.border.width
  })};
        }
      }

      *:invalid:disabled + & {
        --card-bg-color: ${color3.input.invalid.disabled.bg} !important;
        --card-fg-color: ${color3.input.invalid.disabled.fg} !important;
        --card-icon-color: ${color3.input.invalid.disabled.fg} !important;

        &[data-border] {
          --input-box-shadow: ${focusRingBorderStyle({
    color: color3.input.invalid.disabled.border,
    width: input.border.width
  })};
        }
      }

      /* readOnly */
      *:not(:invalid):read-only + & {
        --card-bg-color: ${color3.input.default.readOnly.bg} !important;
        --card-fg-color: ${color3.input.default.readOnly.fg} !important;
      }

      *:invalid:read-only + & {
        --card-bg-color: ${color3.input.invalid.readOnly.bg} !important;
        --card-fg-color: ${color3.input.invalid.readOnly.fg} !important;
      }

      /* hovered */
      @media (hover: hover) {
        *:not(:disabled):not(:read-only):not(:invalid):hover + & {
          --card-bg-color: ${color3.input.default.hovered.bg};
          --card-fg-color: ${color3.input.default.hovered.fg};
        }

        *:invalid:not(:disabled):not(:read-only):hover + & {
          --card-bg-color: ${color3.input.invalid.hovered.bg};
          --card-fg-color: ${color3.input.invalid.hovered.fg};
        }

        *:not(:disabled):not(:read-only):not(:invalid):not(:focus):hover + &[data-border] {
          --input-box-shadow: ${focusRingBorderStyle({
    color: color3.input.default.hovered.border,
    width: input.border.width
  })};
        }

        *:invalid:not(:disabled):not(:read-only):not(:focus):hover + &[data-border] {
          --input-box-shadow: ${focusRingBorderStyle({
    color: color3.input.invalid.hovered.border,
    width: input.border.width
  })};
        }
      }
    }
  `;
}
function responsiveMarginStyle(props) {
  const { theme } = props;
  return [
    _getResponsiveSpace(theme, ["margin"], props.$margin),
    _getResponsiveSpace(theme, ["marginLeft", "marginRight"], props.$marginX),
    _getResponsiveSpace(theme, ["marginTop", "marginBottom"], props.$marginY),
    _getResponsiveSpace(theme, ["marginTop"], props.$marginTop),
    _getResponsiveSpace(theme, ["marginRight"], props.$marginRight),
    _getResponsiveSpace(theme, ["marginBottom"], props.$marginBottom),
    _getResponsiveSpace(theme, ["marginLeft"], props.$marginLeft)
  ].filter(Boolean);
}
function responsivePaddingStyle(props) {
  const { theme } = props;
  return [
    _getResponsiveSpace(theme, ["padding"], props.$padding),
    _getResponsiveSpace(theme, ["paddingLeft", "paddingRight"], props.$paddingX),
    _getResponsiveSpace(theme, ["paddingTop", "paddingBottom"], props.$paddingY),
    _getResponsiveSpace(theme, ["paddingTop"], props.$paddingTop),
    _getResponsiveSpace(theme, ["paddingRight"], props.$paddingRight),
    _getResponsiveSpace(theme, ["paddingBottom"], props.$paddingBottom),
    _getResponsiveSpace(theme, ["paddingLeft"], props.$paddingLeft)
  ].filter(Boolean);
}
function responsiveRadiusStyle(props) {
  const { media, radius } = getTheme_v2(props.theme);
  return _responsive(media, props.$radius, (value) => {
    let borderRadius = 0;
    return typeof value == "number" && (borderRadius = rem(radius[value])), value === "full" && (borderRadius = "9999px"), { borderRadius };
  });
}
function toBoxShadow(shadow, color3) {
  return `${shadow.map(rem).join(" ")} ${color3}`;
}
function shadowStyle(shadow, outlineWidth = 1) {
  if (!shadow)
    return EMPTY_RECORD;
  const outline = `0 0 0 ${rem(outlineWidth)} var(--card-shadow-outline-color)`, umbra = toBoxShadow(shadow.umbra, "var(--card-shadow-umbra-color)"), penumbra = toBoxShadow(shadow.penumbra, "var(--card-shadow-penumbra-color)"), ambient = toBoxShadow(shadow.ambient, "var(--card-shadow-ambient-color)");
  return { boxShadow: `${outline}, ${umbra}, ${penumbra}, ${ambient}` };
}
function responsiveShadowStyle(props) {
  const { card, media, shadow } = getTheme_v2(props.theme);
  return _responsive(
    media,
    props.$shadow,
    (index3) => shadowStyle(shadow[index3], card.shadow.outline)
  );
}
function labelBaseStyle(props) {
  const { $accent, $muted } = props, { font } = getTheme_v2(props.theme);
  return lt`
    text-transform: uppercase;

    ${$accent && lt`
      color: var(--card-accent-fg-color);
    `}

    ${$muted && lt`
      color: var(--card-muted-fg-color);
    `}

    & code {
      font-family: ${font.code.family};
      border-radius: 1px;
    }

    & a {
      text-decoration: none;
      border-radius: 1px;
    }

    & svg {
      /* Certain popular CSS libraries changes the defaults for SVG display */
      /* Make sure SVGs are rendered as inline elements */
      display: inline;
    }

    & [data-sanity-icon] {
      vertical-align: baseline;
    }
  `;
}
var Root$C = dt.div(responsiveLabelFont, responsiveTextAlignStyle, labelBaseStyle);
var SpanWithTextOverflow$2 = dt.span`
  display: block;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  overflow: clip;
`;
var Label = (0, import_react49.forwardRef)(function(props, ref) {
  const {
    accent,
    align,
    children: childrenProp,
    muted = false,
    size: size22 = 2,
    textOverflow,
    weight,
    ...restProps
  } = props;
  let children = childrenProp;
  return textOverflow === "ellipsis" ? children = (0, import_jsx_runtime2.jsx)(SpanWithTextOverflow$2, { children }) : children = (0, import_jsx_runtime2.jsx)("span", { children }), (0, import_jsx_runtime2.jsx)(
    Root$C,
    {
      "data-ui": "Label",
      ...restProps,
      $accent: accent,
      $align: useArrayProp(align),
      $muted: muted,
      $size: useArrayProp(size22),
      $weight: weight,
      ref,
      children
    }
  );
});
Label.displayName = "ForwardRef(Label)";
var avatarStyle = {
  root: avatarRootStyle,
  arrow: avatarArrowStyle,
  bgStroke: avatarBgStrokeStyle,
  stroke: avatarStrokeStyle,
  initials: avatarInitialsStyle,
  image: avatarImageStyle
};
function avatarArrowStyle() {
  return {
    position: "absolute",
    boxSizing: "border-box",
    zIndex: 0,
    opacity: 0,
    transition: "all 0.2s linear",
    transform: "rotate(-90deg) translate3d(0, 6px, 0)",
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    "& > svg": {
      width: "11px",
      height: "7px",
      position: "absolute",
      top: "-5px",
      left: "50%",
      transform: "translateX(-6px)",
      "&:not([hidden])": {
        display: "block"
      }
    },
    "[data-arrow-position='inside'] > &": {
      transform: "rotate(-90deg) translate3d(0, 6px, 0)",
      opacity: 0
    },
    "[data-arrow-position='top'] > &": {
      opacity: 1,
      transform: "rotate(0deg)"
    },
    "[data-arrow-position='bottom'] > &": {
      opacity: 1,
      transform: "rotate(-180deg)"
    }
  };
}
function avatarRootStyle(props) {
  const { $color } = props, { avatar } = getTheme_v2(props.theme);
  return {
    "--avatar-bg-color": `var(--card-avatar-${$color}-bg-color)`,
    "--avatar-fg-color": `var(--card-avatar-${$color}-fg-color)`,
    backgroundColor: "var(--avatar-bg-color)",
    position: "relative",
    boxSizing: "border-box",
    userSelect: "none",
    boxShadow: "0 0 0 1px var(--card-bg-color)",
    '&[data-status="inactive"]': {
      opacity: 0.5
    },
    "&>svg": {
      "&:not([hidden])": {
        display: "block"
      }
    },
    /* &:is(button) */
    '&[data-as="button"]': {
      WebkitFontSmoothing: "inherit",
      appearance: "none",
      margin: 0,
      padding: 0,
      border: 0,
      font: "inherit",
      color: "inherit",
      outline: "none",
      "&:focus": {
        boxShadow: focusRingStyle({ focusRing: avatar.focusRing })
      },
      "&:focus:not(:focus-visible)": {
        boxShadow: "none"
      }
    }
  };
}
function responsiveAvatarSizeStyle(props) {
  const { avatar, media } = getTheme_v2(props.theme);
  return _responsive(media, props.$size, (size22) => {
    const avatarSize = avatar.sizes[size22] || avatar.sizes[0];
    return {
      width: rem(avatarSize.size),
      height: rem(avatarSize.size),
      borderRadius: rem(avatarSize.size / 2),
      "&>svg": {
        width: rem(avatarSize.size),
        height: rem(avatarSize.size),
        borderRadius: rem(avatarSize.size / 2)
      }
    };
  });
}
function avatarImageStyle() {
  return {
    position: "relative"
  };
}
function avatarInitialsStyle() {
  return {
    width: "100%",
    height: "100%",
    color: "var(--avatar-fg-color)",
    alignItems: "center",
    justifyContent: "center",
    textTransform: "uppercase",
    textAlign: "center",
    borderRadius: "50%",
    "&:not([hidden])": {
      display: "flex"
    }
  };
}
function avatarBgStrokeStyle() {
  return {
    strokeWidth: "4px",
    stroke: "var(--card-bg-color)"
  };
}
function avatarStrokeStyle() {
  return {
    strokeWidth: "2px",
    stroke: "var(--avatar-bg-color)",
    '[data-status="editing"] &': {
      strokeDasharray: "2 4",
      strokeLinecap: "round"
    }
  };
}
var Root$B = dt.div(
  responsiveAvatarSizeStyle,
  avatarStyle.root
);
var Arrow$1 = dt.div(avatarStyle.arrow);
var BgStroke = dt.ellipse(avatarStyle.bgStroke);
var Stroke = dt.ellipse(avatarStyle.stroke);
var Initials = dt.div(avatarStyle.initials);
var InitialsLabel = dt(Label)({
  color: "inherit"
});
var Image = dt.svg(avatarStyle.image);
var Avatar = (0, import_react49.forwardRef)(function(props, ref) {
  const {
    __unstable_hideInnerStroke,
    as: asProp,
    color: color3 = "gray",
    src,
    title,
    initials,
    onImageLoadError,
    arrowPosition: arrowPositionProp,
    animateArrowFrom,
    status = "online",
    size: sizeProp = 1,
    ...restProps
  } = props, { avatar } = useTheme_v2(), as = import_react_is.default.isValidElementType(asProp) ? asProp : "div", size22 = useArrayProp(sizeProp), _sizeRem = (avatar.sizes[size22[0]] || avatar.sizes[0]).size, _radius = _sizeRem / 2, elementId = (0, import_react49.useId)(), [arrowPosition, setArrowPosition] = (0, import_react49.useState)(
    animateArrowFrom || arrowPositionProp || "inside"
  ), [imageFailed, setImageFailed] = (0, import_react49.useState)(false), imageId = `avatar-image-${elementId}`;
  (0, import_react49.useEffect)(() => {
    if (arrowPosition === arrowPositionProp)
      return;
    const raf = requestAnimationFrame(() => setArrowPosition(arrowPositionProp));
    return () => cancelAnimationFrame(raf);
  }, [arrowPosition, arrowPositionProp]), (0, import_react49.useEffect)(() => {
    src && setImageFailed(false);
  }, [src]);
  const handleImageError = (0, import_react49.useCallback)(() => {
    setImageFailed(true), onImageLoadError && onImageLoadError(new Error("Avatar: the image failed to load"));
  }, [onImageLoadError]), initialsSize = (0, import_react49.useMemo)(
    () => size22.map((s2) => s2 === 1 ? 1 : s2 === 2 ? 3 : s2 === 3 ? 5 : 0),
    [size22]
  );
  return (0, import_jsx_runtime2.jsxs)(
    Root$B,
    {
      as,
      "data-as": typeof as == "string" ? as : void 0,
      "data-ui": "Avatar",
      ...restProps,
      $color: color3,
      $size: size22,
      "aria-label": title,
      "data-arrow-position": arrowPosition,
      "data-status": status,
      ref,
      title,
      children: [
        (0, import_jsx_runtime2.jsx)(Arrow$1, { children: (0, import_jsx_runtime2.jsx)("svg", { width: "11", height: "7", viewBox: "0 0 11 7", fill: "none", children: (0, import_jsx_runtime2.jsx)(
          "path",
          {
            d: "M6.67948 1.50115L11 7L0 7L4.32052 1.50115C4.92109 0.736796 6.07891 0.736795 6.67948 1.50115Z",
            fill: color3
          }
        ) }) }),
        !imageFailed && src && (0, import_jsx_runtime2.jsxs)(Image, { viewBox: `0 0 ${_sizeRem} ${_sizeRem}`, fill: "none", children: [
          (0, import_jsx_runtime2.jsx)("defs", { children: (0, import_jsx_runtime2.jsx)("pattern", { id: imageId, patternContentUnits: "objectBoundingBox", width: "1", height: "1", children: (0, import_jsx_runtime2.jsx)(
            "image",
            {
              href: src,
              width: "1",
              height: "1",
              onError: handleImageError
            }
          ) }) }),
          (0, import_jsx_runtime2.jsx)("circle", { cx: _radius, cy: _radius, r: _radius, fill: `url(#${imageId})` }),
          !__unstable_hideInnerStroke && (0, import_jsx_runtime2.jsx)(
            BgStroke,
            {
              cx: _radius,
              cy: _radius,
              rx: _radius,
              ry: _radius,
              vectorEffect: "non-scaling-stroke"
            }
          ),
          (0, import_jsx_runtime2.jsx)(
            Stroke,
            {
              cx: _radius,
              cy: _radius,
              rx: _radius,
              ry: _radius,
              vectorEffect: "non-scaling-stroke"
            }
          )
        ] }),
        (imageFailed || !src) && initials && (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children: (0, import_jsx_runtime2.jsx)(Initials, { children: (0, import_jsx_runtime2.jsx)(InitialsLabel, { forwardedAs: "span", size: initialsSize, weight: "medium", children: initials }) }) })
      ]
    }
  );
});
Avatar.displayName = "ForwardRef(Avatar)";
function _responsiveAvatarCounterSizeStyle(props) {
  const { avatar, media } = getTheme_v2(props.theme);
  return _responsive(media, props.$size, (size22) => {
    const avatarSize = avatar.sizes[size22];
    return avatarSize ? {
      borderRadius: rem(avatarSize.size / 2),
      minWidth: rem(avatarSize.size),
      height: rem(avatarSize.size)
    } : EMPTY_RECORD;
  });
}
function _avatarCounterBaseStyle(props) {
  const { space } = getTheme_v2(props.theme);
  return lt`
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    user-select: none;
    color: inherit;
    color: var(--card-fg-color);
    background: var(--card-bg-color);
    box-shadow:
      0 0 0 1px var(--card-bg-color),
      inset 0 0 0 1px var(--card-hairline-hard-color);
    padding: 0 ${rem(space[2])};

    &:not([hidden]) {
      display: flex;
    }
  `;
}
var Root$A = dt.div(
  _responsiveAvatarCounterSizeStyle,
  _avatarCounterBaseStyle
);
var AvatarCounter = (0, import_react49.forwardRef)(function(props, ref) {
  const { count, size: sizeProp = 1 } = props, size22 = useArrayProp(sizeProp), fontSize2 = (0, import_react49.useMemo)(
    () => size22.map((s2) => s2 === 1 ? 1 : s2 === 2 ? 3 : s2 === 3 ? 5 : 0),
    [size22]
  );
  return (0, import_jsx_runtime2.jsx)(Root$A, { $size: size22, "data-ui": "AvatarCounter", ref, children: (0, import_jsx_runtime2.jsx)(Label, { as: "span", size: fontSize2, weight: "medium", children: count }) });
});
AvatarCounter.displayName = "ForwardRef(AvatarCounter)";
var BASE_STYLES = lt`
  white-space: nowrap;

  & > div {
    vertical-align: top;

    &:not([hidden]) {
      display: inline-block;
    }
  }
`;
function avatarStackStyle() {
  return BASE_STYLES;
}
function responsiveAvatarStackSizeStyle(props) {
  const { avatar, media } = getTheme_v2(props.theme);
  return _responsive(media, props.$size, (size22) => {
    const avatarSize = avatar.sizes[size22];
    return avatarSize ? {
      "& > div + div": {
        marginLeft: rem(avatarSize.distance)
      }
    } : EMPTY_RECORD;
  });
}
var Root$z = dt.div(responsiveAvatarStackSizeStyle, avatarStackStyle);
var AvatarStack = (0, import_react49.forwardRef)(function(props, ref) {
  const {
    children: childrenProp,
    maxLength: maxLengthProp = 4,
    size: sizeProp = 1,
    ...restProps
  } = props, children = (0, import_react49.useMemo)(
    () => import_react49.Children.toArray(childrenProp).filter(import_react49.isValidElement),
    [childrenProp]
  ), maxLength = Math.max(maxLengthProp, 0), size22 = useArrayProp(sizeProp), len = children.length, visibleCount = maxLength - 1, extraCount = len - visibleCount, visibleChildren = extraCount > 1 ? children.slice(extraCount, len) : children;
  return (0, import_jsx_runtime2.jsxs)(Root$z, { "data-ui": "AvatarStack", ...restProps, ref, $size: size22, children: [
    len === 0 && (0, import_jsx_runtime2.jsx)("div", { children: (0, import_jsx_runtime2.jsx)(AvatarCounter, { count: len, size: size22 }) }),
    len !== 0 && extraCount > 1 && (0, import_jsx_runtime2.jsx)("div", { children: (0, import_jsx_runtime2.jsx)(AvatarCounter, { count: extraCount, size: size22 }) }),
    visibleChildren.map((child, childIndex) => (0, import_jsx_runtime2.jsx)("div", { children: (0, import_react49.cloneElement)(child, { size: size22 }) }, String(childIndex)))
  ] });
});
AvatarStack.displayName = "ForwardRef(AvatarStack)";
var Root$y = dt.div(
  boxStyle,
  flexItemStyle,
  responsiveBoxStyle,
  responsiveGridItemStyle,
  responsiveMarginStyle,
  responsivePaddingStyle
);
var Box = (0, import_react49.forwardRef)(function(props, ref) {
  const {
    as: asProp = "div",
    column: column2,
    columnStart,
    columnEnd,
    display = "block",
    flex,
    height,
    margin = 0,
    marginX,
    marginY,
    marginTop,
    marginRight,
    marginBottom,
    marginLeft,
    overflow,
    padding = 0,
    paddingX,
    paddingY,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    row,
    rowStart,
    rowEnd,
    sizing,
    ...restProps
  } = props;
  return (0, import_jsx_runtime2.jsx)(
    Root$y,
    {
      "data-as": typeof asProp == "string" ? asProp : void 0,
      "data-ui": "Box",
      ...restProps,
      $column: useArrayProp(column2),
      $columnStart: useArrayProp(columnStart),
      $columnEnd: useArrayProp(columnEnd),
      $display: useArrayProp(display),
      $flex: useArrayProp(flex),
      $height: useArrayProp(height),
      $margin: useArrayProp(margin),
      $marginX: useArrayProp(marginX),
      $marginY: useArrayProp(marginY),
      $marginTop: useArrayProp(marginTop),
      $marginRight: useArrayProp(marginRight),
      $marginBottom: useArrayProp(marginBottom),
      $marginLeft: useArrayProp(marginLeft),
      $overflow: useArrayProp(overflow),
      $padding: useArrayProp(padding),
      $paddingX: useArrayProp(paddingX),
      $paddingY: useArrayProp(paddingY),
      $paddingTop: useArrayProp(paddingTop),
      $paddingRight: useArrayProp(paddingRight),
      $paddingBottom: useArrayProp(paddingBottom),
      $paddingLeft: useArrayProp(paddingLeft),
      $row: useArrayProp(row),
      $rowStart: useArrayProp(rowStart),
      $rowEnd: useArrayProp(rowEnd),
      $sizing: useArrayProp(sizing),
      as: asProp,
      ref,
      children: props.children
    }
  );
});
Box.displayName = "ForwardRef(Box)";
function textBaseStyle(props) {
  const { $accent, $muted } = props, { font } = getTheme_v2(props.theme);
  return lt`
    color: var(--card-fg-color);

    ${$accent && lt`
      color: var(--card-accent-fg-color);
    `}

    ${$muted && lt`
      color: var(--card-muted-fg-color);
    `}

    & code {
      font-family: ${font.code.family};
      border-radius: 1px;
      background-color: var(--card-code-bg-color);
      color: var(--card-code-fg-color);
    }

    & a {
      text-decoration: none;
      border-radius: 1px;
      color: var(--card-link-color);
      outline: none;

      @media (hover: hover) {
        &:hover {
          text-decoration: underline;
        }
      }

      &:focus {
        box-shadow:
          0 0 0 1px var(--card-bg-color),
          0 0 0 3px var(--card-focus-ring-color);
      }

      &:focus:not(:focus-visible) {
        box-shadow: none;
      }
    }

    & strong {
      font-weight: ${font.text.weights.bold};
    }

    & svg {
      /* Certain popular CSS libraries changes the defaults for SVG display */
      /* Make sure SVGs are rendered as inline elements */
      display: inline;
    }

    & [data-sanity-icon] {
      vertical-align: baseline;
      color: var(--card-icon-color);

      & path {
        vector-effect: non-scaling-stroke !important;
      }
    }
  `;
}
var Root$x = dt.div(
  responsiveTextFont,
  responsiveTextAlignStyle,
  textBaseStyle
);
var SpanWithTextOverflow$1 = dt.span`
  display: block;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  overflow: clip;
`;
var Text = (0, import_react49.forwardRef)(function(props, ref) {
  const {
    accent = false,
    align,
    children: childrenProp,
    muted = false,
    size: size22 = 2,
    textOverflow,
    weight,
    ...restProps
  } = props;
  let children = childrenProp;
  return textOverflow === "ellipsis" && (children = (0, import_jsx_runtime2.jsx)(SpanWithTextOverflow$1, { children })), (0, import_jsx_runtime2.jsx)(
    Root$x,
    {
      "data-ui": "Text",
      ...restProps,
      $accent: accent,
      $align: useArrayProp(align),
      $muted: muted,
      ref,
      $size: useArrayProp(size22),
      $weight: weight,
      children: (0, import_jsx_runtime2.jsx)("span", { children })
    }
  );
});
Text.displayName = "ForwardRef(Text)";
function badgeStyle(props) {
  const { $tone } = props;
  return {
    "--card-bg-color": `var(--card-badge-${$tone}-bg-color)`,
    "--card-fg-color": `var(--card-badge-${$tone}-fg-color)`,
    backgroundColor: "var(--card-bg-color)",
    cursor: "default",
    "&:not([hidden])": {
      display: "inline-block",
      verticalAlign: "top"
    }
  };
}
var Root$w = dt(Box)(
  responsiveRadiusStyle,
  badgeStyle
);
var Badge = (0, import_react49.forwardRef)(function(props, ref) {
  const {
    children,
    fontSize: fontSize2 = 1,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    mode: _deprecated_mode,
    padding = 1,
    radius = "full",
    tone = "default",
    ...restProps
  } = props;
  return (0, import_jsx_runtime2.jsx)(
    Root$w,
    {
      "data-ui": "Badge",
      ...restProps,
      $tone: tone,
      $radius: useArrayProp(radius),
      padding: useArrayProp(padding),
      ref,
      children: (0, import_jsx_runtime2.jsx)(Text, { size: fontSize2, children })
    }
  );
});
Badge.displayName = "ForwardRef(Badge)";
var Root$v = dt(Box)(
  flexItemStyle,
  responsiveFlexStyle
);
var Flex = (0, import_react49.forwardRef)(function(props, ref) {
  const { align, as, direction = "row", gap, justify, wrap: wrap2, ...restProps } = props;
  return (0, import_jsx_runtime2.jsx)(
    Root$v,
    {
      "data-ui": "Flex",
      ...restProps,
      $align: useArrayProp(align),
      $direction: useArrayProp(direction),
      $gap: useArrayProp(gap),
      $justify: useArrayProp(justify),
      $wrap: useArrayProp(wrap2),
      forwardedAs: as,
      ref
    }
  );
});
Flex.displayName = "ForwardRef(Flex)";
var rotate$1 = mt`
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
`;
var Root$u = dt(Text)`
  & > span > svg {
    animation: ${rotate$1} 500ms linear infinite;
  }
`;
var Spinner = (0, import_react49.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime2.jsx)(Root$u, { "data-ui": "Spinner", ...props, ref, children: (0, import_jsx_runtime2.jsx)(SpinnerIcon, {}) });
});
Spinner.displayName = "ForwardRef(Spinner)";
function _cardColorStyle(base, color3, checkered = false) {
  return {
    // from base
    "--card-backdrop-color": base.backdrop,
    "--card-focus-ring-color": base.focusRing,
    "--card-shadow-outline-color": base.shadow.outline,
    "--card-shadow-umbra-color": base.shadow.umbra,
    "--card-shadow-penumbra-color": base.shadow.penumbra,
    "--card-shadow-ambient-color": base.shadow.ambient,
    // from state
    "--card-accent-fg-color": color3.accent.fg,
    "--card-avatar-gray-bg-color": color3.avatar.gray.bg,
    "--card-avatar-gray-fg-color": color3.avatar.gray.fg,
    "--card-avatar-blue-bg-color": color3.avatar.blue.bg,
    "--card-avatar-blue-fg-color": color3.avatar.blue.fg,
    "--card-avatar-purple-bg-color": color3.avatar.purple.bg,
    "--card-avatar-purple-fg-color": color3.avatar.purple.fg,
    "--card-avatar-magenta-bg-color": color3.avatar.magenta.bg,
    "--card-avatar-magenta-fg-color": color3.avatar.magenta.fg,
    "--card-avatar-red-bg-color": color3.avatar.red.bg,
    "--card-avatar-red-fg-color": color3.avatar.red.fg,
    "--card-avatar-orange-bg-color": color3.avatar.orange.bg,
    "--card-avatar-orange-fg-color": color3.avatar.orange.fg,
    "--card-avatar-yellow-bg-color": color3.avatar.yellow.bg,
    "--card-avatar-yellow-fg-color": color3.avatar.yellow.fg,
    "--card-avatar-green-bg-color": color3.avatar.green.bg,
    "--card-avatar-green-fg-color": color3.avatar.green.fg,
    "--card-avatar-cyan-bg-color": color3.avatar.cyan.bg,
    "--card-avatar-cyan-fg-color": color3.avatar.cyan.fg,
    "--card-bg-color": color3.bg,
    "--card-bg-image": checkered ? `repeating-conic-gradient(${color3.bg} 0% 25%, ${color3.muted.bg} 0% 50%)` : void 0,
    "--card-border-color": color3.border,
    "--card-badge-default-bg-color": color3.badge.default.bg,
    "--card-badge-default-dot-color": color3.badge.default.dot,
    "--card-badge-default-fg-color": color3.badge.default.fg,
    "--card-badge-default-icon-color": color3.badge.default.icon,
    "--card-badge-primary-bg-color": color3.badge.primary.bg,
    "--card-badge-primary-dot-color": color3.badge.primary.dot,
    "--card-badge-primary-fg-color": color3.badge.primary.fg,
    "--card-badge-primary-icon-color": color3.badge.primary.icon,
    "--card-badge-positive-bg-color": color3.badge.positive.bg,
    "--card-badge-positive-dot-color": color3.badge.positive.dot,
    "--card-badge-positive-fg-color": color3.badge.positive.fg,
    "--card-badge-positive-icon-color": color3.badge.positive.icon,
    "--card-badge-caution-bg-color": color3.badge.caution.bg,
    "--card-badge-caution-dot-color": color3.badge.caution.dot,
    "--card-badge-caution-fg-color": color3.badge.caution.fg,
    "--card-badge-caution-icon-color": color3.badge.caution.icon,
    "--card-badge-critical-bg-color": color3.badge.critical.bg,
    "--card-badge-critical-dot-color": color3.badge.critical.dot,
    "--card-badge-critical-fg-color": color3.badge.critical.fg,
    "--card-badge-critical-icon-color": color3.badge.critical.icon,
    "--card-code-bg-color": color3.code.bg,
    "--card-code-fg-color": color3.code.fg,
    "--card-fg-color": color3.fg,
    "--card-icon-color": color3.icon,
    "--card-kbd-bg-color": color3.kbd.bg,
    "--card-kbd-border-color": color3.kbd.border,
    "--card-kbd-fg-color": color3.kbd.fg,
    "--card-link-fg-color": color3.link.fg,
    "--card-muted-bg-color": color3.muted.bg,
    "--card-muted-fg-color": color3.muted.fg,
    "--card-skeleton-color-from": color3.skeleton.from,
    "--card-skeleton-color-to": color3.skeleton.to,
    // deprecated variables (kept for legacy)
    "--card-bg2-color": color3.muted.bg,
    "--card-link-color": color3.link.fg,
    "--card-hairline-soft-color": color3.border,
    "--card-hairline-hard-color": color3.border
  };
}
function buttonBaseStyles(props) {
  const { $width } = props, { style } = getTheme_v2(props.theme);
  return lt`
    ${style == null ? void 0 : style.button};

    -webkit-font-smoothing: inherit;
    appearance: none;
    display: inline-flex;
    align-items: center;
    font: inherit;
    border: 0;
    outline: none;
    user-select: none;
    text-decoration: none;
    border: 0;
    box-sizing: border-box;
    padding: 0;
    margin: 0;
    white-space: nowrap;
    text-align: left;
    position: relative;
    vertical-align: top;

    ${$width === "fill" && lt`
      width: -moz-available;
      width: -webkit-fill-available;
      width: stretch;
    `}

    & > span {
      display: block;
      flex: 1;
      min-width: 0;
      border-radius: inherit;
    }

    &::-moz-focus-inner {
      border: 0;
      padding: 0;
    }
  `;
}
function combineBoxShadow(...boxShadows) {
  return boxShadows.filter(Boolean).join(",");
}
function buttonColorStyles(props) {
  var _a;
  const { $mode } = props, { button, color: baseColor, style } = getTheme_v2(props.theme), shadow = props.$mode === "ghost", mode = baseColor.button[$mode] || baseColor.button.default, color3 = mode[props.$tone] || mode.default, border2 = {
    width: button.border.width,
    color: "var(--card-border-color)"
  }, defaultBoxShadow = void 0;
  return [
    _cardColorStyle(baseColor, color3.enabled),
    {
      backgroundColor: "var(--card-bg-color)",
      color: "var(--card-fg-color)",
      boxShadow: focusRingBorderStyle(border2),
      '&:disabled, &[data-disabled="true"]': _cardColorStyle(baseColor, color3.disabled),
      "&:not([data-disabled='true'])": {
        boxShadow: combineBoxShadow(
          focusRingBorderStyle(border2),
          shadow ? defaultBoxShadow : void 0
        ),
        "&:focus": {
          boxShadow: focusRingStyle({
            base: baseColor,
            border: { width: 2, color: baseColor.bg },
            focusRing: button.focusRing
          })
        },
        "&:focus:not(:focus-visible)": {
          boxShadow: combineBoxShadow(
            focusRingBorderStyle(border2),
            shadow ? defaultBoxShadow : void 0
          )
        },
        "@media (hover: hover)": {
          "&:hover": _cardColorStyle(baseColor, color3.hovered),
          "&:active": _cardColorStyle(baseColor, color3.pressed),
          "&[data-hovered]": _cardColorStyle(baseColor, color3.hovered)
        },
        "&[data-selected]": _cardColorStyle(baseColor, color3.pressed)
      }
    },
    (_a = style == null ? void 0 : style.button) == null ? void 0 : _a.root
  ].filter(Boolean);
}
var Root$t = dt.button(responsiveRadiusStyle, buttonBaseStyles, buttonColorStyles);
var LoadingBox = dt.div`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--card-bg-color);
  border-radius: inherit;
  z-index: 1;
  box-shadow: inherit;
`;
var Button = (0, import_react49.forwardRef)(function(props, ref) {
  const {
    children,
    disabled,
    fontSize: fontSize2 = 1,
    icon: IconComponent,
    iconRight: IconRightComponent,
    justify: justifyProp = "center",
    loading,
    mode = "default",
    padding: paddingProp = 3,
    paddingX: paddingXProp,
    paddingY: paddingYProp,
    paddingTop: paddingTopProp,
    paddingBottom: paddingBottomProp,
    paddingLeft: paddingLeftProp,
    paddingRight: paddingRightProp,
    radius: radiusProp = 2,
    selected,
    space: spaceProp = 3,
    text,
    textAlign,
    tone = "default",
    type = "button",
    muted = false,
    width,
    ...restProps
  } = props, { button } = useTheme_v2(), justify = useArrayProp(justifyProp), padding = useArrayProp(paddingProp), paddingX = useArrayProp(paddingXProp), paddingY = useArrayProp(paddingYProp), paddingTop = useArrayProp(paddingTopProp), paddingBottom = useArrayProp(paddingBottomProp), paddingLeft = useArrayProp(paddingLeftProp), paddingRight = useArrayProp(paddingRightProp), radius = useArrayProp(radiusProp), space = useArrayProp(spaceProp), boxProps = (0, import_react49.useMemo)(
    () => ({
      // flex: 1,
      padding,
      paddingX,
      paddingY,
      paddingTop,
      paddingBottom,
      paddingLeft,
      paddingRight
    }),
    [padding, paddingX, paddingY, paddingTop, paddingBottom, paddingLeft, paddingRight]
  );
  return (0, import_jsx_runtime2.jsxs)(
    Root$t,
    {
      "data-ui": "Button",
      ...restProps,
      $mode: mode,
      $radius: radius,
      $tone: tone,
      "data-disabled": !!(loading || disabled),
      "data-selected": selected ? "" : void 0,
      disabled: !!(loading || disabled),
      ref,
      type,
      $width: width,
      children: [
        !!loading && (0, import_jsx_runtime2.jsx)(LoadingBox, { children: (0, import_jsx_runtime2.jsx)(Spinner, {}) }),
        (IconComponent || text || IconRightComponent) && (0, import_jsx_runtime2.jsx)(Box, { as: "span", ...boxProps, children: (0, import_jsx_runtime2.jsxs)(Flex, { as: "span", justify, gap: space, children: [
          IconComponent && (0, import_jsx_runtime2.jsxs)(Text, { size: fontSize2, children: [
            (0, import_react49.isValidElement)(IconComponent) && IconComponent,
            (0, import_react_is.isValidElementType)(IconComponent) && (0, import_jsx_runtime2.jsx)(IconComponent, {})
          ] }),
          text && (0, import_jsx_runtime2.jsx)(
            Text,
            {
              muted,
              align: textAlign,
              size: fontSize2,
              textOverflow: "ellipsis",
              weight: button.textWeight,
              children: text
            }
          ),
          IconRightComponent && (0, import_jsx_runtime2.jsxs)(Text, { size: fontSize2, children: [
            (0, import_react49.isValidElement)(IconRightComponent) && IconRightComponent,
            (0, import_react_is.isValidElementType)(IconRightComponent) && (0, import_jsx_runtime2.jsx)(IconRightComponent, {})
          ] })
        ] }) }),
        children && (0, import_jsx_runtime2.jsx)(Box, { as: "span", ...boxProps, children })
      ]
    }
  );
});
Button.displayName = "ForwardRef(Button)";
function cardStyle(props) {
  return [cardBaseStyle(props), cardColorStyle(props)];
}
function cardBaseStyle(props) {
  const { $checkered } = props, { space } = getTheme_v2(props.theme);
  return lt`
    ${$checkered && lt`
      background-size: ${space[3]}px ${space[3]}px;
      background-position: 50% 50%;
      background-image: var(--card-bg-image);
    `}

    &[data-as='button'] {
      -webkit-font-smoothing: inherit;
      appearance: none;
      outline: none;
      font: inherit;
      text-align: inherit;
      border: 0;
      width: -moz-available;
      width: -webkit-fill-available;
      width: stretch;
    }

    /* &:is(a) */
    &[data-as='a'] {
      outline: none;
      text-decoration: none;
    }

    /* &:is(pre) */
    &[data-as='pre'] {
      font: inherit;
    }
  `;
}
function cardColorStyle(props) {
  var _a;
  const { $checkered, $focusRing, $muted } = props, { card, color: color3, style } = getTheme_v2(props.theme), border2 = { width: card.border.width, color: "var(--card-border-color)" };
  return lt`
    color-scheme: ${color3._dark ? "dark" : "light"};

    ${_cardColorStyle(color3, color3, $checkered)}

    background-color: ${$muted ? "var(--card-muted-bg-color)" : "var(--card-bg-color)"};
    color: var(--card-fg-color);

    /* &:is(button) */
    &[data-as='button'] {
      --card-focus-ring-box-shadow: none;

      cursor: default;
      box-shadow: var(--card-focus-ring-box-shadow);

      &:disabled {
        ${_cardColorStyle(color3, color3.selectable.default.disabled, $checkered)}
      }

      &:not(:disabled) {
        &[data-pressed] {
          ${_cardColorStyle(color3, color3.selectable.default.pressed, $checkered)}
        }

        &[data-selected] {
          ${_cardColorStyle(color3, color3.selectable.default.selected, $checkered)}
        }

        @media (hover: hover) {
          &:not([data-pressed]):not([data-selected]) {
            &[data-hovered],
            &:hover {
              ${_cardColorStyle(color3, color3.selectable.default.hovered, $checkered)}
            }

            &:active {
              ${_cardColorStyle(color3, color3.selectable.default.pressed, $checkered)}
            }
          }
        }

        &:focus-visible {
          --card-focus-ring-box-shadow: ${$focusRing ? focusRingStyle({ base: color3, border: border2, focusRing: card.focusRing }) : void 0};
        }
      }
    }

    /* &:is(a) */
    &[data-as='a'] {
      cursor: pointer;
      box-shadow: var(--card-focus-ring-box-shadow);

      &[data-disabled] {
        ${_cardColorStyle(color3, color3.selectable.default.disabled, $checkered)}
      }

      &:not([data-disabled]) {
        &[data-pressed] {
          ${_cardColorStyle(color3, color3.selectable.default.pressed, $checkered)}
        }

        &[data-selected] {
          ${_cardColorStyle(color3, color3.selectable.default.selected, $checkered)}
        }

        @media (hover: hover) {
          &:not([data-pressed]):not([data-selected]) {
            &[data-hovered],
            &:hover {
              ${_cardColorStyle(color3, color3.selectable.default.hovered, $checkered)}
            }

            &:active {
              ${_cardColorStyle(color3, color3.selectable.default.pressed, $checkered)}
            }
          }
        }

        &:focus-visible {
          --card-focus-ring-box-shadow: ${$focusRing ? focusRingStyle({ base: color3, border: border2, focusRing: card.focusRing }) : void 0};
        }
      }
    }

    ${(_a = style == null ? void 0 : style.card) == null ? void 0 : _a.root}
  `;
}
var Root$s = dt(Box)(responsiveBorderStyle, responsiveRadiusStyle, responsiveShadowStyle, cardStyle);
var Card = (0, import_react49.forwardRef)(function(props, ref) {
  const {
    __unstable_checkered: checkered = false,
    __unstable_focusRing: focusRing = false,
    as: asProp,
    border: border2,
    borderTop: borderTop2,
    borderRight: borderRight2,
    borderBottom: borderBottom2,
    borderLeft: borderLeft2,
    muted,
    pressed,
    radius = 0,
    scheme,
    selected,
    shadow,
    tone: toneProp = "default",
    ...restProps
  } = props, as = (0, import_react_is.isValidElementType)(asProp) ? asProp : "div", rootTheme = useRootTheme(), tone = toneProp === "inherit" ? rootTheme.tone : toneProp;
  return (0, import_jsx_runtime2.jsx)(ThemeColorProvider, { scheme, tone, children: (0, import_jsx_runtime2.jsx)(
    Root$s,
    {
      "data-as": typeof as == "string" ? as : void 0,
      "data-scheme": rootTheme.scheme,
      "data-ui": "Card",
      "data-tone": tone,
      ...restProps,
      $border: useArrayProp(border2),
      $borderTop: useArrayProp(borderTop2),
      $borderRight: useArrayProp(borderRight2),
      $borderBottom: useArrayProp(borderBottom2),
      $borderLeft: useArrayProp(borderLeft2),
      $checkered: checkered,
      $focusRing: focusRing,
      $muted: muted,
      $radius: useArrayProp(radius),
      $shadow: useArrayProp(shadow),
      $tone: tone,
      "data-checkered": checkered ? "" : void 0,
      "data-pressed": pressed ? "" : void 0,
      "data-selected": selected ? "" : void 0,
      forwardedAs: as,
      ref,
      selected
    }
  ) });
});
Card.displayName = "ForwardRef(Card)";
function checkboxBaseStyles() {
  return lt`
    position: relative;
    display: inline-block;
  `;
}
function inputElementStyles(props) {
  const { color: color3, input, radius } = getTheme_v2(props.theme), { focusRing } = input.checkbox;
  return lt`
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    outline: none;
    opacity: 0;
    z-index: 1;
    padding: 0;
    margin: 0;

    & + span {
      position: relative;
      display: block;
      height: ${rem(input.checkbox.size)};
      width: ${rem(input.checkbox.size)};
      box-sizing: border-box;
      box-shadow: ${focusRingBorderStyle({
    color: color3.input.default.enabled.border,
    width: input.border.width
  })};
      border-radius: ${rem(radius[2])};
      line-height: 1;
      background-color: ${color3.input.default.enabled.bg};

      & > svg {
        display: block;
        position: absolute;
        opacity: 0;
        height: 100%;
        width: 100%;

        & > path {
          vector-effect: non-scaling-stroke;
          stroke-width: 1.5px !important;
        }
      }
    }

    &:checked + span {
      background: ${color3.input.default.enabled.fg};
      box-shadow: ${focusRingBorderStyle({
    color: color3.input.default.enabled.fg,
    width: input.border.width
  })};
      color: ${color3.input.default.enabled.bg};
    }

    /* focus */
    &:not(:disabled):focus:focus-visible + span {
      box-shadow: ${focusRingStyle({ focusRing })};
    }

    /* focus when checked - uses a different offset */
    &:not(:disabled):focus:focus-visible&:checked + span {
      box-shadow: ${focusRingStyle({ focusRing: { width: 1, offset: 1 } })};
    }

    &[data-error] + span {
      background-color: ${color3.input.invalid.enabled.border};
      box-shadow: ${focusRingBorderStyle({
    width: input.border.width,
    color: color3.input.invalid.enabled.muted.bg
  })};
      color: ${color3.input.default.disabled.fg};
    }
    &[data-error]&:checked + span {
      background-color: ${color3.input.invalid.enabled.muted.bg};
      color: ${color3.input.default.enabled.bg};
    }
    &[data-error]&:checked&:not(:disabled):focus:focus-visible + span {
      box-shadow: ${focusRingStyle({
    border: { width: input.border.width, color: color3.input.invalid.readOnly.muted.bg },
    focusRing: { width: 1, offset: 1 }
  })};
    }

    &:disabled + span {
      background-color: ${color3.input.default.disabled.bg};
      box-shadow: ${focusRingBorderStyle({
    width: input.border.width,
    color: color3.input.default.disabled.border
  })};
      color: ${color3.input.default.disabled.fg};
    }
    &:disabled&:checked + span {
      background-color: ${color3.input.default.disabled.muted.bg};
    }

    &[data-read-only] + span {
      background-color: ${color3.input.default.readOnly.bg};
      box-shadow: ${focusRingBorderStyle({
    width: input.border.width,
    color: color3.input.default.readOnly.border
  })};
      color: ${color3.input.default.readOnly.fg};
    }

    &[data-read-only]&:checked + span {
      background-color: ${color3.input.default.readOnly.muted.bg};
    }

    &:checked + span > svg:first-child {
      opacity: 1;
    }
    &:indeterminate + span > svg:last-child {
      opacity: 1;
    }
  `;
}
var Root$r = dt.div(checkboxBaseStyles);
var Input$5 = dt.input(inputElementStyles);
var Checkbox = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const {
    checked,
    className,
    disabled,
    indeterminate,
    customValidity,
    readOnly,
    style,
    ...restProps
  } = props, ref = (0, import_react49.useRef)(null);
  return (0, import_react49.useImperativeHandle)(
    forwardedRef,
    () => ref.current
  ), (0, import_react49.useEffect)(() => {
    ref.current && (ref.current.indeterminate = indeterminate || false);
  }, [indeterminate]), useCustomValidity(ref, customValidity), (0, import_jsx_runtime2.jsxs)(Root$r, { className, "data-ui": "Checkbox", style, children: [
    (0, import_jsx_runtime2.jsx)(
      Input$5,
      {
        "data-read-only": !disabled && readOnly ? "" : void 0,
        "data-error": customValidity ? "" : void 0,
        ...restProps,
        checked,
        disabled: disabled || readOnly,
        type: "checkbox",
        readOnly,
        ref
      }
    ),
    (0, import_jsx_runtime2.jsxs)("span", { children: [
      (0, import_jsx_runtime2.jsx)(CheckmarkIcon, {}),
      (0, import_jsx_runtime2.jsx)(RemoveIcon, {})
    ] })
  ] });
});
Checkbox.displayName = "ForwardRef(Checkbox)";
function codeSyntaxHighlightingStyle({ theme }) {
  const {
    color: { syntax: color3 }
  } = getTheme_v2(theme);
  return {
    "&.atrule": { color: color3.atrule },
    "&.attr-name": { color: color3.attrName },
    "&.attr-value": { color: color3.attrValue },
    "&.attribute": { color: color3.attribute },
    "&.boolean": { color: color3.boolean },
    "&.builtin": { color: color3.builtin },
    "&.cdata": { color: color3.cdata },
    "&.char": { color: color3.char },
    "&.class": { color: color3.class },
    "&.class-name": { color: color3.className },
    "&.comment": { color: color3.comment },
    "&.constant": { color: color3.constant },
    "&.deleted": { color: color3.deleted },
    "&.doctype": { color: color3.doctype },
    "&.entity": { color: color3.entity },
    "&.function": { color: color3.function },
    "&.hexcode": { color: color3.hexcode },
    "&.id": { color: color3.id },
    "&.important": { color: color3.important },
    "&.inserted": { color: color3.inserted },
    "&.keyword": { color: color3.keyword },
    "&.number": { color: color3.number },
    "&.operator": { color: color3.operator },
    "&.prolog": { color: color3.prolog },
    "&.property": { color: color3.property },
    "&.pseudo-class": { color: color3.pseudoClass },
    "&.pseudo-element": { color: color3.pseudoElement },
    "&.punctuation": { color: color3.punctuation },
    "&.regex": { color: color3.regex },
    "&.selector": { color: color3.selector },
    "&.string": { color: color3.string },
    "&.symbol": { color: color3.symbol },
    "&.tag": { color: color3.tag },
    "&.unit": { color: color3.unit },
    "&.url": { color: color3.url },
    "&.variable": { color: color3.variable }
  };
}
function codeBaseStyle() {
  return lt`
    color: var(--card-code-fg-color);

    & code {
      font-family: inherit;

      &.refractor .token {
        ${codeSyntaxHighlightingStyle}
      }
    }

    & a {
      color: inherit;
      text-decoration: underline;
      border-radius: 1px;
    }

    & svg {
      /* Certain popular CSS libraries changes the defaults for SVG display */
      /* Make sure SVGs are rendered as inline elements */
      display: inline;
    }

    & [data-sanity-icon] {
      vertical-align: baseline;
    }
  `;
}
var Root$q = dt.pre(codeBaseStyle, responsiveCodeFontStyle);
var Code = (0, import_react49.forwardRef)(function(props, ref) {
  const { children, language: languageProp, size: size22 = 2, weight, ...restProps } = props, language = typeof languageProp == "string" ? languageProp : void 0, registered = language ? import_react_refractor.default.hasLanguage(language) : false;
  return (0, import_jsx_runtime2.jsxs)(Root$q, { "data-ui": "Code", ...restProps, $size: useArrayProp(size22), $weight: weight, ref, children: [
    !(language && registered) && (0, import_jsx_runtime2.jsx)("code", { children }),
    language && registered && (0, import_jsx_runtime2.jsx)(import_react_refractor.default, { inline: true, language, value: String(children) })
  ] });
});
Code.displayName = "ForwardRef(Code)";
var BASE_STYLE$1 = {
  width: "100%",
  margin: "0 auto"
};
function containerBaseStyle() {
  return BASE_STYLE$1;
}
function responsiveContainerWidthStyle(props) {
  const { container, media } = getTheme_v2(props.theme);
  return _responsive(media, props.$width, (val) => ({
    maxWidth: val === "auto" ? "none" : rem(container[val])
  }));
}
var Root$p = dt(Box)(
  containerBaseStyle,
  responsiveContainerWidthStyle
);
var Container = (0, import_react49.forwardRef)(function(props, ref) {
  const { as, width = 2, ...restProps } = props;
  return (0, import_jsx_runtime2.jsx)(
    Root$p,
    {
      "data-ui": "Container",
      ...restProps,
      $width: useArrayProp(width),
      forwardedAs: as,
      ref
    }
  );
});
Container.displayName = "ForwardRef(Container)";
var Root$o = dt(Box)(responsiveGridStyle);
var Grid = (0, import_react49.forwardRef)(function(props, ref) {
  const { as, autoRows, autoCols, autoFlow, columns, gap, gapX, gapY, rows, children, ...restProps } = props;
  return (0, import_jsx_runtime2.jsx)(
    Root$o,
    {
      "data-as": typeof as == "string" ? as : void 0,
      "data-ui": "Grid",
      ...restProps,
      $autoRows: useArrayProp(autoRows),
      $autoCols: useArrayProp(autoCols),
      $autoFlow: useArrayProp(autoFlow),
      $columns: useArrayProp(columns),
      $gap: useArrayProp(gap),
      $gapX: useArrayProp(gapX),
      $gapY: useArrayProp(gapY),
      $rows: useArrayProp(rows),
      forwardedAs: as,
      ref,
      children
    }
  );
});
Grid.displayName = "ForwardRef(Grid)";
function headingBaseStyle(props) {
  const { $accent, $muted } = props, { font } = getTheme_v2(props.theme);
  return lt`
    ${$accent && lt`
      color: var(--card-accent-fg-color);
    `}

    ${$muted && lt`
      color: var(--card-muted-fg-color);
    `}

    & code {
      font-family: ${font.code.family};
      border-radius: 1px;
    }

    & a {
      text-decoration: none;
      border-radius: 1px;
      color: var(--card-link-color);
      outline: none;

      @media (hover: hover) {
        &:hover {
          text-decoration: underline;
        }
      }

      &:focus {
        box-shadow:
          0 0 0 1px var(--card-bg-color),
          0 0 0 3px var(--card-focus-ring-color);
      }

      &:focus:not(:focus-visible) {
        box-shadow: none;
      }
    }

    & strong {
      font-weight: ${font.heading.weights.bold};
    }

    & svg {
      /* Certain popular CSS libraries changes the defaults for SVG display */
      /* Make sure SVGs are rendered as inline elements */
      display: inline;
    }

    & [data-sanity-icon] {
      vertical-align: baseline;
    }
  `;
}
var Root$n = dt.div(headingBaseStyle, responsiveTextAlignStyle, responsiveHeadingFont);
var SpanWithTextOverflow = dt.span`
  display: block;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  overflow: clip;
`;
var Heading = (0, import_react49.forwardRef)(function(props, ref) {
  const {
    accent = false,
    align,
    children: childrenProp,
    muted = false,
    size: size22 = 2,
    textOverflow,
    weight,
    ...restProps
  } = props;
  let children = childrenProp;
  return textOverflow === "ellipsis" && (children = (0, import_jsx_runtime2.jsx)(SpanWithTextOverflow, { children })), (0, import_jsx_runtime2.jsx)(
    Root$n,
    {
      "data-ui": "Heading",
      ...restProps,
      $accent: accent,
      $align: useArrayProp(align),
      $muted: muted,
      $size: useArrayProp(size22),
      $weight: weight,
      ref,
      children: (0, import_jsx_runtime2.jsx)("span", { children })
    }
  );
});
Heading.displayName = "ForwardRef(Heading)";
function inlineBaseStyle() {
  return {
    lineHeight: 0,
    "&&:not([hidden])": {
      display: "block"
    },
    "& > div": {
      display: "inline-block",
      verticalAlign: "middle"
    }
  };
}
function inlineSpaceStyle(props) {
  const { media, space } = getTheme_v2(props.theme);
  return _responsive(media, props.$space, (spaceIndex) => {
    const _space = rem(spaceIndex === 0.5 ? space[1] / 2 : space[spaceIndex]);
    return {
      margin: `-${_space} 0 0 -${_space}`,
      "& > div": { padding: `${_space} 0 0 ${_space}` }
    };
  });
}
var Root$m = dt(Box)(inlineBaseStyle, inlineSpaceStyle);
var Inline = (0, import_react49.forwardRef)(function(props, ref) {
  const { as, children: childrenProp, space, ...restProps } = props, children = (0, import_react49.useMemo)(
    () => import_react49.Children.map(childrenProp, (child) => child && (0, import_jsx_runtime2.jsx)("div", { children: child })),
    [childrenProp]
  );
  return (0, import_jsx_runtime2.jsx)(
    Root$m,
    {
      "data-ui": "Inline",
      ...restProps,
      $space: useArrayProp(space),
      forwardedAs: as,
      ref,
      children
    }
  );
});
Inline.displayName = "ForwardRef(Inline)";
function kbdStyle() {
  return lt`
    --card-bg-color: var(--card-kbd-bg-color);
    --card-border-color: var(--card-kbd-border-color);
    --card-fg-color: var(--card-kbd-fg-color);

    box-shadow: inset 0 0 0 1px var(--card-border-color);
    background: var(--card-bg-color);
    font: inherit;

    vertical-align: top;

    &:not([hidden]) {
      display: inline-block;
    }
  `;
}
var Root$l = dt.kbd(responsiveRadiusStyle, kbdStyle);
var KBD = (0, import_react49.forwardRef)(function(props, ref) {
  const { children, fontSize: fontSize2 = 0, padding = 1, radius = 2, ...restProps } = props;
  return (0, import_jsx_runtime2.jsx)(Root$l, { "data-ui": "KBD", ...restProps, $radius: useArrayProp(radius), ref, children: (0, import_jsx_runtime2.jsx)(Box, { as: "span", padding, children: (0, import_jsx_runtime2.jsx)(Text, { as: "span", size: fontSize2, weight: "semibold", children }) }) });
});
KBD.displayName = "ForwardRef(KBD)";
var origin = {
  name: "@sanity/ui/origin",
  fn({ middlewareData, placement, rects }) {
    var _a, _b;
    const [side] = placement.split("-"), floatingWidth = rects.floating.width, floatingHeight = rects.floating.height, shiftX = ((_a = middlewareData.shift) == null ? void 0 : _a.x) || 0, shiftY = ((_b = middlewareData.shift) == null ? void 0 : _b.y) || 0;
    if (floatingWidth <= 0 || floatingHeight <= 0)
      return {};
    const isVerticalPlacement = ["bottom", "top"].includes(side), { originX, originY } = isVerticalPlacement ? {
      originX: clamp4(0.5 - shiftX / floatingWidth, 0, 1),
      originY: side === "bottom" ? 0 : 1
    } : {
      originX: side === "left" ? 1 : 0,
      originY: clamp4(0.5 - shiftY / floatingHeight, 0, 1)
    };
    return {
      data: { originX, originY }
    };
  }
};
function clamp4(num, min2, max2) {
  return Math.min(Math.max(num, min2), max2);
}
function moveTowardsLength(movingPoint, targetPoint, amount) {
  const width = targetPoint.x - movingPoint.x, height = targetPoint.y - movingPoint.y, distance2 = Math.sqrt(width * width + height * height);
  return moveTowardsFractional(movingPoint, targetPoint, Math.min(1, amount / distance2));
}
function moveTowardsFractional(movingPoint, targetPoint, fraction) {
  return {
    x: movingPoint.x + (targetPoint.x - movingPoint.x) * fraction,
    y: movingPoint.y + (targetPoint.y - movingPoint.y) * fraction
  };
}
function getRoundedCommands(points) {
  const len = points.length, cmds = [];
  for (let i2 = 0; i2 < len; i2 += 1) {
    const point = points[i2], prevPoint = points[i2 - 1], nextPoint = points[i2 + 1];
    if (prevPoint && point.radius) {
      const curveStart = moveTowardsLength(point, prevPoint, point.radius), curveEnd = moveTowardsLength(point, nextPoint, point.radius), startControl = moveTowardsFractional(curveStart, point, 0.5), endControl = moveTowardsFractional(point, curveEnd, 0.5);
      cmds.push({
        type: "point",
        ...curveStart
      }), cmds.push({
        type: "curve",
        curveEnd,
        startControl,
        endControl
      });
    } else
      cmds.push({
        type: "point",
        ...point
      });
  }
  return cmds;
}
function compileCommands(cmds) {
  return cmds.map((n, idx) => n.type === "point" ? `${idx === 0 ? "M" : "L"} ${n.x} ${n.y}` : n.type === "curve" ? `C ${n.startControl.x} ${n.startControl.y} ${n.endControl.x} ${n.endControl.y} ${n.curveEnd.x} ${n.curveEnd.y}` : "").join(" ");
}
var Root$k = dt.div(
  ({ $w: w2 }) => lt`
    position: absolute;
    width: ${w2}px;
    height: ${w2}px;

    :empty + & {
      display: none;
    }

    & > svg {
      display: block;
      line-height: 0;
      transform-origin: ${w2 / 2}px ${w2 / 2}px;
    }

    [data-placement^='top'] > & {
      bottom: -${w2}px;

      & > svg {
        transform: rotate(0);
      }
    }

    [data-placement^='right'] > & {
      left: -${w2}px;

      & > svg {
        transform: rotate(90deg);
      }
    }

    [data-placement^='left'] > & {
      right: -${w2}px;

      & > svg {
        transform: rotate(-90deg);
      }
    }

    [data-placement^='bottom'] > & {
      top: -${w2}px;

      & > svg {
        transform: rotate(180deg);
      }
    }
  `
);
var StrokePath = dt.path`
  stroke: var(--card-shadow-outline-color);
`;
var ShapePath = dt.path`
  fill: var(--card-bg-color);
`;
var Arrow = (0, import_react49.forwardRef)(function(props, ref) {
  const { width: w2, height: h, radius = 0, ...restProps } = props, { card } = useTheme_v2(), strokeWidth = card.shadow.outline, center = w2 / 2, points = [
    {
      x: 0,
      y: 0
    },
    {
      x: radius,
      y: 0,
      radius
    },
    {
      x: center,
      y: h - 1,
      radius
    },
    {
      x: w2 - radius,
      y: 0,
      radius
    },
    {
      x: w2,
      y: 0
    }
  ], cmds = getRoundedCommands(points), path = compileCommands(cmds), strokePath = `${path}`, fillPath = `${path} M ${w2} -1 M 0 -1 Z`;
  return (0, import_jsx_runtime2.jsx)(Root$k, { ...restProps, $w: w2, ref, children: (0, import_jsx_runtime2.jsxs)("svg", { width: w2, height: w2, viewBox: `0 0 ${w2} ${w2}`, children: [
    (0, import_jsx_runtime2.jsx)("mask", { id: "stroke-mask", children: (0, import_jsx_runtime2.jsx)("rect", { x: 0, y: strokeWidth, width: w2, height: w2, fill: "white" }) }),
    (0, import_jsx_runtime2.jsx)(StrokePath, { d: strokePath, mask: "url(#stroke-mask)", strokeWidth: strokeWidth * 2 }),
    (0, import_jsx_runtime2.jsx)(ShapePath, { d: fillPath })
  ] }) });
});
Arrow.displayName = "ForwardRef(Arrow)";
var BoundaryElementContext = createGlobalScopedContext(
  "@sanity/ui/context/boundaryElement",
  null
);
function BoundaryElementProvider(props) {
  const { children, element } = props, value = (0, import_react49.useMemo)(() => ({ version: 0, element }), [element]);
  return (0, import_jsx_runtime2.jsx)(BoundaryElementContext.Provider, { value, children });
}
BoundaryElementProvider.displayName = "BoundaryElementProvider";
function isRecord2(value) {
  return !!(value && typeof value == "object" && !Array.isArray(value));
}
var DEFAULT_VALUE = {
  version: 0,
  element: null
};
function useBoundaryElement() {
  const value = (0, import_react49.useContext)(BoundaryElementContext);
  if (value && (!isRecord2(value) || value.version !== 0))
    throw new Error("useBoundaryElement(): the context value is not compatible");
  return value || DEFAULT_VALUE;
}
function ConditionalWrapper({
  children,
  condition,
  wrapper
}) {
  return condition ? wrapper(children) : children;
}
ConditionalWrapper.displayName = "ConditionalWrapper";
function findMaxBreakpoints(media, width) {
  const ret = [];
  for (let i2 = 0; i2 < media.length; i2 += 1)
    media[i2] > width && ret.push(i2);
  return ret;
}
function findMinBreakpoints(media, width) {
  const ret = [];
  for (let i2 = 0; i2 < media.length; i2 += 1)
    media[i2] <= width && ret.push(i2);
  return ret;
}
var ElementQuery = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const theme = useTheme_v2(), { children, media = theme.media, ...restProps } = props, ref = (0, import_react49.useRef)(null), [element, setElement] = (0, import_react49.useState)(null), elementSize = useElementSize(element), width = (0, import_react49.useMemo)(() => (elementSize == null ? void 0 : elementSize.border.width) ?? window.innerWidth, [elementSize]), max2 = (0, import_react49.useMemo)(() => findMaxBreakpoints(media, width), [media, width]), min2 = (0, import_react49.useMemo)(() => findMinBreakpoints(media, width), [media, width]);
  (0, import_react49.useImperativeHandle)(forwardedRef, () => ref.current);
  const setRef = (0, import_react49.useCallback)((el) => {
    ref.current = el, setElement(el);
  }, []);
  return (0, import_jsx_runtime2.jsx)(
    "div",
    {
      "data-ui": "ElementQuery",
      ...restProps,
      "data-eq-max": max2.length ? max2.join(" ") : void 0,
      "data-eq-min": min2.length ? min2.join(" ") : void 0,
      ref: setRef,
      children
    }
  );
});
ElementQuery.displayName = "ForwardRef(ElementQuery)";
var ErrorBoundary = class extends import_react49.Component {
  constructor() {
    super(...arguments);
    __publicField(this, "state", { error: null });
  }
  static getDerivedStateFromError(error) {
    return { error };
  }
  componentDidCatch(error, info) {
    this.props.onCatch({ error, info });
  }
  render() {
    const { error } = this.state;
    if (error) {
      const message = typeof (error == null ? void 0 : error.message) == "string" ? error.message : "Error";
      return (0, import_jsx_runtime2.jsx)(Code, { children: message });
    }
    return this.props.children;
  }
};
function getLayerContext(contextValue) {
  if (!isRecord2(contextValue) || contextValue.version !== 0)
    throw new Error("the context value is not compatible");
  if (!contextValue)
    throw new Error("components using `useLayer()` should be wrapped in a <LayerProvider>.");
  if (contextValue.version === 0)
    return contextValue;
  throw new Error("could not get layer context");
}
var LayerContext = createGlobalScopedContext(
  "@sanity/ui/context/layer",
  null
);
function useLayer() {
  const value = (0, import_react49.useContext)(LayerContext);
  if (!value)
    throw new Error("useLayer(): missing context value");
  try {
    return getLayerContext(value);
  } catch (err) {
    throw err instanceof Error ? new Error(`useLayer(): ${err.message}`) : new Error(`useLayer(): ${err}`);
  }
}
function _raf(fn) {
  const frameId = requestAnimationFrame(fn);
  return () => {
    cancelAnimationFrame(frameId);
  };
}
function _raf2(fn) {
  let innerDispose = null;
  const outerDispose = _raf(() => {
    innerDispose = _raf(fn);
  });
  return () => {
    innerDispose && innerDispose(), outerDispose();
  };
}
function _isEnterToClickElement(element) {
  return isHTMLAnchorElement(element) || isHTMLButtonElement(element);
}
function isHTMLElement2(node2) {
  return node2 instanceof Node && node2.nodeType === Node.ELEMENT_NODE;
}
function isHTMLAnchorElement(element) {
  return isHTMLElement2(element) && element.nodeName === "A";
}
function isHTMLInputElement(element) {
  return isHTMLElement2(element) && element.nodeName === "INPUT";
}
function isHTMLButtonElement(element) {
  return isHTMLElement2(element) && element.nodeName === "BUTTON";
}
function isHTMLSelectElement(element) {
  return isHTMLElement2(element) && element.nodeName === "SELECT";
}
function isHTMLTextAreaElement(element) {
  return isHTMLElement2(element) && element.nodeName === "TEXTAREA";
}
function containsOrEqualsElement(element, node2) {
  return element.contains(node2) || element === node2;
}
function _hasFocus(element) {
  return !!document.activeElement && element.contains(document.activeElement);
}
function isFocusable(element) {
  return element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null ? true : isHTMLAnchorElement(element) ? !!element.href && element.rel !== "ignore" : isHTMLInputElement(element) ? element.type !== "hidden" && element.type !== "file" && !element.disabled : isHTMLButtonElement(element) || isHTMLSelectElement(element) || isHTMLTextAreaElement(element) ? !element.disabled : false;
}
function attemptFocus(element) {
  if (!isFocusable(element))
    return false;
  try {
    element.focus();
  } catch {
  }
  return document.activeElement === element;
}
function focusFirstDescendant(element) {
  for (let i2 = 0; i2 < element.childNodes.length; i2++) {
    const child = element.childNodes[i2];
    if (isHTMLElement2(child) && (attemptFocus(child) || focusFirstDescendant(child)))
      return true;
  }
  return false;
}
function focusLastDescendant(element) {
  for (let i2 = element.childNodes.length - 1; i2 >= 0; i2--) {
    const child = element.childNodes[i2];
    if (isHTMLElement2(child) && (attemptFocus(child) || focusLastDescendant(child)))
      return true;
  }
  return false;
}
function _isScrollable(el) {
  if (!(el instanceof Element))
    return false;
  const style = window.getComputedStyle(el);
  return style.overflowX.includes("auto") || style.overflowX.includes("scroll") || style.overflowY.includes("auto") || style.overflowY.includes("scroll");
}
function LayerProvider(props) {
  const { children, zOffset: zOffsetProp = 0 } = props, parentContextValue = (0, import_react49.useContext)(LayerContext), parent = parentContextValue && getLayerContext(parentContextValue), parentRegisterChild = parent == null ? void 0 : parent.registerChild, level = ((parent == null ? void 0 : parent.level) ?? 0) + 1, zOffset = useArrayProp(zOffsetProp), maxMediaIndex = zOffset.length - 1, mediaIndex = Math.min(useMediaIndex(), maxMediaIndex), zIndex = parent ? parent.zIndex + zOffset[mediaIndex] : zOffset[mediaIndex], [, setChildLayers] = (0, import_react49.useState)({}), [size22, setSize] = (0, import_react49.useState)(0), isTopLayer2 = size22 === 0, registerChild = (0, import_react49.useCallback)(
    (childLevel) => {
      const parentDispose = parentRegisterChild == null ? void 0 : parentRegisterChild(childLevel);
      return childLevel !== void 0 ? setChildLayers((state) => {
        const prevLen = state[childLevel] ?? 0, nextState = { ...state, [childLevel]: prevLen + 1 };
        return setSize(Object.keys(nextState).length), nextState;
      }) : setSize((v2) => v2 + 1), () => {
        childLevel !== void 0 ? setChildLayers((state) => {
          const nextState = { ...state };
          return nextState[childLevel] === 1 ? (delete nextState[childLevel], setSize(Object.keys(nextState).length)) : nextState[childLevel] -= 1, nextState;
        }) : setSize((v2) => v2 - 1), parentDispose == null ? void 0 : parentDispose();
      };
    },
    [parentRegisterChild]
  );
  (0, import_react49.useEffect)(() => parentRegisterChild == null ? void 0 : parentRegisterChild(level), [level, parentRegisterChild]);
  const value = (0, import_react49.useMemo)(
    () => ({
      version: 0,
      isTopLayer: isTopLayer2,
      level,
      registerChild,
      size: size22,
      zIndex
    }),
    [isTopLayer2, level, registerChild, size22, zIndex]
  );
  return (0, import_jsx_runtime2.jsx)(LayerContext.Provider, { value, children });
}
LayerProvider.displayName = "LayerProvider";
var Root$j = dt.div({ position: "relative" });
var LayerChildren = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const { children, onActivate, onFocus, style = EMPTY_RECORD, ...restProps } = props, { zIndex, isTopLayer: isTopLayer2 } = useLayer(), lastFocusedRef = (0, import_react49.useRef)(null), ref = (0, import_react49.useRef)(null), isTopLayerRef = (0, import_react49.useRef)(isTopLayer2);
  (0, import_react49.useImperativeHandle)(forwardedRef, () => ref.current), (0, import_react49.useEffect)(() => {
    isTopLayerRef.current !== isTopLayer2 && isTopLayer2 && (onActivate == null ? void 0 : onActivate({ activeElement: lastFocusedRef.current })), isTopLayerRef.current = isTopLayer2;
  }, [isTopLayer2, onActivate]);
  const handleFocus = (0, import_react49.useCallback)(
    (event) => {
      onFocus == null ? void 0 : onFocus(event);
      const rootElement = ref.current, target = document.activeElement;
      !isTopLayer2 || !rootElement || !target || isHTMLElement2(target) && containsOrEqualsElement(rootElement, target) && (lastFocusedRef.current = target);
    },
    [isTopLayer2, onFocus]
  );
  return (0, import_jsx_runtime2.jsx)(Root$j, { ...restProps, "data-ui": "Layer", onFocus: handleFocus, ref, style: { ...style, zIndex }, children });
});
var Layer = (0, import_react49.forwardRef)(function(props, ref) {
  const { children, zOffset = 1, ...restProps } = props;
  return (0, import_jsx_runtime2.jsx)(LayerProvider, { zOffset, children: (0, import_jsx_runtime2.jsx)(LayerChildren, { ...restProps, ref, children }) });
});
Layer.displayName = "ForwardRef(Layer)";
var key = "@sanity/ui/context/portal";
var elementKey = Symbol.for(`${key}/element`);
globalScope[elementKey] = null;
var defaultContextValue = {
  version: 0,
  boundaryElement: null,
  get element() {
    return typeof document > "u" ? null : (globalScope[elementKey] || (globalScope[elementKey] = document.createElement("div"), globalScope[elementKey].setAttribute("data-portal", ""), document.body.appendChild(globalScope[elementKey])), globalScope[elementKey]);
  }
};
var PortalContext = createGlobalScopedContext(key, defaultContextValue);
function usePortal() {
  const value = (0, import_react49.useContext)(PortalContext);
  if (!value)
    throw new Error("usePortal(): missing context value");
  if (!isRecord2(value) || value.version !== 0)
    throw new Error("usePortal(): the context value is not compatible");
  return value;
}
function Portal(props) {
  var _a;
  const { children, __unstable_name: name } = props, portal = usePortal(), portalElement = (name ? portal.elements && portal.elements[name] : portal.element) || ((_a = portal.elements) == null ? void 0 : _a.default);
  return portalElement ? (0, import_react_dom2.createPortal)(children, portalElement) : null;
}
Portal.displayName = "Portal";
function PortalProvider(props) {
  const { boundaryElement, children, element, __unstable_elements: elementsProp } = props, elements = useUnique(elementsProp), fallbackElement = (0, import_react49.useSyncExternalStore)(
    emptySubscribe,
    () => document.body,
    () => null
  ), value = (0, import_react49.useMemo)(() => ({
    version: 0,
    boundaryElement: boundaryElement || null,
    element: element || fallbackElement,
    elements
  }), [boundaryElement, element, elements, fallbackElement]);
  return (0, import_jsx_runtime2.jsx)(PortalContext.Provider, { value, children });
}
PortalProvider.displayName = "PortalProvider";
var emptySubscribe = () => () => {
};
function useUnique(value) {
  const valueRef = (0, import_react49.useRef)(value);
  return _isEqual(valueRef.current, value) || (valueRef.current = value), valueRef.current;
}
function _isEqual(objA, objB) {
  if (!objA || !objB)
    return objA === objB;
  const keysA = Object.keys(objA), keysB = Object.keys(objB);
  return keysA.length !== keysB.length ? false : keysA.every((key2) => objA[key2] === objB[key2]);
}
var Root$i = dt.div`
  display: block;
  width: 0;
  height: 0;
  position: absolute;
  overflow: hidden;
  overflow: clip;
`;
var SrOnly = (0, import_react49.forwardRef)(function(props, ref) {
  const { as, children } = props;
  return (0, import_jsx_runtime2.jsx)(Root$i, { "aria-hidden": true, as, "data-ui": "SrOnly", ref, children });
});
SrOnly.displayName = "ForwardRef(SrOnly)";
var Root$h = dt.div`
  position: relative;
`;
var ItemWrapper = dt.div`
  position: absolute;
  left: 0;
  right: 0;
`;
var VirtualList = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const { as = "div", gap = 0, getItemKey, items = [], onChange, renderItem, ...restProps } = props, { space } = useTheme_v2(), ref = (0, import_react49.useRef)(null), wrapperRef = (0, import_react49.useRef)(null), [scrollTop, setScrollTop] = (0, import_react49.useState)(0), [scrollHeight, setScrollHeight] = (0, import_react49.useState)(0), [itemHeight, setItemHeight] = (0, import_react49.useState)(-1);
  (0, import_react49.useImperativeHandle)(forwardedRef, () => ref.current), (0, import_react49.useEffect)(() => {
    if (!wrapperRef.current)
      return;
    const firstElement = wrapperRef.current.firstChild;
    firstElement instanceof HTMLElement && setItemHeight(firstElement.offsetHeight);
  }, [renderItem]), (0, import_react49.useEffect)(() => {
    if (!ref.current)
      return;
    let _scrollEl = ref.current.parentNode;
    for (; _scrollEl && !_isScrollable(_scrollEl); )
      _scrollEl = _scrollEl.parentNode;
    if (_scrollEl) {
      const scrollEl = _scrollEl;
      if (!(scrollEl instanceof HTMLElement))
        return;
      const handleScroll2 = () => {
        setScrollTop(scrollEl.scrollTop);
      };
      scrollEl.addEventListener("scroll", handleScroll2, { passive: true });
      const ro = new _ResizeObserver((entries) => {
        setScrollHeight(entries[0].contentRect.height);
      });
      return ro.observe(scrollEl), handleScroll2(), () => {
        scrollEl.removeEventListener("scroll", handleScroll2), ro.unobserve(scrollEl), ro.disconnect();
      };
    }
    const handleScroll = () => {
      setScrollTop(window.scrollY);
    }, handleResize = () => {
      setScrollHeight(window.innerHeight);
    };
    return window.addEventListener("scroll", handleScroll, { passive: true }), window.addEventListener("resize", handleResize), setScrollHeight(window.innerHeight), handleScroll(), () => {
      window.removeEventListener("scroll", handleScroll), window.removeEventListener("resize", handleResize);
    };
  }, []);
  const len = items.length, height = itemHeight ? len * (itemHeight + space[gap]) - space[gap] : 0, fromIndex = height ? Math.max(Math.floor(scrollTop / height * len) - 2, 0) : 0, toIndex = height ? Math.ceil((scrollTop + scrollHeight) / height * len) + 1 : 0;
  (0, import_react49.useEffect)(() => {
    onChange && onChange({ fromIndex, gap: space[gap], itemHeight, scrollHeight, scrollTop, toIndex });
  }, [fromIndex, gap, itemHeight, onChange, scrollHeight, scrollTop, space, toIndex]);
  const children = (0, import_react49.useMemo)(() => !renderItem || items.length === 0 ? null : itemHeight === -1 ? [(0, import_jsx_runtime2.jsx)(ItemWrapper, { children: renderItem(items[0]) }, 0)] : items.slice(fromIndex, toIndex).map((item, _itemIndex) => {
    const itemIndex = fromIndex + _itemIndex, node2 = renderItem(item), key2 = getItemKey ? getItemKey(item, itemIndex) : itemIndex;
    return (0, import_jsx_runtime2.jsx)(ItemWrapper, { style: { top: itemIndex * (itemHeight + space[gap]) }, children: node2 }, key2);
  }), [fromIndex, gap, getItemKey, itemHeight, items, renderItem, space, toIndex]), wrapperStyle = (0, import_react49.useMemo)(() => ({ height }), [height]);
  return (0, import_jsx_runtime2.jsx)(Root$h, { as, "data-ui": "VirtualList", ...restProps, ref, children: (0, import_jsx_runtime2.jsx)("div", { ref: wrapperRef, style: wrapperStyle, children }) });
});
VirtualList.displayName = "ForwardRef(VirtualList)";
var DEFAULT_POPOVER_DISTANCE = 4;
var DEFAULT_POPOVER_PADDING = 4;
var DEFAULT_POPOVER_ARROW_WIDTH = 19;
var DEFAULT_POPOVER_ARROW_HEIGHT = 8;
var DEFAULT_POPOVER_ARROW_RADIUS = 2;
var DEFAULT_POPOVER_MARGINS = [0, 0, 0, 0];
var DEFAULT_FALLBACK_PLACEMENTS$1 = {
  top: ["bottom", "left", "right"],
  "top-start": ["bottom-start", "left-start", "right-start"],
  "top-end": ["bottom-end", "left-end", "right-end"],
  bottom: ["top", "left", "right"],
  "bottom-start": ["top-start", "left-start", "right-start"],
  "bottom-end": ["top-end", "left-end", "right-end"],
  left: ["right", "top", "bottom"],
  "left-start": ["right-start", "top-start", "bottom-start"],
  "left-end": ["right-end", "top-end", "bottom-end"],
  right: ["left", "top", "bottom"],
  "right-start": ["left-start", "top-start", "bottom-start"],
  "right-end": ["left-end", "top-end", "bottom-end"]
};
function size3(options) {
  const { apply, margins, padding = 0 } = options;
  return {
    name: "@sanity/ui/size",
    async fn(args) {
      const { elements, placement, platform: platform2, rects } = args, { floating, reference } = rects, overflow = await detectOverflow2(args, {
        altBoundary: true,
        boundary: options.boundaryElement || void 0,
        elementContext: "floating",
        padding,
        rootBoundary: "viewport"
      });
      let maxWidth = 1 / 0, maxHeight = 1 / 0;
      const floatingW = floating.width, floatingH = floating.height;
      placement.includes("top") && (maxWidth = floatingW - (overflow.left + overflow.right), maxHeight = floatingH - overflow.top), placement.includes("right") && (maxWidth = floatingW - overflow.right, maxHeight = floatingH - (overflow.top + overflow.bottom)), placement.includes("bottom") && (maxWidth = floatingW - (overflow.left + overflow.right), maxHeight = floatingH - overflow.bottom), placement.includes("left") && (maxWidth = floatingW - overflow.left, maxHeight = floatingH - (overflow.top + overflow.bottom)), apply({
        availableWidth: maxWidth - margins[1] - margins[3],
        availableHeight: maxHeight - margins[0] - margins[2],
        elements,
        referenceWidth: reference.width - margins[1] - margins[3]
      });
      const nextDimensions = await platform2.getDimensions(elements.floating), targetH = nextDimensions.height, targetW = nextDimensions.width;
      return floatingW !== targetW || floatingH !== targetH ? { reset: { rects: true } } : {};
    }
  };
}
function calcCurrentWidth(params) {
  const { container, mediaIndex, width } = params, w2 = width[mediaIndex], currentWidth = w2 === void 0 ? width[width.length - 1] : w2;
  return typeof currentWidth == "number" ? container[currentWidth] : void 0;
}
function calcMaxWidth(params) {
  const { boundaryWidth, currentWidth } = params;
  if (!(currentWidth === void 0 && boundaryWidth === void 0))
    return Math.min(
      currentWidth ?? 1 / 0,
      (boundaryWidth || 1 / 0) - DEFAULT_POPOVER_PADDING * 2
    );
}
var MotionCard$1 = dt(motion(Card))`
  &:not([hidden]) {
    display: flex;
  }
  flex-direction: column;
  width: max-content;
  min-width: min-content;
  & > * {
    opacity: var(${POPOVER_MOTION_CONTENT_OPACITY_PROPERTY}, 1);
    will-change: opacity;
  }
`;
var PopoverCard = (0, import_react49.memo)(
  (0, import_react49.forwardRef)(function(props, ref) {
    const {
      __unstable_margins: marginsProp,
      animate: animate2,
      arrow: arrow22,
      arrowRef,
      arrowX,
      arrowY,
      children,
      padding,
      placement,
      originX,
      originY,
      overflow,
      radius,
      scheme,
      shadow,
      strategy,
      style,
      tone,
      width,
      x: xProp,
      y: yProp,
      ...restProps
    } = props, { zIndex } = useLayer(), margins = (0, import_react49.useMemo)(
      () => marginsProp || DEFAULT_POPOVER_MARGINS,
      [marginsProp]
    ), x2 = (xProp ?? 0) + margins[3], y2 = (yProp ?? 0) + margins[0], rootStyle2 = (0, import_react49.useMemo)(
      () => ({
        left: x2,
        originX,
        originY,
        position: strategy,
        top: y2,
        width,
        zIndex,
        willChange: animate2 ? "transform" : void 0,
        ...style
      }),
      [animate2, originX, originY, strategy, style, width, x2, y2, zIndex]
    ), arrowStyle = (0, import_react49.useMemo)(
      () => ({
        left: arrowX !== null ? arrowX : void 0,
        top: arrowY !== null ? arrowY : void 0,
        right: void 0,
        bottom: void 0
      }),
      [arrowX, arrowY]
    );
    return (0, import_jsx_runtime2.jsxs)(
      MotionCard$1,
      {
        "data-ui": "Popover",
        ...restProps,
        "data-placement": placement,
        radius,
        ref,
        scheme,
        shadow,
        sizing: "border",
        style: rootStyle2,
        tone,
        ...animate2 ? POPOVER_MOTION_PROPS : {},
        children: [
          (0, import_jsx_runtime2.jsx)(Flex, { "data-ui": "Popover__wrapper", direction: "column", flex: 1, overflow, children: (0, import_jsx_runtime2.jsx)(Flex, { direction: "column", flex: 1, padding, children }) }),
          arrow22 && (0, import_jsx_runtime2.jsx)(
            Arrow,
            {
              ref: arrowRef,
              style: arrowStyle,
              width: DEFAULT_POPOVER_ARROW_WIDTH,
              height: DEFAULT_POPOVER_ARROW_HEIGHT,
              radius: DEFAULT_POPOVER_ARROW_RADIUS
            }
          )
        ]
      }
    );
  })
);
PopoverCard.displayName = "Memo(ForwardRef(PopoverCard))";
var Popover = (0, import_react49.memo)(
  (0, import_react49.forwardRef)(function(props, forwardedRef) {
    var _a, _b, _c, _d, _e2, _f;
    const { container, layer } = useTheme_v2(), boundaryElementContext = useBoundaryElement(), {
      __unstable_margins: margins = DEFAULT_POPOVER_MARGINS,
      animate: _animate = false,
      arrow: arrowProp = false,
      boundaryElement = boundaryElementContext.element,
      children: childProp,
      constrainSize = false,
      content,
      disabled,
      fallbackPlacements = props.fallbackPlacements ?? DEFAULT_FALLBACK_PLACEMENTS$1[props.placement ?? "bottom"],
      matchReferenceWidth,
      floatingBoundary = props.boundaryElement ?? boundaryElementContext.element,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onActivate,
      open,
      overflow = "hidden",
      padding: paddingProp,
      placement: placementProp = "bottom",
      portal,
      preventOverflow = true,
      radius: radiusProp = 3,
      referenceBoundary = props.boundaryElement ?? boundaryElementContext.element,
      referenceElement,
      scheme,
      shadow: shadowProp = 3,
      tone = "inherit",
      width: widthProp = "auto",
      zOffset: zOffsetProp = layer.popover.zOffset,
      updateRef,
      ...restProps
    } = props, animate2 = usePrefersReducedMotion() ? false : _animate, boundarySize = (_a = useElementSize(boundaryElement)) == null ? void 0 : _a.border, padding = useArrayProp(paddingProp), radius = useArrayProp(radiusProp), shadow = useArrayProp(shadowProp), widthArrayProp = useArrayProp(widthProp), zOffset = useArrayProp(zOffsetProp), ref = (0, import_react49.useRef)(null), arrowRef = (0, import_react49.useRef)(null), rootBoundary = "viewport";
    (0, import_react49.useImperativeHandle)(
      forwardedRef,
      () => ref.current
    );
    const mediaIndex = useMediaIndex(), boundaryWidth = constrainSize || preventOverflow ? boundarySize == null ? void 0 : boundarySize.width : void 0, width = calcCurrentWidth({
      container,
      mediaIndex,
      width: widthArrayProp
    }), widthRef = (0, import_react49.useRef)(width);
    (0, import_react49.useEffect)(() => {
      widthRef.current = width;
    }, [width]);
    const maxWidth = calcMaxWidth({ boundaryWidth, currentWidth: width }), maxWidthRef = (0, import_react49.useRef)(maxWidth);
    (0, import_react49.useEffect)(() => {
      maxWidthRef.current = maxWidth;
    }, [maxWidth]);
    const referenceWidthRef = (0, import_react49.useRef)();
    (0, import_react49.useEffect)(() => {
      const floatingElement = ref.current;
      if (!open || !floatingElement)
        return;
      const referenceWidth = referenceWidthRef.current;
      matchReferenceWidth ? referenceWidth !== void 0 && (floatingElement.style.width = `${referenceWidth}px`) : width !== void 0 && (floatingElement.style.width = `${width}px`), typeof maxWidth == "number" && (floatingElement.style.maxWidth = `${maxWidth}px`);
    }, [width, matchReferenceWidth, maxWidth, open]);
    const middleware2 = (0, import_react49.useMemo)(() => {
      const ret = [];
      return (constrainSize || preventOverflow) && ret.push(
        flip3({
          boundary: floatingBoundary || void 0,
          fallbackPlacements,
          padding: DEFAULT_POPOVER_PADDING,
          rootBoundary
        })
      ), ret.push(offset3({ mainAxis: DEFAULT_POPOVER_DISTANCE })), (constrainSize || matchReferenceWidth) && ret.push(
        size3({
          apply({ availableWidth, availableHeight, elements, referenceWidth }) {
            referenceWidthRef.current = referenceWidth;
            const _currentWidth = widthRef.current, _maxWidth = maxWidthRef.current;
            matchReferenceWidth ? elements.floating.style.width = `${referenceWidth}px` : _currentWidth !== void 0 && (elements.floating.style.width = `${_currentWidth}px`), constrainSize && (elements.floating.style.maxWidth = `${Math.min(
              availableWidth,
              _maxWidth ?? 1 / 0
            )}px`, elements.floating.style.maxHeight = `${availableHeight}px`);
          },
          boundaryElement: floatingBoundary || void 0,
          constrainSize,
          margins,
          matchReferenceWidth,
          padding: DEFAULT_POPOVER_PADDING
        })
      ), preventOverflow && ret.push(
        shift3({
          boundary: floatingBoundary || void 0,
          rootBoundary,
          padding: DEFAULT_POPOVER_PADDING
        })
      ), arrowProp && ret.push(
        arrow3({
          element: arrowRef,
          padding: DEFAULT_POPOVER_PADDING
        })
      ), animate2 && ret.push(origin), ret.push(
        hide3({
          boundary: referenceBoundary || void 0,
          padding: DEFAULT_POPOVER_PADDING,
          strategy: "referenceHidden"
        })
      ), ret;
    }, [
      animate2,
      arrowProp,
      constrainSize,
      fallbackPlacements,
      floatingBoundary,
      margins,
      matchReferenceWidth,
      preventOverflow,
      referenceBoundary
    ]), { x: x2, y: y2, middlewareData, placement, refs, strategy, update } = useFloating({
      middleware: middleware2,
      placement: placementProp,
      whileElementsMounted: autoUpdate
    }), referenceHidden = (_b = middlewareData.hide) == null ? void 0 : _b.referenceHidden, arrowX = (_c = middlewareData.arrow) == null ? void 0 : _c.x, arrowY = (_d = middlewareData.arrow) == null ? void 0 : _d.y, originX = (_e2 = middlewareData["@sanity/ui/origin"]) == null ? void 0 : _e2.originX, originY = (_f = middlewareData["@sanity/ui/origin"]) == null ? void 0 : _f.originY, setArrow = (0, import_react49.useCallback)((arrowEl) => {
      arrowRef.current = arrowEl;
    }, []), setFloating = (0, import_react49.useCallback)(
      (node2) => {
        ref.current = node2, refs.setFloating(node2);
      },
      [refs]
    ), setReference = (0, import_react49.useCallback)(
      (node2) => {
        refs.setReference(node2);
        const childRef = getElementRef(childProp);
        typeof childRef == "function" ? childRef(node2) : childRef && (childRef.current = node2);
      },
      [childProp, refs]
    ), child = (0, import_react49.useMemo)(() => !childProp || referenceElement ? null : (0, import_react49.cloneElement)(childProp, { ref: setReference }), [childProp, referenceElement, setReference]);
    if ((0, import_react49.useEffect)(() => {
      updateRef && (typeof updateRef == "function" ? updateRef(update) : updateRef && (updateRef.current = update));
    }, [update, updateRef]), (0, import_react49.useEffect)(() => {
      child || refs.setReference(referenceElement || null);
    }, [referenceElement, refs, child]), disabled)
      return childProp || (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, {});
    const popover = (0, import_jsx_runtime2.jsx)(LayerProvider, { zOffset, children: (0, import_jsx_runtime2.jsx)(
      PopoverCard,
      {
        ...restProps,
        __unstable_margins: margins,
        animate: animate2,
        arrow: arrowProp,
        arrowRef: setArrow,
        arrowX,
        arrowY,
        hidden: referenceHidden,
        overflow,
        padding,
        placement,
        radius,
        ref: setFloating,
        scheme,
        shadow,
        originX,
        originY,
        strategy,
        tone,
        width: matchReferenceWidth ? referenceWidthRef.current : width,
        x: x2,
        y: y2,
        children: content
      }
    ) });
    return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
      (0, import_jsx_runtime2.jsx)(
        ConditionalWrapper,
        {
          condition: animate2,
          wrapper: (children) => (0, import_jsx_runtime2.jsx)(AnimatePresence, { children }),
          children: open && (0, import_jsx_runtime2.jsx)(
            ConditionalWrapper,
            {
              condition: !!portal,
              wrapper: (children) => (0, import_jsx_runtime2.jsx)(Portal, { __unstable_name: typeof portal == "string" ? portal : void 0, children }),
              children: popover
            }
          )
        }
      ),
      child
    ] });
  })
);
Popover.displayName = "Memo(ForwardRef(Popover))";
function getElementRef(element) {
  var _a, _b;
  let getter = (_a = Object.getOwnPropertyDescriptor(element.props, "ref")) == null ? void 0 : _a.get, mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  return mayWarn ? element.ref : (getter = (_b = Object.getOwnPropertyDescriptor(element, "ref")) == null ? void 0 : _b.get, mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning, mayWarn ? element.props.ref : element.props.ref || element.ref);
}
function radioBaseStyle() {
  return lt`
    position: relative;

    &:not([hidden]) {
      display: inline-block;
    }

    &[data-read-only] {
      outline: 1px solid red;
    }
  `;
}
function inputElementStyle(props) {
  const { color: color3, input } = getTheme_v2(props.theme), dist = (input.radio.size - input.radio.markSize) / 2;
  return lt`
    appearance: none;
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    height: 100%;
    width: 100%;
    outline: none;
    z-index: 1;
    padding: 0;
    margin: 0;
    border-radius: ${rem(input.radio.size / 2)};
    border: none;

    /* enabled */
    & + span {
      display: block;
      position: relative;
      height: ${rem(input.radio.size)};
      width: ${rem(input.radio.size)};
      border-radius: ${rem(input.radio.size / 2)};
      background: ${color3.input.default.enabled.bg};
      box-shadow: ${focusRingBorderStyle({
    color: color3.input.default.enabled.border,
    width: input.border.width
  })};

      &::after {
        content: '';
        position: absolute;
        top: ${rem(dist)};
        left: ${rem(dist)};
        height: ${rem(input.radio.markSize)};
        width: ${rem(input.radio.markSize)};
        border-radius: ${rem(input.radio.markSize / 2)};
        background: ${color3.input.default.enabled.fg};
        opacity: 0;
      }
    }

    /* focused */
    &:not(:disabled):focus + span {
      box-shadow: ${focusRingStyle({
    border: { width: input.border.width, color: color3.input.default.enabled.border },
    focusRing: input.radio.focusRing
  })};
    }

    &:not(:disabled):focus:not(:focus-visible) + span {
      box-shadow: ${focusRingBorderStyle({
    color: color3.input.default.enabled.border,
    width: input.border.width
  })};
    }

    &:checked + span::after {
      opacity: 1;
    }

    /* customValidity */
    &[data-error] + span {
      background-color: ${color3.input.invalid.enabled.border};
      box-shadow: ${focusRingBorderStyle({
    width: input.border.width,
    color: color3.input.invalid.enabled.muted.bg
  })};
      &::after {
        background: ${color3.input.invalid.enabled.muted.bg};
      }
    }

    /* read only */
    &[data-read-only] + span {
      box-shadow: 0 0 0 1px ${color3.input.default.readOnly.border};
      background: ${color3.input.default.readOnly.bg};

      &::after {
        background: ${color3.input.default.readOnly.border};
      }
    }

    /* disabled */
    &:not([data-read-only]):disabled + span {
      box-shadow: 0 0 0 1px ${color3.input.default.disabled.border};
      background: ${color3.input.default.disabled.bg};

      &::after {
        background: ${color3.input.default.disabled.border};
      }
    }
  `;
}
var Root$g = dt.div(radioBaseStyle);
var Input$4 = dt.input(inputElementStyle);
var Radio = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const { className, disabled, style, customValidity, readOnly, ...restProps } = props, ref = (0, import_react49.useRef)(null);
  return (0, import_react49.useImperativeHandle)(
    forwardedRef,
    () => ref.current
  ), useCustomValidity(ref, customValidity), (0, import_jsx_runtime2.jsxs)(Root$g, { className, "data-ui": "Radio", style, children: [
    (0, import_jsx_runtime2.jsx)(
      Input$4,
      {
        "data-read-only": !disabled && readOnly ? "" : void 0,
        "data-error": customValidity ? "" : void 0,
        ...restProps,
        disabled: disabled || readOnly,
        readOnly,
        ref,
        type: "radio"
      }
    ),
    (0, import_jsx_runtime2.jsx)("span", {})
  ] });
});
Radio.displayName = "ForwardRef(Radio)";
function rootStyle() {
  return lt`
    position: relative;
    width: -moz-available;
    width: -webkit-fill-available;
    width: stretch;

    &:not([hidden]) {
      display: inline-block;
    }
  `;
}
function inputBaseStyle(props) {
  const { font } = getTheme_v2(props.theme);
  return lt`
    -webkit-font-smoothing: antialiased;
    appearance: none;
    border: 0;
    font-family: ${font.text.family};
    color: inherit;
    width: 100%;
    outline: none;
    margin: 0;

    &:disabled {
      opacity: 1;
    }
  `;
}
function inputColorStyle(props) {
  const { color: color3, input } = getTheme_v2(props.theme);
  return lt`
    /* enabled */
    background-color: ${color3.input.default.enabled.bg};
    color: ${color3.input.default.enabled.fg};
    box-shadow: ${focusRingBorderStyle({
    color: color3.input.default.enabled.border,
    width: input.border.width
  })};

    /* hovered */
    @media (hover: hover) {
      &:not(:disabled):hover {
        background-color: ${color3.input.default.hovered.bg};
        color: ${color3.input.default.hovered.fg};
        box-shadow: ${focusRingBorderStyle({
    color: color3.input.default.hovered.border,
    width: input.border.width
  })};
      }
    }

    /* focused */
    &:not(:disabled):focus {
      box-shadow: ${focusRingStyle({
    border: { width: input.border.width, color: color3.input.default.enabled.border },
    focusRing: input.select.focusRing
  })};
    }

    /* read-only */
    &[data-read-only] {
      background-color: ${color3.input.default.readOnly.bg};
      color: ${color3.input.default.readOnly.fg};
      box-shadow: ${focusRingBorderStyle({
    color: color3.input.default.readOnly.border,
    width: input.border.width
  })};
    }

    /* disabled */
    &:not([data-read-only]):disabled {
      background-color: ${color3.input.default.disabled.bg};
      color: ${color3.input.default.disabled.fg};
      box-shadow: ${focusRingBorderStyle({
    color: color3.input.default.disabled.border,
    width: input.border.width
  })};
    }
  `;
}
function textSize(size22) {
  return { fontSize: rem(size22.fontSize), lineHeight: rem(size22.lineHeight) };
}
function inputTextSizeStyle(props) {
  const { $fontSize } = props, { font, media } = getTheme_v2(props.theme);
  return _responsive(
    media,
    $fontSize,
    (sizeIndex) => textSize(font.text.sizes[sizeIndex] || font.text.sizes[2])
  );
}
function inputStyle() {
  return [
    responsiveRadiusStyle,
    inputBaseStyle,
    inputColorStyle,
    inputTextSizeStyle,
    responsiveInputPaddingIconRightStyle
  ];
}
function iconBoxStyle(props) {
  const { color: color3 } = getTheme_v2(props.theme);
  return lt`
    pointer-events: none;
    position: absolute;
    top: 0;
    right: 0;

    /* enabled */
    --card-fg-color: ${color3.input.default.enabled.fg};

    /* hover */
    @media (hover: hover) {
      select:not(disabled):not(:read-only):hover + && {
        --card-fg-color: ${color3.input.default.hovered.fg};
      }
    }

    /* disabled */
    select:disabled + && {
      --card-fg-color: ${color3.input.default.disabled.fg};
    }

    /* read-only */
    select[data-read-only] + && {
      --card-fg-color: ${color3.input.default.readOnly.fg};
    }
  `;
}
var selectStyle = {
  root: rootStyle,
  input: inputStyle,
  iconBox: iconBoxStyle
};
var Root$f = dt.div(selectStyle.root);
var Input$3 = dt.select(selectStyle.input);
var IconBox = dt(Box)(selectStyle.iconBox);
var Select = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const {
    children,
    customValidity,
    disabled,
    fontSize: fontSize2 = 2,
    padding = 3,
    radius = 2,
    readOnly,
    space = 3,
    ...restProps
  } = props, ref = (0, import_react49.useRef)(null);
  return (0, import_react49.useImperativeHandle)(
    forwardedRef,
    () => ref.current
  ), useCustomValidity(ref, customValidity), (0, import_jsx_runtime2.jsxs)(Root$f, { "data-ui": "Select", children: [
    (0, import_jsx_runtime2.jsx)(
      Input$3,
      {
        "data-read-only": !disabled && readOnly ? "" : void 0,
        "data-ui": "Select",
        ...restProps,
        $fontSize: useArrayProp(fontSize2),
        $padding: useArrayProp(padding),
        $radius: useArrayProp(radius),
        $space: useArrayProp(space),
        disabled: disabled || readOnly,
        ref,
        children
      }
    ),
    (0, import_jsx_runtime2.jsx)(IconBox, { padding, children: (0, import_jsx_runtime2.jsx)(Text, { size: fontSize2, children: (0, import_jsx_runtime2.jsx)(ChevronDownIcon, {}) }) })
  ] });
});
Select.displayName = "ForwardRef(Select)";
var BASE_STYLE = {
  "&&:not([hidden])": {
    display: "grid"
  },
  '&[data-as="ul"],&[data-as="ol"]': {
    listStyle: "none"
  },
  gridTemplateColumns: "minmax(0, 1fr)",
  gridAutoRows: "min-content"
};
function stackBaseStyle() {
  return BASE_STYLE;
}
function responsiveStackSpaceStyle(props) {
  const { media, space } = getTheme_v2(props.theme);
  return _responsive(media, props.$space, (spaceIndex) => ({
    gridGap: rem(space[spaceIndex])
  }));
}
var Root$e = dt(Box)(stackBaseStyle, responsiveStackSpaceStyle);
var Stack = (0, import_react49.forwardRef)(function(props, ref) {
  const { as, space, ...restProps } = props;
  return (0, import_jsx_runtime2.jsx)(
    Root$e,
    {
      "data-as": typeof as == "string" ? as : void 0,
      "data-ui": "Stack",
      ...restProps,
      $space: useArrayProp(space),
      forwardedAs: as,
      ref
    }
  );
});
Stack.displayName = "ForwardRef(Stack)";
function switchBaseStyles() {
  return lt`
    position: relative;
    &:not([hidden]) {
      display: inline-block;
    }
  `;
}
function switchInputStyles() {
  return lt`
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    opacity: 0;
    height: 100%;
    width: 100%;
    outline: none;
    padding: 0;
    margin: 0;

    /* Place the input element above the representation element */
    z-index: 1;
  `;
}
function switchRepresentationStyles(props) {
  const { color: color3, input } = getTheme_v2(props.theme);
  return lt`
    --switch-bg-color: ${color3.input.default.enabled.border};
    --switch-fg-color: ${color3.input.default.enabled.bg};
    --switch-box-shadow: none;

    &:not([hidden]) {
      display: block;
    }
    position: relative;
    width: ${rem(input.switch.width)};
    height: ${rem(input.switch.height)};
    border-radius: ${rem(input.switch.height / 2)};

    /* Make sure it’s not possible to interact with the wrapper element */
    pointer-events: none;

    &:after {
      content: '';
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 1;
      box-shadow: var(--switch-box-shadow);
      border-radius: inherit;
    }

    /* Focus styles */
    input:focus + && {
      --switch-box-shadow: ${focusRingStyle({ focusRing: input.switch.focusRing })};
    }

    input:focus:not(:focus-visible) + && {
      --switch-box-shadow: none;
    }

    input:checked + && {
      --switch-bg-color: ${color3.input.default.enabled.fg};
      --switch-fg-color: ${color3.input.default.enabled.bg};
    }

    @media (hover: hover) {
      input:not(:disabled):hover + && {
        --switch-bg-color: ${color3.input.default.hovered.border};
        --switch-fg-color: ${color3.input.default.hovered.bg};
      }

      input:not(:disabled):checked:hover + && {
        --switch-bg-color: ${color3.input.default.enabled.fg};
        --switch-fg-color: ${color3.input.default.enabled.bg};
      }
    }

    input:not([data-read-only]):disabled + && {
      --switch-bg-color: ${color3.input.default.disabled.border};
      --switch-fg-color: ${color3.input.default.disabled.bg};
    }

    input[data-read-only]:disabled + && {
      --switch-bg-color: ${color3.input.default.readOnly.border};
      --switch-fg-color: ${color3.input.default.readOnly.bg};
    }

    input:checked[data-read-only]:disabled + && {
      --switch-bg-color: ${color3.input.default.readOnly.fg};
      --switch-fg-color: ${color3.input.default.readOnly.bg};
    }
  `;
}
function switchTrackStyles(props) {
  const { input } = getTheme_v2(props.theme);
  return lt`
    &:not([hidden]) {
      display: block;
    }
    background-color: var(--switch-bg-color);
    position: absolute;
    left: 0;
    top: 0;
    width: ${rem(input.switch.width)};
    height: ${rem(input.switch.height)};
    border-radius: ${rem(input.switch.height / 2)};
  `;
}
function switchThumbStyles(props) {
  const { $indeterminate } = props, { input } = getTheme_v2(props.theme), trackWidth = input.switch.width, trackHeight = input.switch.height, trackPadding = input.switch.padding, size22 = trackHeight - input.switch.padding * 2, checkedOffset = trackWidth - trackPadding * 2 - size22, indeterminateOffset = trackWidth / 2 - size22 / 2 - trackPadding, checked = $indeterminate !== true && props.$checked === true;
  return lt`
    &:not([hidden]) {
      display: block;
    }
    position: absolute;
    left: ${rem(trackPadding)};
    top: ${rem(trackPadding)};
    height: ${rem(size22)};
    width: ${rem(size22)};
    border-radius: ${rem(size22 / 2)};
    transition-property: transform;
    transition-duration: ${input.switch.transitionDurationMs}ms;
    transition-timing-function: ${input.switch.transitionTimingFunction};
    background: var(--switch-fg-color);
    transform: translate3d(0, 0, 0);
    box-shadow: 0px 1px 0px 0px rgba(0, 0, 0, 0.05);

    ${checked && lt`
      transform: translate3d(${checkedOffset}px, 0, 0);
    `}

    ${$indeterminate && lt`
      transform: translate3d(${indeterminateOffset}px, 0, 0);
    `}
  `;
}
var Root$d = dt.span(switchBaseStyles);
var Input$2 = dt.input(switchInputStyles);
var Representation = dt.span(switchRepresentationStyles);
var Track = dt.span(switchTrackStyles);
var Thumb = dt.span(switchThumbStyles);
var Switch = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const { checked, className, disabled, indeterminate, readOnly, style, ...restProps } = props, ref = (0, import_react49.useRef)(null);
  return (0, import_react49.useImperativeHandle)(
    forwardedRef,
    () => ref.current
  ), (0, import_react49.useEffect)(() => {
    ref.current && (ref.current.indeterminate = indeterminate || false);
  }, [indeterminate]), (0, import_jsx_runtime2.jsxs)(Root$d, { className, "data-ui": "Switch", style, children: [
    (0, import_jsx_runtime2.jsx)(
      Input$2,
      {
        "data-read-only": !disabled && readOnly ? "" : void 0,
        ...restProps,
        checked: indeterminate !== true && checked,
        disabled: disabled || readOnly,
        type: "checkbox",
        ref
      }
    ),
    (0, import_jsx_runtime2.jsxs)(Representation, { "aria-hidden": true, "data-name": "representation", children: [
      (0, import_jsx_runtime2.jsx)(Track, {}),
      (0, import_jsx_runtime2.jsx)(Thumb, { $checked: checked, $indeterminate: indeterminate })
    ] })
  ] });
});
Switch.displayName = "ForwardRef(Switch)";
var Root$c = dt.span(textInputRootStyle);
var InputRoot$1 = dt.span`
  flex: 1;
  min-width: 0;
  display: block;
  position: relative;
`;
var Input$1 = dt.textarea(
  responsiveInputPaddingStyle,
  textInputBaseStyle,
  textInputFontSizeStyle
);
var Presentation$1 = dt.div(
  responsiveRadiusStyle,
  textInputRepresentationStyle
);
var TextArea = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const {
    border: border2 = true,
    customValidity,
    disabled = false,
    fontSize: fontSize2 = 2,
    padding = 3,
    radius = 2,
    weight,
    __unstable_disableFocusRing,
    ...restProps
  } = props, ref = (0, import_react49.useRef)(null), rootTheme = useRootTheme();
  return (0, import_react49.useImperativeHandle)(
    forwardedRef,
    () => ref.current
  ), useCustomValidity(ref, customValidity), (0, import_jsx_runtime2.jsx)(Root$c, { "data-ui": "TextArea", children: (0, import_jsx_runtime2.jsxs)(InputRoot$1, { children: [
    (0, import_jsx_runtime2.jsx)(
      Input$1,
      {
        "data-as": "textarea",
        "data-scheme": rootTheme.scheme,
        "data-tone": rootTheme.tone,
        ...restProps,
        $fontSize: useArrayProp(fontSize2),
        $padding: useArrayProp(padding),
        $scheme: rootTheme.scheme,
        $space: useArrayProp(0),
        $tone: rootTheme.tone,
        $weight: weight,
        disabled,
        ref
      }
    ),
    (0, import_jsx_runtime2.jsx)(
      Presentation$1,
      {
        $radius: useArrayProp(radius),
        $unstableDisableFocusRing: __unstable_disableFocusRing,
        $scheme: rootTheme.scheme,
        $tone: rootTheme.tone,
        "data-border": border2 ? "" : void 0,
        "data-scheme": rootTheme.scheme,
        "data-tone": rootTheme.tone
      }
    )
  ] }) });
});
TextArea.displayName = "ForwardRef(TextArea)";
var CLEAR_BUTTON_BOX_STYLE = { zIndex: 2 };
var Root$b = dt(Card).attrs({ forwardedAs: "span" })(textInputRootStyle);
var InputRoot = dt.span`
  flex: 1;
  min-width: 0;
  display: block;
  position: relative;
`;
var Prefix = dt(Card).attrs({ forwardedAs: "span" })`
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;

  & > span {
    display: block;
    margin: -1px;
  }
`;
var Suffix = dt(Card).attrs({ forwardedAs: "span" })`
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;

  & > span {
    display: block;
    margin: -1px;
  }
`;
var Input = dt.input(
  responsiveInputPaddingStyle,
  textInputBaseStyle,
  textInputFontSizeStyle
);
var Presentation = dt.span(
  responsiveRadiusStyle,
  textInputRepresentationStyle
);
var LeftBox = dt(Box)`
  position: absolute;
  top: 0;
  left: 0;
`;
var RightBox = dt(Box)`
  position: absolute;
  top: 0;
  right: 0;
`;
var RightCard = dt(Card)`
  background-color: transparent;
  position: absolute;
  top: 0;
  right: 0;
`;
var TextInputClearButton = dt(Button)({
  "&:not([hidden])": {
    display: "block"
  }
});
var TextInput = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const {
    __unstable_disableFocusRing,
    border: border2 = true,
    clearButton,
    disabled = false,
    fontSize: fontSizeProp = 2,
    icon: IconComponent,
    iconRight: IconRightComponent,
    onClear,
    padding: paddingProp = 3,
    prefix: prefix2,
    radius: radiusProp = 2,
    readOnly,
    space: spaceProp = 3,
    suffix,
    customValidity,
    type = "text",
    weight,
    ...restProps
  } = props, ref = (0, import_react49.useRef)(null), rootTheme = useRootTheme(), fontSize2 = useArrayProp(fontSizeProp), padding = useArrayProp(paddingProp), radius = useArrayProp(radiusProp), space = useArrayProp(spaceProp), $hasClearButton = !!clearButton, $hasIcon = !!IconComponent, $hasIconRight = !!IconRightComponent, $hasSuffix = !!suffix, $hasPrefix = !!prefix2;
  (0, import_react49.useImperativeHandle)(
    forwardedRef,
    () => ref.current
  ), useCustomValidity(ref, customValidity);
  const handleClearMouseDown = (0, import_react49.useCallback)((event) => {
    event.preventDefault(), event.stopPropagation();
  }, []), handleClearClick = (0, import_react49.useCallback)(
    (event) => {
      var _a;
      event.preventDefault(), event.stopPropagation(), onClear && onClear(), (_a = ref.current) == null ? void 0 : _a.focus();
    },
    [onClear, ref]
  ), prefixNode = (0, import_react49.useMemo)(
    () => prefix2 && (0, import_jsx_runtime2.jsx)(Prefix, { borderTop: true, borderLeft: true, borderBottom: true, radius, sizing: "border", tone: "inherit", children: (0, import_jsx_runtime2.jsx)("span", { children: prefix2 }) }),
    [prefix2, radius]
  ), presentationNode = (0, import_react49.useMemo)(
    () => (0, import_jsx_runtime2.jsxs)(
      Presentation,
      {
        $hasPrefix,
        $unstableDisableFocusRing: __unstable_disableFocusRing,
        $hasSuffix,
        $radius: radius,
        $scheme: rootTheme.scheme,
        $tone: rootTheme.tone,
        "data-border": border2 ? "" : void 0,
        "data-scheme": rootTheme.scheme,
        "data-tone": rootTheme.tone,
        children: [
          IconComponent && (0, import_jsx_runtime2.jsx)(LeftBox, { padding, children: (0, import_jsx_runtime2.jsxs)(Text, { size: fontSize2, children: [
            (0, import_react49.isValidElement)(IconComponent) && IconComponent,
            (0, import_react_is.isValidElementType)(IconComponent) && (0, import_jsx_runtime2.jsx)(IconComponent, {})
          ] }) }),
          !$hasClearButton && IconRightComponent && (0, import_jsx_runtime2.jsx)(RightBox, { padding, children: (0, import_jsx_runtime2.jsxs)(Text, { size: fontSize2, children: [
            (0, import_react49.isValidElement)(IconRightComponent) && IconRightComponent,
            (0, import_react_is.isValidElementType)(IconRightComponent) && (0, import_jsx_runtime2.jsx)(IconRightComponent, {})
          ] }) })
        ]
      }
    ),
    [
      __unstable_disableFocusRing,
      border2,
      fontSize2,
      IconComponent,
      IconRightComponent,
      padding,
      radius,
      rootTheme,
      $hasClearButton,
      $hasPrefix,
      $hasSuffix
    ]
  ), clearButtonBoxPadding = (0, import_react49.useMemo)(
    () => padding.map((v2) => v2 === 0 ? 0 : v2 === 1 || v2 === 2 ? 1 : v2 - 2),
    [padding]
  ), clearButtonPadding = (0, import_react49.useMemo)(
    () => padding.map((v2) => v2 === 0 || v2 === 1 ? 0 : v2 === 2 ? 1 : v2 - 1),
    [padding]
  ), clearButtonProps = (0, import_react49.useMemo)(
    () => typeof clearButton == "object" ? clearButton : EMPTY_RECORD,
    [clearButton]
  ), clearButtonNode = (0, import_react49.useMemo)(
    () => !disabled && !readOnly && clearButton && (0, import_jsx_runtime2.jsx)(
      RightCard,
      {
        forwardedAs: "span",
        padding: clearButtonBoxPadding,
        style: CLEAR_BUTTON_BOX_STYLE,
        tone: customValidity ? "critical" : "inherit",
        children: (0, import_jsx_runtime2.jsx)(
          TextInputClearButton,
          {
            "aria-label": "Clear",
            "data-qa": "clear-button",
            fontSize: fontSize2,
            icon: CloseIcon,
            mode: "bleed",
            padding: clearButtonPadding,
            radius,
            ...clearButtonProps,
            onClick: handleClearClick,
            onMouseDown: handleClearMouseDown
          }
        )
      }
    ),
    [
      clearButton,
      clearButtonBoxPadding,
      clearButtonPadding,
      clearButtonProps,
      customValidity,
      disabled,
      fontSize2,
      handleClearClick,
      handleClearMouseDown,
      radius,
      readOnly
    ]
  ), suffixNode = (0, import_react49.useMemo)(
    () => suffix && (0, import_jsx_runtime2.jsx)(Suffix, { borderTop: true, borderRight: true, borderBottom: true, radius, sizing: "border", tone: "inherit", children: (0, import_jsx_runtime2.jsx)("span", { children: suffix }) }),
    [radius, suffix]
  );
  return (0, import_jsx_runtime2.jsxs)(Root$b, { "data-ui": "TextInput", tone: rootTheme.tone, children: [
    prefixNode,
    (0, import_jsx_runtime2.jsxs)(InputRoot, { children: [
      (0, import_jsx_runtime2.jsx)(
        Input,
        {
          "data-as": "input",
          "data-scheme": rootTheme.scheme,
          "data-tone": rootTheme.tone,
          ...restProps,
          $fontSize: fontSize2,
          $iconLeft: $hasIcon,
          $iconRight: $hasIconRight || $hasClearButton,
          $padding: padding,
          $scheme: rootTheme.scheme,
          $space: space,
          $tone: rootTheme.tone,
          $weight: weight,
          disabled,
          readOnly,
          ref,
          type
        }
      ),
      presentationNode,
      clearButtonNode
    ] }),
    suffixNode
  ] });
});
TextInput.displayName = "ForwardRef(TextInput)";
function useDelayedState(initialState) {
  const [state, setState] = (0, import_react49.useState)(initialState), delayedAction = (0, import_react49.useRef)(), onStateChange = (0, import_react49.useCallback)((nextState, delay2) => {
    const action = () => {
      setState(nextState);
    };
    if (delayedAction.current && (clearTimeout(delayedAction.current), delayedAction.current = void 0), !delay2)
      return action();
    delayedAction.current = setTimeout(action, delay2);
  }, []);
  return [state, onStateChange];
}
var DEFAULT_TOOLTIP_ARROW_WIDTH = 15;
var DEFAULT_TOOLTIP_ARROW_HEIGHT = 6;
var DEFAULT_TOOLTIP_ARROW_RADIUS = 2;
var DEFAULT_TOOLTIP_DISTANCE = 4;
var DEFAULT_TOOLTIP_PADDING = 4;
var DEFAULT_FALLBACK_PLACEMENTS = {
  top: ["top-end", "top-start", "bottom", "left", "right"],
  "top-start": ["top", "top-end", "bottom-start", "left-start", "right-start"],
  "top-end": ["top", "top-start", "bottom-end", "left-end", "right-end"],
  bottom: ["bottom-end", "bottom-start", "top", "left", "right"],
  "bottom-start": ["bottom", "bottom-end", "top-start", "left-start", "right-start"],
  "bottom-end": ["bottom", "bottom-start", "top-end", "left-end", "right-end"],
  left: ["left-end", "left-start", "right", "top", "bottom"],
  "left-start": ["left", "left-end", "right-start", "top-start", "bottom-start"],
  "left-end": ["left", "left-start", "right-end", "top-end", "bottom-end"],
  right: ["right-end", "right-start", "left", "top", "bottom"],
  "right-start": ["right", "right-end", "left-start", "top-start", "bottom-start"],
  "right-end": ["right", "right-start", "left-end", "top-end", "bottom-end"]
};
var MotionCard = dt(motion(Card))`
  & > * {
    opacity: var(${POPOVER_MOTION_CONTENT_OPACITY_PROPERTY}, 1);
    will-change: opacity;
  }
`;
var TooltipCard = (0, import_react49.memo)(
  (0, import_react49.forwardRef)(function(props, ref) {
    const {
      animate: animate2,
      arrow: arrow22,
      arrowRef,
      arrowX,
      arrowY,
      children,
      originX,
      originY,
      padding,
      placement,
      radius,
      scheme,
      shadow,
      style,
      ...restProps
    } = props, rootStyle2 = (0, import_react49.useMemo)(
      () => ({
        originX,
        originY,
        willChange: animate2 ? "transform" : void 0,
        ...style
      }),
      [animate2, originX, originY, style]
    ), arrowStyle = (0, import_react49.useMemo)(
      () => ({
        left: arrowX !== null ? arrowX : void 0,
        top: arrowY !== null ? arrowY : void 0,
        right: void 0,
        bottom: void 0
      }),
      [arrowX, arrowY]
    );
    return (0, import_jsx_runtime2.jsxs)(
      MotionCard,
      {
        "data-ui": "Tooltip__card",
        ...restProps,
        "data-placement": placement,
        padding,
        radius,
        ref,
        scheme,
        shadow,
        style: rootStyle2,
        ...animate2 ? POPOVER_MOTION_PROPS : {},
        children: [
          children,
          arrow22 && (0, import_jsx_runtime2.jsx)(
            Arrow,
            {
              ref: arrowRef,
              style: arrowStyle,
              width: DEFAULT_TOOLTIP_ARROW_WIDTH,
              height: DEFAULT_TOOLTIP_ARROW_HEIGHT,
              radius: DEFAULT_TOOLTIP_ARROW_RADIUS
            }
          )
        ]
      }
    );
  })
);
TooltipCard.displayName = "Memo(ForwardRef(TooltipCard))";
var TooltipDelayGroupContext = createGlobalScopedContext(
  "@sanity/ui/context/tooltipDelayGroup",
  null
);
function useTooltipDelayGroup() {
  return (0, import_react49.useContext)(TooltipDelayGroupContext);
}
function TooltipDelayGroupProvider(props) {
  const { children, delay: delay2 } = props, [isGroupActive, setIsGroupActive] = useDelayedState(false), [openTooltipId, setOpenTooltipId] = useDelayedState(null), openDelay = typeof delay2 == "number" ? delay2 : (delay2 == null ? void 0 : delay2.open) || 0, closeDelay = typeof delay2 == "number" ? delay2 : (delay2 == null ? void 0 : delay2.close) || 0, value = (0, import_react49.useMemo)(
    () => ({
      isGroupActive,
      setIsGroupActive,
      openTooltipId,
      setOpenTooltipId,
      // When the group is active, we want the next tooltip to open immediately.
      openDelay: isGroupActive ? 1 : openDelay,
      closeDelay
    }),
    [closeDelay, isGroupActive, openDelay, openTooltipId, setIsGroupActive, setOpenTooltipId]
  );
  return (0, import_jsx_runtime2.jsx)(TooltipDelayGroupContext.Provider, { value, children });
}
TooltipDelayGroupProvider.displayName = "TooltipDelayGroupProvider";
var Root$a = dt(Layer)`
  pointer-events: none;
`;
var Tooltip = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  var _a, _b, _c, _d, _e2;
  const boundaryElementContext = useBoundaryElement(), { layer } = useTheme_v2(), {
    animate: _animate = false,
    arrow: arrowProp = false,
    boundaryElement = boundaryElementContext == null ? void 0 : boundaryElementContext.element,
    children: childProp,
    content,
    disabled,
    fallbackPlacements: fallbackPlacementsProp = props.fallbackPlacements ?? DEFAULT_FALLBACK_PLACEMENTS[props.placement ?? "bottom"],
    padding = 2,
    placement: placementProp = "bottom",
    portal: portalProp,
    radius = 2,
    scheme,
    shadow = 2,
    zOffset = layer.tooltip.zOffset,
    delay: delay2,
    ...restProps
  } = props, animate2 = usePrefersReducedMotion() ? false : _animate, fallbackPlacements = useArrayProp(fallbackPlacementsProp), ref = (0, import_react49.useRef)(null), [referenceElement, setReferenceElement] = (0, import_react49.useState)(null), arrowRef = (0, import_react49.useRef)(null), rootBoundary = "viewport", [tooltipMaxWidth, setTooltipMaxWidth] = (0, import_react49.useState)(0);
  (0, import_react49.useImperativeHandle)(forwardedRef, () => ref.current);
  const portal = usePortal(), portalElement = typeof portalProp == "string" ? ((_a = portal.elements) == null ? void 0 : _a[portalProp]) || null : portal.element, middleware2 = (0, import_react49.useMemo)(() => {
    const ret = [];
    return ret.push(
      flip3({
        boundary: boundaryElement || void 0,
        fallbackPlacements,
        padding: DEFAULT_TOOLTIP_PADDING,
        rootBoundary
      })
    ), ret.push(offset3({ mainAxis: DEFAULT_TOOLTIP_DISTANCE })), ret.push(
      shift3({
        boundary: boundaryElement || void 0,
        rootBoundary,
        padding: DEFAULT_TOOLTIP_PADDING
      })
    ), arrowProp && ret.push(arrow3({ element: arrowRef, padding: DEFAULT_TOOLTIP_PADDING })), animate2 && ret.push(origin), ret;
  }, [animate2, arrowProp, boundaryElement, fallbackPlacements]), { floatingStyles, placement, middlewareData, refs, update } = useFloating({
    middleware: middleware2,
    placement: placementProp,
    whileElementsMounted: autoUpdate
  }), arrowX = (_b = middlewareData.arrow) == null ? void 0 : _b.x, arrowY = (_c = middlewareData.arrow) == null ? void 0 : _c.y, originX = (_d = middlewareData["@sanity/ui/origin"]) == null ? void 0 : _d.originX, originY = (_e2 = middlewareData["@sanity/ui/origin"]) == null ? void 0 : _e2.originY, tooltipId = (0, import_react49.useId)(), [isOpen, setIsOpen] = useDelayedState(false), delayGroupContext = useTooltipDelayGroup(), showTooltip = isOpen || (delayGroupContext == null ? void 0 : delayGroupContext.openTooltipId) === tooltipId, isInsideGroup = delayGroupContext !== null, openDelayProp = typeof delay2 == "number" ? delay2 : (delay2 == null ? void 0 : delay2.open) || 0, closeDelayProp = typeof delay2 == "number" ? delay2 : (delay2 == null ? void 0 : delay2.close) || 0, openDelay = isInsideGroup ? delayGroupContext.openDelay : openDelayProp, closeDelay = isInsideGroup ? delayGroupContext.closeDelay : closeDelayProp, handleIsOpenChange = (0, import_react49.useCallback)(
    (open, immediate) => {
      if (isInsideGroup)
        if (open) {
          const groupedOpenDelay = immediate ? 0 : openDelay;
          delayGroupContext.setIsGroupActive(open, groupedOpenDelay), delayGroupContext.setOpenTooltipId(tooltipId, groupedOpenDelay);
        } else {
          const groupDeactivateDelay = closeDelay > 200 ? closeDelay : 200;
          delayGroupContext.setIsGroupActive(open, groupDeactivateDelay), delayGroupContext.setOpenTooltipId(null, immediate ? 0 : closeDelay);
        }
      else
        setIsOpen(open, immediate ? 0 : open ? openDelay : closeDelay);
    },
    [isInsideGroup, delayGroupContext, openDelay, tooltipId, closeDelay, setIsOpen]
  ), handleBlur = (0, import_react49.useCallback)(
    (e) => {
      var _a2, _b2;
      handleIsOpenChange(false), (_b2 = (_a2 = childProp == null ? void 0 : childProp.props) == null ? void 0 : _a2.onBlur) == null ? void 0 : _b2.call(_a2, e);
    },
    [childProp == null ? void 0 : childProp.props, handleIsOpenChange]
  ), handleClick = (0, import_react49.useCallback)(
    (e) => {
      var _a2, _b2;
      handleIsOpenChange(false, true), (_b2 = childProp == null ? void 0 : (_a2 = childProp.props).onClick) == null ? void 0 : _b2.call(_a2, e);
    },
    [childProp == null ? void 0 : childProp.props, handleIsOpenChange]
  ), handleContextMenu = (0, import_react49.useCallback)(
    (e) => {
      var _a2, _b2;
      handleIsOpenChange(false, true), (_b2 = childProp == null ? void 0 : (_a2 = childProp.props).onContextMenu) == null ? void 0 : _b2.call(_a2, e);
    },
    [childProp == null ? void 0 : childProp.props, handleIsOpenChange]
  ), handleFocus = (0, import_react49.useCallback)(
    (e) => {
      var _a2, _b2;
      handleIsOpenChange(true), (_b2 = (_a2 = childProp == null ? void 0 : childProp.props) == null ? void 0 : _a2.onFocus) == null ? void 0 : _b2.call(_a2, e);
    },
    [childProp == null ? void 0 : childProp.props, handleIsOpenChange]
  ), handleMouseEnter = (0, import_react49.useCallback)(
    (e) => {
      var _a2, _b2;
      handleIsOpenChange(true), (_b2 = (_a2 = childProp == null ? void 0 : childProp.props) == null ? void 0 : _a2.onMouseEnter) == null ? void 0 : _b2.call(_a2, e);
    },
    [childProp == null ? void 0 : childProp.props, handleIsOpenChange]
  ), handleMouseLeave = (0, import_react49.useCallback)(
    (e) => {
      var _a2, _b2;
      handleIsOpenChange(false), (_b2 = (_a2 = childProp == null ? void 0 : childProp.props) == null ? void 0 : _a2.onMouseLeave) == null ? void 0 : _b2.call(_a2, e);
    },
    [childProp == null ? void 0 : childProp.props, handleIsOpenChange]
  );
  useCloseOnMouseLeave({ handleIsOpenChange, referenceElement, showTooltip }), (0, import_react49.useEffect)(() => {
    disabled && showTooltip && handleIsOpenChange(false);
  }, [disabled, handleIsOpenChange, showTooltip]), (0, import_react49.useEffect)(() => {
    !content && showTooltip && handleIsOpenChange(false);
  }, [content, handleIsOpenChange, showTooltip]), (0, import_react49.useEffect)(() => refs.setReference(referenceElement), [referenceElement, refs]), (0, import_react49.useEffect)(() => {
    if (!showTooltip)
      return;
    function handleWindowKeyDown(event) {
      event.key === "Escape" && handleIsOpenChange(false, true);
    }
    return window.addEventListener("keydown", handleWindowKeyDown), () => {
      window.removeEventListener("keydown", handleWindowKeyDown);
    };
  }, [handleIsOpenChange, showTooltip]), (0, import_react49.useLayoutEffect)(() => {
    const availableWidths = [
      ...boundaryElement ? [boundaryElement.offsetWidth] : [],
      (portalElement == null ? void 0 : portalElement.offsetWidth) || document.body.offsetWidth
    ];
    setTooltipMaxWidth(Math.min(...availableWidths) - DEFAULT_TOOLTIP_PADDING * 2);
  }, [boundaryElement, portalElement]);
  const setArrow = (0, import_react49.useCallback)(
    (arrowEl) => {
      arrowRef.current = arrowEl, update();
    },
    [update]
  ), setFloating = (0, import_react49.useCallback)(
    (node2) => {
      ref.current = node2, refs.setFloating(node2);
    },
    [refs]
  ), childRef = (0, import_react49.useRef)(null);
  (0, import_react49.useImperativeHandle)(childProp == null ? void 0 : childProp.ref, () => childRef.current);
  const child = (0, import_react49.useMemo)(() => childProp ? (0, import_react49.cloneElement)(childProp, {
    onBlur: handleBlur,
    onFocus: handleFocus,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onClick: handleClick,
    onContextMenu: handleContextMenu,
    ref: childRef
  }) : null, [
    childProp,
    handleBlur,
    handleClick,
    handleContextMenu,
    handleFocus,
    handleMouseEnter,
    handleMouseLeave
  ]);
  if ((0, import_react49.useEffect)(() => {
    if (child)
      return setReferenceElement(childRef.current), () => setReferenceElement(null);
  }, [child]), !child)
    return (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, {});
  if (disabled)
    return child;
  const tooltip = (0, import_jsx_runtime2.jsx)(
    Root$a,
    {
      "data-ui": "Tooltip",
      ...restProps,
      ref: setFloating,
      style: {
        ...floatingStyles,
        maxWidth: tooltipMaxWidth > 0 ? `${tooltipMaxWidth}px` : void 0
      },
      zOffset,
      children: (0, import_jsx_runtime2.jsx)(
        TooltipCard,
        {
          ...restProps,
          animate: animate2,
          arrow: arrowProp,
          arrowRef: setArrow,
          arrowX,
          arrowY,
          originX,
          originY,
          padding,
          placement,
          radius,
          ref: setFloating,
          scheme,
          shadow,
          children: content
        }
      )
    }
  );
  return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
    (0, import_jsx_runtime2.jsx)(
      ConditionalWrapper,
      {
        condition: animate2,
        wrapper: (children) => (0, import_jsx_runtime2.jsx)(AnimatePresence, { children }),
        children: showTooltip && (0, import_jsx_runtime2.jsx)(
          ConditionalWrapper,
          {
            condition: !!portalProp,
            wrapper: (children) => (0, import_jsx_runtime2.jsx)(Portal, { __unstable_name: typeof portalProp == "string" ? portalProp : void 0, children }),
            children: tooltip
          }
        )
      }
    ),
    child
  ] });
});
Tooltip.displayName = "ForwardRef(Tooltip)";
function useCloseOnMouseLeave({
  handleIsOpenChange,
  referenceElement,
  showTooltip
}) {
  const onMouseMove = useEffectEvent((target, teardown) => {
    referenceElement && (referenceElement === target || target instanceof Node && referenceElement.contains(target) || (handleIsOpenChange(false), teardown()));
  });
  (0, import_react49.useEffect)(() => {
    if (!showTooltip)
      return;
    const handleMouseMove = (event) => {
      onMouseMove(event.target, () => window.removeEventListener("mousemove", handleMouseMove));
    };
    return window.addEventListener("mousemove", handleMouseMove), () => window.removeEventListener("mousemove", handleMouseMove);
  }, [onMouseMove, showTooltip]);
}
var Root$9 = dt.div`
  line-height: 0;
`;
var ListBox = dt(Box)`
  & > ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }
`;
var rotate = mt`
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
`;
var AnimatedSpinnerIcon = dt(SpinnerIcon)`
  animation: ${rotate} 500ms linear infinite;
`;
function AutocompleteOption(props) {
  const { children, id: id3, onSelect, selected, value } = props, handleClick = (0, import_react49.useCallback)(() => {
    setTimeout(() => {
      onSelect(value);
    }, 0);
  }, [onSelect, value]), handleKeyDown = (0, import_react49.useCallback)(
    (event) => {
      event.key === "Enter" && !_isEnterToClickElement(event.currentTarget) && handleClick();
    },
    [handleClick]
  );
  return (0, import_jsx_runtime2.jsx)(
    "li",
    {
      "aria-selected": selected,
      "data-ui": "AutocompleteOption",
      id: id3,
      role: "option",
      onClick: handleClick,
      onKeyDown: handleKeyDown,
      children
    }
  );
}
function autocompleteReducer(state, msg2) {
  return msg2.type === "input/change" ? { ...state, activeValue: null, focused: true, query: msg2.query } : msg2.type === "input/focus" ? { ...state, focused: true } : msg2.type === "root/blur" ? { ...state, focused: false, query: null } : msg2.type === "root/clear" ? { ...state, activeValue: null, query: null, value: null } : msg2.type === "root/escape" ? { ...state, focused: false, query: null } : msg2.type === "root/open" ? { ...state, query: state.query || msg2.query } : msg2.type === "root/setActiveValue" ? { ...state, activeValue: msg2.value, listFocused: msg2.listFocused || state.listFocused } : msg2.type === "root/setListFocused" ? { ...state, listFocused: msg2.listFocused } : msg2.type === "value/change" ? { ...state, activeValue: msg2.value, query: null, value: msg2.value } : state;
}
var AUTOCOMPLETE_LISTBOX_IGNORE_KEYS = [
  "Control",
  "Shift",
  "Alt",
  "Enter",
  "Home",
  "End",
  "PageUp",
  "PageDown",
  "Meta",
  "Tab",
  "CapsLock"
];
var AUTOCOMPLETE_POPOVER_PLACEMENT = "bottom-start";
var AUTOCOMPLETE_POPOVER_FALLBACK_PLACEMENTS = ["bottom-start", "top-start"];
var DEFAULT_RENDER_VALUE = (value, option) => option ? option.value : value;
var DEFAULT_FILTER_OPTION = (query, option) => option.value.toLowerCase().indexOf(query.toLowerCase()) > -1;
var InnerAutocomplete = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const {
    border: border2 = true,
    customValidity,
    disabled,
    filterOption: filterOptionProp,
    fontSize: fontSize2 = 2,
    icon,
    id: id3,
    listBox = EMPTY_RECORD,
    loading,
    onBlur,
    onChange,
    onFocus,
    onQueryChange,
    onSelect,
    openButton,
    openOnFocus,
    options: optionsProp,
    padding: paddingProp = 3,
    popover = EMPTY_RECORD,
    prefix: prefix2,
    radius = 2,
    readOnly,
    relatedElements,
    renderOption: renderOptionProp,
    renderPopover,
    renderValue = DEFAULT_RENDER_VALUE,
    suffix,
    value: valueProp,
    ...restProps
  } = props, [state, dispatch] = (0, import_react49.useReducer)(autocompleteReducer, {
    activeValue: valueProp || null,
    focused: false,
    listFocused: false,
    query: null,
    value: valueProp || null
  }), { activeValue, focused, listFocused, query, value } = state, defaultRenderOption = (0, import_react49.useCallback)(
    ({ value: value2 }) => (0, import_jsx_runtime2.jsx)(Card, { "data-as": "button", padding: paddingProp, radius: 2, tone: "inherit", children: (0, import_jsx_runtime2.jsx)(Text, { size: fontSize2, textOverflow: "ellipsis", children: value2 }) }),
    [fontSize2, paddingProp]
  ), renderOption = typeof renderOptionProp == "function" ? renderOptionProp : defaultRenderOption, filterOption = typeof filterOptionProp == "function" ? filterOptionProp : DEFAULT_FILTER_OPTION, rootElementRef = (0, import_react49.useRef)(null), resultsPopoverElementRef = (0, import_react49.useRef)(null), inputElementRef = (0, import_react49.useRef)(null), listBoxElementRef = (0, import_react49.useRef)(null), listFocusedRef = (0, import_react49.useRef)(false), valueRef = (0, import_react49.useRef)(value), valuePropRef = (0, import_react49.useRef)(valueProp), popoverMouseWithinRef = (0, import_react49.useRef)(false);
  (0, import_react49.useImperativeHandle)(
    forwardedRef,
    () => inputElementRef.current
  );
  const listBoxId = `${id3}-listbox`, options = Array.isArray(optionsProp) ? optionsProp : EMPTY_ARRAY, padding = useArrayProp(paddingProp), currentOption = (0, import_react49.useMemo)(
    () => value !== null ? options.find((o2) => o2.value === value) : void 0,
    [options, value]
  ), filteredOptions = (0, import_react49.useMemo)(
    () => options.filter((option) => query ? filterOption(query, option) : true),
    [filterOption, options, query]
  ), filteredOptionsLen = filteredOptions.length, activeItemId = activeValue ? `${id3}-option-${activeValue}` : void 0, expanded = query !== null && loading || focused && query !== null, handleRootBlur = (0, import_react49.useCallback)(
    (event) => {
      setTimeout(() => {
        if (popoverMouseWithinRef.current)
          return;
        const elements = (relatedElements || []).concat(
          rootElementRef.current ? [rootElementRef.current] : [],
          resultsPopoverElementRef.current ? [resultsPopoverElementRef.current] : []
        );
        let focusInside = false;
        if (document.activeElement) {
          for (const e of elements)
            if (e === document.activeElement || e.contains(document.activeElement)) {
              focusInside = true;
              break;
            }
        }
        focusInside === false && (dispatch({ type: "root/blur" }), popoverMouseWithinRef.current = false, onQueryChange && onQueryChange(null), onBlur && onBlur(event));
      }, 0);
    },
    [onBlur, onQueryChange, relatedElements]
  ), handleRootFocus = (0, import_react49.useCallback)((event) => {
    const listBoxElement = listBoxElementRef.current, focusedElement = event.target instanceof HTMLElement ? event.target : null, listFocused2 = (listBoxElement == null ? void 0 : listBoxElement.contains(focusedElement)) || false;
    listFocused2 !== listFocusedRef.current && (listFocusedRef.current = listFocused2, dispatch({ type: "root/setListFocused", listFocused: listFocused2 }));
  }, []), handleOptionSelect = (0, import_react49.useCallback)(
    (v2) => {
      var _a;
      dispatch({ type: "value/change", value: v2 }), popoverMouseWithinRef.current = false, onSelect && onSelect(v2), valueRef.current = v2, onChange && onChange(v2), onQueryChange && onQueryChange(null), (_a = inputElementRef.current) == null ? void 0 : _a.focus();
    },
    [onChange, onSelect, onQueryChange]
  ), handleRootKeyDown = (0, import_react49.useCallback)(
    (event) => {
      var _a, _b;
      if (event.key === "ArrowDown") {
        if (event.preventDefault(), !filteredOptionsLen)
          return;
        const activeOption = filteredOptions.find((o2) => o2.value === activeValue), activeIndex = activeOption ? filteredOptions.indexOf(activeOption) : -1, nextActiveOption = filteredOptions[(activeIndex + 1) % filteredOptionsLen];
        nextActiveOption && dispatch({ type: "root/setActiveValue", value: nextActiveOption.value, listFocused: true });
        return;
      }
      if (event.key === "ArrowUp") {
        if (event.preventDefault(), !filteredOptionsLen)
          return;
        const activeOption = filteredOptions.find((o2) => o2.value === activeValue), activeIndex = activeOption ? filteredOptions.indexOf(activeOption) : -1, nextActiveOption = filteredOptions[activeIndex === -1 ? filteredOptionsLen - 1 : (filteredOptionsLen + activeIndex - 1) % filteredOptionsLen];
        nextActiveOption && dispatch({ type: "root/setActiveValue", value: nextActiveOption.value, listFocused: true });
        return;
      }
      if (event.key === "Escape") {
        dispatch({ type: "root/escape" }), popoverMouseWithinRef.current = false, onQueryChange && onQueryChange(null), (_a = inputElementRef.current) == null ? void 0 : _a.focus();
        return;
      }
      const target = event.target, listEl = listBoxElementRef.current;
      if ((listEl === target || (listEl == null ? void 0 : listEl.contains(target))) && !AUTOCOMPLETE_LISTBOX_IGNORE_KEYS.includes(event.key)) {
        (_b = inputElementRef.current) == null ? void 0 : _b.focus();
        return;
      }
    },
    [activeValue, filteredOptions, filteredOptionsLen, onQueryChange]
  ), handleInputChange = (0, import_react49.useCallback)(
    (event) => {
      const nextQuery = event.currentTarget.value;
      dispatch({ type: "input/change", query: nextQuery }), onQueryChange && onQueryChange(nextQuery);
    },
    [onQueryChange]
  ), dispatchOpen = (0, import_react49.useCallback)(() => {
    dispatch({
      type: "root/open",
      query: value ? renderValue(value, currentOption) : ""
    });
  }, [currentOption, renderValue, value]), handleInputFocus = (0, import_react49.useCallback)(
    (event) => {
      focused || (dispatch({ type: "input/focus" }), onFocus && onFocus(event), openOnFocus && dispatchOpen());
    },
    [focused, onFocus, openOnFocus, dispatchOpen]
  ), handlePopoverMouseEnter = (0, import_react49.useCallback)(() => {
    popoverMouseWithinRef.current = true;
  }, []), handlePopoverMouseLeave = (0, import_react49.useCallback)(() => {
    popoverMouseWithinRef.current = false;
  }, []), handleClearButtonClick = (0, import_react49.useCallback)(() => {
    var _a;
    dispatch({ type: "root/clear" }), valueRef.current = "", onChange && onChange(""), onQueryChange && onQueryChange(null), (_a = inputElementRef.current) == null ? void 0 : _a.focus();
  }, [onChange, onQueryChange]), handleClearButtonFocus = (0, import_react49.useCallback)(() => {
    dispatch({ type: "input/focus" });
  }, []);
  (0, import_react49.useEffect)(() => {
    if (valueProp !== valuePropRef.current) {
      valuePropRef.current = valueProp, valueProp !== void 0 && (dispatch({ type: "value/change", value: valueProp }), valueRef.current = valueProp);
      return;
    }
    valueProp !== valueRef.current && (valueRef.current = valueProp || null, dispatch({ type: "value/change", value: valueProp || null }));
  }, [valueProp]), (0, import_react49.useEffect)(() => {
    !focused && valueRef.current && dispatch({ type: "root/setActiveValue", value: valueRef.current });
  }, [focused]), (0, import_react49.useEffect)(() => {
    const listElement = listBoxElementRef.current;
    if (!listElement)
      return;
    const activeOption = filteredOptions.find((o2) => o2.value === activeValue);
    if (activeOption) {
      const activeIndex = filteredOptions.indexOf(activeOption), activeItemElement = listElement.childNodes[activeIndex];
      if (activeItemElement) {
        if (_hasFocus(activeItemElement))
          return;
        focusFirstDescendant(activeItemElement);
      }
    }
  }, [activeValue, filteredOptions]);
  const clearButton = (0, import_react49.useMemo)(() => {
    if (!loading && !disabled && value)
      return {
        "aria-label": "Clear",
        onFocus: handleClearButtonFocus
      };
  }, [disabled, handleClearButtonFocus, loading, value]), openButtonBoxPadding = (0, import_react49.useMemo)(
    () => padding.map((v2) => v2 === 0 ? 0 : v2 === 1 || v2 === 2 ? 1 : v2 - 2),
    [padding]
  ), openButtonPadding = (0, import_react49.useMemo)(() => padding.map((v2) => Math.max(v2 - 1, 0)), [padding]), openButtonProps = (0, import_react49.useMemo)(
    () => typeof openButton == "object" ? openButton : EMPTY_RECORD,
    [openButton]
  ), handleOpenClick = (0, import_react49.useCallback)(
    (event) => {
      dispatchOpen(), openButtonProps.onClick && openButtonProps.onClick(event), _raf(() => {
        var _a;
        return (_a = inputElementRef.current) == null ? void 0 : _a.focus();
      });
    },
    [openButtonProps, dispatchOpen]
  ), openButtonNode = (0, import_react49.useMemo)(
    () => !disabled && !readOnly && openButton ? (0, import_jsx_runtime2.jsx)(Box, { "aria-hidden": expanded, padding: openButtonBoxPadding, children: (0, import_jsx_runtime2.jsx)(
      Button,
      {
        "aria-label": "Open",
        disabled: expanded,
        fontSize: fontSize2,
        icon: ChevronDownIcon,
        mode: "bleed",
        padding: openButtonPadding,
        ...openButtonProps,
        onClick: handleOpenClick
      }
    ) }) : void 0,
    [
      disabled,
      expanded,
      fontSize2,
      handleOpenClick,
      openButton,
      openButtonBoxPadding,
      openButtonPadding,
      openButtonProps,
      readOnly
    ]
  ), inputValue = (0, import_react49.useMemo)(() => query === null ? value !== null ? renderValue(value, currentOption) : "" : query, [currentOption, query, renderValue, value]), input = (0, import_jsx_runtime2.jsx)(
    TextInput,
    {
      ...restProps,
      "aria-activedescendant": activeItemId,
      "aria-autocomplete": "list",
      "aria-expanded": expanded,
      "aria-owns": listBoxId,
      autoCapitalize: "off",
      autoComplete: "off",
      autoCorrect: "off",
      border: border2,
      clearButton,
      customValidity,
      disabled,
      fontSize: fontSize2,
      icon,
      iconRight: loading && AnimatedSpinnerIcon,
      id: id3,
      inputMode: "search",
      onChange: handleInputChange,
      onClear: handleClearButtonClick,
      onFocus: handleInputFocus,
      padding,
      prefix: prefix2,
      radius,
      readOnly,
      ref: inputElementRef,
      role: "combobox",
      spellCheck: false,
      suffix: suffix || openButtonNode,
      value: inputValue
    }
  ), handleListBoxKeyDown = (0, import_react49.useCallback)(
    (event) => {
      var _a;
      event.key === "Tab" && listFocused && ((_a = inputElementRef.current) == null ? void 0 : _a.focus());
    },
    [listFocused]
  ), content = (0, import_react49.useMemo)(() => filteredOptions.length === 0 ? null : (0, import_jsx_runtime2.jsx)(
    ListBox,
    {
      "data-ui": "AutoComplete__results",
      onKeyDown: handleListBoxKeyDown,
      padding: 1,
      ...listBox,
      tabIndex: -1,
      children: (0, import_jsx_runtime2.jsx)(
        Stack,
        {
          as: "ul",
          "aria-multiselectable": false,
          "data-ui": "AutoComplete__resultsList",
          id: listBoxId,
          ref: listBoxElementRef,
          role: "listbox",
          space: 1,
          children: filteredOptions.map((option) => {
            const active = activeValue !== null ? option.value === activeValue : currentOption === option;
            return (0, import_jsx_runtime2.jsx)(
              AutocompleteOption,
              {
                id: `${id3}-option-${option.value}`,
                onSelect: handleOptionSelect,
                selected: active,
                value: option.value,
                children: (0, import_react49.cloneElement)(renderOption(option), {
                  disabled: loading,
                  selected: active,
                  tabIndex: listFocused && active ? 0 : -1
                })
              },
              option.value
            );
          })
        }
      )
    }
  ), [
    activeValue,
    currentOption,
    filteredOptions,
    handleOptionSelect,
    handleListBoxKeyDown,
    id3,
    listBox,
    listBoxId,
    listFocused,
    loading,
    renderOption
  ]), results = (0, import_react49.useMemo)(() => renderPopover ? renderPopover(
    {
      content,
      hidden: !expanded,
      inputElement: inputElementRef.current,
      onMouseEnter: handlePopoverMouseEnter,
      onMouseLeave: handlePopoverMouseLeave
    },
    resultsPopoverElementRef
  ) : filteredOptionsLen === 0 ? null : (0, import_jsx_runtime2.jsx)(
    Popover,
    {
      arrow: false,
      constrainSize: true,
      content,
      fallbackPlacements: AUTOCOMPLETE_POPOVER_FALLBACK_PLACEMENTS,
      matchReferenceWidth: true,
      onMouseEnter: handlePopoverMouseEnter,
      onMouseLeave: handlePopoverMouseLeave,
      open: expanded,
      overflow: "auto",
      placement: AUTOCOMPLETE_POPOVER_PLACEMENT,
      portal: true,
      radius,
      ref: resultsPopoverElementRef,
      referenceElement: inputElementRef.current,
      ...popover
    }
  ), [
    content,
    expanded,
    filteredOptionsLen,
    handlePopoverMouseEnter,
    handlePopoverMouseLeave,
    popover,
    radius,
    renderPopover
  ]);
  return (0, import_jsx_runtime2.jsxs)(
    Root$9,
    {
      "data-ui": "Autocomplete",
      onBlur: handleRootBlur,
      onFocus: handleRootFocus,
      onKeyDown: handleRootKeyDown,
      ref: rootElementRef,
      children: [
        input,
        results
      ]
    }
  );
});
InnerAutocomplete.displayName = "ForwardRef(Autocomplete)";
var Autocomplete = InnerAutocomplete;
var Root$8 = dt.ol`
  margin: 0;
  padding: 0;
  display: flex;
  list-style: none;
  align-items: center;
  white-space: nowrap;
  line-height: 0;
`;
var ExpandButton = dt(Button)`
  appearance: none;
  margin: -4px;
`;
var Breadcrumbs = (0, import_react49.forwardRef)(function(props, ref) {
  const { children, maxLength, separator, space: spaceRaw = 2, ...restProps } = props, space = useArrayProp(spaceRaw), [open, setOpen] = (0, import_react49.useState)(false), expandElementRef = (0, import_react49.useRef)(null), popoverElementRef = (0, import_react49.useRef)(null), collapse = (0, import_react49.useCallback)(() => setOpen(false), []), expand = (0, import_react49.useCallback)(() => setOpen(true), []);
  useClickOutsideEvent(collapse, () => [expandElementRef.current, popoverElementRef.current]);
  const rawItems = (0, import_react49.useMemo)(() => import_react49.Children.toArray(children).filter(import_react49.isValidElement), [children]), items = (0, import_react49.useMemo)(() => {
    const len = rawItems.length;
    if (maxLength && len > maxLength) {
      const beforeLength = Math.ceil(maxLength / 2), afterLength = Math.floor(maxLength / 2);
      return [
        ...rawItems.slice(0, beforeLength - 1),
        (0, import_jsx_runtime2.jsx)(
          Popover,
          {
            constrainSize: true,
            content: (0, import_jsx_runtime2.jsx)(Stack, { as: "ol", overflow: "auto", padding: space, space, children: rawItems.slice(beforeLength - 1, len - afterLength) }),
            open,
            placement: "top",
            portal: true,
            ref: popoverElementRef,
            children: (0, import_jsx_runtime2.jsx)(
              ExpandButton,
              {
                fontSize: 1,
                mode: "bleed",
                onClick: open ? collapse : expand,
                padding: 1,
                ref: expandElementRef,
                selected: open,
                text: "…"
              }
            )
          },
          "button"
        ),
        ...rawItems.slice(len - afterLength)
      ];
    }
    return rawItems;
  }, [collapse, expand, maxLength, open, rawItems, space]);
  return (0, import_jsx_runtime2.jsx)(Root$8, { "data-ui": "Breadcrumbs", ...restProps, ref, children: items.map((item, itemIndex) => (0, import_jsx_runtime2.jsxs)(import_react49.Fragment, { children: [
    itemIndex > 0 && (0, import_jsx_runtime2.jsx)(Box, { "aria-hidden": true, as: "li", paddingX: space, children: separator || (0, import_jsx_runtime2.jsx)(Text, { muted: true, children: "/" }) }),
    (0, import_jsx_runtime2.jsx)(Box, { as: "li", children: item })
  ] }, itemIndex)) });
});
Breadcrumbs.displayName = "ForwardRef(Breadcrumbs)";
function dialogStyle({ theme }) {
  const { color: color3 } = getTheme_v2(theme);
  return {
    "&:not([hidden])": {
      display: "flex"
    },
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    alignItems: "center",
    justifyContent: "center",
    outline: "none",
    background: color3.backdrop
  };
}
function responsiveDialogPositionStyle(props) {
  const { media } = getTheme_v2(props.theme);
  return _responsive(media, props.$position, (position2) => ({ "&&": { position: position2 } }));
}
function animationDialogStyle(props) {
  return props.$animate ? lt`
    @keyframes zoomIn {
      from {
        opacity: 0;
        transform: scale(0.95);
      }
      to {
        opacity: 1;
        transform: scale(1);
      }
    }
    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

    animation: fadeIn 200ms ease-out;
    // Animates the dialog card.
    & > [data-ui='DialogCard'] {
      animation: zoomIn 200ms ease-out;
    }
  ` : lt``;
}
var DialogContext = createGlobalScopedContext(
  "@sanity/ui/context/dialog",
  { version: 0 }
);
function useDialog() {
  return (0, import_react49.useContext)(DialogContext);
}
function isTargetWithinScope(boundaryElement, portalElement, target) {
  return !boundaryElement || !portalElement ? true : containsOrEqualsElement(boundaryElement, target) || containsOrEqualsElement(portalElement, target);
}
var Root$7 = dt(Layer)(responsivePaddingStyle, dialogStyle, responsiveDialogPositionStyle, animationDialogStyle);
var DialogContainer = dt(Container)`
  &:not([hidden]) {
    display: flex;
  }
  width: 100%;
  height: 100%;
  flex-direction: column;
  align-items: center;
  justify-content: center;
`;
var DialogCardRoot = dt(Card)`
  &:not([hidden]) {
    display: flex;
  }
  width: 100%;
  min-height: 0;
  max-height: 100%;
  overflow: hidden;
  overflow: clip;
`;
var DialogLayout = dt(Flex)`
  flex: 1;
  min-height: 0;
  width: 100%;
`;
var DialogHeader = dt(Box)`
  position: relative;
  z-index: 2;
`;
var DialogContent = dt(Box)`
  position: relative;
  z-index: 1;
  overflow: auto;
  outline: none;
`;
var DialogFooter = dt(Box)`
  position: relative;
  z-index: 3;
`;
var DialogCard = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  var _a;
  const {
    __unstable_autoFocus: autoFocus,
    __unstable_hideCloseButton: hideCloseButton,
    children,
    contentRef: forwardedContentRef,
    footer,
    header,
    id: id3,
    onClickOutside,
    onClose,
    portal: portalProp,
    radius: radiusProp,
    scheme,
    shadow: shadowProp,
    width: widthProp
  } = props, portal = usePortal(), portalElement = portalProp ? ((_a = portal.elements) == null ? void 0 : _a[portalProp]) || null : portal.element, boundaryElement = useBoundaryElement().element, radius = useArrayProp(radiusProp), shadow = useArrayProp(shadowProp), width = useArrayProp(widthProp), ref = (0, import_react49.useRef)(null), contentRef = (0, import_react49.useRef)(null), layer = useLayer(), { isTopLayer: isTopLayer2 } = layer, labelId = `${id3}_label`, showCloseButton = !!onClose && hideCloseButton === false, showHeader = !!header || showCloseButton;
  return (0, import_react49.useImperativeHandle)(forwardedRef, () => ref.current), (0, import_react49.useImperativeHandle)(
    forwardedContentRef,
    () => contentRef.current
  ), (0, import_react49.useEffect)(() => {
    autoFocus && ref.current && focusFirstDescendant(ref.current);
  }, [autoFocus, ref]), useGlobalKeyDown(
    (0, import_react49.useCallback)(
      (event) => {
        if (!isTopLayer2 || !onClose)
          return;
        const target = document.activeElement;
        target && !isTargetWithinScope(boundaryElement, portalElement, target) || event.key === "Escape" && (event.preventDefault(), event.stopPropagation(), onClose());
      },
      [boundaryElement, isTopLayer2, onClose, portalElement]
    )
  ), useClickOutsideEvent(
    isTopLayer2 && onClickOutside && ((event) => {
      const target = event.target;
      target && !isTargetWithinScope(boundaryElement, portalElement, target) || onClickOutside();
    }),
    () => [ref.current]
  ), (0, import_jsx_runtime2.jsx)(DialogContainer, { "data-ui": "DialogCard", width, children: (0, import_jsx_runtime2.jsx)(DialogCardRoot, { radius, ref, scheme, shadow, children: (0, import_jsx_runtime2.jsxs)(DialogLayout, { direction: "column", children: [
    showHeader && (0, import_jsx_runtime2.jsx)(DialogHeader, { children: (0, import_jsx_runtime2.jsxs)(Flex, { align: "center", padding: 3, children: [
      (0, import_jsx_runtime2.jsx)(Box, { flex: 1, padding: 2, children: header && (0, import_jsx_runtime2.jsx)(Text, { id: labelId, size: 1, weight: "semibold", children: header }) }),
      showCloseButton && (0, import_jsx_runtime2.jsx)(Box, { flex: "none", children: (0, import_jsx_runtime2.jsx)(
        Button,
        {
          "aria-label": "Close dialog",
          disabled: !onClose,
          icon: CloseIcon,
          mode: "bleed",
          onClick: onClose,
          padding: 2
        }
      ) })
    ] }) }),
    (0, import_jsx_runtime2.jsx)(DialogContent, { flex: 1, ref: contentRef, tabIndex: -1, children }),
    footer && (0, import_jsx_runtime2.jsx)(DialogFooter, { children: footer })
  ] }) }) });
});
DialogCard.displayName = "ForwardRef(DialogCard)";
var Dialog = (0, import_react49.forwardRef)(function(props, ref) {
  var _a;
  const dialog = useDialog(), { layer } = useTheme_v2(), {
    __unstable_autoFocus: autoFocus = true,
    __unstable_hideCloseButton: hideCloseButton = false,
    cardRadius: cardRadiusProp = 4,
    cardShadow = 3,
    children,
    contentRef,
    footer,
    header,
    id: id3,
    onActivate,
    onClickOutside,
    onClose,
    onFocus,
    padding: paddingProp = 3,
    portal: portalProp,
    position: positionProp = dialog.position || "fixed",
    scheme,
    width: widthProp = 0,
    zOffset: zOffsetProp = dialog.zOffset || layer.dialog.zOffset,
    animate: _animate = false,
    ...restProps
  } = props, animate2 = usePrefersReducedMotion() ? false : _animate, portal = usePortal(), portalElement = portalProp ? ((_a = portal.elements) == null ? void 0 : _a[portalProp]) || null : portal.element, boundaryElement = useBoundaryElement().element, cardRadius = useArrayProp(cardRadiusProp), padding = useArrayProp(paddingProp), position2 = useArrayProp(positionProp), width = useArrayProp(widthProp), zOffset = useArrayProp(zOffsetProp), preDivRef = (0, import_react49.useRef)(null), postDivRef = (0, import_react49.useRef)(null), cardRef = (0, import_react49.useRef)(null), focusedElementRef = (0, import_react49.useRef)(null), handleFocus = (0, import_react49.useCallback)(
    (event) => {
      onFocus == null ? void 0 : onFocus(event);
      const target = event.target, cardElement = cardRef.current;
      if (cardElement && target === preDivRef.current) {
        focusLastDescendant(cardElement);
        return;
      }
      if (cardElement && target === postDivRef.current) {
        focusFirstDescendant(cardElement);
        return;
      }
      isHTMLElement2(event.target) && (focusedElementRef.current = event.target);
    },
    [onFocus]
  ), labelId = `${id3}_label`, rootClickTimeoutRef = (0, import_react49.useRef)(), handleRootClick = (0, import_react49.useCallback)(() => {
    rootClickTimeoutRef.current && clearTimeout(rootClickTimeoutRef.current), rootClickTimeoutRef.current = setTimeout(() => {
      const activeElement = document.activeElement;
      if (activeElement && !isTargetWithinScope(boundaryElement, portalElement, activeElement)) {
        const target = focusedElementRef.current;
        if (!target || !document.body.contains(target)) {
          const cardElement = cardRef.current;
          cardElement && focusFirstDescendant(cardElement);
          return;
        }
        target.focus();
      }
    }, 0);
  }, [boundaryElement, portalElement]);
  return (0, import_jsx_runtime2.jsx)(Portal, { __unstable_name: portalProp, children: (0, import_jsx_runtime2.jsxs)(
    Root$7,
    {
      ...restProps,
      $animate: animate2,
      $padding: padding,
      $position: position2,
      "aria-labelledby": labelId,
      "aria-modal": true,
      "data-ui": "Dialog",
      id: id3,
      onActivate,
      onClick: handleRootClick,
      onFocus: handleFocus,
      ref,
      role: "dialog",
      zOffset,
      children: [
        (0, import_jsx_runtime2.jsx)("div", { ref: preDivRef, tabIndex: 0 }),
        (0, import_jsx_runtime2.jsx)(
          DialogCard,
          {
            __unstable_autoFocus: autoFocus,
            __unstable_hideCloseButton: hideCloseButton,
            contentRef,
            footer,
            header,
            id: id3,
            onClickOutside,
            onClose,
            portal: portalProp,
            radius: cardRadius,
            ref: cardRef,
            scheme,
            shadow: cardShadow,
            width,
            children
          }
        ),
        (0, import_jsx_runtime2.jsx)("div", { ref: postDivRef, tabIndex: 0 })
      ]
    }
  ) });
});
Dialog.displayName = "ForwardRef(Dialog)";
function DialogProvider(props) {
  const { children, position: position2, zOffset } = props, contextValue = (0, import_react49.useMemo)(
    () => ({
      version: 0,
      position: position2,
      zOffset
    }),
    [position2, zOffset]
  );
  return (0, import_jsx_runtime2.jsx)(DialogContext.Provider, { value: contextValue, children });
}
DialogProvider.displayName = "DialogProvider";
var Root$6 = dt.kbd`
  font: inherit;
  padding: 1px;

  &:not([hidden]) {
    display: block;
  }
`;
var Key = dt(KBD)`
  &:not([hidden]) {
    display: block;
  }
`;
var Hotkeys = (0, import_react49.forwardRef)(function(props, ref) {
  const { fontSize: fontSize2, keys, padding, radius, space: spaceProp = 0.5, ...restProps } = props, space = useArrayProp(spaceProp);
  return !keys || keys.length === 0 ? (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, {}) : (0, import_jsx_runtime2.jsx)(Root$6, { "data-ui": "Hotkeys", ...restProps, ref, children: (0, import_jsx_runtime2.jsx)(Inline, { as: "span", space, children: keys.map((key2, i2) => (0, import_jsx_runtime2.jsx)(Key, { fontSize: fontSize2, padding, radius, children: key2 }, i2)) }) });
});
Hotkeys.displayName = "ForwardRef(Hotkeys)";
var MenuContext = createGlobalScopedContext(
  "@sanity/ui/context/menu",
  null
);
function _isFocusable(element) {
  return isHTMLAnchorElement(element) && element.getAttribute("data-disabled") !== "true" || isHTMLButtonElement(element) && !element.disabled;
}
function _getFocusableElements(elements) {
  return elements.filter(_isFocusable);
}
function _getDOMPath(rootElement, el) {
  const path = [];
  let e = el;
  for (; e !== rootElement; ) {
    const parentElement = e.parentElement;
    if (!parentElement)
      return path;
    const index3 = Array.from(parentElement.childNodes).indexOf(e);
    if (path.unshift(index3), parentElement === rootElement)
      return path;
    e = parentElement;
  }
  return path;
}
var EMPTY_PATH = [];
function _sortElements(rootElement, elements) {
  if (!rootElement)
    return;
  const map = /* @__PURE__ */ new WeakMap();
  for (const el of elements)
    map.set(el, _getDOMPath(rootElement, el));
  const _sort = (a2, b2) => {
    const _a = map.get(a2) || EMPTY_PATH, _b = map.get(b2) || EMPTY_PATH, len = Math.max(_a.length, _b.length);
    for (let i2 = 0; i2 < len; i2 += 1) {
      const aIndex = _a[i2] || -1, bIndex = _b[i2] || -1;
      if (aIndex !== bIndex)
        return aIndex - bIndex;
    }
    return 0;
  };
  elements.sort(_sort);
}
function useMenuController(props) {
  const { onKeyDown, originElement, shouldFocus, rootElementRef } = props, elementsRef = (0, import_react49.useRef)([]), [activeIndex, _setActiveIndex] = (0, import_react49.useState)(-1), activeIndexRef = (0, import_react49.useRef)(activeIndex), activeElement = (0, import_react49.useMemo)(() => elementsRef.current[activeIndex] || null, [activeIndex]), mounted = !!rootElementRef.current, setActiveIndex = (0, import_react49.useCallback)((nextActiveIndex) => {
    _setActiveIndex(nextActiveIndex), activeIndexRef.current = nextActiveIndex;
  }, []), mount = (0, import_react49.useCallback)(
    (element, selected) => {
      if (!element)
        return () => {
        };
      if (elementsRef.current.indexOf(element) === -1 && (elementsRef.current.push(element), _sortElements(rootElementRef.current, elementsRef.current)), selected) {
        const selectedIndex = elementsRef.current.indexOf(element);
        setActiveIndex(selectedIndex);
      }
      return () => {
        const idx = elementsRef.current.indexOf(element);
        idx > -1 && elementsRef.current.splice(idx, 1);
      };
    },
    [rootElementRef, setActiveIndex]
  ), handleKeyDown = (0, import_react49.useCallback)(
    (event) => {
      if (event.key === "Tab") {
        originElement && originElement.focus();
        return;
      }
      if (event.key === "Home") {
        event.preventDefault(), event.stopPropagation();
        const el = _getFocusableElements(elementsRef.current)[0];
        if (!el)
          return;
        const currentIndex = elementsRef.current.indexOf(el);
        setActiveIndex(currentIndex);
        return;
      }
      if (event.key === "End") {
        event.preventDefault(), event.stopPropagation();
        const focusableElements = _getFocusableElements(elementsRef.current), el = focusableElements[focusableElements.length - 1];
        if (!el)
          return;
        const currentIndex = elementsRef.current.indexOf(el);
        setActiveIndex(currentIndex);
        return;
      }
      if (event.key === "ArrowUp") {
        event.preventDefault(), event.stopPropagation();
        const focusableElements = _getFocusableElements(elementsRef.current), focusableLen = focusableElements.length;
        if (focusableLen === 0)
          return;
        const focusedElement = elementsRef.current[activeIndexRef.current];
        let focusedIndex = focusableElements.indexOf(focusedElement);
        focusedIndex = (focusedIndex - 1 + focusableLen) % focusableLen;
        const el = focusableElements[focusedIndex], currentIndex = elementsRef.current.indexOf(el);
        setActiveIndex(currentIndex);
        return;
      }
      if (event.key === "ArrowDown") {
        event.preventDefault(), event.stopPropagation();
        const focusableElements = _getFocusableElements(elementsRef.current), focusableLen = focusableElements.length;
        if (focusableLen === 0)
          return;
        const focusedElement = elementsRef.current[activeIndexRef.current];
        let focusedIndex = focusableElements.indexOf(focusedElement);
        focusedIndex = (focusedIndex + 1) % focusableLen;
        const el = focusableElements[focusedIndex], currentIndex = elementsRef.current.indexOf(el);
        setActiveIndex(currentIndex);
        return;
      }
      onKeyDown && onKeyDown(event);
    },
    [onKeyDown, originElement, setActiveIndex]
  ), handleItemMouseEnter = (0, import_react49.useCallback)(
    (event) => {
      const element = event.currentTarget, currentIndex = elementsRef.current.indexOf(element);
      setActiveIndex(currentIndex);
    },
    [setActiveIndex]
  ), handleItemMouseLeave = (0, import_react49.useCallback)(() => {
    var _a;
    setActiveIndex(-2), (_a = rootElementRef.current) == null ? void 0 : _a.focus();
  }, [rootElementRef, setActiveIndex]);
  return (0, import_react49.useEffect)(() => {
    if (!mounted)
      return;
    const rafId = requestAnimationFrame(() => {
      var _a;
      if (activeIndex === -1) {
        if (shouldFocus === "first") {
          const el = _getFocusableElements(elementsRef.current)[0];
          if (el) {
            const currentIndex = elementsRef.current.indexOf(el);
            setActiveIndex(currentIndex);
          }
        }
        if (shouldFocus === "last") {
          const focusableElements = _getFocusableElements(elementsRef.current), el = focusableElements[focusableElements.length - 1];
          if (el) {
            const currentIndex = elementsRef.current.indexOf(el);
            setActiveIndex(currentIndex);
          }
        }
        return;
      }
      (_a = elementsRef.current[activeIndex] || null) == null ? void 0 : _a.focus();
    });
    return () => cancelAnimationFrame(rafId);
  }, [activeIndex, mounted, setActiveIndex, shouldFocus]), {
    activeElement,
    activeIndex,
    handleItemMouseEnter,
    handleItemMouseLeave,
    handleKeyDown,
    mount
  };
}
var Root$5 = dt(Box)`
  outline: none;
  overflow: auto;
`;
var Menu = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const {
    children,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    focusFirst,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    focusLast,
    onClickOutside,
    onEscape,
    onItemClick,
    onItemSelect,
    onKeyDown,
    originElement,
    padding = 1,
    registerElement,
    shouldFocus = props.focusFirst && "first" || props.focusLast && "last" || null,
    space = 1,
    ...restProps
  } = props, ref = (0, import_react49.useRef)(null);
  (0, import_react49.useImperativeHandle)(forwardedRef, () => ref.current);
  const { isTopLayer: isTopLayer2 } = useLayer(), {
    activeElement,
    activeIndex,
    handleItemMouseEnter,
    handleItemMouseLeave,
    handleKeyDown,
    mount
  } = useMenuController({ onKeyDown, originElement, shouldFocus, rootElementRef: ref }), unregisterElementRef = (0, import_react49.useRef)(null), handleRefChange = (0, import_react49.useCallback)(
    (el) => {
      unregisterElementRef.current && (unregisterElementRef.current(), unregisterElementRef.current = null), ref.current = el, ref.current && registerElement && (unregisterElementRef.current = registerElement(ref.current));
    },
    [registerElement]
  );
  (0, import_react49.useEffect)(() => {
    onItemSelect && onItemSelect(activeIndex);
  }, [activeIndex, onItemSelect]), useClickOutsideEvent(isTopLayer2 && onClickOutside, () => [ref.current]), useGlobalKeyDown(
    (0, import_react49.useCallback)(
      (event) => {
        isTopLayer2 && event.key === "Escape" && (event.stopPropagation(), onEscape && onEscape());
      },
      [isTopLayer2, onEscape]
    )
  );
  const value = (0, import_react49.useMemo)(
    () => ({
      version: 0,
      activeElement,
      activeIndex,
      mount,
      onClickOutside,
      onEscape,
      onItemClick,
      onItemMouseEnter: handleItemMouseEnter,
      onItemMouseLeave: handleItemMouseLeave,
      registerElement,
      // deprecated
      onMouseEnter: handleItemMouseEnter,
      onMouseLeave: handleItemMouseLeave
    }),
    [
      activeElement,
      activeIndex,
      mount,
      handleItemMouseEnter,
      handleItemMouseLeave,
      onClickOutside,
      onEscape,
      onItemClick,
      registerElement
    ]
  );
  return (0, import_jsx_runtime2.jsx)(MenuContext.Provider, { value, children: (0, import_jsx_runtime2.jsx)(
    Root$5,
    {
      "data-ui": "Menu",
      ...restProps,
      onKeyDown: handleKeyDown,
      padding,
      ref: handleRefChange,
      role: "menu",
      tabIndex: -1,
      children: (0, import_jsx_runtime2.jsx)(Stack, { space, children })
    }
  ) });
});
Menu.displayName = "ForwardRef(Menu)";
var MenuButton = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const {
    __unstable_disableRestoreFocusOnClose: disableRestoreFocusOnClose = false,
    boundaryElement: deprecated_boundaryElement,
    button: buttonProp,
    id: id3,
    menu: menuProp,
    onClose,
    onOpen,
    placement: deprecated_placement,
    popoverScheme: deprecated_popoverScheme,
    portal: deprecated_portal = true,
    popover,
    popoverRadius: deprecated_popoverRadius,
    preventOverflow: deprecated_preventOverflow
  } = props, [open, setOpen] = (0, import_react49.useState)(false), [shouldFocus, setShouldFocus] = (0, import_react49.useState)(null), [buttonElement, setButtonElement] = (0, import_react49.useState)(null), [menuElements, setChildMenuElements] = (0, import_react49.useState)([]), openRef = (0, import_react49.useRef)(open);
  (0, import_react49.useEffect)(() => {
    onOpen && open && !openRef.current && onOpen();
  }, [onOpen, open]), (0, import_react49.useEffect)(() => {
    onClose && !open && openRef.current && onClose();
  }, [onClose, open]), (0, import_react49.useEffect)(() => {
    openRef.current = open;
  }, [open]);
  const handleButtonClick = (0, import_react49.useCallback)(() => {
    setOpen((v2) => !v2), setShouldFocus(null);
  }, []), handleMouseDown = (0, import_react49.useCallback)(
    (event) => {
      open && event.preventDefault();
    },
    [open]
  ), handleButtonKeyDown = (0, import_react49.useCallback)((event) => {
    if (event.key === "ArrowDown" || event.key === "Enter" || event.key === " ") {
      event.preventDefault(), setOpen(true), setShouldFocus("first");
      return;
    }
    if (event.key === "ArrowUp") {
      event.preventDefault(), setOpen(true), setShouldFocus("last");
      return;
    }
  }, []), handleMenuClickOutside = (0, import_react49.useCallback)(
    (event) => {
      const target = event.target;
      if (target instanceof Node && !(buttonElement && (target === buttonElement || buttonElement.contains(target)))) {
        for (const el of menuElements)
          if (target === el || el.contains(target))
            return;
        setOpen(false);
      }
    },
    [buttonElement, menuElements]
  ), handleMenuEscape = (0, import_react49.useCallback)(() => {
    setOpen(false), !disableRestoreFocusOnClose && buttonElement && buttonElement.focus();
  }, [buttonElement, disableRestoreFocusOnClose]), handleBlur = (0, import_react49.useCallback)(
    (event) => {
      const target = event.relatedTarget;
      if (target instanceof Node) {
        for (const el of menuElements)
          if (el === target || el.contains(target))
            return;
        setOpen(false);
      }
    },
    [menuElements]
  ), handleItemClick = (0, import_react49.useCallback)(() => {
    setOpen(false), !disableRestoreFocusOnClose && buttonElement && buttonElement.focus();
  }, [buttonElement, disableRestoreFocusOnClose]), registerElement = (0, import_react49.useCallback)((el) => (setChildMenuElements((els) => els.concat([el])), () => setChildMenuElements((els) => els.filter((_el) => _el !== el))), []), menuProps = (0, import_react49.useMemo)(
    () => ({
      "aria-labelledby": id3,
      onBlurCapture: handleBlur,
      onClickOutside: handleMenuClickOutside,
      onEscape: handleMenuEscape,
      onItemClick: handleItemClick,
      originElement: buttonElement,
      registerElement,
      shouldFocus
    }),
    [
      buttonElement,
      handleMenuClickOutside,
      handleMenuEscape,
      handleItemClick,
      id3,
      handleBlur,
      registerElement,
      shouldFocus
    ]
  ), menu = menuProp && (0, import_react49.cloneElement)(menuProp, menuProps), ref = (0, import_react49.useRef)(null), button = (0, import_react49.useMemo)(
    () => buttonProp && (0, import_react49.cloneElement)(buttonProp, {
      "data-ui": "MenuButton",
      id: id3,
      onClick: handleButtonClick,
      onKeyDown: handleButtonKeyDown,
      onMouseDown: handleMouseDown,
      "aria-haspopup": true,
      "aria-expanded": open,
      ref,
      selected: buttonProp.props.selected ?? open
    }),
    [buttonProp, handleButtonClick, handleButtonKeyDown, handleMouseDown, id3, open]
  );
  (0, import_react49.useImperativeHandle)(
    forwardedRef,
    () => ref.current
  ), (0, import_react49.useEffect)(() => {
    if (button)
      return setButtonElement(ref.current), () => setButtonElement(null);
  }, [button]);
  const popoverProps = (0, import_react49.useMemo)(
    () => ({
      boundaryElement: deprecated_boundaryElement,
      overflow: "auto",
      placement: deprecated_placement,
      portal: deprecated_portal,
      preventOverflow: deprecated_preventOverflow,
      radius: deprecated_popoverRadius,
      scheme: deprecated_popoverScheme,
      ...popover || {}
    }),
    [
      deprecated_boundaryElement,
      deprecated_placement,
      deprecated_popoverRadius,
      deprecated_popoverScheme,
      deprecated_portal,
      deprecated_preventOverflow,
      popover
    ]
  );
  return (0, import_jsx_runtime2.jsx)(Popover, { "data-ui": "MenuButton__popover", ...popoverProps, content: menu, open, children: button || (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, {}) });
});
MenuButton.displayName = "ForwardRef(MenuButton)";
var MenuDivider = dt.hr`
  height: 1px;
  border: 0;
  background: var(--card-hairline-soft-color);
  margin: 0;
`;
MenuDivider.displayName = "MenuDivider";
function selectableBaseStyle() {
  return lt`
    background-color: inherit;
    color: inherit;

    &[data-as='button'] {
      -webkit-font-smoothing: inherit;
      appearance: none;
      outline: none;
      font: inherit;
      text-align: inherit;
      border: 0;
      width: -moz-available;
      width: -webkit-fill-available;
      width: stretch;
    }

    /* &:is(a) */
    &[data-as='a'] {
      text-decoration: none;
    }
  `;
}
function selectableColorStyle(props) {
  var _a;
  const { $tone } = props, { color: color3, style } = getTheme_v2(props.theme), tone = color3.selectable[$tone];
  return lt`
    ${_cardColorStyle(color3, tone.enabled)}

    background-color: var(--card-bg-color);
    color: var(--card-fg-color);
    outline: none;

    /* &:is(button) */
    &[data-as='button'] {
      &:disabled {
        ${_cardColorStyle(color3, tone.disabled)}
      }

      &:not(:disabled) {
        &[aria-pressed='true'] {
          ${_cardColorStyle(color3, tone.pressed)}
        }

        &[data-selected],
        &[aria-selected='true'] > & {
          ${_cardColorStyle(color3, tone.selected)}
        }

        @media (hover: hover) {
          &:not([data-selected]) {
            &[data-hovered],
            &:hover {
              ${_cardColorStyle(color3, tone.hovered)}
            }

            &:active {
              ${_cardColorStyle(color3, tone.pressed)}
            }
          }
        }
      }
    }

    /* &:is(a) */
    &[data-as='a'] {
      &[data-disabled] {
        ${_cardColorStyle(color3, tone.disabled)}
      }

      &:not([data-disabled]) {
        &[data-pressed] {
          ${_cardColorStyle(color3, tone.pressed)}
        }

        &[data-selected] {
          ${_cardColorStyle(color3, tone.selected)}
        }

        @media (hover: hover) {
          &:not([data-selected]) {
            &[data-hovered],
            &:hover {
              ${_cardColorStyle(color3, tone.hovered)}
            }
            &:active {
              ${_cardColorStyle(color3, tone.pressed)}
            }
          }
        }
      }
    }

    ${(_a = style == null ? void 0 : style.card) == null ? void 0 : _a.root}
  `;
}
var Selectable = dt(Box)(
  responsiveRadiusStyle,
  selectableBaseStyle,
  selectableColorStyle
);
Selectable.displayName = "Selectable";
function useMenu() {
  const value = (0, import_react49.useContext)(MenuContext);
  if (!value)
    throw new Error("useMenu(): missing context value");
  if (!isRecord2(value) || value.version !== 0)
    throw new Error("useMenu(): the context value is not compatible");
  return value;
}
function MenuGroup(props) {
  const {
    as = "button",
    children,
    fontSize: fontSize2 = 1,
    icon: IconComponent,
    onClick,
    padding = 3,
    popover,
    radius = 2,
    space = 3,
    text,
    tone = "default",
    ...restProps
  } = props, menu = useMenu(), { scheme } = useRootTheme(), {
    activeElement,
    mount,
    onClickOutside,
    onEscape,
    onItemClick,
    onItemMouseEnter = menu.onMouseEnter,
    registerElement
  } = menu, [rootElement, setRootElement] = (0, import_react49.useState)(null), [open, setOpen] = (0, import_react49.useState)(false), [shouldFocus, setShouldFocus] = (0, import_react49.useState)(null), active = !!activeElement && activeElement === rootElement, [withinMenu, setWithinMenu] = (0, import_react49.useState)(false), handleMouseEnter = (0, import_react49.useCallback)(
    (event) => {
      setWithinMenu(false), onItemMouseEnter(event), setOpen(true);
    },
    [onItemMouseEnter]
  ), handleMenuKeyDown = (0, import_react49.useCallback)(
    (event) => {
      event.key === "ArrowLeft" && (event.stopPropagation(), setOpen(false), requestAnimationFrame(() => {
        rootElement == null ? void 0 : rootElement.focus();
      }));
    },
    [rootElement]
  ), handleClick = (0, import_react49.useCallback)(
    (event) => {
      onClick == null ? void 0 : onClick(event), setShouldFocus("first"), setOpen(true);
    },
    [onClick]
  ), handleChildItemClick = (0, import_react49.useCallback)(() => {
    setOpen(false), onItemClick == null ? void 0 : onItemClick();
  }, [onItemClick]), handleMenuMouseEnter = (0, import_react49.useCallback)(() => setWithinMenu(true), []);
  (0, import_react49.useEffect)(() => mount(rootElement), [mount, rootElement]), (0, import_react49.useEffect)(() => {
    active || setOpen(false);
  }, [active]), (0, import_react49.useEffect)(() => {
    open || setWithinMenu(false);
  }, [open]), (0, import_react49.useEffect)(() => {
    if (!shouldFocus)
      return;
    const rafId = requestAnimationFrame(() => setShouldFocus(null));
    return () => cancelAnimationFrame(rafId);
  }, [shouldFocus]);
  const childMenu = (0, import_jsx_runtime2.jsx)(
    Menu,
    {
      onClickOutside,
      onEscape,
      onItemClick: handleChildItemClick,
      onKeyDown: handleMenuKeyDown,
      onMouseEnter: handleMenuMouseEnter,
      registerElement,
      shouldFocus,
      children
    }
  ), handleKeyDown = (0, import_react49.useCallback)((event) => {
    const target = event.currentTarget;
    if (document.activeElement === target && event.key === "ArrowRight") {
      setShouldFocus("first"), setOpen(true), setWithinMenu(true);
      return;
    }
  }, []);
  return (0, import_jsx_runtime2.jsx)(Popover, { ...popover, content: childMenu, "data-ui": "MenuGroup__popover", open, children: (0, import_jsx_runtime2.jsx)(
    Selectable,
    {
      "data-as": as,
      "data-ui": "MenuGroup",
      forwardedAs: as,
      ...restProps,
      "aria-pressed": as === "button" ? withinMenu : void 0,
      "data-pressed": as !== "button" ? withinMenu : void 0,
      "data-selected": !withinMenu && active ? "" : void 0,
      $radius: useArrayProp(radius),
      $tone: tone,
      $scheme: scheme,
      onClick: handleClick,
      onKeyDown: handleKeyDown,
      onMouseEnter: handleMouseEnter,
      ref: setRootElement,
      tabIndex: -1,
      type: as === "button" ? "button" : void 0,
      children: (0, import_jsx_runtime2.jsxs)(Flex, { gap: space, padding, children: [
        IconComponent && (0, import_jsx_runtime2.jsxs)(Text, { size: fontSize2, children: [
          (0, import_react49.isValidElement)(IconComponent) && IconComponent,
          (0, import_react_is.isValidElementType)(IconComponent) && (0, import_jsx_runtime2.jsx)(IconComponent, {})
        ] }),
        (0, import_jsx_runtime2.jsx)(Box, { flex: 1, children: (0, import_jsx_runtime2.jsx)(Text, { size: fontSize2, textOverflow: "ellipsis", weight: "medium", children: text }) }),
        (0, import_jsx_runtime2.jsx)(Text, { size: fontSize2, children: (0, import_jsx_runtime2.jsx)(ChevronRightIcon, {}) })
      ] })
    }
  ) });
}
MenuGroup.displayName = "MenuGroup";
var MenuItem = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const {
    as = "button",
    children,
    disabled,
    fontSize: fontSize2 = 1,
    hotkeys,
    icon: IconComponent,
    iconRight: IconRightComponent,
    onClick,
    padding = 3,
    paddingX,
    paddingY,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    pressed,
    radius = 2,
    selected: selectedProp,
    space = 3,
    text,
    tone = "default",
    ...restProps
  } = props, { scheme } = useRootTheme(), menu = useMenu(), {
    activeElement,
    mount,
    onItemClick,
    onItemMouseEnter = menu.onMouseEnter,
    onItemMouseLeave = menu.onMouseLeave
  } = menu, [rootElement, setRootElement] = (0, import_react49.useState)(null), active = !!activeElement && activeElement === rootElement, ref = (0, import_react49.useRef)(null);
  (0, import_react49.useImperativeHandle)(forwardedRef, () => ref.current), (0, import_react49.useEffect)(() => mount(rootElement, selectedProp), [mount, rootElement, selectedProp]);
  const handleClick = (0, import_react49.useCallback)(
    (event) => {
      disabled || (onClick && onClick(event), onItemClick && onItemClick());
    },
    [disabled, onClick, onItemClick]
  ), paddingProps = (0, import_react49.useMemo)(
    () => ({
      padding,
      paddingX,
      paddingY,
      paddingTop,
      paddingRight,
      paddingBottom,
      paddingLeft
    }),
    [padding, paddingX, paddingY, paddingTop, paddingRight, paddingBottom, paddingLeft]
  ), hotkeysFontSize = useArrayProp(fontSize2).map((s2) => s2 - 1), setRef = (0, import_react49.useCallback)((el) => {
    ref.current = el, setRootElement(el);
  }, []);
  return (0, import_jsx_runtime2.jsxs)(
    Selectable,
    {
      "data-ui": "MenuItem",
      ...restProps,
      "aria-pressed": as === "button" && pressed,
      "data-pressed": as !== "button" && pressed ? "" : void 0,
      "data-selected": active ? "" : void 0,
      "data-disabled": disabled ? "" : void 0,
      forwardedAs: as,
      $radius: useArrayProp(radius),
      $padding: useArrayProp(0),
      $tone: disabled ? "default" : tone,
      $scheme: scheme,
      disabled,
      onClick: handleClick,
      onMouseEnter: onItemMouseEnter,
      onMouseLeave: onItemMouseLeave,
      ref: setRef,
      role: "menuitem",
      tabIndex: -1,
      type: as === "button" ? "button" : void 0,
      children: [
        (IconComponent || text || IconRightComponent) && (0, import_jsx_runtime2.jsxs)(Flex, { as: "span", gap: space, align: "center", ...paddingProps, children: [
          IconComponent && (0, import_jsx_runtime2.jsxs)(Text, { size: fontSize2, children: [
            (0, import_react49.isValidElement)(IconComponent) && IconComponent,
            (0, import_react_is.isValidElementType)(IconComponent) && (0, import_jsx_runtime2.jsx)(IconComponent, {})
          ] }),
          text && (0, import_jsx_runtime2.jsx)(Box, { flex: 1, children: (0, import_jsx_runtime2.jsx)(Text, { size: fontSize2, textOverflow: "ellipsis", weight: "medium", children: text }) }),
          hotkeys && (0, import_jsx_runtime2.jsx)(
            Hotkeys,
            {
              fontSize: hotkeysFontSize,
              keys: hotkeys,
              style: { marginTop: -4, marginBottom: -4 }
            }
          ),
          IconRightComponent && (0, import_jsx_runtime2.jsxs)(Text, { size: fontSize2, children: [
            (0, import_react49.isValidElement)(IconRightComponent) && IconRightComponent,
            (0, import_react_is.isValidElementType)(IconRightComponent) && (0, import_jsx_runtime2.jsx)(IconRightComponent, {})
          ] })
        ] }),
        children && (0, import_jsx_runtime2.jsx)(Box, { as: "span", ...paddingProps, children })
      ]
    }
  );
});
MenuItem.displayName = "ForwardRef(MenuItem)";
var keyframe = mt`
  0% {
    background-position: 100%;
  }
  100% {
    background-position: -100%;
  }
`;
var animation = lt`
  background-image: linear-gradient(
    to right,
    var(--card-skeleton-color-from),
    var(--card-skeleton-color-to),
    var(--card-skeleton-color-from),
    var(--card-skeleton-color-from),
    var(--card-skeleton-color-from)
  );
  background-position: 100%;
  background-size: 200% 100%;
  background-attachment: fixed;
  animation-name: ${keyframe};
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
  animation-duration: 2000ms;
`;
var skeletonStyle = lt`
  opacity: ${({ $visible }) => $visible ? 1 : 0};
  transition: opacity 200ms ease-in;

  @media screen and (prefers-reduced-motion: no-preference) {
    ${({ $animated }) => $animated ? animation : lt`
            background-color: var(--card-skeleton-color-from);
          `}
  }

  @media screen and (prefers-reduced-motion: reduce) {
    background-color: var(--card-skeleton-color-from);
  }
`;
var Root$4 = dt(Box)(
  responsiveRadiusStyle,
  skeletonStyle
);
var Skeleton = (0, import_react49.forwardRef)(function(props, ref) {
  const { animated = false, delay: delay2, radius, ...restProps } = props, [visible, setVisible] = (0, import_react49.useState)(!delay2);
  return (0, import_react49.useEffect)(() => {
    if (!delay2)
      return setVisible(true);
    const timeout = setTimeout(() => {
      setVisible(true);
    }, delay2);
    return () => {
      clearTimeout(timeout);
    };
  }, [delay2]), (0, import_jsx_runtime2.jsx)(
    Root$4,
    {
      ...restProps,
      $animated: animated,
      $radius: useArrayProp(radius),
      $visible: visible,
      ref
    }
  );
});
Skeleton.displayName = "ForwardRef(Skeleton)";
var Root$3 = dt(Skeleton)((props) => {
  const { $size, $style } = props, { font, media } = getTheme_v2(props.theme), fontStyle = font[$style];
  return _responsive(media, $size, (sizeIndex) => {
    const fontSize2 = fontStyle.sizes[sizeIndex];
    return { height: fontSize2.lineHeight - fontSize2.ascenderHeight - fontSize2.descenderHeight };
  });
});
var TextSkeleton = (0, import_react49.forwardRef)(function(props, ref) {
  const { size: size22 = 2, ...restProps } = props, $size = useArrayProp(size22);
  return (0, import_jsx_runtime2.jsx)(Root$3, { ...restProps, $size, ref, $style: "text" });
});
TextSkeleton.displayName = "ForwardRef(TextSkeleton)";
var LabelSkeleton = (0, import_react49.forwardRef)(function(props, ref) {
  const { size: size22 = 2, ...restProps } = props, $size = useArrayProp(size22);
  return (0, import_jsx_runtime2.jsx)(Root$3, { ...restProps, $size, ref, $style: "label" });
});
LabelSkeleton.displayName = "ForwardRef(LabelSkeleton)";
var HeadingSkeleton = (0, import_react49.forwardRef)(function(props, ref) {
  const { size: size22 = 2, ...restProps } = props, $size = useArrayProp(size22);
  return (0, import_jsx_runtime2.jsx)(Root$3, { ...restProps, $size, ref, $style: "heading" });
});
HeadingSkeleton.displayName = "ForwardRef(HeadingSkeleton)";
var CodeSkeleton = (0, import_react49.forwardRef)(function(props, ref) {
  const { size: size22 = 2, ...restProps } = props, $size = useArrayProp(size22);
  return (0, import_jsx_runtime2.jsx)(Root$3, { ...restProps, $size, ref, $style: "code" });
});
CodeSkeleton.displayName = "ForwardRef(CodeSkeleton)";
var CustomButton = dt(Button)`
  max-width: 100%;
`;
var Tab = (0, import_react49.forwardRef)(function(props, forwardedRef) {
  const {
    icon,
    id: id3,
    focused,
    fontSize: fontSize2 = 1,
    label,
    onClick,
    onFocus,
    padding = 2,
    selected,
    ...restProps
  } = props, ref = (0, import_react49.useRef)(null), focusedRef = (0, import_react49.useRef)(false);
  (0, import_react49.useImperativeHandle)(
    forwardedRef,
    () => ref.current
  );
  const handleBlur = (0, import_react49.useCallback)(() => {
    focusedRef.current = false;
  }, []), handleFocus = (0, import_react49.useCallback)(
    (event) => {
      focusedRef.current = true, onFocus && onFocus(event);
    },
    [onFocus]
  );
  return (0, import_react49.useEffect)(() => {
    focused && !focusedRef.current && (ref.current && ref.current.focus(), focusedRef.current = true);
  }, [focused]), (0, import_jsx_runtime2.jsx)(
    CustomButton,
    {
      "data-ui": "Tab",
      ...restProps,
      "aria-selected": selected ? "true" : "false",
      fontSize: fontSize2,
      icon,
      id: id3,
      mode: "bleed",
      onClick,
      onBlur: handleBlur,
      onFocus: handleFocus,
      padding,
      ref,
      role: "tab",
      selected,
      tabIndex: selected ? 0 : -1,
      text: label,
      type: "button"
    }
  );
});
Tab.displayName = "ForwardRef(Tab)";
function _isReactElement(node2) {
  return !!node2;
}
var CustomInline = dt(Inline)`
  & > div {
    display: inline-block;
    vertical-align: middle;
    max-width: 100%;
    box-sizing: border-box;
  }
`;
var TabList = (0, import_react49.forwardRef)(function(props, ref) {
  const { children: childrenProp, ...restProps } = props, [focusedIndex, setFocusedIndex] = (0, import_react49.useState)(-1), tabs = (0, import_react49.useMemo)(() => childrenProp.filter(_isReactElement), [childrenProp]).map(
    (child, childIndex) => (0, import_react49.cloneElement)(child, {
      focused: focusedIndex === childIndex,
      key: childIndex,
      onFocus: () => handleTabFocus(childIndex)
    })
  ), numTabs = tabs.length, handleTabFocus = (0, import_react49.useCallback)((tabIdx) => {
    setFocusedIndex(tabIdx);
  }, []), handleKeyDown = (0, import_react49.useCallback)(
    (event) => {
      event.key === "ArrowLeft" && setFocusedIndex((prevIndex) => (prevIndex + numTabs - 1) % numTabs), event.key === "ArrowRight" && setFocusedIndex((prevIndex) => (prevIndex + 1) % numTabs);
    },
    [numTabs]
  );
  return (0, import_jsx_runtime2.jsx)(
    CustomInline,
    {
      "data-ui": "TabList",
      ...restProps,
      onKeyDown: handleKeyDown,
      ref,
      role: "tablist",
      children: tabs
    }
  );
});
TabList.displayName = "ForwardRef(TabList)";
var TabPanel = (0, import_react49.forwardRef)(function(props, ref) {
  const { flex, ...restProps } = props;
  return (0, import_jsx_runtime2.jsx)(
    Box,
    {
      "data-ui": "TabPanel",
      ...restProps,
      flex,
      ref,
      role: "tabpanel",
      tabIndex: props.tabIndex === void 0 ? 0 : props.tabIndex,
      children: props.children
    }
  );
});
TabPanel.displayName = "ForwardRef(TabPanel)";
var TextBox = dt(Flex)`
  overflow-x: auto;
`;
var loadingAnimation = mt`
  0% {
    width: 0;
  }
  100% {
    width: 100%;
  }
`;
var LOADING_BAR_HEIGHT = 2;
function rootStyles(props) {
  const { color: color3 } = getTheme_v2(props.theme), loadingBarColor = color3.button.default[props.tone].enabled.bg;
  return props.$duration ? lt`
    pointer-events: all;
    width: 100%;
    position: relative;
    overflow: hidden;
    overflow: clip;
    padding-bottom: ${LOADING_BAR_HEIGHT}px;
    &::before {
      content: '';
      position: absolute;
      bottom: 0px;
      height: ${LOADING_BAR_HEIGHT}px;
      background: ${loadingBarColor};
      animation-name: ${loadingAnimation};
      animation-duration: ${props.$duration}ms;
      animation-fill-mode: both;
    }

    & > * {
      opacity: var(${POPOVER_MOTION_CONTENT_OPACITY_PROPERTY}, 1);
      will-change: opacity;
    }
  ` : lt`
      pointer-events: all;
      & > * {
        opacity: var(${POPOVER_MOTION_CONTENT_OPACITY_PROPERTY}, 1);
        will-change: opacity;
      }
    `;
}
var STATUS_CARD_TONE = {
  error: "critical",
  warning: "caution",
  success: "positive",
  info: "primary"
};
var BUTTON_TONE = {
  error: "critical",
  warning: "caution",
  success: "positive",
  info: "primary"
};
var ROLES = {
  error: "alert",
  warning: "alert",
  success: "alert",
  info: "alert"
};
var Root$2 = dt(Card)(
  rootStyles
);
function Toast(props) {
  const { closable, description, duration, onClose, radius = 3, title, status, ...restProps } = props, cardTone = status ? STATUS_CARD_TONE[status] : "default", buttonTone = status ? BUTTON_TONE[status] : "default", role = status ? ROLES[status] : "status";
  return (0, import_jsx_runtime2.jsx)(
    Root$2,
    {
      "data-ui": "Toast",
      role,
      ...restProps,
      marginTop: 3,
      radius,
      shadow: 2,
      tone: cardTone,
      $duration: duration,
      children: (0, import_jsx_runtime2.jsxs)(Flex, { align: "flex-start", children: [
        (0, import_jsx_runtime2.jsx)(TextBox, { flex: 1, padding: 3, children: (0, import_jsx_runtime2.jsxs)(Stack, { space: 3, children: [
          title && (0, import_jsx_runtime2.jsx)(Text, { size: 1, weight: "medium", children: title }),
          description && (0, import_jsx_runtime2.jsx)(Text, { muted: true, size: 1, children: description })
        ] }) }),
        closable && (0, import_jsx_runtime2.jsx)(Box, { padding: 1, children: (0, import_jsx_runtime2.jsx)(
          Button,
          {
            as: "button",
            icon: CloseIcon,
            mode: "bleed",
            padding: 2,
            tone: buttonTone,
            onClick: onClose,
            style: { verticalAlign: "top" }
          }
        ) })
      ] })
    }
  );
}
Toast.displayName = "Toast";
function useMounted() {
  return (0, import_react49.useSyncExternalStore)(
    subscribe,
    () => true,
    () => false
  );
}
var subscribe = () => () => {
};
var ToastContext = createGlobalScopedContext(
  "@sanity/ui/context/toast",
  null
);
var Root$1 = dt(Layer)`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
`;
var ToastContainer = dt.div`
  box-sizing: border-box;
  position: absolute;
  right: 0;
  bottom: 0;
  max-width: 420px;
  width: 100%;
`;
var toastId = 0;
function ToastProvider(props) {
  const { children, padding = 4, paddingX, paddingY, zOffset } = props, [state, _setState] = (0, import_react49.useState)([]), toastsRef = (0, import_react49.useRef)({}), mounted = useMounted(), prefersReducedMotion2 = usePrefersReducedMotion(), variants = (0, import_react49.useMemo)(
    () => ({
      initial: {
        opacity: 0,
        [POPOVER_MOTION_CONTENT_OPACITY_PROPERTY]: 0,
        y: 32,
        scale: 0.25,
        willChange: "transform"
      },
      animate: {
        opacity: [0, 1, 1],
        [POPOVER_MOTION_CONTENT_OPACITY_PROPERTY]: [0, 0, 1],
        y: 0,
        scale: 1
      },
      exit: {
        opacity: [1, 1, 0],
        [POPOVER_MOTION_CONTENT_OPACITY_PROPERTY]: [1, 0, 0],
        scale: 0.5,
        transition: prefersReducedMotion2 ? { duration: 0 } : { duration: 0.2 }
      }
    }),
    [prefersReducedMotion2]
  ), value = (0, import_react49.useMemo)(() => ({ version: 0, push: (params) => {
    const setState = (state2) => (0, import_react49.startTransition)(() => _setState(state2)), id3 = params.id || String(toastId++), duration = params.duration || 5e3, dismiss = () => {
      var _a;
      const timeoutId = (_a = toastsRef.current[id3]) == null ? void 0 : _a.timeoutId;
      setState((prevState) => {
        const idx = prevState.findIndex((t) => t.id === id3);
        if (idx > -1) {
          const toasts = prevState.slice(0);
          return toasts.splice(idx, 1), toasts;
        }
        return prevState;
      }), timeoutId !== void 0 && (clearTimeout(timeoutId), delete toastsRef.current[id3]);
    };
    return setState((prevState) => prevState.filter((t) => t.id !== id3).concat([
      {
        dismiss,
        id: id3,
        params: { ...params, duration }
      }
    ])), toastsRef.current[id3] && (clearTimeout(toastsRef.current[id3].timeoutId), delete toastsRef.current[id3]), toastsRef.current[id3] = { timeoutId: setTimeout(dismiss, duration) }, id3;
  } }), []);
  return (0, import_react49.useEffect)(
    () => () => {
      for (const { timeoutId } of Object.values(toastsRef.current))
        clearTimeout(timeoutId);
      toastsRef.current = {};
    },
    []
  ), (0, import_jsx_runtime2.jsxs)(ToastContext.Provider, { value, children: [
    children,
    mounted && (0, import_jsx_runtime2.jsx)(Root$1, { "data-ui": "ToastProvider", zOffset, children: (0, import_jsx_runtime2.jsx)(ToastContainer, { children: (0, import_jsx_runtime2.jsx)(Box, { padding, paddingX, paddingY, children: (0, import_jsx_runtime2.jsx)(AnimatePresence, { initial: false, children: state.map(({ dismiss, id: id3, params }) => (0, import_jsx_runtime2.jsx)(
      motion.div,
      {
        layout: "position",
        initial: "initial",
        animate: "animate",
        exit: "exit",
        variants,
        transition: prefersReducedMotion2 ? { duration: 0 } : { type: "spring", damping: 30, stiffness: 400 },
        children: (0, import_jsx_runtime2.jsx)(
          Toast,
          {
            closable: params.closable,
            description: params.description,
            onClose: dismiss,
            status: params.status,
            title: params.title,
            duration: params.duration
          }
        )
      },
      id3
    )) }) }) }) })
  ] });
}
ToastProvider.displayName = "ToastProvider";
function useToast() {
  const value = (0, import_react49.useContext)(ToastContext);
  if (!value)
    throw new Error("useToast(): missing context value");
  if (!isRecord2(value) || value.version !== 0)
    throw new Error("useToast(): the context value is not compatible");
  return value;
}
function _findPrevItemElement(state, itemElements, focusedElement) {
  var _a;
  const idx = itemElements.indexOf(focusedElement), els = itemElements.slice(0, idx), len = els.length;
  for (let i2 = len - 1; i2 >= 0; i2 -= 1) {
    const itemKey = els[i2].getAttribute("data-tree-key");
    if (!itemKey)
      continue;
    const segments = itemKey.split("/");
    segments.pop();
    const p2 = [];
    let expanded = true;
    for (let j2 = 0; j2 < segments.length; j2 += 1) {
      p2.push(segments[j2]);
      const k2 = p2.join("/");
      if (!((_a = state[k2]) == null ? void 0 : _a.expanded)) {
        expanded = false;
        break;
      }
    }
    if (expanded)
      return els[i2];
  }
  return null;
}
function _findNextItemElement(state, itemElements, focusedElement) {
  var _a;
  const idx = itemElements.indexOf(focusedElement), els = itemElements.slice(idx), len = itemElements.length;
  for (let i2 = 1; i2 < len; i2 += 1) {
    if (!els[i2])
      continue;
    const itemKey = els[i2].getAttribute("data-tree-key");
    if (!itemKey)
      continue;
    const segments = itemKey.split("/");
    segments.pop();
    const p2 = [];
    let expanded = true;
    for (let j2 = 0; j2 < segments.length; j2 += 1) {
      p2.push(segments[j2]);
      const k2 = p2.join("/");
      if (!((_a = state[k2]) == null ? void 0 : _a.expanded)) {
        expanded = false;
        break;
      }
    }
    if (expanded)
      return els[i2];
  }
  return null;
}
function _focusItemElement(el) {
  if (el.getAttribute("role") === "treeitem" && el.focus(), el.getAttribute("role") === "none") {
    const firstChild = el.firstChild;
    firstChild && firstChild instanceof HTMLElement && firstChild.focus();
  }
}
var TreeContext = createGlobalScopedContext(
  "@sanity/ui/context/tree",
  null
);
var Tree = (0, import_react49.memo)(
  (0, import_react49.forwardRef)(function(props, forwardedRef) {
    const { children, space = 1, onFocus, ...restProps } = props, ref = (0, import_react49.useRef)(null), [focusedElement, setFocusedElement] = (0, import_react49.useState)(null), focusedElementRef = (0, import_react49.useRef)(focusedElement), path = (0, import_react49.useMemo)(() => [], []), [itemElements, setItemElements] = (0, import_react49.useState)([]), [state, setState] = (0, import_react49.useState)({}), stateRef = (0, import_react49.useRef)(state);
    (0, import_react49.useImperativeHandle)(
      forwardedRef,
      () => ref.current
    ), (0, import_react49.useEffect)(() => {
      focusedElementRef.current = focusedElement;
    }, [focusedElement]), (0, import_react49.useEffect)(() => {
      stateRef.current = state;
    }, [state]);
    const registerItem = (0, import_react49.useCallback)(
      (element, path2, expanded, selected) => (setState((s2) => ({ ...s2, [path2]: { element, expanded } })), selected && setFocusedElement(element), () => {
        setState((s2) => {
          const newState = { ...s2 };
          return delete newState[path2], newState;
        });
      }),
      []
    ), setExpanded = (0, import_react49.useCallback)((path2, expanded) => {
      setState((s2) => {
        const itemState = s2[path2];
        return itemState ? { ...s2, [path2]: { ...itemState, expanded } } : s2;
      });
    }, []), contextValue = (0, import_react49.useMemo)(
      () => ({
        version: 0,
        focusedElement: focusedElement || itemElements[0] || null,
        level: 0,
        path,
        registerItem,
        setExpanded,
        setFocusedElement,
        space,
        state
      }),
      [focusedElement, itemElements, path, registerItem, setExpanded, space, state]
    ), handleKeyDown = (0, import_react49.useCallback)(
      (event) => {
        var _a;
        if (focusedElementRef.current) {
          if (event.key === "ArrowDown") {
            event.preventDefault();
            const nextEl = _findNextItemElement(
              stateRef.current,
              itemElements,
              focusedElementRef.current
            );
            nextEl && (_focusItemElement(nextEl), setFocusedElement(nextEl));
            return;
          }
          if (event.key === "ArrowUp") {
            event.preventDefault();
            const prevEl = _findPrevItemElement(
              stateRef.current,
              itemElements,
              focusedElementRef.current
            );
            prevEl && (_focusItemElement(prevEl), setFocusedElement(prevEl));
            return;
          }
          if (event.key === "ArrowLeft") {
            event.preventDefault();
            const itemKey = focusedElementRef.current.getAttribute("data-tree-key");
            if (!itemKey)
              return;
            const itemState = stateRef.current[itemKey];
            if (!itemState)
              return;
            if (itemState.expanded)
              setState((s2) => {
                const itemState2 = s2[itemKey];
                return itemState2 ? { ...s2, [itemKey]: { ...itemState2, expanded: false } } : s2;
              });
            else {
              const itemPath = itemKey.split("/");
              itemPath.pop();
              const parentKey = itemPath.join("/"), parentState = parentKey && stateRef.current[parentKey];
              parentState && (parentState.element.focus(), setFocusedElement(parentState.element));
            }
            return;
          }
          if (event.key === "ArrowRight") {
            event.preventDefault();
            const focusedKey = focusedElementRef.current.getAttribute("data-tree-key");
            if (!focusedKey)
              return;
            ((_a = stateRef.current[focusedKey]) == null ? void 0 : _a.expanded) || setState((s2) => {
              const itemState = s2[focusedKey];
              return itemState ? { ...s2, [focusedKey]: { ...itemState, expanded: true } } : s2;
            });
            return;
          }
        }
      },
      [itemElements]
    ), handleFocus = (0, import_react49.useCallback)(
      (event) => {
        setFocusedElement(event.target), onFocus == null ? void 0 : onFocus(event);
      },
      [onFocus]
    );
    return (0, import_react49.useEffect)(() => {
      if (!ref.current)
        return;
      const _itemElements = Array.from(
        ref.current.querySelectorAll('[data-ui="TreeItem"]')
      );
      setItemElements(_itemElements);
    }, [children]), (0, import_jsx_runtime2.jsx)(TreeContext.Provider, { value: contextValue, children: (0, import_jsx_runtime2.jsx)(
      Stack,
      {
        as: "ul",
        "data-ui": "Tree",
        ...restProps,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        ref,
        role: "tree",
        space,
        children
      }
    ) });
  })
);
Tree.displayName = "Memo(ForwardRef(Tree))";
function treeItemRootStyle() {
  return lt`
    &[role='none'] > [role='treeitem'] {
      outline: none;
      cursor: default;
      border-radius: 3px;

      background-color: var(--card-bg-color);
      color: var(--treeitem-fg-color);

      &:focus {
        position: relative;
      }
    }

    &[role='treeitem'] {
      outline: none;

      & > div {
        cursor: default;
        border-radius: 3px;

        background-color: var(--card-bg-color);
        color: var(--treeitem-fg-color);
      }

      &:focus > div {
        position: relative;
      }
    }
  `;
}
function treeItemRootColorStyle(props) {
  const $tone = "default", { color: color3 } = getTheme_v2(props.theme), tone = color3.selectable[$tone];
  return lt`
    &[role='none'] {
      & > [role='treeitem'] {
        ${_cardColorStyle(color3, tone.enabled)}
      }

      &[data-selected] > [role='treeitem'] {
        ${_cardColorStyle(color3, tone.pressed)}
      }

      @media (hover: hover) {
        &:not([data-selected]) > [role='treeitem']:not(:focus):hover {
          ${_cardColorStyle(color3, tone.hovered)}
        }

        & > [role='treeitem']:focus {
          ${_cardColorStyle(color3, tone.selected)}
        }
      }
    }

    &[role='treeitem'] {
      & > [data-ui='TreeItem__box'] {
        ${_cardColorStyle(color3, tone.enabled)}
      }

      &[data-selected] > [data-ui='TreeItem__box'] {
        ${_cardColorStyle(color3, tone.pressed)}
      }

      @media (hover: hover) {
        &:not([data-selected]):not(:focus) > [data-ui='TreeItem__box']:hover {
          ${_cardColorStyle(color3, tone.hovered)}
        }

        &:focus > [data-ui='TreeItem__box'] {
          ${_cardColorStyle(color3, tone.selected)}
        }
      }
    }
  `;
}
function treeItemBoxStyle(props) {
  const { $level } = props, { space } = getTheme_v2(props.theme);
  return lt`
    padding-left: ${rem(space[2] * $level)};

    &[data-as='a'] {
      text-decoration: none;
    }
  `;
}
function useTree() {
  const tree = (0, import_react49.useContext)(TreeContext);
  if (!tree)
    throw new Error("Tree: missing context value");
  return tree;
}
var TreeGroup = (0, import_react49.memo)(function(props) {
  const { children, expanded = false, ...restProps } = props, tree = useTree();
  return (0, import_jsx_runtime2.jsx)(
    Stack,
    {
      as: "ul",
      "data-ui": "TreeGroup",
      ...restProps,
      hidden: !expanded,
      marginTop: tree.space,
      role: "group",
      space: tree.space,
      children
    }
  );
});
var Root = (0, import_react49.memo)(dt.li(treeItemRootStyle, treeItemRootColorStyle));
var TreeItemBox = dt(Box).attrs({ forwardedAs: "a" })(treeItemBoxStyle);
var ToggleArrowText = dt(Text)`
  & > svg {
    transition: transform 100ms;
  }
`;
var TreeItem = (0, import_react49.memo)(function(props) {
  const {
    children,
    expanded: expandedProp = false,
    fontSize: fontSize2 = 1,
    href,
    icon: IconComponent,
    id: idProp,
    linkAs,
    muted,
    onClick,
    padding = 2,
    selected = false,
    space = 2,
    text,
    weight,
    ...restProps
  } = props, rootRef = (0, import_react49.useRef)(null), treeitemRef = (0, import_react49.useRef)(null), tree = useTree(), { path, registerItem, setExpanded, setFocusedElement } = tree, _id = (0, import_react49.useId)(), id3 = idProp || _id, itemPath = (0, import_react49.useMemo)(() => path.concat([id3 || ""]), [id3, path]), itemKey = itemPath.join("/"), itemState = tree.state[itemKey], focused = tree.focusedElement === rootRef.current, expanded = (itemState == null ? void 0 : itemState.expanded) === void 0 ? expandedProp : (itemState == null ? void 0 : itemState.expanded) || false, tabIndex = tree.focusedElement && tree.focusedElement === rootRef.current ? 0 : -1, contextValue = (0, import_react49.useMemo)(
    () => ({ ...tree, level: tree.level + 1, path: itemPath }),
    [itemPath, tree]
  ), handleClick = (0, import_react49.useCallback)(
    (event) => {
      onClick && onClick(event);
      const target = event.target;
      target instanceof HTMLElement && (target.getAttribute("data-ui") === "TreeItem" || target.closest('[data-ui="TreeItem__box"]')) && (event.stopPropagation(), setExpanded(itemKey, !expanded), setFocusedElement(rootRef.current));
    },
    [expanded, itemKey, onClick, setExpanded, setFocusedElement]
  ), handleKeyDown = (0, import_react49.useCallback)(
    (event) => {
      var _a;
      focused && event.key === "Enter" && ((_a = treeitemRef.current || rootRef.current) == null ? void 0 : _a.click());
    },
    [focused]
  );
  (0, import_react49.useEffect)(() => {
    if (rootRef.current)
      return registerItem(rootRef.current, itemPath.join("/"), expanded, selected);
  }, [expanded, itemPath, registerItem, selected]);
  const content = (0, import_jsx_runtime2.jsxs)(Flex, { padding, children: [
    (0, import_jsx_runtime2.jsxs)(
      Box,
      {
        marginRight: space,
        style: {
          visibility: IconComponent || children ? "visible" : "hidden",
          pointerEvents: "none"
        },
        children: [
          IconComponent && (0, import_jsx_runtime2.jsx)(Text, { muted, size: fontSize2, weight, children: (0, import_jsx_runtime2.jsx)(IconComponent, {}) }),
          !IconComponent && (0, import_jsx_runtime2.jsx)(ToggleArrowText, { muted, size: fontSize2, weight, children: (0, import_jsx_runtime2.jsx)(ToggleArrowRightIcon, { style: { transform: expanded ? "rotate(90deg)" : void 0 } }) })
        ]
      }
    ),
    (0, import_jsx_runtime2.jsx)(Box, { flex: 1, children: (0, import_jsx_runtime2.jsx)(Text, { muted, size: fontSize2, textOverflow: "ellipsis", weight, children: text }) })
  ] });
  return href ? (0, import_jsx_runtime2.jsxs)(
    Root,
    {
      "data-selected": selected ? "" : void 0,
      "data-tree-id": id3,
      "data-tree-key": itemKey,
      "data-ui": "TreeItem",
      ...restProps,
      onClick: handleClick,
      ref: rootRef,
      role: "none",
      children: [
        (0, import_jsx_runtime2.jsx)(
          TreeItemBox,
          {
            $level: tree.level,
            "aria-expanded": expanded,
            as: linkAs,
            "data-ui": "TreeItem__box",
            href,
            ref: treeitemRef,
            role: "treeitem",
            tabIndex,
            children: content
          }
        ),
        (0, import_jsx_runtime2.jsx)(TreeContext.Provider, { value: contextValue, children: children && (0, import_jsx_runtime2.jsx)(TreeGroup, { hidden: !expanded, children }) })
      ]
    }
  ) : (0, import_jsx_runtime2.jsxs)(
    Root,
    {
      "data-selected": selected ? "" : void 0,
      "data-ui": "TreeItem",
      "data-tree-id": id3,
      "data-tree-key": itemKey,
      ...restProps,
      "aria-expanded": expanded,
      onClick: handleClick,
      onKeyDown: handleKeyDown,
      ref: rootRef,
      role: "treeitem",
      tabIndex,
      children: [
        (0, import_jsx_runtime2.jsx)(TreeItemBox, { $level: tree.level, as: "div", "data-ui": "TreeItem__box", children: content }),
        (0, import_jsx_runtime2.jsx)(TreeContext.Provider, { value: contextValue, children: children && (0, import_jsx_runtime2.jsx)(TreeGroup, { expanded, children }) })
      ]
    }
  );
});
TreeItem.displayName = "Memo(TreeItem)";

export {
  getTheme_v2,
  COLOR_HUES,
  black,
  white,
  gray,
  blue,
  purple,
  red,
  yellow,
  green,
  hues,
  createColorTheme,
  multiply,
  screen,
  rgbToHex,
  parseColor,
  rgba,
  buildTheme,
  require_react_is,
  lt,
  dt,
  ft,
  mt,
  AccessDeniedIcon,
  AddCircleIcon,
  AddCommentIcon,
  AddDocumentIcon,
  AddIcon,
  AddUserIcon,
  ArrowDownIcon,
  ArrowLeftIcon,
  ArrowRightIcon,
  BinaryDocumentIcon,
  BlockContentIcon,
  BlockElementIcon,
  BoldIcon,
  BoltIcon,
  BulbOutlineIcon,
  CalendarIcon,
  CheckmarkCircleIcon,
  CheckmarkIcon,
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  ChevronUpIcon,
  CircleIcon,
  ClipboardIcon,
  ClockIcon,
  CloseIcon,
  CodeIcon,
  CogIcon,
  CollapseIcon,
  CommentIcon,
  ControlsIcon,
  CopyIcon,
  CropIcon,
  DesktopIcon,
  DocumentIcon,
  DocumentSheetIcon,
  DocumentsIcon,
  DotIcon,
  DoubleChevronLeftIcon,
  DoubleChevronRightIcon,
  DownloadIcon,
  DragHandleIcon,
  EarthAmericasIcon,
  EditIcon,
  EllipsisHorizontalIcon,
  ErrorOutlineIcon,
  ExpandIcon,
  EyeOpenIcon,
  FolderIcon,
  HelpCircleIcon,
  ImageIcon,
  InfoOutlineIcon,
  InlineElementIcon,
  InsertAboveIcon,
  InsertBelowIcon,
  ItalicIcon,
  JsonIcon,
  LaunchIcon,
  LeaveIcon,
  LinkIcon,
  LinkRemovedIcon,
  MasterDetailIcon,
  MenuIcon,
  MoonIcon,
  NumberIcon,
  OlistIcon,
  PanelLeftIcon,
  PanelRightIcon,
  PlayIcon,
  PublishIcon,
  ReadOnlyIcon,
  RemoveIcon,
  ResetIcon,
  RestoreIcon,
  RevertIcon,
  SearchIcon,
  SelectIcon,
  SortIcon,
  SpinnerIcon,
  SplitVerticalIcon,
  StackCompactIcon,
  StackIcon,
  StopIcon,
  StrikethroughIcon,
  StringIcon,
  SunIcon,
  SyncIcon,
  TaskIcon,
  ThLargeIcon,
  ToggleArrowRightIcon,
  TrashIcon,
  UlistIcon,
  UnderlineIcon,
  UndoIcon,
  UnknownIcon,
  UnpublishIcon,
  UploadIcon,
  UserIcon,
  UsersIcon,
  WarningOutlineIcon,
  Icon,
  require_javascript,
  require_Refractor,
  motion,
  AnimatePresence,
  useEffectEvent,
  rgba3 as rgba2,
  studioTheme,
  rem,
  _responsive,
  useArrayProp,
  useClickOutsideEvent,
  useElementSize,
  useElementRect,
  useGlobalKeyDown,
  ThemeProvider,
  ThemeColorProvider,
  useTheme,
  useMediaIndex,
  usePrefersDark,
  Label,
  Avatar,
  AvatarCounter,
  AvatarStack,
  Box,
  Text,
  Badge,
  Flex,
  Spinner,
  Button,
  Card,
  Checkbox,
  Code,
  Container,
  Grid,
  Heading,
  Inline,
  BoundaryElementProvider,
  useBoundaryElement,
  ElementQuery,
  ErrorBoundary,
  useLayer,
  _raf2,
  isHTMLElement2 as isHTMLElement,
  focusFirstDescendant,
  focusLastDescendant,
  LayerProvider,
  Layer,
  usePortal,
  Portal,
  PortalProvider,
  VirtualList,
  Popover,
  Radio,
  Select,
  Stack,
  Switch,
  TextArea,
  TextInput,
  TooltipDelayGroupProvider,
  Tooltip,
  Autocomplete,
  Breadcrumbs,
  Dialog,
  DialogProvider,
  Hotkeys,
  Menu,
  MenuButton,
  MenuDivider,
  MenuGroup,
  MenuItem,
  Skeleton,
  TextSkeleton,
  Tab,
  TabList,
  TabPanel,
  ToastProvider,
  useToast
};
/*! Bundled license information:

prismjs/components/prism-core.js:
  (**
   * Prism: Lightweight, robust, elegant syntax highlighting
   *
   * @license MIT <https://opensource.org/licenses/MIT>
   * @author Lea Verou <https://lea.verou.me>
   * @namespace
   * @public
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=chunk-57Z3M6EV.js.map
