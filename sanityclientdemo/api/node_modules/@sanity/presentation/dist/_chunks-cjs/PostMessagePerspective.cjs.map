{"version":3,"file":"PostMessagePerspective.cjs","sources":["../../src/PostMessagePerspective.tsx"],"sourcesContent":["import type {ClientPerspective} from '@sanity/client'\nimport {memo, useEffect, type FC} from 'react'\nimport type {VisualEditingConnection} from './types'\n\nexport interface PostMessagePerspectiveProps {\n  comlink: VisualEditingConnection\n  perspective: ClientPerspective\n}\n\nconst PostMessagePerspective: FC<PostMessagePerspectiveProps> = (props) => {\n  const {comlink, perspective} = props\n\n  // Return the perspective when requested\n  useEffect(() => {\n    return comlink.on('visual-editing/fetch-perspective', () => ({\n      perspective,\n    }))\n  }, [comlink, perspective])\n\n  // Dispatch a perspective message when the perspective changes\n  useEffect(() => {\n    comlink.post({\n      type: 'presentation/perspective',\n      data: {perspective},\n    })\n  }, [comlink, perspective])\n\n  return null\n}\n\nexport default memo(PostMessagePerspective)\n"],"names":["useEffect","memo"],"mappings":";;AASA,MAAM,yBAA0D,CAAC,UAAU;AACnE,QAAA,EAAC,SAAS,YAAe,IAAA;AAG/B,SAAAA,MAAA,UAAU,MACD,QAAQ,GAAG,oCAAoC,OAAO;AAAA,IAC3D;AAAA,EAAA,EACA,GACD,CAAC,SAAS,WAAW,CAAC,GAGzBA,gBAAU,MAAM;AACd,YAAQ,KAAK;AAAA,MACX,MAAM;AAAA,MACN,MAAM,EAAC,YAAW;AAAA,IAAA,CACnB;AAAA,EACA,GAAA,CAAC,SAAS,WAAW,CAAC,GAElB;AACT;AAEA,IAAeC,2BAAAA,MAAAA,KAAK,sBAAsB;;"}