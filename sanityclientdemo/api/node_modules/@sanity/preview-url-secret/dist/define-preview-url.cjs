'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var constants = require('./constants.cjs');

function definePreviewUrl(options) {
  const {
    draftMode,
    previewMode,
    origin = typeof location === "undefined" ? "https://localhost" : location.origin
  } = options;
  const enableUrl = previewMode?.enable || draftMode?.enable;
  let { preview = "/" } = options;
  const productionUrl = new URL(preview, origin);
  const enablePreviewModeUrl = enableUrl ? new URL(enableUrl, origin) : void 0;
  return async (context) => {
    try {
      if (context.previewSearchParam) {
        const restoredUrl = new URL(context.previewSearchParam, productionUrl);
        if (restoredUrl.origin === productionUrl.origin) {
          preview = `${restoredUrl.pathname}${restoredUrl.search}`;
        }
      }
    } catch {
    }
    if (typeof location !== "undefined" && location.origin === productionUrl.origin && context.studioBasePath && (preview.startsWith(`${context.studioBasePath}/`) || preview === context.studioBasePath)) {
      preview = options.preview || "/";
    }
    const previewUrl = new URL(preview, productionUrl);
    if (enablePreviewModeUrl) {
      const enablePreviewModeRequestUrl = new URL(enablePreviewModeUrl);
      const { searchParams } = enablePreviewModeRequestUrl;
      searchParams.set(constants.urlSearchParamPreviewSecret, context.previewUrlSecret);
      searchParams.set(constants.urlSearchParamPreviewPerspective, context.studioPreviewPerspective);
      if (previewUrl.pathname !== enablePreviewModeRequestUrl.pathname) {
        searchParams.set(
          constants.urlSearchParamPreviewPathname,
          `${previewUrl.pathname}${previewUrl.search}`
        );
      }
      return enablePreviewModeRequestUrl.toString();
    }
    return previewUrl.toString();
  };
}

exports.definePreviewUrl = definePreviewUrl;
//# sourceMappingURL=define-preview-url.cjs.map
