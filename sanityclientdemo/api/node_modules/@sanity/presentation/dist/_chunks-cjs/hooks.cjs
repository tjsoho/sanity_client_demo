"use strict";
var react = require("react");
function useQueryParams(params) {
  const stringifiedParams = react.useMemo(() => JSON.stringify(params || {}), [params]);
  return react.useMemo(() => JSON.parse(stringifiedParams), [stringifiedParams]);
}
function useRevalidate(props) {
  const { refreshInterval } = props, shouldPause = useShouldPause(), [state, setState] = react.useState("hit"), startRefresh = react.useCallback(() => (setState("inflight"), () => setState("hit")), []);
  return react.useEffect(() => {
    if (!refreshInterval || state !== "hit")
      return;
    const timeout = setTimeout(() => setState("stale"), refreshInterval);
    return () => clearTimeout(timeout);
  }, [refreshInterval, state]), react.useEffect(() => {
    if (state !== "hit")
      return;
    const onFocus = () => setState("stale");
    return window.addEventListener("focus", onFocus), () => window.removeEventListener("focus", onFocus);
  }, [refreshInterval, state]), react.useEffect(() => {
    shouldPause && state === "hit" && setState("stale"), !shouldPause && state === "stale" && setState("refresh");
  }, [shouldPause, state]), [state, startRefresh];
}
function useShouldPause() {
  const [online, setOnline] = react.useState(!1);
  react.useEffect(() => {
    setOnline(navigator.onLine);
    const online2 = () => setOnline(!0), offline = () => setOnline(!1);
    return window.addEventListener("online", online2), window.addEventListener("offline", offline), () => {
      window.removeEventListener("online", online2), window.removeEventListener("offline", offline);
    };
  }, []);
  const visibilityState = react.useSyncExternalStore(
    onVisibilityChange,
    () => document.visibilityState,
    () => "hidden"
  );
  return !online || visibilityState === "hidden";
}
function onVisibilityChange(onStoreChange) {
  return document.addEventListener("visibilitychange", onStoreChange), () => document.removeEventListener("visibilitychange", onStoreChange);
}
exports.useQueryParams = useQueryParams;
exports.useRevalidate = useRevalidate;
//# sourceMappingURL=hooks.cjs.map
