{"version":3,"file":"index.js","sources":["../../src/constants.ts","../../src/util/props.ts","../../src/useDocumentLocations.ts","../../src/i18n/index.ts","../../src/PresentationContext.ts","../../src/usePresentationTool.ts","../../src/document/useCurrentPresentationToolName.ts","../../src/document/LocationsBanner.tsx","../../src/document/PresentationDocumentContext.ts","../../src/document/PresentationDocumentHeader.tsx","../../src/document/PresentationDocumentProvider.tsx","../../src/fieldActions/openInStructure.ts","../../src/getIntentState.ts","../../src/PresentationSpinner.tsx","../../src/router.ts","../../src/plugin.tsx","../../src/PresentationNavigateContext.ts","../../src/usePresentationNavigate.ts","../../src/PresentationParamsContext.ts","../../src/usePresentationParams.ts"],"sourcesContent":["import {ComposeIcon} from '@sanity/icons'\n\nexport const DEFAULT_TOOL_ICON = ComposeIcon\nexport const DEFAULT_TOOL_NAME = 'presentation'\nexport const DEFAULT_TOOL_TITLE = 'Presentation'\n\n// @todo import from core sanity package\nexport const COMMENTS_INSPECTOR_NAME = 'sanity/structure/comments'\n\nexport const EDIT_INTENT_MODE = 'presentation'\n\n// How long we wait until an iframe is loaded until we consider it to be slow and possibly failed\nexport const MAX_TIME_TO_OVERLAYS_CONNECTION = 3_000 // ms\n\n// The API version to use when using `@sanity/client`\nexport const API_VERSION = '2023-10-16'\n\n// Heartbeats shouldn't fire on intervals that are so short it causes performance issues\nexport const MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL = 1000 // ms\n\n// Batch size for fetching documents building up the cache\nexport const LIVE_QUERY_CACHE_BATCH_SIZE = 100\n\n// Total cache size for documents that are live queried\nexport const LIVE_QUERY_CACHE_SIZE = 2048\n\ndeclare global {\n  const PRESENTATION_ENABLE_LIVE_DRAFT_EVENTS: unknown\n}\n\n// Feature flag that uses the new Live Draft Content API instead of the Listen API + Mendoza events\nexport const LIVE_DRAFT_EVENTS_ENABLED =\n  typeof PRESENTATION_ENABLE_LIVE_DRAFT_EVENTS === 'string'\n    ? PRESENTATION_ENABLE_LIVE_DRAFT_EVENTS === 'true'\n    : // @ts-expect-error: env vars are not typed\n      process.env.SANITY_STUDIO_PRESENTATION_ENABLE_LIVE_DRAFT_EVENTS === 'true'\n","import {\n  combineLatest,\n  from,\n  isObservable,\n  map,\n  mergeAll,\n  Observable,\n  of,\n  scan,\n  switchMap,\n} from 'rxjs'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Props<K extends keyof any, T> = {\n  [P in K]: T | Observable<T>\n}\n\nfunction keysOf<T extends object>(value: T) {\n  return Object.keys(value) as (keyof T)[]\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setKey(source: Record<string, unknown>, key: any, value: unknown) {\n  return {\n    ...source,\n    [key]: value,\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function props<K extends keyof any, T>(options: {wait?: boolean} = {}) {\n  return (source: Observable<Props<K, T>>): Observable<Record<string, unknown>> => {\n    return new Observable<Props<K, T>>((observer) => source.subscribe(observer)).pipe(\n      switchMap((object) => {\n        const keyObservables = keysOf(object).map((key) => {\n          const value = object[key]\n          return isObservable(value) ? from(value).pipe(map((val) => [key, val])) : of([key, value])\n        })\n\n        return options.wait\n          ? combineLatest(keyObservables).pipe(\n              map((pairs) => pairs.reduce((acc, [key, value]) => setKey(acc, key, value), {})),\n            )\n          : from(keyObservables).pipe(\n              mergeAll(),\n              scan((acc, [key, value]) => setKey(acc, key, value), {}),\n            )\n      }),\n    )\n  }\n}\n","import get from 'lodash.get'\nimport {useEffect, useMemo, useState} from 'react'\nimport {isObservable, map, Observable, of, switchMap} from 'rxjs'\nimport {\n  isRecord,\n  isReference,\n  useDocumentStore,\n  type DocumentStore,\n  type Previewable,\n  type SanityDocument,\n} from './internals'\nimport type {\n  DocumentLocationResolver,\n  DocumentLocationResolverObject,\n  DocumentLocationResolvers,\n  DocumentLocationsState,\n  DocumentLocationsStatus,\n} from './types'\nimport {props} from './util/props'\n\nconst INITIAL_STATE: DocumentLocationsState = {locations: []}\n\nfunction getDocumentId(value: Previewable) {\n  if (isReference(value)) {\n    return value._ref\n  }\n  return '_id' in value ? value._id : undefined\n}\n\nfunction cleanPreviewable(id: string | undefined, previewable: Previewable) {\n  const clean: Record<string, unknown> = id ? {...previewable, _id: id} : {...previewable}\n\n  if (clean['_type'] === 'reference') {\n    delete clean['_type']\n    delete clean['_ref']\n    delete clean['_weak']\n    delete clean['_dataset']\n    delete clean['_projectId']\n    delete clean['_strengthenOnPublish']\n  }\n\n  return clean\n}\n\nfunction listen(id: string, fields: string[], store: DocumentStore) {\n  const projection = fields.join(', ')\n  const query = `*[_id==$id][0]{${projection}}`\n  const params = {id}\n  return store.listenQuery(query, params, {\n    perspective: 'previewDrafts',\n  }) as Observable<SanityDocument | null>\n}\n\nfunction observeDocument(\n  value: Previewable | null,\n  paths: string[][],\n  store: DocumentStore,\n): Observable<Record<string, unknown> | null> {\n  if (!value || typeof value !== 'object') {\n    return of(value)\n  }\n\n  const id = getDocumentId(value)\n  const currentValue = cleanPreviewable(id, value)\n\n  const headlessPaths = paths.filter((path) => !(path[0] in currentValue))\n\n  if (id && headlessPaths.length) {\n    const fields = [...new Set(headlessPaths.map((path: string[]) => path[0]))]\n    return listen(id, fields, store).pipe(\n      switchMap((snapshot) => {\n        if (snapshot) {\n          return observeDocument(snapshot, paths, store)\n        }\n        return of(null)\n      }),\n    )\n  }\n\n  const leads: Record<string, string[][]> = {}\n  paths.forEach((path) => {\n    const [head, ...tail] = path\n    if (!leads[head]) {\n      leads[head] = []\n    }\n    leads[head].push(tail)\n  })\n  const next = Object.keys(leads).reduce((res: Record<string, unknown>, head) => {\n    const tails = leads[head].filter((tail) => tail.length > 0)\n    if (tails.length === 0) {\n      res[head] = isRecord(value) ? (value as Record<string, unknown>)[head] : undefined\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      res[head] = observeDocument((value as any)[head], tails, store)\n    }\n    return res\n  }, currentValue)\n\n  return of(next).pipe(props({wait: true}))\n}\n\nfunction observeForLocations(\n  documentId: string,\n  resolver: DocumentLocationResolverObject<string>,\n  documentStore: DocumentStore,\n) {\n  const {select} = resolver\n  const paths = Object.values(select).map((value) => String(value).split('.')) || []\n  const doc = {_type: 'reference', _ref: documentId}\n  return observeDocument(doc, paths, documentStore).pipe(\n    map((doc) => {\n      return Object.keys(select).reduce<Record<string, unknown>>((acc, key) => {\n        acc[key] = get(doc, select[key])\n        return acc\n      }, {})\n    }),\n    map(resolver.resolve),\n  )\n}\n\nexport function useDocumentLocations(props: {\n  id: string\n  resolvers?: DocumentLocationResolver | DocumentLocationResolvers\n  type: string\n}): {\n  state: DocumentLocationsState\n  status: DocumentLocationsStatus\n} {\n  const {id, resolvers, type} = props\n  const documentStore = useDocumentStore()\n  const [locationsState, setLocationsState] = useState<DocumentLocationsState>(INITIAL_STATE)\n\n  const resolver = resolvers && (typeof resolvers === 'function' ? resolvers : resolvers[type])\n\n  const [locationsStatus, setLocationsStatus] = useState<DocumentLocationsStatus>(\n    resolver ? 'resolving' : 'empty',\n  )\n\n  const result = useMemo(() => {\n    if (!resolver) return undefined\n\n    // Original/advanced resolver which requires explicit use of Observables\n    if (typeof resolver === 'function') {\n      const params = {id, type}\n      const context = {documentStore}\n      const _result = resolver(params, context)\n      return isObservable(_result) ? _result : of(_result)\n    }\n\n    // Simplified resolver pattern which abstracts away Observable logic\n    if ('select' in resolver && 'resolve' in resolver) {\n      return observeForLocations(id, resolver, documentStore)\n    }\n\n    // Resolver is explicitly provided state\n    return of(resolver)\n  }, [documentStore, id, resolver, type])\n\n  useEffect(() => {\n    const sub = result?.subscribe((state) => {\n      setLocationsState(state || INITIAL_STATE)\n      setLocationsStatus(state ? 'resolved' : 'empty')\n    })\n\n    return () => sub?.unsubscribe()\n  }, [result])\n\n  return {\n    state: locationsState,\n    status: locationsStatus,\n  }\n}\n","import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the presentation tool\n *\n * @public\n */\nexport const presentationLocaleNamespace = 'presentation' as const\n\n/**\n * The default locale bundle for the presentation tool, which is US English.\n *\n * @internal\n */\nexport const presentationUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: presentationLocaleNamespace,\n  resources: () => import('./resources'),\n})\n","import {createContext} from 'react'\nimport type {\n  PresentationNavigate,\n  PresentationParams,\n  PresentationSearchParams,\n  StructureDocumentPaneParams,\n} from './types'\n\nexport interface PresentationContextValue {\n  devMode: boolean\n  name: string\n  navigate: PresentationNavigate\n  params: PresentationParams\n  structureParams: StructureDocumentPaneParams\n  searchParams: PresentationSearchParams\n}\n\nexport const PresentationContext = createContext<PresentationContextValue | null>(null)\n","import {useContext} from 'react'\nimport {PresentationContext, type PresentationContextValue} from './PresentationContext'\n\nexport function usePresentationTool(): PresentationContextValue {\n  const presentation = useContext(PresentationContext)\n\n  if (!presentation) {\n    throw new Error('Presentation context is missing')\n  }\n\n  return presentation\n}\n","import {usePresentationTool} from '../usePresentationTool'\n\nexport function useCurrentPresentationToolName(): string | undefined {\n  try {\n    return usePresentationTool().name\n  } catch {\n    return undefined\n  }\n}\n","import {\n  ChevronRightIcon,\n  DesktopIcon,\n  ErrorOutlineIcon,\n  InfoOutlineIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {Box, Card, Flex, Spinner, Stack, Text} from '@sanity/ui'\nimport {\n  createElement,\n  useCallback,\n  useContext,\n  useState,\n  type ComponentType,\n  type ReactNode,\n} from 'react'\nimport {useTranslation, type ObjectSchemaType} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\nimport {DEFAULT_TOOL_NAME, DEFAULT_TOOL_TITLE} from '../constants'\nimport {presentationLocaleNamespace} from '../i18n'\nimport {PresentationContext} from '../PresentationContext'\nimport type {DocumentLocation, DocumentLocationsState, PresentationPluginOptions} from '../types'\nimport {useCurrentPresentationToolName} from './useCurrentPresentationToolName'\n\nconst TONE_ICONS: Record<'positive' | 'caution' | 'critical', ComponentType> = {\n  positive: InfoOutlineIcon,\n  caution: WarningOutlineIcon,\n  critical: ErrorOutlineIcon,\n}\n\nexport function LocationsBanner(props: {\n  documentId: string\n  isResolving: boolean\n  options: PresentationPluginOptions\n  schemaType: ObjectSchemaType\n  showPresentationTitle: boolean\n  state: DocumentLocationsState\n}): ReactNode {\n  const {documentId, isResolving, options, schemaType, showPresentationTitle} = props\n  const {locations, message, tone} = props.state\n  const len = locations?.length || 0\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const presentation = useContext(PresentationContext)\n  const [expanded, setExpanded] = useState(false)\n  const toggle = useCallback(() => {\n    if (!len) return\n    setExpanded((v) => !v)\n  }, [len])\n\n  const title = isResolving\n    ? t('locations-banner.resolving.text')\n    : message || t('locations-banner.locations-count', {count: len})\n\n  return (\n    <Card padding={1} radius={2} border tone={tone}>\n      <div style={{margin: -1}}>\n        {!locations && (\n          <Flex align=\"flex-start\" gap={3} padding={3}>\n            {tone && (\n              <Box flex=\"none\">\n                <Text size={1}>{createElement(TONE_ICONS[tone])}</Text>\n              </Box>\n            )}\n            <Box flex={1}>\n              <Text size={1} weight=\"medium\">\n                {showPresentationTitle && <>{options.title || DEFAULT_TOOL_TITLE} &middot; </>}\n                {title}\n              </Text>\n            </Box>\n          </Flex>\n        )}\n        {locations && (\n          <>\n            <Card\n              as={len ? 'button' : undefined}\n              onClick={toggle}\n              padding={3}\n              radius={1}\n              tone=\"inherit\"\n            >\n              <Flex gap={3}>\n                <Box flex=\"none\">\n                  {isResolving ? (\n                    <Spinner size={1} />\n                  ) : (\n                    <Text size={1}>\n                      {len === 0 ? (\n                        <InfoOutlineIcon />\n                      ) : (\n                        <ChevronRightIcon\n                          style={{\n                            transform: `rotate(${expanded ? '90deg' : 0})`,\n                            transition: 'transform 100ms ease-in-out',\n                          }}\n                        />\n                      )}\n                    </Text>\n                  )}\n                </Box>\n                <Box flex={1}>\n                  <Text size={1} weight=\"medium\">\n                    {showPresentationTitle && <>{options.title || DEFAULT_TOOL_TITLE} &middot; </>}\n                    {title}\n                  </Text>\n                </Box>\n              </Flex>\n            </Card>\n            <Stack hidden={!expanded} marginTop={1} space={1}>\n              {locations.map((l, index) => (\n                <LocationItem\n                  active={\n                    (options.name || DEFAULT_TOOL_NAME) === presentation?.name &&\n                    l.href === presentation?.params.preview\n                  }\n                  documentId={documentId}\n                  documentType={schemaType.name}\n                  key={index}\n                  node={l}\n                  toolName={options.name || DEFAULT_TOOL_NAME}\n                />\n              ))}\n            </Stack>\n          </>\n        )}\n      </div>\n    </Card>\n  )\n}\n\nfunction LocationItem(props: {\n  active: boolean\n  documentId: string\n  documentType: string\n  node: DocumentLocation\n  toolName: string\n}) {\n  const {documentId, documentType, node, active, toolName} = props\n  const presentation = useContext(PresentationContext)\n  const currentPresentationToolName = useCurrentPresentationToolName()\n  const isCurrentTool = toolName === currentPresentationToolName\n  const navigate = presentation?.navigate\n\n  const presentationLinkProps = useIntentLink({\n    intent: 'edit',\n    params: {\n      id: documentId,\n      type: documentType,\n      mode: 'presentation',\n      presentation: toolName,\n      ...presentation?.structureParams,\n      preview: node.href,\n    },\n  })\n\n  const handleCurrentToolClick = useCallback(() => {\n    navigate?.({}, {preview: node.href})\n  }, [node.href, navigate])\n\n  return (\n    <Card\n      {...(isCurrentTool ? {} : presentationLinkProps)}\n      as=\"a\"\n      key={node.href}\n      onClick={isCurrentTool ? handleCurrentToolClick : presentationLinkProps.onClick}\n      padding={3}\n      radius={1}\n      pressed={active}\n      tone=\"inherit\"\n    >\n      <Flex gap={3}>\n        <Box flex=\"none\">\n          <Text size={1}>\n            <DesktopIcon />\n          </Text>\n        </Box>\n        <Stack flex={1} space={2}>\n          <Text size={1} weight=\"medium\">\n            {node.title}\n          </Text>\n          <Text muted size={1} textOverflow=\"ellipsis\">\n            {node.href}\n          </Text>\n        </Stack>\n      </Flex>\n    </Card>\n  )\n}\n","import {createContext} from 'react'\nimport type {PresentationDocumentContextValue} from './types'\n\nexport const PresentationDocumentContext = createContext<PresentationDocumentContextValue | null>(\n  null,\n)\n","import {rem, Stack} from '@sanity/ui'\nimport {useContext, type ReactNode} from 'react'\nimport {type ObjectSchemaType} from 'sanity'\nimport {styled} from 'styled-components'\nimport {type PublishedId} from '../internals'\nimport type {PresentationPluginOptions} from '../types'\nimport {useDocumentLocations} from '../useDocumentLocations'\nimport {LocationsBanner} from './LocationsBanner'\nimport {PresentationDocumentContext} from './PresentationDocumentContext'\n\nconst LocationStack = styled(Stack)`\n  min-height: ${rem(42)};\n\n  & + &:empty {\n    display: none;\n  }\n`\n\nexport function PresentationDocumentHeader(props: {\n  documentId: PublishedId\n  options: PresentationPluginOptions\n  schemaType: ObjectSchemaType\n}): ReactNode {\n  const {documentId, options, schemaType} = props\n\n  const context = useContext(PresentationDocumentContext)\n  const {state, status} = useDocumentLocations({\n    id: documentId,\n    resolvers: options.resolve?.locations || options.locate,\n    type: schemaType.name,\n  })\n\n  if ((context && context.options[0] !== options) || status === 'empty') {\n    return null\n  }\n\n  const contextOptions = context?.options || []\n\n  return (\n    <LocationStack marginBottom={5} space={5}>\n      <Stack space={2}>\n        {contextOptions.map((options, idx) => (\n          <LocationsBanner\n            documentId={documentId}\n            isResolving={status === 'resolving'}\n            key={idx}\n            options={options}\n            schemaType={schemaType}\n            showPresentationTitle={contextOptions.length > 1}\n            state={state}\n          />\n        ))}\n      </Stack>\n    </LocationStack>\n  )\n}\n","import {\n  useCallback,\n  useContext,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n  type ReactNode,\n} from 'react'\nimport type {PresentationPluginOptions} from '../types'\nimport {PresentationDocumentContext} from './PresentationDocumentContext'\nimport type {PresentationDocumentContextValue} from './types'\n\n/** @internal */\nexport function PresentationDocumentProvider(props: {\n  children?: ReactNode\n  options: PresentationPluginOptions\n}): ReactElement {\n  const {children, options} = props\n  const parent = useContext(PresentationDocumentContext)\n  const parentRegister = parent?.register\n\n  const [optionsArray, setOptionsArray] = useState<PresentationPluginOptions[]>(() => [])\n\n  const register = useCallback(\n    (options: PresentationPluginOptions) => {\n      if (parentRegister) {\n        return parentRegister(options)\n      }\n\n      setOptionsArray((prev) => [options].concat(prev))\n\n      return () => {\n        setOptionsArray((prev) => prev.filter((o) => o !== options))\n      }\n    },\n    [parentRegister],\n  )\n\n  const registerRef = useRef(register)\n  registerRef.current = register\n\n  const context: PresentationDocumentContextValue = useMemo(\n    () => ({\n      options: parent?.options || optionsArray,\n      register,\n    }),\n    [optionsArray, parent, register],\n  )\n\n  useLayoutEffect(() => registerRef.current(options), [options])\n\n  return (\n    <PresentationDocumentContext.Provider value={context}>\n      {children}\n    </PresentationDocumentContext.Provider>\n  )\n}\n","import {MasterDetailIcon} from '@sanity/icons'\nimport {useContext, useMemo} from 'react'\nimport {type Tool} from 'sanity'\nimport {useRouter} from 'sanity/router'\nimport {\n  defineDocumentFieldAction,\n  isRecord,\n  pathToString,\n  useWorkspace,\n  type DocumentFieldActionItem,\n} from '../internals'\nimport {PresentationContext} from '../PresentationContext'\n\nexport const openInStructure = defineDocumentFieldAction({\n  name: 'presentation/openInStructure',\n  useAction({documentId, documentType, path}) {\n    const workspace = useWorkspace()\n    const {navigateIntent} = useRouter()\n    const presentation = useContext(PresentationContext)\n\n    const defaultStructureTool = useMemo(\n      () => findStructureTool(workspace.tools, documentId, documentType),\n      [documentId, documentType, workspace.tools],\n    )\n\n    return {\n      type: 'action',\n      hidden: !presentation || path.length > 0 || !defaultStructureTool,\n      icon: defaultStructureTool?.icon || MasterDetailIcon,\n      title: `Open in ${defaultStructureTool?.title || 'Structure'}`,\n      onAction() {\n        navigateIntent('edit', {\n          id: documentId,\n          type: documentType,\n          mode: 'structure',\n          path: pathToString(path),\n        })\n      },\n      renderAsButton: true,\n    } satisfies DocumentFieldActionItem\n  },\n})\n\nfunction findStructureTool(\n  tools: Tool[],\n  documentId: string,\n  documentType: string,\n): Tool | undefined {\n  const results = tools.map((t) => {\n    const match = t.canHandleIntent?.(\n      'edit',\n      {\n        id: documentId,\n        type: documentType,\n        mode: 'structure',\n      },\n      {},\n    )\n\n    return {tool: t, match}\n  })\n\n  const modeMatches = results.filter((t) => isRecord(t.match) && t.match['mode'])\n\n  if (modeMatches.length > 0) {\n    return modeMatches[0].tool\n  }\n\n  const matches = results.filter((t) => t.match)\n\n  return matches[0]?.tool\n}\n","import {uuid} from '@sanity/uuid'\nimport {type RouterState, type SearchParam} from 'sanity/router'\nimport {encodeJsonParams, getPublishedId} from './internals'\nimport type {PresentationSearchParams, PresentationStateParams} from './types'\n\nconst preservedSearchParamKeys: Array<keyof PresentationSearchParams> = [\n  'preview',\n  'perspective',\n  'viewport',\n]\n\n/**\n * @internal\n */\nexport function getIntentState(\n  intent: string,\n  params: Record<string, string>,\n  routerState: RouterState | undefined,\n  payload: unknown,\n):\n  | (PresentationStateParams & {_searchParams: SearchParam[]})\n  | {intent: string; params: Record<string, string>; payload: unknown} {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {id, mode, path, presentation, type, ...searchParams} = params\n\n  const preservedSearchParams = (routerState?._searchParams || [])\n    // @todo Casting https://github.com/microsoft/TypeScript/issues/14520\n    .filter(([key]) => preservedSearchParamKeys.includes(key as keyof PresentationSearchParams))\n    .reduce((acc, [key, value]) => ({...acc, [key]: value}), {} as Record<string, string>)\n\n  const _searchParams = {\n    ...preservedSearchParams,\n    ...searchParams,\n  }\n\n  if (intent === 'edit' && id) {\n    _searchParams['preview'] =\n      _searchParams['preview'] || new URLSearchParams(window.location.search).get('preview') || '/'\n    return {\n      type: type || '*',\n      id: getPublishedId(id),\n      path,\n      _searchParams: Object.entries(_searchParams),\n    }\n  }\n\n  if (intent === 'create') {\n    _searchParams['preview'] =\n      _searchParams['preview'] || new URLSearchParams(window.location.search).get('preview') || '/'\n\n    if (payload && typeof payload === 'object') {\n      _searchParams['templateParams'] = encodeJsonParams(payload as Record<string, unknown>)\n    }\n\n    return {\n      type: type || '*',\n      id: id || uuid(),\n      _searchParams: Object.entries(_searchParams),\n    }\n  }\n  return {intent, params, payload}\n}\n","import {Flex, Spinner} from '@sanity/ui'\n\nexport function PresentationSpinner(): React.JSX.Element {\n  return (\n    <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\" style={{width: '100%'}}>\n      <Spinner />\n    </Flex>\n  )\n}\n","import {route} from 'sanity/router'\n\nexport const router = route.create('/', {__unsafe_disableScopedSearchParams: true}, [\n  route.intents('/intent'),\n  route.create(':type', [route.create(':id', [route.create(':path')])]),\n])\n","import type {SanityDocument} from '@sanity/client'\nimport {lazy, Suspense} from 'react'\nimport {definePlugin, isDocumentSchemaType, type InputProps} from 'sanity'\nimport {DEFAULT_TOOL_ICON, DEFAULT_TOOL_NAME, EDIT_INTENT_MODE} from './constants'\nimport {PresentationDocumentHeader} from './document/PresentationDocumentHeader'\nimport {PresentationDocumentProvider} from './document/PresentationDocumentProvider'\nimport {openInStructure} from './fieldActions/openInStructure'\nimport {getIntentState} from './getIntentState'\nimport {presentationUsEnglishLocaleBundle} from './i18n'\nimport {getPublishedId} from './internals'\nimport {PresentationSpinner} from './PresentationSpinner'\nimport {router} from './router'\nimport type {\n  DocumentLocationResolverObject,\n  DocumentLocationsState,\n  DocumentResolver,\n  PresentationPluginOptions,\n} from './types'\n\nconst PresentationTool = lazy(() => import('./PresentationToolGrantsCheck'))\nconst BroadcastDisplayedDocument = lazy(() => import('./loader/BroadcastDisplayedDocument'))\n\n/**\n * Define locations for a given document type.\n * This function doesn't do anything itself, it is used to provide type information.\n * @param resolver - resolver that return locations for a document.\n * @public\n */\nexport function defineLocations<K extends string>(\n  resolver: DocumentLocationResolverObject<K> | DocumentLocationsState,\n): typeof resolver {\n  return resolver\n}\n\n/**\n * Define documents for a given location.\n * This function doesn't do anything itself, it is used to provide type information.\n * @param resolvers - resolvers that return documents.\n * @public\n */\nexport function defineDocuments(resolvers: DocumentResolver[]): typeof resolvers {\n  return resolvers\n}\n\nexport const presentationTool = definePlugin<PresentationPluginOptions>((options) => {\n  const toolName = options.name || DEFAULT_TOOL_NAME\n\n  if ('locate' in options) {\n    // eslint-disable-next-line no-console\n    console.warn('Presentation’s `locate` option is deprecated. Use `resolve.locations` instead.')\n  }\n\n  const hasLocationsResolver = !!(options.resolve?.locations || options.locate)\n\n  function PresentationDocumentInput(props: InputProps) {\n    const value = props.value as SanityDocument\n    const documentId = value?._id ? getPublishedId(value?._id) : undefined\n\n    if (isDocumentSchemaType(props.schemaType)) {\n      return (\n        <PresentationDocumentProvider options={options}>\n          {hasLocationsResolver && documentId && (\n            <PresentationDocumentHeader\n              documentId={documentId}\n              options={options}\n              schemaType={props.schemaType}\n            />\n          )}\n          <Suspense fallback={<PresentationSpinner />}>{props.renderDefault(props)}</Suspense>\n          <Suspense key=\"broadcast-displayed-document\">\n            <BroadcastDisplayedDocument key={documentId} value={value} />\n          </Suspense>\n        </PresentationDocumentProvider>\n      )\n    }\n\n    return props.renderDefault(props)\n  }\n\n  function canHandleCreateIntent(params: Record<string, unknown>) {\n    // We can't handle create intents without a `type` parameter\n    if (!('type' in params)) {\n      return false\n    }\n\n    if ('presentation' in params && params['presentation'] !== toolName) {\n      return false\n    }\n\n    return 'template' in params ? {template: true} : true\n  }\n\n  function canHandleEditIntent(params: Record<string, unknown>) {\n    // We can't handle edit intents without `type` or `id` parameters\n    if (!('type' in params) || !('id' in params)) {\n      return false\n    }\n\n    if ('presentation' in params && params['presentation'] !== toolName) {\n      return false\n    }\n\n    return 'mode' in params ? {mode: params['mode'] === EDIT_INTENT_MODE} : true\n  }\n\n  return {\n    i18n: {\n      bundles: [presentationUsEnglishLocaleBundle],\n    },\n    document: {\n      unstable_fieldActions: (prev) => {\n        return [\n          ...prev.filter((a) => a.name !== openInStructure.name), // prevent duplication\n          openInStructure,\n        ]\n      },\n    },\n\n    form: {\n      components: {\n        input: PresentationDocumentInput,\n      },\n    },\n\n    tools: [\n      {\n        icon: options.icon || DEFAULT_TOOL_ICON,\n        name: toolName,\n        title: options.title,\n        component: PresentationTool,\n        options,\n        canHandleIntent(intent, params) {\n          if (intent === 'create') return canHandleCreateIntent(params)\n          if (intent === 'edit') return canHandleEditIntent(params)\n          return false\n        },\n        getIntentState,\n        router,\n      },\n    ],\n  }\n})\n","import {createContext} from 'react'\n\nexport type PresentationNavigateContextValue = (\n  preview: string | undefined,\n  document?: {type: string; id: string},\n) => void\n\nexport const PresentationNavigateContext = createContext<PresentationNavigateContextValue | null>(\n  null,\n)\n","import {useContext} from 'react'\nimport {\n  PresentationNavigateContext,\n  type PresentationNavigateContextValue,\n} from './PresentationNavigateContext'\n\nexport function usePresentationNavigate(): PresentationNavigateContextValue {\n  const navigate = useContext(PresentationNavigateContext)\n\n  if (!navigate) {\n    throw new Error('Presentation navigate context is missing')\n  }\n\n  return navigate\n}\n\nexport type {PresentationNavigateContextValue}\n","import {createContext} from 'react'\nimport type {PresentationParams} from './types'\n\nexport const PresentationParamsContext = createContext<PresentationParams | null>(null)\n","import {useContext} from 'react'\nimport {PresentationParamsContext} from './PresentationParamsContext'\nimport type {PresentationParams} from './types'\n\n/** @public */\nexport function usePresentationParams(throwOnMissingContext?: true): PresentationParams\n/** @public */\nexport function usePresentationParams(throwOnMissingContext: false): PresentationParams | null\n/** @public */\nexport function usePresentationParams(throwOnMissingContext = true): PresentationParams | null {\n  const params = useContext(PresentationParamsContext)\n\n  if (throwOnMissingContext && !params) {\n    throw new Error('Presentation params context is missing')\n  }\n\n  return params\n}\n"],"names":["doc","props","createElement","options"],"mappings":"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"}