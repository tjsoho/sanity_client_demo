import { jsx } from "react/jsx-runtime";
import { memo, useMemo, useState, useEffect, startTransition } from "react";
import { getPublishedId, useEditState } from "sanity";
function PostMessageRefreshMutations(props) {
  const { comlink, type, previewKitConnection, loadersConnection } = props, id = useMemo(() => getPublishedId(props.id), [props.id]), { draft, published, ready } = useEditState(id, type, "low");
  return ready && draft || published ? /* @__PURE__ */ jsx(
    PostMessageRefreshMutationsInner,
    {
      comlink,
      draft,
      livePreviewEnabled: previewKitConnection === "connected" || loadersConnection === "connected",
      published
    },
    id
  ) : null;
}
function PostMessageRefreshMutationsInner(props) {
  const { comlink, draft, published, livePreviewEnabled } = props, [prevDraft, setPrevDraft] = useState(draft), [prevPublished, setPrevPublished] = useState(published);
  return useEffect(() => {
    prevDraft?._rev !== draft?._rev && (startTransition(() => setPrevDraft(draft)), draft && comlink?.post({
      type: "presentation/refresh",
      data: {
        source: "mutation",
        livePreviewEnabled,
        document: parseDocument(draft)
      }
    })), prevPublished?._rev !== published?._rev && (startTransition(() => setPrevPublished(published)), published && comlink?.post({
      type: "presentation/refresh",
      data: {
        source: "mutation",
        livePreviewEnabled,
        document: parseDocument(published)
      }
    }));
  }, [comlink, draft, livePreviewEnabled, prevDraft?._rev, prevPublished?._rev, published]), null;
}
function parseDocument(document) {
  const { _id, _type, _rev, slug } = document;
  return { _id, _type, _rev, slug };
}
var PostMessageRefreshMutations$1 = memo(PostMessageRefreshMutations);
export {
  PostMessageRefreshMutations$1 as default
};
//# sourceMappingURL=PostMessageRefreshMutations.js.map
